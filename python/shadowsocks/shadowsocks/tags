!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDRLENGTH	common.py	/^    ADDRLENGTH = {socket.AF_INET: 32, socket.AF_INET6: 128, False: 0}$/;"	v	class:IPNetwork
ADDRTYPE_HOST	common.py	/^ADDRTYPE_HOST = 3$/;"	v
ADDRTYPE_IPV4	common.py	/^ADDRTYPE_IPV4 = 1$/;"	v
ADDRTYPE_IPV6	common.py	/^ADDRTYPE_IPV6 = 4$/;"	v
AddressMap	udprelay.py	/^class AddressMap(object):$/;"	c
BLOCK_SIZE	crypto/ctypes_libsodium.py	/^BLOCK_SIZE = 64$/;"	v
BLOCK_SIZE	crypto/sodium.py	/^BLOCK_SIZE = 64$/;"	v
BUF_SIZE	manager.py	/^BUF_SIZE = 1506$/;"	v
BUF_SIZE	tcprelay.py	/^BUF_SIZE = 32 * 1024$/;"	v
BUF_SIZE	udprelay.py	/^BUF_SIZE = 65536$/;"	v
CACHE_SWEEP_INTERVAL	asyncdns.py	/^CACHE_SWEEP_INTERVAL = 30$/;"	v
CDLL	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
CDLL	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
CDLL	crypto/util.py	/^    from ctypes import CDLL$/;"	i
CIPHERS_TO_TEST	encrypt.py	/^CIPHERS_TO_TEST = [$/;"	v
CMD_BIND	tcprelay.py	/^CMD_BIND = 2$/;"	v
CMD_CONNECT	tcprelay.py	/^CMD_CONNECT = 1$/;"	v
CMD_CONNECT	udprelay.py	/^CMD_CONNECT = 0$/;"	v
CMD_CONNECT_REMOTE	udprelay.py	/^CMD_CONNECT_REMOTE = 2$/;"	v
CMD_DISCONNECT	udprelay.py	/^CMD_DISCONNECT = 8$/;"	v
CMD_POST	udprelay.py	/^CMD_POST = 4$/;"	v
CMD_POST_64	udprelay.py	/^CMD_POST_64 = 6$/;"	v
CMD_RSP_CONNECT	udprelay.py	/^CMD_RSP_CONNECT = 1$/;"	v
CMD_RSP_CONNECT_REMOTE	udprelay.py	/^CMD_RSP_CONNECT_REMOTE = 3$/;"	v
CMD_SYN_STATUS	udprelay.py	/^CMD_SYN_STATUS = 5$/;"	v
CMD_SYN_STATUS_64	udprelay.py	/^CMD_SYN_STATUS_64 = 7$/;"	v
CMD_UDP_ASSOCIATE	tcprelay.py	/^CMD_UDP_ASSOCIATE = 3$/;"	v
CMD_VER_STR	udprelay.py	/^CMD_VER_STR = b"\\x08"$/;"	v
CtypesCrypto	crypto/ctypes_openssl.py	/^class CtypesCrypto(object):$/;"	c
DNSResolver	asyncdns.py	/^class DNSResolver(object):$/;"	c
DNSResponse	asyncdns.py	/^class DNSResponse(object):$/;"	c
DOUBLE_SEND_BEG_IDS	udprelay.py	/^DOUBLE_SEND_BEG_IDS = 16$/;"	v
EVENT_NAMES	eventloop.py	/^EVENT_NAMES = {$/;"	v
EVP_BytesToKey	encrypt.py	/^def EVP_BytesToKey(password, key_len, iv_len):$/;"	f
Encryptor	encrypt.py	/^class Encryptor(object):$/;"	c
EventLoop	eventloop.py	/^class EventLoop(object):$/;"	c
IPNetwork	common.py	/^class IPNetwork(object):$/;"	c
IPNetwork	shell.py	/^from shadowsocks.common import to_bytes, to_str, IPNetwork, PortRange$/;"	i
IPV6_CONNECTION_SUPPORT	asyncdns.py	/^IPV6_CONNECTION_SUPPORT = detect_ipv6_supprot()$/;"	v
KqueueLoop	eventloop.py	/^class KqueueLoop(object):$/;"	c
LRUCache	lru_cache.py	/^class LRUCache(collections.MutableMapping):$/;"	c
MAX_EVENTS	eventloop.py	/^    MAX_EVENTS = 1024$/;"	v	class:KqueueLoop
MSG_FASTOPEN	tcprelay.py	/^MSG_FASTOPEN = 0x20000000$/;"	v
Manager	manager.py	/^class Manager(object):$/;"	c
NoneCipher	crypto/table.py	/^class NoneCipher(object):$/;"	c
OpenSSLCrypto	crypto/openssl.py	/^class OpenSSLCrypto(object):$/;"	c
OrderedDict	lru_cache.py	/^    from collections import OrderedDict$/;"	i
OrderedDict	lru_cache.py	/^    from shadowsocks.ordereddict import OrderedDict$/;"	i
OrderedDict	ordereddict.py	/^class OrderedDict(dict):$/;"	c
POLL_ERR	eventloop.py	/^POLL_ERR = 0x08$/;"	v
POLL_HUP	eventloop.py	/^POLL_HUP = 0x10$/;"	v
POLL_IN	eventloop.py	/^POLL_IN = 0x01$/;"	v
POLL_NULL	eventloop.py	/^POLL_NULL = 0x00$/;"	v
POLL_NVAL	eventloop.py	/^POLL_NVAL = 0x20$/;"	v
POLL_OUT	eventloop.py	/^POLL_OUT = 0x04$/;"	v
POST_MTU_MAX	udprelay.py	/^POST_MTU_MAX = 1400$/;"	v
POST_MTU_MIN	udprelay.py	/^POST_MTU_MIN = 500$/;"	v
PacketInfo	udprelay.py	/^class PacketInfo(object):$/;"	c
PortRange	common.py	/^class PortRange(object):$/;"	c
PortRange	shell.py	/^from shadowsocks.common import to_bytes, to_str, IPNetwork, PortRange$/;"	i
QCLASS_IN	asyncdns.py	/^QCLASS_IN = 1$/;"	v
QTYPE_A	asyncdns.py	/^QTYPE_A = 1$/;"	v
QTYPE_AAAA	asyncdns.py	/^QTYPE_AAAA = 28$/;"	v
QTYPE_ANY	asyncdns.py	/^QTYPE_ANY = 255$/;"	v
QTYPE_CNAME	asyncdns.py	/^QTYPE_CNAME = 5$/;"	v
QTYPE_NS	asyncdns.py	/^QTYPE_NS = 2$/;"	v
RSP_STATE_CONNECTED	udprelay.py	/^RSP_STATE_CONNECTED = b"\\x01"$/;"	v
RSP_STATE_CONNECTEDREMOTE	udprelay.py	/^RSP_STATE_CONNECTEDREMOTE = b"\\x02"$/;"	v
RSP_STATE_DISCONNECT	udprelay.py	/^RSP_STATE_DISCONNECT = b"\\x04"$/;"	v
RSP_STATE_EMPTY	udprelay.py	/^RSP_STATE_EMPTY = b""$/;"	v
RSP_STATE_ERROR	udprelay.py	/^RSP_STATE_ERROR = b"\\x03"$/;"	v
RSP_STATE_REDIRECT	udprelay.py	/^RSP_STATE_REDIRECT = b"\\x05"$/;"	v
RSP_STATE_REJECT	udprelay.py	/^RSP_STATE_REJECT = b"\\x00"$/;"	v
RecvQueue	udprelay.py	/^class RecvQueue(object):$/;"	c
SENDING_WINDOW_SIZE	udprelay.py	/^SENDING_WINDOW_SIZE = 8192$/;"	v
STAGE_ADDR	tcprelay.py	/^STAGE_ADDR = 1$/;"	v
STAGE_CONNECTING	tcprelay.py	/^STAGE_CONNECTING = 4$/;"	v
STAGE_CONNECTING	udprelay.py	/^STAGE_CONNECTING = 3$/;"	v
STAGE_DESTROYED	tcprelay.py	/^STAGE_DESTROYED = -1$/;"	v
STAGE_DESTROYED	udprelay.py	/^STAGE_DESTROYED = -1$/;"	v
STAGE_DNS	tcprelay.py	/^STAGE_DNS = 3$/;"	v
STAGE_DNS	udprelay.py	/^STAGE_DNS = 2$/;"	v
STAGE_INIT	tcprelay.py	/^STAGE_INIT = 0$/;"	v
STAGE_INIT	udprelay.py	/^STAGE_INIT = 0$/;"	v
STAGE_RSP_ID	udprelay.py	/^STAGE_RSP_ID = 1$/;"	v
STAGE_STREAM	tcprelay.py	/^STAGE_STREAM = 5$/;"	v
STAGE_STREAM	udprelay.py	/^STAGE_STREAM = 4$/;"	v
STAGE_UDP_ASSOC	tcprelay.py	/^STAGE_UDP_ASSOC = 2$/;"	v
STATUS_IPV4	asyncdns.py	/^STATUS_IPV4 = 0$/;"	v
STATUS_IPV6	asyncdns.py	/^STATUS_IPV6 = 1$/;"	v
STAT_SEND_LIMIT	manager.py	/^STAT_SEND_LIMIT = 50$/;"	v
STREAM_DOWN	tcprelay.py	/^STREAM_DOWN = 1$/;"	v
STREAM_DOWN	udprelay.py	/^STREAM_DOWN = 1$/;"	v
STREAM_UP	tcprelay.py	/^STREAM_UP = 0$/;"	v
STREAM_UP	udprelay.py	/^STREAM_UP = 0$/;"	v
SWEEP_MAX_ITEMS	lru_cache.py	/^SWEEP_MAX_ITEMS = 1024$/;"	v
Salsa20Crypto	crypto/ctypes_libsodium.py	/^class Salsa20Crypto(object):$/;"	c
SelectLoop	eventloop.py	/^class SelectLoop(object):$/;"	c
SendingQueue	udprelay.py	/^class SendingQueue(object):$/;"	c
SodiumCrypto	crypto/sodium.py	/^class SodiumCrypto(object):$/;"	c
TCPRelay	tcprelay.py	/^class TCPRelay(object):$/;"	c
TCPRelayHandler	tcprelay.py	/^class TCPRelayHandler(object):$/;"	c
TCPRelayHandler	udprelay.py	/^class TCPRelayHandler(object):$/;"	c
TIMEOUTS_CLEAN_SIZE	tcprelay.py	/^TIMEOUTS_CLEAN_SIZE = 512$/;"	v
TIMEOUTS_CLEAN_SIZE	udprelay.py	/^TIMEOUTS_CLEAN_SIZE = 512$/;"	v
TIMEOUT_PRECISION	eventloop.py	/^TIMEOUT_PRECISION = 5$/;"	v
TableCipher	crypto/table.py	/^class TableCipher(object):$/;"	c
UDPLocalAddress	udprelay.py	/^class UDPLocalAddress(object):$/;"	c
UDPRelay	udprelay.py	/^class UDPRelay(object):$/;"	c
UDP_MAX_BUF_SIZE	tcprelay.py	/^UDP_MAX_BUF_SIZE = 65536$/;"	v
VALID_HOSTNAME	asyncdns.py	/^VALID_HOSTNAME = re.compile(br"(?!-)[A-Z\\d_-]{1,63}(?<!-)$", re.IGNORECASE)$/;"	v
VERBOSE_LEVEL	shell.py	/^VERBOSE_LEVEL = 5$/;"	v
WAIT_STATUS_INIT	tcprelay.py	/^WAIT_STATUS_INIT = 0$/;"	v
WAIT_STATUS_INIT	udprelay.py	/^WAIT_STATUS_INIT = 0$/;"	v
WAIT_STATUS_READING	tcprelay.py	/^WAIT_STATUS_READING = 1$/;"	v
WAIT_STATUS_READING	udprelay.py	/^WAIT_STATUS_READING = 1$/;"	v
WAIT_STATUS_READWRITING	tcprelay.py	/^WAIT_STATUS_READWRITING = WAIT_STATUS_READING | WAIT_STATUS_WRITING$/;"	v
WAIT_STATUS_READWRITING	udprelay.py	/^WAIT_STATUS_READWRITING = WAIT_STATUS_READING | WAIT_STATUS_WRITING$/;"	v
WAIT_STATUS_WRITING	tcprelay.py	/^WAIT_STATUS_WRITING = 2$/;"	v
WAIT_STATUS_WRITING	udprelay.py	/^WAIT_STATUS_WRITING = 2$/;"	v
__all__	crypto/ctypes_libsodium.py	/^__all__ = ['ciphers']$/;"	v
__all__	crypto/ctypes_openssl.py	/^__all__ = ['ciphers']$/;"	v
__all__	crypto/openssl.py	/^__all__ = ['ciphers']$/;"	v
__all__	crypto/rc4_md5.py	/^__all__ = ['ciphers']$/;"	v
__all__	crypto/sodium.py	/^__all__ = ['ciphers']$/;"	v
__all__	crypto/table.py	/^__all__ = ['ciphers']$/;"	v
__all__	eventloop.py	/^__all__ = ['EventLoop', 'POLL_NULL', 'POLL_IN', 'POLL_OUT', 'POLL_ERR',$/;"	v
__cmp__	common.py	/^    def __cmp__(self, other):$/;"	m	class:IPNetwork	file:
__cmp__	common.py	/^    def __cmp__(self, other):$/;"	m	class:PortRange	file:
__contains__	common.py	/^    def __contains__(self, addr):$/;"	m	class:IPNetwork	file:
__contains__	common.py	/^    def __contains__(self, val):$/;"	m	class:PortRange	file:
__del__	crypto/ctypes_openssl.py	/^    def __del__(self):$/;"	m	class:CtypesCrypto	file:
__del__	crypto/openssl.py	/^    def __del__(self):$/;"	m	class:OpenSSLCrypto	file:
__del__	eventloop.py	/^    def __del__(self):$/;"	m	class:EventLoop	file:
__delitem__	lru_cache.py	/^    def __delitem__(self, key):$/;"	m	class:LRUCache	file:
__delitem__	ordereddict.py	/^    def __delitem__(self, key, dict_delitem=dict.__delitem__):$/;"	m	class:OrderedDict	file:
__eq__	ordereddict.py	/^    def __eq__(self, other):$/;"	m	class:OrderedDict	file:
__getitem__	lru_cache.py	/^    def __getitem__(self, key):$/;"	m	class:LRUCache	file:
__hash__	tcprelay.py	/^    def __hash__(self):$/;"	m	class:TCPRelayHandler	file:
__hash__	udprelay.py	/^    def __hash__(self):$/;"	m	class:TCPRelayHandler	file:
__init__	asyncdns.py	/^    def __init__(self):$/;"	m	class:DNSResolver
__init__	asyncdns.py	/^    def __init__(self):$/;"	m	class:DNSResponse
__init__	common.py	/^    def __init__(self, addrs):$/;"	m	class:IPNetwork
__init__	common.py	/^    def __init__(self, range_str):$/;"	m	class:PortRange
__init__	crypto/ctypes_libsodium.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:Salsa20Crypto
__init__	crypto/ctypes_openssl.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:CtypesCrypto
__init__	crypto/openssl.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:OpenSSLCrypto
__init__	crypto/sodium.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:SodiumCrypto
__init__	crypto/table.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:NoneCipher
__init__	crypto/table.py	/^    def __init__(self, cipher_name, key, iv, op):$/;"	m	class:TableCipher
__init__	encrypt.py	/^    def __init__(self, key, method):$/;"	m	class:Encryptor
__init__	eventloop.py	/^    def __init__(self):$/;"	m	class:EventLoop
__init__	eventloop.py	/^    def __init__(self):$/;"	m	class:KqueueLoop
__init__	eventloop.py	/^    def __init__(self):$/;"	m	class:SelectLoop
__init__	lru_cache.py	/^    def __init__(self, timeout=60, close_callback=None, *args, **kwargs):$/;"	m	class:LRUCache
__init__	manager.py	/^    def __init__(self, config):$/;"	m	class:Manager
__init__	obfs.py	/^    def __init__(self, data):$/;"	m	class:server_info
__init__	obfs.py	/^    def __init__(self, method):$/;"	m	class:obfs
__init__	obfsplugin/auth.py	/^    def __init__(self):$/;"	m	class:obfs_auth_data
__init__	obfsplugin/auth.py	/^    def __init__(self):$/;"	m	class:obfs_auth_v2_data
__init__	obfsplugin/auth.py	/^    def __init__(self):$/;"	m	class:obfs_verify_data
__init__	obfsplugin/auth.py	/^    def __init__(self, begin_id):$/;"	m	class:client_queue
__init__	obfsplugin/auth.py	/^    def __init__(self, method):$/;"	m	class:auth_sha1
__init__	obfsplugin/auth.py	/^    def __init__(self, method):$/;"	m	class:auth_sha1_v2
__init__	obfsplugin/auth.py	/^    def __init__(self, method):$/;"	m	class:auth_sha1_v3
__init__	obfsplugin/auth.py	/^    def __init__(self, method):$/;"	m	class:verify_base
__init__	obfsplugin/http_simple.py	/^    def __init__(self, method):$/;"	m	class:http_post
__init__	obfsplugin/http_simple.py	/^    def __init__(self, method):$/;"	m	class:http_simple
__init__	obfsplugin/http_simple.py	/^    def __init__(self, method):$/;"	m	class:random_head
__init__	obfsplugin/obfs_tls.py	/^    def __init__(self):$/;"	m	class:obfs_auth_data
__init__	obfsplugin/obfs_tls.py	/^    def __init__(self, method):$/;"	m	class:tls_ticket_auth
__init__	obfsplugin/plain.py	/^    def __init__(self, method):$/;"	m	class:plain
__init__	obfsplugin/verify.py	/^    def __init__(self):$/;"	m	class:obfs_verify_data
__init__	obfsplugin/verify.py	/^    def __init__(self, method):$/;"	m	class:verify_base
__init__	obfsplugin/verify.py	/^    def __init__(self, method):$/;"	m	class:verify_deflate
__init__	obfsplugin/verify.py	/^    def __init__(self, method):$/;"	m	class:verify_sha1
__init__	obfsplugin/verify.py	/^    def __init__(self, method):$/;"	m	class:verify_simple
__init__	ordereddict.py	/^    def __init__(*args, **kwds):$/;"	m	class:OrderedDict
__init__	tcprelay.py	/^    def __init__(self, config, dns_resolver, is_local, stat_callback=None, stat_counter=None):$/;"	m	class:TCPRelay
__init__	tcprelay.py	/^    def __init__(self, server, fd_to_handlers, loop, local_sock, config,$/;"	m	class:TCPRelayHandler
__init__	udprelay.py	/^    def __init__(self):$/;"	m	class:AddressMap
__init__	udprelay.py	/^    def __init__(self):$/;"	m	class:RecvQueue
__init__	udprelay.py	/^    def __init__(self):$/;"	m	class:SendingQueue
__init__	udprelay.py	/^    def __init__(self, addr):$/;"	m	class:UDPLocalAddress
__init__	udprelay.py	/^    def __init__(self, config, dns_resolver, is_local, stat_callback=None, stat_counter=None):$/;"	m	class:UDPRelay
__init__	udprelay.py	/^    def __init__(self, data):$/;"	m	class:PacketInfo
__init__	udprelay.py	/^    def __init__(self, server, reqid_to_handlers, fd_to_handlers, loop,$/;"	m	class:TCPRelayHandler
__iter__	lru_cache.py	/^    def __iter__(self):$/;"	m	class:LRUCache	file:
__iter__	ordereddict.py	/^    def __iter__(self):$/;"	m	class:OrderedDict	file:
__len__	lru_cache.py	/^    def __len__(self):$/;"	m	class:LRUCache	file:
__marker	ordereddict.py	/^    __marker = object()$/;"	v	class:OrderedDict
__ne__	ordereddict.py	/^    def __ne__(self, other):$/;"	m	class:OrderedDict	file:
__reduce__	ordereddict.py	/^    def __reduce__(self):$/;"	m	class:OrderedDict	file:
__repr__	ordereddict.py	/^    def __repr__(self, _repr_running={}):$/;"	m	class:OrderedDict	file:
__reversed__	ordereddict.py	/^    def __reversed__(self):$/;"	m	class:OrderedDict	file:
__setitem__	lru_cache.py	/^    def __setitem__(self, key, value):$/;"	m	class:LRUCache	file:
__setitem__	ordereddict.py	/^    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):$/;"	m	class:OrderedDict	file:
__str__	asyncdns.py	/^    def __str__(self):$/;"	m	class:DNSResponse	file:
__update	ordereddict.py	/^    __update = update # let subclasses override update without breaking __init__$/;"	v	class:OrderedDict
_call_callback	asyncdns.py	/^    def _call_callback(self, hostname, ip, error=None):$/;"	m	class:DNSResolver
_chr	common.py	/^_chr = chr$/;"	v
_close_client	udprelay.py	/^    def _close_client(self, client):$/;"	m	class:UDPRelay
_control	eventloop.py	/^    def _control(self, fd, mode, flags):$/;"	m	class:KqueueLoop
_create_remote_socket	tcprelay.py	/^    def _create_remote_socket(self, ip, port):$/;"	m	class:TCPRelayHandler
_create_remote_socket	udprelay.py	/^    def _create_remote_socket(self, ip, port):$/;"	m	class:TCPRelayHandler
_decode_dict	shell.py	/^def _decode_dict(data):$/;"	f
_decode_list	shell.py	/^def _decode_list(data):$/;"	f
_get_a_server	tcprelay.py	/^    def _get_a_server(self):$/;"	m	class:TCPRelayHandler
_get_a_server	udprelay.py	/^    def _get_a_server(self):$/;"	m	class:UDPRelay
_get_head_size	tcprelay.py	/^    def _get_head_size(self, buf, def_value):$/;"	m	class:TCPRelayHandler
_get_redirect_host	tcprelay.py	/^    def _get_redirect_host(self, client_address, ogn_data):$/;"	m	class:TCPRelayHandler
_handel_protocol_error	tcprelay.py	/^    def _handel_protocol_error(self, client_address, ogn_data):$/;"	m	class:TCPRelayHandler
_handel_protocol_error	udprelay.py	/^    def _handel_protocol_error(self, client_address, ogn_data):$/;"	m	class:UDPRelay
_handle_client	udprelay.py	/^    def _handle_client(self, sock):$/;"	m	class:UDPRelay
_handle_data	asyncdns.py	/^    def _handle_data(self, data):$/;"	m	class:DNSResolver
_handle_dns_resolved	tcprelay.py	/^    def _handle_dns_resolved(self, result, error):$/;"	m	class:TCPRelayHandler
_handle_dns_resolved	udprelay.py	/^    def _handle_dns_resolved(self, result, error):$/;"	m	class:TCPRelayHandler
_handle_server	udprelay.py	/^    def _handle_server(self):$/;"	m	class:UDPRelay
_handle_stage_addr	tcprelay.py	/^    def _handle_stage_addr(self, ogn_data, data):$/;"	m	class:TCPRelayHandler
_handle_stage_connecting	tcprelay.py	/^    def _handle_stage_connecting(self, data):$/;"	m	class:TCPRelayHandler
_handle_tcp_over_udp	udprelay.py	/^    def _handle_tcp_over_udp(self, data, r_addr):$/;"	m	class:UDPRelay
_log_error	tcprelay.py	/^    def _log_error(self, e):$/;"	m	class:TCPRelayHandler
_log_error	udprelay.py	/^    def _log_error(self, e):$/;"	m	class:TCPRelayHandler
_on_local_error	tcprelay.py	/^    def _on_local_error(self):$/;"	m	class:TCPRelayHandler
_on_local_error	udprelay.py	/^    def _on_local_error(self):$/;"	m	class:TCPRelayHandler
_on_local_read	tcprelay.py	/^    def _on_local_read(self):$/;"	m	class:TCPRelayHandler
_on_local_read	udprelay.py	/^    def _on_local_read(self):$/;"	m	class:TCPRelayHandler
_on_local_write	tcprelay.py	/^    def _on_local_write(self):$/;"	m	class:TCPRelayHandler
_on_local_write	udprelay.py	/^    def _on_local_write(self):$/;"	m	class:TCPRelayHandler
_on_remote_error	tcprelay.py	/^    def _on_remote_error(self):$/;"	m	class:TCPRelayHandler
_on_remote_error	udprelay.py	/^    def _on_remote_error(self):$/;"	m	class:TCPRelayHandler
_on_remote_read	tcprelay.py	/^    def _on_remote_read(self, is_remote_sock):$/;"	m	class:TCPRelayHandler
_on_remote_read	udprelay.py	/^    def _on_remote_read(self):$/;"	m	class:TCPRelayHandler
_on_remote_write	tcprelay.py	/^    def _on_remote_write(self):$/;"	m	class:TCPRelayHandler
_on_remote_write	udprelay.py	/^    def _on_remote_write(self):$/;"	m	class:TCPRelayHandler
_ord	common.py	/^_ord = ord$/;"	v
_pack_post_data	udprelay.py	/^    def _pack_post_data(self, cmd, pack_id, data):$/;"	m	class:TCPRelayHandler
_pack_post_data_64	udprelay.py	/^    def _pack_post_data_64(self, cmd, send_id, pack_id, data):$/;"	m	class:TCPRelayHandler
_pack_rnd_data	udprelay.py	/^    def _pack_rnd_data(self, data):$/;"	m	class:TCPRelayHandler
_pack_rsp_data	udprelay.py	/^    def _pack_rsp_data(self, cmd, data):$/;"	m	class:TCPRelayHandler
_pack_rsp_data	udprelay.py	/^    def _pack_rsp_data(self, cmd, request_id, data):$/;"	m	class:UDPRelay
_parse_command	manager.py	/^    def _parse_command(self, data):$/;"	m	class:Manager
_parse_hosts	asyncdns.py	/^    def _parse_hosts(self):$/;"	m	class:DNSResolver
_parse_resolv	asyncdns.py	/^    def _parse_resolv(self):$/;"	m	class:DNSResolver
_pre_parse_udp_header	udprelay.py	/^    def _pre_parse_udp_header(self, data):$/;"	m	class:UDPRelay
_send_control_data	manager.py	/^    def _send_control_data(self, data):$/;"	m	class:Manager
_send_req	asyncdns.py	/^    def _send_req(self, hostname, qtype):$/;"	m	class:DNSResolver
_sweep_timeout	tcprelay.py	/^    def _sweep_timeout(self):$/;"	m	class:TCPRelay
_sweep_timeout	udprelay.py	/^    def _sweep_timeout(self):$/;"	m	class:UDPRelay
_update_activity	tcprelay.py	/^    def _update_activity(self, data_len=0):$/;"	m	class:TCPRelayHandler
_update_activity	udprelay.py	/^    def _update_activity(self):$/;"	m	class:TCPRelayHandler
_update_stream	tcprelay.py	/^    def _update_stream(self, stream, status):$/;"	m	class:TCPRelayHandler
_update_stream	udprelay.py	/^    def _update_stream(self, stream, status):$/;"	m	class:TCPRelayHandler
_write_to_sock	tcprelay.py	/^    def _write_to_sock(self, data, sock):$/;"	m	class:TCPRelayHandler
_write_to_sock	udprelay.py	/^    def _write_to_sock(self, data, sock, addr = None):$/;"	m	class:TCPRelayHandler
absolute_import	__init__.py	/^    with_statement$/;"	i
absolute_import	asyncdns.py	/^    with_statement$/;"	i
absolute_import	common.py	/^    with_statement$/;"	i
absolute_import	crypto/__init__.py	/^    with_statement$/;"	i
absolute_import	crypto/ctypes_libsodium.py	/^    with_statement$/;"	i
absolute_import	crypto/ctypes_openssl.py	/^    with_statement$/;"	i
absolute_import	crypto/openssl.py	/^    with_statement$/;"	i
absolute_import	crypto/rc4_md5.py	/^    with_statement$/;"	i
absolute_import	crypto/sodium.py	/^    with_statement$/;"	i
absolute_import	crypto/table.py	/^    with_statement$/;"	i
absolute_import	crypto/util.py	/^    with_statement$/;"	i
absolute_import	daemon.py	/^    with_statement$/;"	i
absolute_import	encrypt.py	/^    with_statement$/;"	i
absolute_import	encrypt_test.py	/^    with_statement$/;"	i
absolute_import	eventloop.py	/^    with_statement$/;"	i
absolute_import	local.py	/^    with_statement$/;"	i
absolute_import	lru_cache.py	/^    with_statement$/;"	i
absolute_import	manager.py	/^    with_statement$/;"	i
absolute_import	obfs.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/__init__.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/auth.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/http_simple.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/obfs_tls.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/plain.py	/^    with_statement$/;"	i
absolute_import	obfsplugin/verify.py	/^    with_statement$/;"	i
absolute_import	server.py	/^    with_statement$/;"	i
absolute_import	shell.py	/^    with_statement$/;"	i
absolute_import	tcprelay.py	/^    with_statement$/;"	i
absolute_import	udprelay.py	/^    with_statement$/;"	i
add	eventloop.py	/^    def add(self, f, mode, handler):$/;"	m	class:EventLoop
add	udprelay.py	/^    def add(self, addr):$/;"	m	class:AddressMap
add_connection	tcprelay.py	/^    def add_connection(self, val):$/;"	m	class:TCPRelay
add_local_address	udprelay.py	/^    def add_local_address(self, addr):$/;"	m	class:TCPRelayHandler
add_network	common.py	/^    def add_network(self, addr):$/;"	m	class:IPNetwork
add_periodic	eventloop.py	/^    def add_periodic(self, callback):$/;"	m	class:EventLoop
add_port	manager.py	/^    def add_port(self, config):$/;"	m	class:Manager
add_to_loop	asyncdns.py	/^    def add_to_loop(self, loop):$/;"	m	class:DNSResolver
add_to_loop	tcprelay.py	/^    def add_to_loop(self, loop):$/;"	m	class:TCPRelay
add_to_loop	udprelay.py	/^    def add_to_loop(self, loop):$/;"	m	class:UDPRelay
append	udprelay.py	/^    def append(self, data):$/;"	m	class:SendingQueue
asyncdns	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
asyncdns	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
asyncdns	server.py	/^    asyncdns, manager$/;"	i
auth	obfs.py	/^from shadowsocks.obfsplugin import plain, http_simple, obfs_tls, verify, auth$/;"	i
auth_data	obfsplugin/auth.py	/^    def auth_data(self):$/;"	m	class:auth_sha1
auth_data	obfsplugin/auth.py	/^    def auth_data(self):$/;"	m	class:auth_sha1_v2
auth_data	obfsplugin/auth.py	/^    def auth_data(self):$/;"	m	class:auth_sha1_v3
auth_sha1	obfsplugin/auth.py	/^class auth_sha1(verify_base):$/;"	c
auth_sha1_v2	obfsplugin/auth.py	/^class auth_sha1_v2(verify_base):$/;"	c
auth_sha1_v3	obfsplugin/auth.py	/^class auth_sha1_v3(verify_base):$/;"	c
base64	obfsplugin/auth.py	/^import base64$/;"	i
base64	obfsplugin/http_simple.py	/^import base64$/;"	i
base64	obfsplugin/obfs_tls.py	/^import base64$/;"	i
base64	obfsplugin/verify.py	/^import base64$/;"	i
binascii	common.py	/^import binascii$/;"	i
binascii	obfsplugin/auth.py	/^import binascii$/;"	i
binascii	obfsplugin/http_simple.py	/^import binascii$/;"	i
binascii	obfsplugin/obfs_tls.py	/^import binascii$/;"	i
binascii	obfsplugin/verify.py	/^import binascii$/;"	i
binascii	tcprelay.py	/^import binascii$/;"	i
binascii	udprelay.py	/^import binascii$/;"	i
boundary	obfsplugin/http_simple.py	/^    def boundary(self):$/;"	m	class:http_post
buf_size	crypto/ctypes_libsodium.py	/^buf_size = 2048$/;"	v
buf_size	crypto/ctypes_openssl.py	/^buf_size = 2048$/;"	v
buf_size	crypto/openssl.py	/^buf_size = 2048$/;"	v
buf_size	crypto/sodium.py	/^buf_size = 2048$/;"	v
build_address	asyncdns.py	/^def build_address(address):$/;"	f
build_request	asyncdns.py	/^def build_request(address, qtype):$/;"	f
byref	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
byref	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
byref	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
byref	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_char_p	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_char_p	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_char_p	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_char_p	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_int	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_int	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_int	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_int	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_long	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_long	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_ulong	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_ulonglong	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_ulonglong	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_void_p	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
c_void_p	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_void_p	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
c_void_p	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
cached_keys	encrypt.py	/^cached_keys = {}$/;"	v
cached_tables	crypto/table.py	/^cached_tables = {}$/;"	v
callback	asyncdns.py	/^        def callback(result, error):$/;"	f	function:test.make_callback
check_config	shell.py	/^def check_config(config, is_local):$/;"	f
check_python	shell.py	/^def check_python():$/;"	f
child_handler	server.py	/^        def child_handler(signum, _):$/;"	f	function:main.run_server
chr	common.py	/^chr = compat_chr$/;"	v
chr	obfsplugin/auth.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
chr	obfsplugin/http_simple.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
chr	obfsplugin/verify.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
ciphers	crypto/ctypes_libsodium.py	/^ciphers = {$/;"	v
ciphers	crypto/ctypes_openssl.py	/^ciphers = {$/;"	v
ciphers	crypto/openssl.py	/^ciphers = {$/;"	v
ciphers	crypto/rc4_md5.py	/^ciphers = {$/;"	v
ciphers	crypto/sodium.py	/^ciphers = {$/;"	v
ciphers	crypto/table.py	/^ciphers = {$/;"	v
clean	crypto/ctypes_openssl.py	/^    def clean(self):$/;"	m	class:CtypesCrypto
clean	crypto/openssl.py	/^    def clean(self):$/;"	m	class:OpenSSLCrypto
clear	lru_cache.py	/^    def clear(self, keep):$/;"	m	class:LRUCache
clear	ordereddict.py	/^    def clear(self):$/;"	m	class:OrderedDict
client_decode	obfs.py	/^    def client_decode(self, buf):$/;"	m	class:obfs
client_decode	obfsplugin/auth.py	/^    def client_decode(self, buf):$/;"	m	class:verify_base
client_decode	obfsplugin/http_simple.py	/^    def client_decode(self, buf):$/;"	m	class:http_simple
client_decode	obfsplugin/http_simple.py	/^    def client_decode(self, buf):$/;"	m	class:random_head
client_decode	obfsplugin/obfs_tls.py	/^    def client_decode(self, buf):$/;"	m	class:tls_ticket_auth
client_decode	obfsplugin/plain.py	/^    def client_decode(self, buf):$/;"	m	class:plain
client_decode	obfsplugin/verify.py	/^    def client_decode(self, buf):$/;"	m	class:verify_base
client_encode	obfs.py	/^    def client_encode(self, buf):$/;"	m	class:obfs
client_encode	obfsplugin/auth.py	/^    def client_encode(self, buf):$/;"	m	class:verify_base
client_encode	obfsplugin/http_simple.py	/^    def client_encode(self, buf):$/;"	m	class:http_post
client_encode	obfsplugin/http_simple.py	/^    def client_encode(self, buf):$/;"	m	class:http_simple
client_encode	obfsplugin/http_simple.py	/^    def client_encode(self, buf):$/;"	m	class:random_head
client_encode	obfsplugin/obfs_tls.py	/^    def client_encode(self, buf):$/;"	m	class:tls_ticket_auth
client_encode	obfsplugin/plain.py	/^    def client_encode(self, buf):$/;"	m	class:plain
client_encode	obfsplugin/verify.py	/^    def client_encode(self, buf):$/;"	m	class:verify_base
client_key	udprelay.py	/^def client_key(source_addr, server_af):$/;"	f
client_post_decrypt	obfs.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:obfs
client_post_decrypt	obfsplugin/auth.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:auth_sha1
client_post_decrypt	obfsplugin/auth.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:auth_sha1_v2
client_post_decrypt	obfsplugin/auth.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:auth_sha1_v3
client_post_decrypt	obfsplugin/plain.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:plain
client_post_decrypt	obfsplugin/verify.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:verify_deflate
client_post_decrypt	obfsplugin/verify.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:verify_sha1
client_post_decrypt	obfsplugin/verify.py	/^    def client_post_decrypt(self, buf):$/;"	m	class:verify_simple
client_pre_encrypt	obfs.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:obfs
client_pre_encrypt	obfsplugin/auth.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:auth_sha1
client_pre_encrypt	obfsplugin/auth.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:auth_sha1_v2
client_pre_encrypt	obfsplugin/auth.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:auth_sha1_v3
client_pre_encrypt	obfsplugin/plain.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:plain
client_pre_encrypt	obfsplugin/verify.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:verify_deflate
client_pre_encrypt	obfsplugin/verify.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:verify_sha1
client_pre_encrypt	obfsplugin/verify.py	/^    def client_pre_encrypt(self, buf):$/;"	m	class:verify_simple
client_queue	obfsplugin/auth.py	/^class client_queue(object):$/;"	c
client_udp_post_decrypt	obfs.py	/^    def client_udp_post_decrypt(self, buf):$/;"	m	class:obfs
client_udp_post_decrypt	obfsplugin/plain.py	/^    def client_udp_post_decrypt(self, buf):$/;"	m	class:plain
client_udp_pre_encrypt	obfs.py	/^    def client_udp_pre_encrypt(self, buf):$/;"	m	class:obfs
client_udp_pre_encrypt	obfsplugin/plain.py	/^    def client_udp_pre_encrypt(self, buf):$/;"	m	class:plain
client_udp_pre_encrypt	obfsplugin/verify.py	/^    def client_udp_pre_encrypt(self, buf):$/;"	m	class:verify_sha1
close	asyncdns.py	/^    def close(self):$/;"	m	class:DNSResolver
close	eventloop.py	/^    def close(self):$/;"	m	class:KqueueLoop
close	eventloop.py	/^    def close(self):$/;"	m	class:SelectLoop
close	tcprelay.py	/^    def close(self, next_tick=False):$/;"	m	class:TCPRelay
close	udprelay.py	/^    def close(self, next_tick=False):$/;"	m	class:UDPRelay
close_cb	lru_cache.py	/^    def close_cb(t):$/;"	f	function:test
collections	lru_cache.py	/^import collections$/;"	i
collections	manager.py	/^import collections$/;"	i
collections	ordereddict.py	/^import collections$/;"	i
common	asyncdns.py	/^from shadowsocks import common, lru_cache, eventloop, shell$/;"	i
common	crypto/openssl.py	/^from shadowsocks import common$/;"	i
common	daemon.py	/^from shadowsocks import common, shell$/;"	i
common	encrypt.py	/^from shadowsocks import common$/;"	i
common	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
common	obfs.py	/^from shadowsocks import common$/;"	i
common	obfsplugin/auth.py	/^from shadowsocks import common, lru_cache$/;"	i
common	obfsplugin/http_simple.py	/^from shadowsocks import common$/;"	i
common	obfsplugin/obfs_tls.py	/^from shadowsocks import common$/;"	i
common	obfsplugin/verify.py	/^from shadowsocks import common$/;"	i
common	tcprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, shell, common$/;"	i
common	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
compat_chr	common.py	/^def compat_chr(d):$/;"	f
compat_ord	common.py	/^def compat_ord(s):$/;"	f
connect_log	common.py	/^connect_log = logging.debug$/;"	v
copy	ordereddict.py	/^    def copy(self):$/;"	m	class:OrderedDict
create_auth_obfs	obfsplugin/verify.py	/^def create_auth_obfs(method):$/;"	f
create_auth_sha1	obfsplugin/auth.py	/^def create_auth_sha1(method):$/;"	f
create_auth_sha1_v2	obfsplugin/auth.py	/^def create_auth_sha1_v2(method):$/;"	f
create_auth_sha1_v3	obfsplugin/auth.py	/^def create_auth_sha1_v3(method):$/;"	f
create_cipher	crypto/rc4_md5.py	/^def create_cipher(alg, key, iv, op, key_as_bytes=0, d=None, salt=None,$/;"	f
create_http_post_obfs	obfsplugin/http_simple.py	/^def create_http_post_obfs(method):$/;"	f
create_http_simple_obfs	obfsplugin/http_simple.py	/^def create_http_simple_obfs(method):$/;"	f
create_obfs	obfsplugin/plain.py	/^def create_obfs(method):$/;"	f
create_random_head_obfs	obfsplugin/http_simple.py	/^def create_random_head_obfs(method):$/;"	f
create_string_buffer	crypto/ctypes_libsodium.py	/^    create_string_buffer, c_void_p$/;"	i
create_string_buffer	crypto/ctypes_openssl.py	/^    create_string_buffer, c_void_p$/;"	i
create_string_buffer	crypto/openssl.py	/^    create_string_buffer, c_void_p$/;"	i
create_string_buffer	crypto/sodium.py	/^    create_string_buffer, c_void_p$/;"	i
create_tls_ticket_auth_obfs	obfsplugin/obfs_tls.py	/^def create_tls_ticket_auth_obfs(method):$/;"	f
create_verify_deflate	obfsplugin/verify.py	/^def create_verify_deflate(method):$/;"	f
create_verify_obfs	obfsplugin/verify.py	/^def create_verify_obfs(method):$/;"	f
create_verify_sha1	obfsplugin/verify.py	/^def create_verify_sha1(method):$/;"	f
ctypes	crypto/util.py	/^    import ctypes.util$/;"	i
daemon	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
daemon	server.py	/^    asyncdns, manager$/;"	i
daemon_exec	daemon.py	/^def daemon_exec(config):$/;"	f
daemon_start	daemon.py	/^def daemon_start(pid_file, log_file):$/;"	f
daemon_stop	daemon.py	/^def daemon_stop(pid_file):$/;"	f
datetime	obfsplugin/auth.py	/^import datetime$/;"	i
datetime	obfsplugin/http_simple.py	/^import datetime$/;"	i
datetime	obfsplugin/verify.py	/^import datetime$/;"	i
decode_error_return	obfsplugin/obfs_tls.py	/^    def decode_error_return(self, buf):$/;"	m	class:tls_ticket_auth
decrypt	encrypt.py	/^    def decrypt(self, buf):$/;"	m	class:Encryptor
defaultdict	eventloop.py	/^from collections import defaultdict$/;"	i
destroy	tcprelay.py	/^    def destroy(self):$/;"	m	class:TCPRelayHandler
destroy	udprelay.py	/^    def destroy(self):$/;"	m	class:TCPRelayHandler
destroy_local	udprelay.py	/^    def destroy_local(self):$/;"	m	class:TCPRelayHandler
detect_ipv6_supprot	asyncdns.py	/^def detect_ipv6_supprot():$/;"	f
dispose	obfs.py	/^    def dispose(self):$/;"	m	class:obfs
dispose	obfsplugin/plain.py	/^    def dispose(self):$/;"	m	class:plain
division	__init__.py	/^    with_statement$/;"	i
division	asyncdns.py	/^    with_statement$/;"	i
division	common.py	/^    with_statement$/;"	i
division	crypto/__init__.py	/^    with_statement$/;"	i
division	crypto/ctypes_libsodium.py	/^    with_statement$/;"	i
division	crypto/ctypes_openssl.py	/^    with_statement$/;"	i
division	crypto/openssl.py	/^    with_statement$/;"	i
division	crypto/rc4_md5.py	/^    with_statement$/;"	i
division	crypto/sodium.py	/^    with_statement$/;"	i
division	crypto/table.py	/^    with_statement$/;"	i
division	crypto/util.py	/^    with_statement$/;"	i
division	daemon.py	/^    with_statement$/;"	i
division	encrypt.py	/^    with_statement$/;"	i
division	encrypt_test.py	/^    with_statement$/;"	i
division	eventloop.py	/^    with_statement$/;"	i
division	local.py	/^    with_statement$/;"	i
division	lru_cache.py	/^    with_statement$/;"	i
division	manager.py	/^    with_statement$/;"	i
division	obfs.py	/^    with_statement$/;"	i
division	obfsplugin/__init__.py	/^    with_statement$/;"	i
division	obfsplugin/auth.py	/^    with_statement$/;"	i
division	obfsplugin/http_simple.py	/^    with_statement$/;"	i
division	obfsplugin/obfs_tls.py	/^    with_statement$/;"	i
division	obfsplugin/plain.py	/^    with_statement$/;"	i
division	obfsplugin/verify.py	/^    with_statement$/;"	i
division	server.py	/^    with_statement$/;"	i
division	shell.py	/^    with_statement$/;"	i
division	tcprelay.py	/^    with_statement$/;"	i
division	udprelay.py	/^    with_statement$/;"	i
empty	udprelay.py	/^    def empty(self):$/;"	m	class:RecvQueue
empty	udprelay.py	/^    def empty(self):$/;"	m	class:SendingQueue
encode_head	obfsplugin/http_simple.py	/^    def encode_head(self, buf):$/;"	m	class:http_simple
encrypt	encrypt.py	/^    def encrypt(self, buf):$/;"	m	class:Encryptor
encrypt	manager.py	/^    from shadowsocks import encrypt$/;"	i
encrypt	shell.py	/^from shadowsocks import encrypt$/;"	i
encrypt	tcprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, shell, common$/;"	i
encrypt	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
encrypt_all	encrypt.py	/^def encrypt_all(password, method, op, data):$/;"	f
encrypt_all_iv	encrypt.py	/^def encrypt_all_iv(key, method, op, data, ref_iv):$/;"	f
encrypt_iv_len	encrypt.py	/^def encrypt_iv_len(method):$/;"	f
encrypt_key	encrypt.py	/^def encrypt_key(password, method):$/;"	f
encrypt_new_iv	encrypt.py	/^def encrypt_new_iv(method):$/;"	f
errno	daemon.py	/^    import errno$/;"	i
errno	eventloop.py	/^import errno$/;"	i
errno	manager.py	/^import errno$/;"	i
errno	tcprelay.py	/^import errno$/;"	i
errno	udprelay.py	/^import errno$/;"	i
errno_from_exception	eventloop.py	/^def errno_from_exception(e):$/;"	f
eventloop	asyncdns.py	/^from shadowsocks import common, lru_cache, eventloop, shell$/;"	i
eventloop	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
eventloop	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
eventloop	server.py	/^    asyncdns, manager$/;"	i
eventloop	tcprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, shell, common$/;"	i
eventloop	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
fcntl	daemon.py	/^    import fcntl$/;"	i
file_path	asyncdns.py	/^    file_path = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))$/;"	v
file_path	local.py	/^    file_path = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))$/;"	v
file_path	lru_cache.py	/^    file_path = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))$/;"	v
file_path	server.py	/^    file_path = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))$/;"	v
find_config	shell.py	/^def find_config():$/;"	f
find_library	crypto/ctypes_libsodium.py	/^    from ctypes.util import find_library$/;"	i
find_library	crypto/ctypes_openssl.py	/^    from ctypes.util import find_library$/;"	i
find_library	crypto/util.py	/^def find_library(possible_lib_names, search_symbol, library_name):$/;"	f
find_library_nt	crypto/util.py	/^def find_library_nt(name):$/;"	f
first	lru_cache.py	/^    def first(self):$/;"	m	class:LRUCache
freopen	daemon.py	/^def freopen(f, mode, stream):$/;"	f
fromkeys	ordereddict.py	/^    def fromkeys(cls, iterable, value=None):$/;"	m	class:OrderedDict
get	udprelay.py	/^    def get(self):$/;"	m	class:AddressMap
get_begin_id	udprelay.py	/^    def get_begin_id(self):$/;"	m	class:RecvQueue
get_begin_id	udprelay.py	/^    def get_begin_id(self):$/;"	m	class:SendingQueue
get_cipher	encrypt.py	/^    def get_cipher(self, password, method, op, iv):$/;"	m	class:Encryptor
get_config	shell.py	/^def get_config(is_local):$/;"	f
get_data	udprelay.py	/^    def get_data(self):$/;"	m	class:RecvQueue
get_data_from_http_header	obfsplugin/http_simple.py	/^    def get_data_from_http_header(self, buf):$/;"	m	class:http_simple
get_data_list	udprelay.py	/^    def get_data_list(self, pack_id_base, pack_id_list):$/;"	m	class:SendingQueue
get_end_id	udprelay.py	/^    def get_end_id(self):$/;"	m	class:SendingQueue
get_head_size	obfsplugin/plain.py	/^    def get_head_size(self, buf, def_value):$/;"	m	class:plain
get_local_address	udprelay.py	/^    def get_local_address(self):$/;"	m	class:TCPRelayHandler
get_method_info	encrypt.py	/^    def get_method_info(self, method):$/;"	m	class:Encryptor
get_method_info	obfs.py	/^    def get_method_info(self, method):$/;"	m	class:obfs
get_missing_id	udprelay.py	/^    def get_missing_id(self, begin_id):$/;"	m	class:RecvQueue
get_obfs	obfs.py	/^    def get_obfs(self, method):$/;"	m	class:obfs
get_sock_error	eventloop.py	/^def get_sock_error(sock):$/;"	f
get_table	crypto/table.py	/^def get_table(key):$/;"	f
getopt	shell.py	/^import getopt$/;"	i
glob	crypto/util.py	/^        import glob$/;"	i
grp	daemon.py	/^    import grp$/;"	i
handle_client	udprelay.py	/^    def handle_client(self, addr, cmd, request_id, data):$/;"	m	class:TCPRelayHandler
handle_event	asyncdns.py	/^    def handle_event(self, sock, fd, event):$/;"	m	class:DNSResolver
handle_event	manager.py	/^    def handle_event(self, sock, fd, event):$/;"	m	class:Manager
handle_event	tcprelay.py	/^    def handle_event(self, sock, event):$/;"	m	class:TCPRelayHandler
handle_event	tcprelay.py	/^    def handle_event(self, sock, fd, event):$/;"	m	class:TCPRelay
handle_event	udprelay.py	/^    def handle_event(self, sock, event):$/;"	m	class:TCPRelayHandler
handle_event	udprelay.py	/^    def handle_event(self, sock, fd, event):$/;"	m	class:UDPRelay
handle_exit	daemon.py	/^    def handle_exit(signum, _):$/;"	f	function:daemon_start
handle_periodic	asyncdns.py	/^    def handle_periodic(self):$/;"	m	class:DNSResolver
handle_periodic	manager.py	/^    def handle_periodic(self):$/;"	m	class:Manager
handle_periodic	tcprelay.py	/^    def handle_periodic(self):$/;"	m	class:TCPRelay
handle_periodic	udprelay.py	/^    def handle_periodic(self):$/;"	m	class:UDPRelay
handle_stream_sync_status	udprelay.py	/^    def handle_stream_sync_status(self, addr, cmd, request_id, pack_id, max_send_id, data):$/;"	m	class:TCPRelayHandler
handler	local.py	/^        def handler(signum, _):$/;"	f	function:main
handler	server.py	/^                def handler(signum, _):$/;"	f	function:main.run_server.int_handler
has_data	udprelay.py	/^    def has_data(self):$/;"	m	class:RecvQueue
hashlib	crypto/rc4_md5.py	/^import hashlib$/;"	i
hashlib	crypto/table.py	/^import hashlib$/;"	i
hashlib	encrypt.py	/^import hashlib$/;"	i
hashlib	obfs.py	/^import hashlib$/;"	i
hashlib	obfsplugin/auth.py	/^import hashlib$/;"	i
hashlib	obfsplugin/http_simple.py	/^import hashlib$/;"	i
hashlib	obfsplugin/obfs_tls.py	/^import hashlib$/;"	i
hashlib	obfsplugin/plain.py	/^import hashlib$/;"	i
hashlib	obfsplugin/verify.py	/^import hashlib$/;"	i
hmac	obfsplugin/auth.py	/^import hmac$/;"	i
hmac	obfsplugin/obfs_tls.py	/^import hmac$/;"	i
hmac	obfsplugin/verify.py	/^import hmac$/;"	i
http_post	obfsplugin/http_simple.py	/^class http_post(http_simple):$/;"	c
http_simple	obfs.py	/^from shadowsocks.obfsplugin import plain, http_simple, obfs_tls, verify, auth$/;"	i
http_simple	obfsplugin/http_simple.py	/^class http_simple(plain.plain):$/;"	c
inet_ntop	common.py	/^def inet_ntop(family, ipstr):$/;"	f
inet_pton	common.py	/^def inet_pton(family, addr):$/;"	f
init_data	obfs.py	/^    def init_data(self):$/;"	m	class:obfs
init_data	obfsplugin/auth.py	/^    def init_data(self):$/;"	m	class:auth_sha1
init_data	obfsplugin/auth.py	/^    def init_data(self):$/;"	m	class:auth_sha1_v2
init_data	obfsplugin/auth.py	/^    def init_data(self):$/;"	m	class:auth_sha1_v3
init_data	obfsplugin/auth.py	/^    def init_data(self):$/;"	m	class:verify_base
init_data	obfsplugin/obfs_tls.py	/^    def init_data(self):$/;"	m	class:tls_ticket_auth
init_data	obfsplugin/plain.py	/^    def init_data(self):$/;"	m	class:plain
init_data	obfsplugin/verify.py	/^    def init_data(self):$/;"	m	class:verify_base
init_table	crypto/table.py	/^def init_table(key):$/;"	f
insert	obfsplugin/auth.py	/^    def insert(self, client_id, connection_id):$/;"	m	class:obfs_auth_data
insert	obfsplugin/auth.py	/^    def insert(self, client_id, connection_id):$/;"	m	class:obfs_auth_v2_data
insert	obfsplugin/auth.py	/^    def insert(self, connection_id):$/;"	m	class:client_queue
insert	udprelay.py	/^    def insert(self, pack_id, data):$/;"	m	class:RecvQueue
inspect	asyncdns.py	/^    import inspect$/;"	i
inspect	local.py	/^    import inspect$/;"	i
inspect	lru_cache.py	/^    import os, sys, inspect$/;"	i
inspect	server.py	/^    import inspect$/;"	i
int32	common.py	/^def int32(x):$/;"	f
int_handler	local.py	/^        def int_handler(signum, _):$/;"	f	function:main
int_handler	server.py	/^        def int_handler(signum, _):$/;"	f	function:main.run_server
is_active	obfsplugin/auth.py	/^    def is_active(self):$/;"	m	class:client_queue
is_ip	common.py	/^def is_ip(address):$/;"	f
is_timeout	udprelay.py	/^    def is_timeout(self):$/;"	m	class:UDPLocalAddress
is_valid_hostname	asyncdns.py	/^def is_valid_hostname(hostname):$/;"	f
items	ordereddict.py	/^    def items(self):$/;"	m	class:OrderedDict
iteritems	ordereddict.py	/^    def iteritems(self):$/;"	m	class:OrderedDict
iterkeys	ordereddict.py	/^    def iterkeys(self):$/;"	m	class:OrderedDict
itervalues	ordereddict.py	/^    def itervalues(self):$/;"	m	class:OrderedDict
iv_len	encrypt.py	/^    def iv_len(self):$/;"	m	class:Encryptor
json	manager.py	/^import json$/;"	i
json	shell.py	/^import json$/;"	i
keys	ordereddict.py	/^    def keys(self):$/;"	m	class:OrderedDict
keys	udprelay.py	/^    def keys(self):$/;"	m	class:AddressMap
libcrypto	crypto/ctypes_openssl.py	/^libcrypto = None$/;"	v
libcrypto	crypto/openssl.py	/^libcrypto = None$/;"	v
libsodium	crypto/ctypes_libsodium.py	/^libsodium = None$/;"	v
libsodium	crypto/sodium.py	/^libsodium = None$/;"	v
load_cipher	crypto/ctypes_openssl.py	/^def load_cipher(cipher_name):$/;"	f
load_cipher	crypto/openssl.py	/^def load_cipher(cipher_name):$/;"	f
load_libsodium	crypto/ctypes_libsodium.py	/^def load_libsodium():$/;"	f
load_libsodium	crypto/sodium.py	/^def load_libsodium():$/;"	f
load_openssl	crypto/ctypes_openssl.py	/^def load_openssl():$/;"	f
load_openssl	crypto/openssl.py	/^def load_openssl():$/;"	f
loaded	crypto/ctypes_libsodium.py	/^loaded = False$/;"	v
loaded	crypto/ctypes_openssl.py	/^loaded = False$/;"	v
loaded	crypto/openssl.py	/^loaded = False$/;"	v
loaded	crypto/sodium.py	/^loaded = False$/;"	v
logging	asyncdns.py	/^import logging$/;"	i
logging	common.py	/^import logging$/;"	i
logging	crypto/ctypes_libsodium.py	/^import logging$/;"	i
logging	crypto/ctypes_openssl.py	/^import logging$/;"	i
logging	crypto/util.py	/^import logging$/;"	i
logging	daemon.py	/^import logging$/;"	i
logging	encrypt.py	/^import logging$/;"	i
logging	eventloop.py	/^import logging$/;"	i
logging	local.py	/^import logging$/;"	i
logging	lru_cache.py	/^import logging$/;"	i
logging	manager.py	/^import logging$/;"	i
logging	obfs.py	/^import logging$/;"	i
logging	obfsplugin/auth.py	/^import logging$/;"	i
logging	obfsplugin/http_simple.py	/^import logging$/;"	i
logging	obfsplugin/obfs_tls.py	/^import logging$/;"	i
logging	obfsplugin/plain.py	/^import logging$/;"	i
logging	obfsplugin/verify.py	/^import logging$/;"	i
logging	server.py	/^import logging$/;"	i
logging	shell.py	/^import logging$/;"	i
logging	tcprelay.py	/^import logging$/;"	i
logging	udprelay.py	/^import logging$/;"	i
lru_cache	asyncdns.py	/^from shadowsocks import common, lru_cache, eventloop, shell$/;"	i
lru_cache	obfsplugin/auth.py	/^from shadowsocks import common, lru_cache$/;"	i
lru_cache	obfsplugin/obfs_tls.py	/^from shadowsocks import lru_cache$/;"	i
lru_cache	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
main	encrypt_test.py	/^def main():$/;"	f
main	local.py	/^def main():$/;"	f
main	server.py	/^def main():$/;"	f
make_callback	asyncdns.py	/^    def make_callback():$/;"	f	function:test
maketrans	crypto/table.py	/^    maketrans = bytes.maketrans$/;"	v
maketrans	crypto/table.py	/^    maketrans = string.maketrans$/;"	v
manager	server.py	/^    asyncdns, manager$/;"	i
match_begin	obfsplugin/auth.py	/^def match_begin(str1, str2):$/;"	f
match_begin	obfsplugin/http_simple.py	/^def match_begin(str1, str2):$/;"	f
match_begin	obfsplugin/obfs_tls.py	/^def match_begin(str1, str2):$/;"	f
match_begin	obfsplugin/verify.py	/^def match_begin(str1, str2):$/;"	f
method_supported	encrypt.py	/^method_supported = {}$/;"	v
method_supported	obfs.py	/^method_supported = {}$/;"	v
modify	eventloop.py	/^    def modify(self, f, mode):$/;"	m	class:EventLoop
modify	eventloop.py	/^    def modify(self, fd, mode):$/;"	m	class:KqueueLoop
modify	eventloop.py	/^    def modify(self, fd, mode):$/;"	m	class:SelectLoop
not_match_return	obfsplugin/auth.py	/^    def not_match_return(self, buf):$/;"	m	class:verify_base
not_match_return	obfsplugin/http_simple.py	/^    def not_match_return(self, buf):$/;"	m	class:http_post
not_match_return	obfsplugin/http_simple.py	/^    def not_match_return(self, buf):$/;"	m	class:http_simple
not_match_return	obfsplugin/verify.py	/^    def not_match_return(self, buf):$/;"	m	class:verify_sha1
obfs	obfs.py	/^class obfs(object):$/;"	c
obfs	tcprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, shell, common$/;"	i
obfs	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
obfs_auth_data	obfsplugin/auth.py	/^class obfs_auth_data(object):$/;"	c
obfs_auth_data	obfsplugin/obfs_tls.py	/^class obfs_auth_data(object):$/;"	c
obfs_auth_v2_data	obfsplugin/auth.py	/^class obfs_auth_v2_data(object):$/;"	c
obfs_map	obfsplugin/auth.py	/^obfs_map = {$/;"	v
obfs_map	obfsplugin/http_simple.py	/^obfs_map = {$/;"	v
obfs_map	obfsplugin/obfs_tls.py	/^obfs_map = {$/;"	v
obfs_map	obfsplugin/plain.py	/^obfs_map = {$/;"	v
obfs_map	obfsplugin/verify.py	/^obfs_map = {$/;"	v
obfs_tls	obfs.py	/^from shadowsocks.obfsplugin import plain, http_simple, obfs_tls, verify, auth$/;"	i
obfs_verify_data	obfsplugin/auth.py	/^class obfs_verify_data(object):$/;"	c
obfs_verify_data	obfsplugin/verify.py	/^class obfs_verify_data(object):$/;"	c
openssl	crypto/rc4_md5.py	/^from shadowsocks.crypto import openssl$/;"	i
openssl	encrypt.py	/^from shadowsocks.crypto import rc4_md5, openssl, sodium, table$/;"	i
openssl	encrypt_test.py	/^from shadowsocks.crypto import openssl$/;"	i
ord	common.py	/^ord = compat_ord$/;"	v
ord	crypto/table.py	/^    from shadowsocks.common import ord$/;"	i
ord	obfsplugin/auth.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
ord	obfsplugin/http_simple.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
ord	obfsplugin/obfs_tls.py	/^from shadowsocks.common import to_bytes, to_str, ord$/;"	i
ord	obfsplugin/plain.py	/^from shadowsocks.common import ord$/;"	i
ord	obfsplugin/verify.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
os	asyncdns.py	/^import os$/;"	i
os	crypto/util.py	/^import os$/;"	i
os	daemon.py	/^import os$/;"	i
os	encrypt.py	/^import os$/;"	i
os	encrypt_test.py	/^import os$/;"	i
os	eventloop.py	/^import os$/;"	i
os	local.py	/^import os$/;"	i
os	lru_cache.py	/^    import os, sys, inspect$/;"	i
os	obfs.py	/^import os$/;"	i
os	obfsplugin/auth.py	/^import os$/;"	i
os	obfsplugin/http_simple.py	/^import os$/;"	i
os	obfsplugin/obfs_tls.py	/^import os$/;"	i
os	obfsplugin/plain.py	/^import os$/;"	i
os	obfsplugin/verify.py	/^import os$/;"	i
os	server.py	/^import os$/;"	i
os	shell.py	/^import os$/;"	i
pack_addr	common.py	/^def pack_addr(address):$/;"	f
pack_addr	udprelay.py	/^from shadowsocks.common import pre_parse_header, parse_header, pack_addr$/;"	i
pack_auth_data	obfsplugin/auth.py	/^    def pack_auth_data(self, buf):$/;"	m	class:auth_sha1
pack_auth_data	obfsplugin/auth.py	/^    def pack_auth_data(self, buf):$/;"	m	class:auth_sha1_v2
pack_auth_data	obfsplugin/auth.py	/^    def pack_auth_data(self, buf):$/;"	m	class:auth_sha1_v3
pack_auth_data	obfsplugin/obfs_tls.py	/^    def pack_auth_data(self, client_id):$/;"	m	class:tls_ticket_auth
pack_auth_data	obfsplugin/verify.py	/^    def pack_auth_data(self, buf):$/;"	m	class:verify_sha1
pack_data	obfsplugin/auth.py	/^    def pack_data(self, buf):$/;"	m	class:auth_sha1
pack_data	obfsplugin/auth.py	/^    def pack_data(self, buf):$/;"	m	class:auth_sha1_v2
pack_data	obfsplugin/auth.py	/^    def pack_data(self, buf):$/;"	m	class:auth_sha1_v3
pack_data	obfsplugin/verify.py	/^    def pack_data(self, buf):$/;"	m	class:verify_deflate
pack_data	obfsplugin/verify.py	/^    def pack_data(self, buf):$/;"	m	class:verify_sha1
pack_data	obfsplugin/verify.py	/^    def pack_data(self, buf):$/;"	m	class:verify_simple
parse_header	asyncdns.py	/^def parse_header(data):$/;"	f
parse_header	common.py	/^def parse_header(data):$/;"	f
parse_header	tcprelay.py	/^from shadowsocks.common import pre_parse_header, parse_header$/;"	i
parse_header	udprelay.py	/^from shadowsocks.common import pre_parse_header, parse_header, pack_addr$/;"	i
parse_ip	asyncdns.py	/^def parse_ip(addrtype, data, length, offset):$/;"	f
parse_json_in_str	shell.py	/^def parse_json_in_str(data):$/;"	f
parse_name	asyncdns.py	/^def parse_name(data, offset):$/;"	f
parse_record	asyncdns.py	/^def parse_record(data, offset, question=False):$/;"	f
parse_response	asyncdns.py	/^def parse_response(data):$/;"	f
patch_socket	common.py	/^def patch_socket():$/;"	f
pkg_resources	shell.py	/^        import pkg_resources$/;"	i
plain	obfs.py	/^from shadowsocks.obfsplugin import plain, http_simple, obfs_tls, verify, auth$/;"	i
plain	obfsplugin/auth.py	/^from shadowsocks.obfsplugin import plain$/;"	i
plain	obfsplugin/http_simple.py	/^from shadowsocks.obfsplugin import plain$/;"	i
plain	obfsplugin/obfs_tls.py	/^from shadowsocks.obfsplugin import plain$/;"	i
plain	obfsplugin/plain.py	/^class plain(object):$/;"	c
plain	obfsplugin/verify.py	/^from shadowsocks.obfsplugin import plain$/;"	i
platform	tcprelay.py	/^import platform$/;"	i
poll	eventloop.py	/^    def poll(self, timeout):$/;"	m	class:KqueueLoop
poll	eventloop.py	/^    def poll(self, timeout):$/;"	m	class:SelectLoop
poll	eventloop.py	/^    def poll(self, timeout=None):$/;"	m	class:EventLoop
pop	ordereddict.py	/^    def pop(self, key, default=__marker):$/;"	m	class:OrderedDict
popitem	ordereddict.py	/^    def popitem(self, last=True):$/;"	m	class:OrderedDict
pre_parse_header	common.py	/^def pre_parse_header(data):$/;"	f
pre_parse_header	tcprelay.py	/^from shadowsocks.common import pre_parse_header, parse_header$/;"	i
pre_parse_header	udprelay.py	/^from shadowsocks.common import pre_parse_header, parse_header, pack_addr$/;"	i
print_exception	shell.py	/^def print_exception(e):$/;"	f
print_function	__init__.py	/^    with_statement$/;"	i
print_function	asyncdns.py	/^    with_statement$/;"	i
print_function	common.py	/^    with_statement$/;"	i
print_function	crypto/__init__.py	/^    with_statement$/;"	i
print_function	crypto/ctypes_libsodium.py	/^    with_statement$/;"	i
print_function	crypto/ctypes_openssl.py	/^    with_statement$/;"	i
print_function	crypto/openssl.py	/^    with_statement$/;"	i
print_function	crypto/rc4_md5.py	/^    with_statement$/;"	i
print_function	crypto/sodium.py	/^    with_statement$/;"	i
print_function	crypto/table.py	/^    with_statement$/;"	i
print_function	crypto/util.py	/^    with_statement$/;"	i
print_function	daemon.py	/^    with_statement$/;"	i
print_function	encrypt.py	/^    with_statement$/;"	i
print_function	encrypt_test.py	/^    with_statement$/;"	i
print_function	eventloop.py	/^    with_statement$/;"	i
print_function	local.py	/^    with_statement$/;"	i
print_function	lru_cache.py	/^    with_statement$/;"	i
print_function	manager.py	/^    with_statement$/;"	i
print_function	obfs.py	/^    with_statement$/;"	i
print_function	obfsplugin/__init__.py	/^    with_statement$/;"	i
print_function	obfsplugin/auth.py	/^    with_statement$/;"	i
print_function	obfsplugin/http_simple.py	/^    with_statement$/;"	i
print_function	obfsplugin/obfs_tls.py	/^    with_statement$/;"	i
print_function	obfsplugin/plain.py	/^    with_statement$/;"	i
print_function	obfsplugin/verify.py	/^    with_statement$/;"	i
print_function	server.py	/^    with_statement$/;"	i
print_function	shell.py	/^    with_statement$/;"	i
print_function	tcprelay.py	/^    with_statement$/;"	i
print_function	udprelay.py	/^    with_statement$/;"	i
print_help	shell.py	/^def print_help(is_local):$/;"	f
print_local_help	shell.py	/^def print_local_help():$/;"	f
print_server_help	shell.py	/^def print_server_help():$/;"	f
print_shadowsocks	shell.py	/^def print_shadowsocks():$/;"	f
pwd	daemon.py	/^    import pwd$/;"	i
rand_bytes	crypto/openssl.py	/^def rand_bytes(length):$/;"	f
random	crypto/util.py	/^    import random$/;"	i
random	obfsplugin/auth.py	/^import random$/;"	i
random	obfsplugin/http_simple.py	/^import random$/;"	i
random	obfsplugin/obfs_tls.py	/^import random$/;"	i
random	obfsplugin/verify.py	/^import random$/;"	i
random	tcprelay.py	/^import random$/;"	i
random	udprelay.py	/^import random$/;"	i
random_head	obfsplugin/http_simple.py	/^class random_head(plain.plain):$/;"	c
random_string	encrypt.py	/^def random_string(length):$/;"	f
rc4_md5	encrypt.py	/^from shadowsocks.crypto import rc4_md5, openssl, sodium, table$/;"	i
rc4_md5	encrypt_test.py	/^from shadowsocks.crypto import rc4_md5$/;"	i
re	asyncdns.py	/^import re$/;"	i
re	common.py	/^        import re$/;"	i
re_enable	obfsplugin/auth.py	/^    def re_enable(self, connection_id):$/;"	m	class:client_queue
register	eventloop.py	/^    def register(self, fd, mode):$/;"	m	class:KqueueLoop
register	eventloop.py	/^    def register(self, fd, mode):$/;"	m	class:SelectLoop
remote_address	tcprelay.py	/^    def remote_address(self):$/;"	m	class:TCPRelayHandler
remote_address	udprelay.py	/^    def remote_address(self):$/;"	m	class:TCPRelayHandler
remove	eventloop.py	/^    def remove(self, f):$/;"	m	class:EventLoop
remove_callback	asyncdns.py	/^    def remove_callback(self, callback):$/;"	m	class:DNSResolver
remove_handler	tcprelay.py	/^    def remove_handler(self, handler):$/;"	m	class:TCPRelay
remove_handler	udprelay.py	/^    def remove_handler(self, handler):$/;"	m	class:UDPRelay
remove_periodic	eventloop.py	/^    def remove_periodic(self, callback):$/;"	m	class:EventLoop
remove_port	manager.py	/^    def remove_port(self, config):$/;"	m	class:Manager
resolve	asyncdns.py	/^    def resolve(self, hostname, callback):$/;"	m	class:DNSResolver
rnd_data	obfsplugin/auth.py	/^    def rnd_data(self, buf_size):$/;"	m	class:auth_sha1_v2
rnd_data	obfsplugin/auth.py	/^    def rnd_data(self, buf_size):$/;"	m	class:auth_sha1_v3
run	encrypt_test.py	/^def run(func):$/;"	f
run	eventloop.py	/^    def run(self):$/;"	m	class:EventLoop
run	manager.py	/^    def run(self):$/;"	m	class:Manager
run	manager.py	/^def run(config):$/;"	f
run_cipher	crypto/util.py	/^def run_cipher(cipher, decipher):$/;"	f
run_method	crypto/ctypes_openssl.py	/^def run_method(method):$/;"	f
run_method	crypto/openssl.py	/^def run_method(method):$/;"	f
run_n	encrypt_test.py	/^def run_n(func, name):$/;"	f
run_server	manager.py	/^    def run_server():$/;"	f	function:test
run_server	server.py	/^    def run_server():$/;"	f	function:main
select	eventloop.py	/^import select$/;"	i
send_data	manager.py	/^        def send_data(data_dict):$/;"	f	function:Manager.handle_periodic
server_decode	obfs.py	/^    def server_decode(self, buf):$/;"	m	class:obfs
server_decode	obfsplugin/auth.py	/^    def server_decode(self, buf):$/;"	m	class:verify_base
server_decode	obfsplugin/http_simple.py	/^    def server_decode(self, buf):$/;"	m	class:http_simple
server_decode	obfsplugin/http_simple.py	/^    def server_decode(self, buf):$/;"	m	class:random_head
server_decode	obfsplugin/obfs_tls.py	/^    def server_decode(self, buf):$/;"	m	class:tls_ticket_auth
server_decode	obfsplugin/plain.py	/^    def server_decode(self, buf):$/;"	m	class:plain
server_decode	obfsplugin/verify.py	/^    def server_decode(self, buf):$/;"	m	class:verify_base
server_encode	obfs.py	/^    def server_encode(self, buf):$/;"	m	class:obfs
server_encode	obfsplugin/auth.py	/^    def server_encode(self, buf):$/;"	m	class:verify_base
server_encode	obfsplugin/http_simple.py	/^    def server_encode(self, buf):$/;"	m	class:http_simple
server_encode	obfsplugin/http_simple.py	/^    def server_encode(self, buf):$/;"	m	class:random_head
server_encode	obfsplugin/obfs_tls.py	/^    def server_encode(self, buf):$/;"	m	class:tls_ticket_auth
server_encode	obfsplugin/plain.py	/^    def server_encode(self, buf):$/;"	m	class:plain
server_encode	obfsplugin/verify.py	/^    def server_encode(self, buf):$/;"	m	class:verify_base
server_info	obfs.py	/^class server_info(object):$/;"	c
server_post_decrypt	obfs.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:obfs
server_post_decrypt	obfsplugin/auth.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:auth_sha1
server_post_decrypt	obfsplugin/auth.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:auth_sha1_v2
server_post_decrypt	obfsplugin/auth.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:auth_sha1_v3
server_post_decrypt	obfsplugin/plain.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:plain
server_post_decrypt	obfsplugin/verify.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:verify_deflate
server_post_decrypt	obfsplugin/verify.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:verify_sha1
server_post_decrypt	obfsplugin/verify.py	/^    def server_post_decrypt(self, buf):$/;"	m	class:verify_simple
server_pre_encrypt	obfs.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:obfs
server_pre_encrypt	obfsplugin/auth.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:auth_sha1
server_pre_encrypt	obfsplugin/auth.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:auth_sha1_v2
server_pre_encrypt	obfsplugin/auth.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:auth_sha1_v3
server_pre_encrypt	obfsplugin/plain.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:plain
server_pre_encrypt	obfsplugin/verify.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:verify_deflate
server_pre_encrypt	obfsplugin/verify.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:verify_sha1
server_pre_encrypt	obfsplugin/verify.py	/^    def server_pre_encrypt(self, buf):$/;"	m	class:verify_simple
server_udp_post_decrypt	obfs.py	/^    def server_udp_post_decrypt(self, buf):$/;"	m	class:obfs
server_udp_post_decrypt	obfsplugin/plain.py	/^    def server_udp_post_decrypt(self, buf):$/;"	m	class:plain
server_udp_post_decrypt	obfsplugin/verify.py	/^    def server_udp_post_decrypt(self, buf):$/;"	m	class:verify_sha1
server_udp_pre_encrypt	obfs.py	/^    def server_udp_pre_encrypt(self, buf):$/;"	m	class:obfs
server_udp_pre_encrypt	obfsplugin/plain.py	/^    def server_udp_pre_encrypt(self, buf):$/;"	m	class:plain
set_end	udprelay.py	/^    def set_end(self, end_id):$/;"	m	class:RecvQueue
set_finish	udprelay.py	/^    def set_finish(self, begin_id, done_list):$/;"	m	class:SendingQueue
set_max_client	obfsplugin/auth.py	/^    def set_max_client(self, max_client):$/;"	m	class:obfs_auth_data
set_max_client	obfsplugin/auth.py	/^    def set_max_client(self, max_client):$/;"	m	class:obfs_auth_v2_data
set_server_info	obfs.py	/^    def set_server_info(self, server_info):$/;"	m	class:obfs
set_server_info	obfsplugin/auth.py	/^    def set_server_info(self, server_info):$/;"	m	class:auth_sha1
set_server_info	obfsplugin/auth.py	/^    def set_server_info(self, server_info):$/;"	m	class:auth_sha1_v2
set_server_info	obfsplugin/auth.py	/^    def set_server_info(self, server_info):$/;"	m	class:auth_sha1_v3
set_server_info	obfsplugin/auth.py	/^    def set_server_info(self, server_info):$/;"	m	class:verify_base
set_server_info	obfsplugin/plain.py	/^    def set_server_info(self, server_info):$/;"	m	class:plain
set_server_info	obfsplugin/verify.py	/^    def set_server_info(self, server_info):$/;"	m	class:verify_base
set_user	daemon.py	/^def set_user(username):$/;"	f
setdefault	ordereddict.py	/^    def setdefault(self, key, default=None):$/;"	m	class:OrderedDict
shadowsocks	obfsplugin/auth.py	/^import shadowsocks$/;"	i
shadowsocks	obfsplugin/verify.py	/^import shadowsocks$/;"	i
shell	asyncdns.py	/^from shadowsocks import common, lru_cache, eventloop, shell$/;"	i
shell	daemon.py	/^from shadowsocks import common, shell$/;"	i
shell	eventloop.py	/^from shadowsocks import shell$/;"	i
shell	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
shell	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
shell	server.py	/^    asyncdns, manager$/;"	i
shell	tcprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, shell, common$/;"	i
shell	udprelay.py	/^from shadowsocks import encrypt, obfs, eventloop, lru_cache, common, shell$/;"	i
signal	daemon.py	/^import signal$/;"	i
signal	local.py	/^import signal$/;"	i
signal	server.py	/^import signal$/;"	i
size	udprelay.py	/^    def size(self):$/;"	m	class:SendingQueue
sni	obfsplugin/obfs_tls.py	/^    def sni(self, url):$/;"	m	class:tls_ticket_auth
socket	asyncdns.py	/^import socket$/;"	i
socket	common.py	/^import socket$/;"	i
socket	eventloop.py	/^import socket$/;"	i
socket	manager.py	/^import socket$/;"	i
socket	tcprelay.py	/^import socket$/;"	i
socket	udprelay.py	/^import socket$/;"	i
sodium	encrypt.py	/^from shadowsocks.crypto import rc4_md5, openssl, sodium, table$/;"	i
sodium	encrypt_test.py	/^from shadowsocks.crypto import sodium$/;"	i
stage	tcprelay.py	/^    def stage(self):$/;"	m	class:TCPRelayHandler
stat	daemon.py	/^    import stat$/;"	i
stat_add	tcprelay.py	/^    def stat_add(self, local_addr, val):$/;"	m	class:TCPRelay
stat_callback	manager.py	/^    def stat_callback(self, port, data_len):$/;"	m	class:Manager
stop	eventloop.py	/^    def stop(self):$/;"	m	class:EventLoop
string	crypto/table.py	/^import string$/;"	i
string	obfsplugin/obfs_tls.py	/^import string$/;"	i
struct	asyncdns.py	/^import struct$/;"	i
struct	common.py	/^import struct$/;"	i
struct	crypto/table.py	/^import struct$/;"	i
struct	manager.py	/^    import struct$/;"	i
struct	obfsplugin/auth.py	/^import struct$/;"	i
struct	obfsplugin/http_simple.py	/^import struct$/;"	i
struct	obfsplugin/obfs_tls.py	/^import struct$/;"	i
struct	obfsplugin/verify.py	/^import struct$/;"	i
struct	tcprelay.py	/^import struct$/;"	i
struct	udprelay.py	/^import struct$/;"	i
sweep	lru_cache.py	/^    def sweep(self):$/;"	m	class:LRUCache
sweep_timeout	udprelay.py	/^    def sweep_timeout(self):$/;"	m	class:TCPRelayHandler
sys	asyncdns.py	/^    import sys$/;"	i
sys	daemon.py	/^import sys$/;"	i
sys	encrypt.py	/^import sys$/;"	i
sys	encrypt_test.py	/^import sys$/;"	i
sys	local.py	/^import sys$/;"	i
sys	lru_cache.py	/^    import os, sys, inspect$/;"	i
sys	obfs.py	/^import sys$/;"	i
sys	obfsplugin/auth.py	/^import sys$/;"	i
sys	obfsplugin/http_simple.py	/^import sys$/;"	i
sys	obfsplugin/obfs_tls.py	/^import sys$/;"	i
sys	obfsplugin/plain.py	/^import sys$/;"	i
sys	obfsplugin/verify.py	/^import sys$/;"	i
sys	server.py	/^import sys$/;"	i
sys	shell.py	/^import sys$/;"	i
table	encrypt.py	/^from shadowsocks.crypto import rc4_md5, openssl, sodium, table$/;"	i
table	encrypt_test.py	/^from shadowsocks.crypto import table$/;"	i
tcprelay	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
tcprelay	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
tcprelay	server.py	/^    asyncdns, manager$/;"	i
test	asyncdns.py	/^def test():$/;"	f
test	crypto/rc4_md5.py	/^def test():$/;"	f
test	lru_cache.py	/^def test():$/;"	f
test	manager.py	/^def test():$/;"	f
test_aes_128_cfb	crypto/ctypes_openssl.py	/^def test_aes_128_cfb():$/;"	f
test_aes_128_cfb	crypto/openssl.py	/^def test_aes_128_cfb():$/;"	f
test_aes_128_cfb8	crypto/ctypes_openssl.py	/^def test_aes_128_cfb8():$/;"	f
test_aes_128_cfb8	crypto/openssl.py	/^def test_aes_128_cfb8():$/;"	f
test_aes_256_cfb	crypto/ctypes_openssl.py	/^def test_aes_256_cfb():$/;"	f
test_aes_256_cfb	crypto/openssl.py	/^def test_aes_256_cfb():$/;"	f
test_aes_256_ctr	crypto/ctypes_openssl.py	/^def test_aes_256_ctr():$/;"	f
test_aes_256_ctr	crypto/openssl.py	/^def test_aes_256_ctr():$/;"	f
test_aes_256_ofb	crypto/ctypes_openssl.py	/^def test_aes_256_ofb():$/;"	f
test_aes_256_ofb	crypto/openssl.py	/^def test_aes_256_ofb():$/;"	f
test_bf_cfb	crypto/ctypes_openssl.py	/^def test_bf_cfb():$/;"	f
test_bf_cfb	crypto/openssl.py	/^def test_bf_cfb():$/;"	f
test_chacha20	crypto/ctypes_libsodium.py	/^def test_chacha20():$/;"	f
test_chacha20	crypto/sodium.py	/^def test_chacha20():$/;"	f
test_chacha20_ietf	crypto/sodium.py	/^def test_chacha20_ietf():$/;"	f
test_encrypt_all	encrypt.py	/^def test_encrypt_all():$/;"	f
test_encryption	crypto/table.py	/^def test_encryption():$/;"	f
test_encryptor	encrypt.py	/^def test_encryptor():$/;"	f
test_find_library	crypto/util.py	/^def test_find_library():$/;"	f
test_inet_conv	common.py	/^def test_inet_conv():$/;"	f
test_ip_network	common.py	/^def test_ip_network():$/;"	f
test_pack_header	common.py	/^def test_pack_header():$/;"	f
test_parse_header	common.py	/^def test_parse_header():$/;"	f
test_rc4	crypto/ctypes_openssl.py	/^def test_rc4():$/;"	f
test_rc4	crypto/openssl.py	/^def test_rc4():$/;"	f
test_salsa20	crypto/ctypes_libsodium.py	/^def test_salsa20():$/;"	f
test_salsa20	crypto/sodium.py	/^def test_salsa20():$/;"	f
test_table_result	crypto/table.py	/^def test_table_result():$/;"	f
threading	manager.py	/^    import threading$/;"	i
time	crypto/util.py	/^    import time$/;"	i
time	daemon.py	/^import time$/;"	i
time	eventloop.py	/^import time$/;"	i
time	lru_cache.py	/^import time$/;"	i
time	manager.py	/^    import time$/;"	i
time	obfsplugin/auth.py	/^import time$/;"	i
time	obfsplugin/obfs_tls.py	/^import time$/;"	i
time	obfsplugin/verify.py	/^import time$/;"	i
time	tcprelay.py	/^import time$/;"	i
time	udprelay.py	/^import time$/;"	i
tls_ticket_auth	obfsplugin/obfs_tls.py	/^class tls_ticket_auth(plain.plain):$/;"	c
to_bytes	common.py	/^def to_bytes(s):$/;"	f
to_bytes	obfsplugin/auth.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_bytes	obfsplugin/http_simple.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_bytes	obfsplugin/obfs_tls.py	/^from shadowsocks.common import to_bytes, to_str, ord$/;"	i
to_bytes	obfsplugin/verify.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_bytes	shell.py	/^from shadowsocks.common import to_bytes, to_str, IPNetwork, PortRange$/;"	i
to_str	common.py	/^def to_str(s):$/;"	f
to_str	obfsplugin/auth.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_str	obfsplugin/http_simple.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_str	obfsplugin/obfs_tls.py	/^from shadowsocks.common import to_bytes, to_str, ord$/;"	i
to_str	obfsplugin/verify.py	/^from shadowsocks.common import to_bytes, to_str, ord, chr$/;"	i
to_str	shell.py	/^from shadowsocks.common import to_bytes, to_str, IPNetwork, PortRange$/;"	i
traceback	eventloop.py	/^                    import traceback$/;"	i
traceback	manager.py	/^import traceback$/;"	i
traceback	shell.py	/^        import traceback$/;"	i
traceback	tcprelay.py	/^import traceback$/;"	i
traceback	udprelay.py	/^import traceback$/;"	i
translate	crypto/table.py	/^    translate = bytes.translate$/;"	v
translate	crypto/table.py	/^    translate = string.translate$/;"	v
try_cipher	encrypt.py	/^def try_cipher(key, method=None):$/;"	f
udprelay	local.py	/^from shadowsocks import shell, daemon, eventloop, tcprelay, udprelay, asyncdns$/;"	i
udprelay	manager.py	/^from shadowsocks import common, eventloop, tcprelay, udprelay, asyncdns, shell$/;"	i
udprelay	server.py	/^    asyncdns, manager$/;"	i
unregister	eventloop.py	/^    def unregister(self, fd):$/;"	m	class:KqueueLoop
unregister	eventloop.py	/^    def unregister(self, fd):$/;"	m	class:SelectLoop
update	crypto/ctypes_libsodium.py	/^    def update(self, data):$/;"	m	class:Salsa20Crypto
update	crypto/ctypes_openssl.py	/^    def update(self, data):$/;"	m	class:CtypesCrypto
update	crypto/openssl.py	/^    def update(self, data):$/;"	m	class:OpenSSLCrypto
update	crypto/sodium.py	/^    def update(self, data):$/;"	m	class:SodiumCrypto
update	crypto/table.py	/^    def update(self, data):$/;"	m	class:NoneCipher
update	crypto/table.py	/^    def update(self, data):$/;"	m	class:TableCipher
update	obfsplugin/auth.py	/^    def update(self):$/;"	m	class:client_queue
update	obfsplugin/auth.py	/^    def update(self, client_id, connection_id):$/;"	m	class:obfs_auth_data
update	obfsplugin/auth.py	/^    def update(self, client_id, connection_id):$/;"	m	class:obfs_auth_v2_data
update	ordereddict.py	/^    update = collections.MutableMapping.update$/;"	v	class:OrderedDict
update_activity	tcprelay.py	/^    def update_activity(self, handler, data_len):$/;"	m	class:TCPRelay
update_activity	udprelay.py	/^    def update_activity(self, handler):$/;"	m	class:UDPRelay
update_stat	tcprelay.py	/^    def update_stat(self, port, stat_dict, val):$/;"	m	class:TCPRelay
urandom	crypto/util.py	/^    from os import urandom$/;"	i
urandom	encrypt.py	/^    from os import urandom$/;"	i
util	crypto/ctypes_libsodium.py	/^    from shadowsocks.crypto import util$/;"	i
util	crypto/ctypes_openssl.py	/^    from shadowsocks.crypto import util$/;"	i
util	crypto/openssl.py	/^from shadowsocks.crypto import util$/;"	i
util	crypto/rc4_md5.py	/^    from shadowsocks.crypto import util$/;"	i
util	crypto/sodium.py	/^from shadowsocks.crypto import util$/;"	i
util	crypto/table.py	/^    from shadowsocks.crypto import util$/;"	i
util	crypto/util.py	/^    import ctypes.util$/;"	i
values	ordereddict.py	/^    def values(self):$/;"	m	class:OrderedDict
verbose	shell.py	/^verbose = 0$/;"	v
verify	obfs.py	/^from shadowsocks.obfsplugin import plain, http_simple, obfs_tls, verify, auth$/;"	i
verify_base	obfsplugin/auth.py	/^class verify_base(plain.plain):$/;"	c
verify_base	obfsplugin/verify.py	/^class verify_base(plain.plain):$/;"	c
verify_deflate	obfsplugin/verify.py	/^class verify_deflate(verify_base):$/;"	c
verify_sha1	obfsplugin/verify.py	/^class verify_sha1(verify_base):$/;"	c
verify_simple	obfsplugin/verify.py	/^class verify_simple(verify_base):$/;"	c
viewitems	ordereddict.py	/^    def viewitems(self):$/;"	m	class:OrderedDict
viewkeys	ordereddict.py	/^    def viewkeys(self):$/;"	m	class:OrderedDict
viewvalues	ordereddict.py	/^    def viewvalues(self):$/;"	m	class:OrderedDict
with_statement	__init__.py	/^    with_statement$/;"	i
with_statement	asyncdns.py	/^    with_statement$/;"	i
with_statement	common.py	/^    with_statement$/;"	i
with_statement	crypto/__init__.py	/^    with_statement$/;"	i
with_statement	crypto/ctypes_libsodium.py	/^    with_statement$/;"	i
with_statement	crypto/ctypes_openssl.py	/^    with_statement$/;"	i
with_statement	crypto/openssl.py	/^    with_statement$/;"	i
with_statement	crypto/rc4_md5.py	/^    with_statement$/;"	i
with_statement	crypto/sodium.py	/^    with_statement$/;"	i
with_statement	crypto/table.py	/^    with_statement$/;"	i
with_statement	crypto/util.py	/^    with_statement$/;"	i
with_statement	daemon.py	/^    with_statement$/;"	i
with_statement	encrypt.py	/^    with_statement$/;"	i
with_statement	encrypt_test.py	/^    with_statement$/;"	i
with_statement	eventloop.py	/^    with_statement$/;"	i
with_statement	local.py	/^    with_statement$/;"	i
with_statement	lru_cache.py	/^    with_statement$/;"	i
with_statement	manager.py	/^    with_statement$/;"	i
with_statement	obfs.py	/^    with_statement$/;"	i
with_statement	obfsplugin/__init__.py	/^    with_statement$/;"	i
with_statement	obfsplugin/auth.py	/^    with_statement$/;"	i
with_statement	obfsplugin/http_simple.py	/^    with_statement$/;"	i
with_statement	obfsplugin/obfs_tls.py	/^    with_statement$/;"	i
with_statement	obfsplugin/plain.py	/^    with_statement$/;"	i
with_statement	obfsplugin/verify.py	/^    with_statement$/;"	i
with_statement	server.py	/^    with_statement$/;"	i
with_statement	shell.py	/^    with_statement$/;"	i
with_statement	tcprelay.py	/^    with_statement$/;"	i
with_statement	udprelay.py	/^    with_statement$/;"	i
write_pid_file	daemon.py	/^def write_pid_file(pid_file, pid):$/;"	f
write_to_server_socket	udprelay.py	/^    def write_to_server_socket(self, data, addr):$/;"	m	class:UDPRelay
zlib	obfsplugin/auth.py	/^import zlib$/;"	i
zlib	obfsplugin/verify.py	/^import zlib$/;"	i
