#!/usr/bin/env bash


#Date: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT

cgi_root=$(dirname `realpath $0`)
PARAMETERS=
WEBROOT="http://${SERVER_ADDR}:${SERVER_PORT}/tasks"
tasks_root=$(cd $cgi_root/../tasks; pwd)

cookie_root=/tmp/cookies
[ -d $cookie_root ] || mkdir -p $cookie_root

source $cgi_root/db/db.inc
source $tasks_root/lib/load_user_main_page.inc
source $tasks_root/lib/http.inc


update_env()
{
	local userinfo="$1"

	echo USER_ID=`echo $userinfo | cut -d\| -f1`
	echo USER_NAME=`echo $userinfo | cut -d\| -f2`
	echo USER_PASS=`echo $userinfo | cut -d\| -f3`
	echo USER_EMAIL=`echo $userinfo | cut -d\| -f4`
	echo USER_TELPHONE=`echo $userinfo | cut -d\| -f5`
	echo USER_STATE=`echo $userinfo | cut -d\| -f6`
	echo USER_ISADMIN=`echo $userinfo | cut -d\| -f7`
	echo USER_ENABLE_NOTIFY=`echo $userinfo | cut -d\| -f8`
	echo USER_COOKIE_EXPIRE=`echo $userinfo | cut -d\| -f9`
}


# cookie userinfo
build_cookie()
{
	update_env "$2" >$cookie_root/$1 || return 1

	. $cookie_root/$1
}

encrypt_password()
{
	echo -n "$1" | md5sum -| awk '{print $1}'
}

#key 
get_params()
{
	[ -z "$PARAMETERS" ] && return 1

	echo $PARAMETERS |
	awk -v key="$1" -F\& '{
		for ( i = 1; i <= NF; i++) {
			split($i, ary, "=")
			if (ary[1] == key) {
				printf("%s\n", ary[2])
			}
		}
	}' |
	$cgi_root/http_url_decode.py
}

prepare_params()
{
	local request
	[ "${REQUEST_METHOD}" == "POST" ] && {
		request=`$cgi_root/http_read_post_text.py` || return 1
	} || {
		request=${QUERY_STRING}
	}

	export PARAMETERS="$request"

	cookie=${HTTP_COOKIE}
	[ -n "$cookie" ] && eval "$cookie"  && export USER_COOKIE=$ticket

	log_trace "REQUEST: COOKIE: ${USER_COOKIE}, params: $PARAMETERS"
}

new_ticket()
{
	dd if=/dev/random of=/dev/stdout bs=16 count=2 2>/dev/null| md5sum | awk '{print $1}'
}

# next N seconds
next_n_seconds() {
	local sec=${1:600}
	timeout=$(expr `date +%s` + $sec)
}

# to
build_expired()
{
	local to=$1

	# 1hr
	[ -z "$to" ] && to=`next_n_seconds 3600`
	eval "date --date='@$to' -R | sed 's/+.*$/GMT/g'"
}


do_test() 
{
	ticket=`new_ticket`
	to="`build_expired`"
	echo -en "Set-Cookie: ticket=$ticket; Expires=$to\r\n"
	echo -en "Content-Type: text/html\r\n\r\n"

	echo "$ticket"
	echo $to
	echo $0, $*
	env
}

logfile=/tmp/web.log

log_trace()
{
	echo "`date`----- $*" >>$logfile
}

print_404_not_found()
{
        echo -en "Status: 404 Not Found\r\n"
        echo -en "Content-Type: text/html\r\n\r\n"
        echo -en "<html> <body> <h1 align="center"> Opps!!! 404: Not Found </h1> </body> </html>"
}

# url
do_redirect()
{
	local url=$1

	[ -z "$url" ] && url="$WEBROOT/login.html"

	log_trace "REDIRECT TO: $url"
	echo -en "Status: 302 Moved Temporarily\r\n"
	echo -en "Location: $url\r\n"
	echo -en "Content-Type: text/html\r\n\r\n"
}

do_redirect_login ()
{
	do_redirect "$WEBROOT/login.html"
}

load_user_info()
{
	[ -f $cookie_root/$1 ] || return 1
	. $cookie_root/$1 2>/dev/null || return 1

	[ -n "${USER_ID}" ] || return 1

	# maybe get userinfo for one more time, or just update user info here
	# connect to db
	# get expired info
}

cookie_expired()
{
	[ -z "${USER_COOKIE_EXPIRE}" -o  `date +%s` -ge $USER_COOKIE_EXPIRE ] && return 0 || return 1
}

cmd_user()
{
	local uid action

	action="$1"

	[ 1 -eq ${USER_ISADMIN} ] || {
		print_500_error "Permission Denied!!!" 
		return 1 
	}

	uid=`get_params userid`

	[ -z "$uid" ] && {
		print_500_error "Invalid UserID"
		return 1
	}

	db_set_$1 $uid
}

cmd_delete_user()
{
	local uid

	[ 1 -eq ${USER_ISADMIN} ] || {
		print_500_error "Permission Denied!!!" 
		return 1 
	}

	uid=`get_params userid`

	[ -z "$uid" ] && {
		print_500_error "Invalid UserID"
		return 1
	}

	db_delete_user_with_id $uid
}


do_main()
{
	[ -z ${USER_COOKIE} ] && {
		do_redirect_login
		return 0
	}

	load_user_info ${USER_COOKIE} || {
		log_trace "load user info failed for $USER_COOKIE"
		do_redirect_login
		return 0
	}

	cookie_expired && { 
		log_trace "cookied expired $USER_COOKIE_EXPIRE"
		do_redirect_login
		return 0 
	}

	action=`get_params action`

	[ -z "$action" ] && do_load_user_main_page || {

		log_trace "user action: $action"

		case $action in 
		user_lock|user_unlock|user_delete)
			cmd_user $action
			;;
		group_create)
			do_load_page load_group_create && return 0
			;;
		esac
		do_redirect "$WEBROOT"
	}
}

do_login()
{
	local user pass

	user="`get_params username`"
	pass="`get_params password`"

	pass=`encrypt_password "$pass"`

	user_info=`get_user_by_user_pass $user $pass`
	[ -z "$user_info" ] && {
		# user login failed
		echo -en "Content-Type: text/html\r\n\r\n"

		cat <<EOF
<html> <head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"> </head> <body> <h1 align="center"> 错误，用户名或密码错误。请<a href="http://${SERVER_ADDR}:${SERVER_PORT}/tasks/login.html">重新登录</a>!!!  </h1> </body> </html>
EOF
		return 1
	}

	ticket="`new_ticket`"
	to="`next_n_seconds`"

	user_info=$user_info"|$to"

	echo -en "Set-Cookie: ticket=$ticket; Expires=$to\r\n"

	build_cookie "$ticket" "$user_info"

	do_load_user_main_page
}

do_register()
{
	local user pass email tel

	user="`get_params username`"
	pass="`get_params password`"
	email="`get_params email`"
	tel="`get_params telephone`"

	log_trace "$user, $pass, $email, $tel"

	[ -z "$user" -o -z "$pass" -o -z "$email" ] && {
		print_404_not_found
		return 1
	}

	# update password with md5 hash
	pass=`encrypt_password "$pass"`

	# check user's status
	# check email's status
	# check telephone status

	[ -n "`get_user_by_name $user`" ] && {
		log_trace "username already exist, $user"

		echo -en "Content-Type: text/html\r\n\r\n"
		cat $tasks_root/register.html | sed '/<script/a alert("用户名已经存在");' 
		return 1
	}

	[ -n "`get_user_by_email $email`" ] && {
		# email already exist
		log_trace "email already exist, $email"

		echo -en "Content-Type: text/html\r\n\r\n"
		cat $tasks_root/register.html | sed '/<script/a alert("用户邮箱已经存在");' 
		return 1
	}

	[ -n "$tel" -a -n "`get_user_by_telephone $tel`" ] && {
		# telephone number already binded
		log_trace "telephone already exist, $tel"

		echo -en "Content-Type: text/html\r\n\r\n"
		cat $tasks_root/register.html | sed '/<script/a alert("用户手机已经存在");' 
		return 1
	}

	log_trace "do add user $user, $pass, $email, $tel"

	add_user $user $pass $email $tel && {
		log_trace "add user success $user, $pass, $email, $tel"
		echo -en "Content-Type: text/html\r\n\r\n"

		cat <<EOF
<html> <head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"> </head> <body> <h1 align="center"> 成功，请 <a href="http://${SERVER_ADDR}:${SERVER_PORT}/tasks/login.html">登录</a>!!!  </h1> </body> </html>
EOF
	} || {
		log_trace "add user failed $user, $pass, $email, $tel"
		echo -en "Content-Type: text/html\r\n\r\n"
		cat $tasks_root/register.html | sed '/<script/a alert("添加用户失败");' 
	}
}

do_reset()
{
	echo -en "Content-Type: text/html\r\n\r\n"
	cat << EOF
<html> 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body> <h1 align="center"> Success !!!</h1> 
`reset_db`
</body> </html>
EOF
}

do_logout() {
	[ -n "$USER_COOKIE" ] && rm -f $cookie_root/$USER_COOKIE 2>/dev/null
	do_redirect_login
}


main() {
	CMD=`basename $0`

	echo -ne "\n`date`--------- $cmd ----${REMOTE_ADDR}:${REMOTE_PORT} start ($$)\n" >>$logfile
	case $CMD in
	task_main)
		prepare_params
		do_main
		;;

	login)
		prepare_params
		do_login
		;;

	register)
		prepare_params
		do_register
		;;

	logout)
		prepare_params
		do_logout
		;;

	install|init|reset|restore)
		do_reset
		;;
	*)
		print_404_not_found
		;;
	esac

	echo -ne "\n`date`--------- $cmd ----${REMOTE_ADDR}:${REMOTE_PORT} end ($$)\n" >>$logfile

	return $?
}

main
exit $?
