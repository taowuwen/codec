cscope 15 $HOME/company/ems_client -q 0000003737 0000740062
	@inc/ems.h

3 #i‚de‡
EMS_NET_HEADER___


4 
	#EMS_NET_HEADER___


	)

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<˘y≥.h
>

11 #ifde‡
WIN32


12 
	~<wödows.h
>

13 
	~<sys/ty≥s.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<sys/un.h
>

18 
	~<uni°d.h
>

19 
	~<√töë/ö.h
>

20 
	~<√töë/t˝.h
>

21 
	~<¨∑/öë.h
>

22 
	~<√tdb.h
>

23 
	~<¨∑/«me£r.h
>

24 
	~<ªsﬁv.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

30 
	~"ems_ty≥s.h
"

31 
	~"ems_°r.h
"

32 
	~"ems_queue.h
"

33 
	~"ems_utûs.h
"

34 
	~"ems_block.h
"

36 #ifde‡
WIN32


37 
	~"ems_gë›t.h
"

38 
	#gë›t
 
ems_gë›t


	)

41 
	#ems_mÆloc
 
MÆloc


	)

42 
	#ems_‰ì
 
Fªe


	)

43 
	#ems_°rdup
 
STRDup


	)

44 
	#ems_ªÆloc
 
RóŒoc


	)

45 
	#ems_memdup
 
MEMDup


	)

46 
	#ems_as£π
 
As£π


	)

47 
	#ems_vÆidblock
 
vÆidBlock


	)

50 #ifde‡
WIN32


51 
	#ems_¶ìp
(
x
Ë
	`SÀï
((x)*1000)

	)

53 
	#ems_¶ìp
 
¶ìp


	)

	@inc/ems_block.h

2 #i‚de‡
MEMERYMAP_BLOCK_INEWV


3 
	#MEMERYMAP_BLOCK_INEWV


	)

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

10 #ifde‡
WIN32


11 
	tu32_t
;

12 
	tu8block_t
;

13 
	#Sådup
 
_°rdup


	)

15 
	tu32_t
;

16 
	tu8block_t
;

17 
	#Sådup
 
°rdup


	)

20 #i‚de‡
YES


21 
	#YES
 1

	)

24 #i‚de‡
NO


25 
	#NO
 0

	)

28 #i‚de‡
ERR


29 
	#ERR
 -1

	)

32 #i‚de‡
OK


33 
	#OK
 0

	)

36 #ifde‡
WIN32


38 #i‡
deföed
 (
_MSC_VER
) && (_MSC_VER >= 1500)

39 
	#¢¥ötf
(
A
, 
B
, 
C
, ...Ë
	`_¢¥ötf_s
(A, B, 
_TRUNCATE
, C, ##
__VA_ARGS__
)

	)

40 
	#v¢¥ötf
(
A
,
B
,
C
,...Ë
	`_v¢¥ötf_s
(A, B, 
_TRUNCATE
, C, ##
__VA_ARGS__
)

	)

42 
	#¢¥ötf
 
_¢¥ötf


	)

43 
	#v¢¥ötf
 
_v¢¥ötf


	)

46 
	#°∫ˇ£cmp
 
_°∫icmp


	)

49 #ifde‡
DEBUG


51 
	#G¨bage
 0x´

	)

52 
m_as£π
(c⁄° *
func
, 
löe
);

53 *
m_mÆloc
(
u32_t
 
sz
, c⁄° *
Ê
, 
l
);

54 *
m_ªŒoc
(*
bOld
, 
u32_t
 
sz
, c⁄° *
Ê
, 
l
);

55 
m_‰ì
(*
b
, c⁄° *
Ê
, 
l
);

56 *
m_°rdup
(c⁄° *
s
, c⁄° *
Ê
, 
l
);

57 *
m_memdup
(
u8block_t
 *
b
, 
u32_t
 
Àn
, c⁄° *
Ê
, 
l
);

59 #i‚de‡
__FUNCTION__


60 
	#__FUNCTION__
 
__FILE__


	)

63 
	#MÆloc
(
A
Ë
	`m_mÆloc
(A, 
__FILE__
, 
__LINE__
)

	)

64 
	#RóŒoc
(
A
,
B
Ë
	`m_ªŒoc
((*)A, B, 
__FILE__
, 
__LINE__
)

	)

65 
	#Fªe
(
A
Ë
	`m_‰ì
((*)(A), 
__FILE__
, 
__LINE__
)

	)

66 
	#As£π
(
A
Ë\

	)

67 i‡(
	gA
) {} \

69 
m_as£π
(
__FUNCTION__
, 
__LINE__
);\

72 
	#STRDup
(
A
Ë
	`m_°rdup
(A, 
__FILE__
, 
__LINE__
)

	)

73 
	#MEMDup
(
A
, 
Lí
Ë
	`m_memdup
((
u8block_t
*)A, (
u32_t
ËLí, 
__FILE__
, 
__LINE__
)

	)

75 
m_vÆid_block
(*
b
, c⁄° *
func
, 
löe
);

76 
u32_t
 
sizeofBlock
(*
b
);

77 
£tRefBlock
(*
b
);

78 c⁄° *
descBlock
(*
b
);

80 
	#vÆidBlock
(
A
Ë
	`m_vÆid_block
((*)A, 
__FUNCTION__
, 
__LINE__
)

	)

84 
	#G¨bage
 0x00

	)

85 *
m_mÆloc
(
u32_t
 
sz
);

86 *
m_ªŒoc
(*
bOld
, 
u32_t
 
sz
);

87 
m_‰ì
(*
b
);

88 *
m_memdup
(
u8block_t
 *
b
, 
u32_t
 
Àn
);

90 
	#MÆloc
 
m_mÆloc


	)

91 
	#RóŒoc
(
A
,
B
Ë
	`m_ªŒoc
((*)A, B)

	)

92 
	#Fªe
(
A
Ë
	`m_‰ì
((*)A)

	)

93 
	#As£π
(
A
)

	)

95 
	#STRDup
 
Sådup


	)

96 
	#MEMDup
(
A
,
B
Ë
	`m_memdup
((
u8block_t
*)A, (
u32_t
)B)

	)

100 
°¨tMem‹yTø˚
(
u£_thªad_ß„
);

101 
checkMem‹yLók
();

102 
°›Mem‹yTø˚
();

	@inc/ems_getopt.h

1 #i‚de‡
EMS_GETOPT_H


2 
	#EMS_GETOPT_H


	)

5 #ifde‡
WIN32


6 
ems_gë›t
(
«rgc
, * c⁄° 
«rgv
[], c⁄° *
o°r
);

7 *
	g›èrg
;

	@inc/ems_queue.h

2 #i‚de‡
_EMS_QUEUE_H_INCLUDED_


3 
	#_EMS_QUEUE_H_INCLUDED_


	)

5 
	~<°ddef.h
>

8 
ems_queue_s
 
	tems_queue_t
, 
	tems_li°
, 
	tems_queue
;

10 
	sems_queue_s
 {

11 
ems_queue_t
 *
	m¥ev
;

12 
ems_queue_t
 *
	m√xt
;

16 
	#ems_queue_öô
(
q
) \

17 (
q
)->
¥ev
 = q; \

18 (
q
)->
√xt
 = 
	)
q

21 
	#ems_queue_em±y
(
h
) \

22 (
h
 =(h)->
¥ev
)

	)

25 
	#ems_queue_ö£π_hód
(
h
, 
x
) \

26 (
x
)->
√xt
 = (
h
)->next; \

27 (
x
)->
√xt
->
¥ev
 = x; \

28 (
x
)->
¥ev
 = 
h
; \

29 (
h
)->
√xt
 = 
x


	)

32 
	#ems_queue_ö£π_a·î
 
ems_queue_ö£π_hód


	)

35 
	#ems_queue_ö£π_èû
(
h
, 
x
) \

36 (
x
)->
¥ev
 = (
h
)->prev; \

37 (
x
)->
¥ev
->
√xt
 = x; \

38 (
x
)->
√xt
 = 
h
; \

39 (
h
)->
¥ev
 = 
x


	)

42 
	#ems_queue_hód
(
h
) \

43 (
h
)->
√xt


	)

46 
	#ems_queue_œ°
(
h
) \

47 (
h
)->
¥ev


	)

50 
	#ems_queue_£¡öñ
(
h
) \

51 (
h
)

	)

54 
	#ems_queue_√xt
(
q
) \

55 (
q
)->
√xt


	)

58 
	#ems_queue_¥ev
(
q
) \

59 (
q
)->
¥ev


	)

62 #i‡(
DEBUG
)

64 
	#ems_queue_ªmove
(
x
) \

65 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

66 (
x
)->
¥ev
->
√xt
 = (x)->next; \

67 (
x
)->
¥ev
 = 
NULL
; \

68 (
x
)->
√xt
 = 
NULL


	)

72 
	#ems_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

79 
	#ems_queue_•lô
(
h
, 
q
, 
n
) \

80 (
n
)->
¥ev
 = (
h
)->prev; \

81 (
n
)->
¥ev
->
√xt
 =Ç; \

82 (
n
)->
√xt
 = 
q
; \

83 (
h
)->
¥ev
 = (
q
)->prev; \

84 (
h
)->
¥ev
->
√xt
 = h; \

85 (
q
)->
¥ev
 = 
n
;

	)

88 
	#ems_queue_add
(
h
, 
n
) \

89 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

90 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

91 (
h
)->
¥ev
 = (
n
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h;

	)

95 
	#ems_queue_d©a
(
q
, 
ty≥
, 
lök
) \

96 (
ty≥
 *Ë((*Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

98 
	#ems_queue_Àn
(
li°
, 
Àn
) do{ \

99 
ems_queue
 *
p
; \

100 
Àn
 = 0; \

101 
	`ems_queue_f‹óch
(
li°
, 
p
Ë{ 
Àn
++; } \

102 } 0)

	)

105 
	#ems_c⁄èöî_of
 
ems_queue_d©a


	)

107 
	#ems_queue_˛ór
(
queue
, 
ty≥
, 
lök
, 
de°roy
) do { \

108 
ems_queue
 *
n
; \

109 !
	`ems_queue_em±y
(
queue
)) { \

110 
n
 = 
	`ems_queue_hód
(
queue
); \

111 
	`ems_queue_ªmove
(
n
); \

112 
	`de°roy
(
	`ems_queue_d©a
(
n
, 
ty≥
, 
lök
)); \

114 }0)

	)

117 
	#ems_queue_˛ón
(
queue
) do { \

118 
ems_queue
 *
n
; \

119 !
	`ems_queue_em±y
(
queue
)) { \

120 
n
 = 
	`ems_queue_hód
(
queue
); \

121 
	`ems_queue_ªmove
(
n
); \

123 } 0)

	)

129 
	#ems_queue_f‹óch
(
q
, 
n
) \

130 
n
 = 
	`ems_queue_hód
(
q
); \

131 
n
 !
	`ems_queue_£¡öñ
(
q
); \

132 
n
 = 
	`ems_queue_√xt
“))

	)

134 
	#ems_queue_f‹óch_ß„
(
q
, 
cur
, 
√xt
) \

135 
cur
 = 
	`ems_queue_hód
(
q
), 
√xt
 = 
	`ems_queue_√xt
(cur); \

136 
cur
 !
	`ems_queue_£¡öñ
(
q
); \

137 
cur
 = 
√xt
,Çexà
	`ems_queue_√xt
(cur))

	)

	@inc/ems_str.h

2 #i‚de‡
EMS_NET_STRING_CONTROL_HEADER___


3 
	#EMS_NET_STRING_CONTROL_HEADER___


	)

5 
	~"ems_ty≥s.h
"

8 
ems_uöt
 
	mÀn
;

9 
ems_uch¨
 *
	md©a
;

10 } 
	tems_°r
;

13 #ifde‡
WIN32


15 #i‡
deföed
 (
_MSC_VER
) && (_MSC_VER >= 1500)

16 
	#¢¥ötf
(
A
, 
B
, 
C
, ...Ë\

	)

17 
_¢¥ötf_s
(
A
, 
B
, 
_TRUNCATE
, 
C
, ##
__VA_ARGS__
)

18 
	#v¢¥ötf
(
A
,
B
,
C
,...Ë\

	)

19 
_v¢¥ötf_s
(
A
, 
B
, 
_TRUNCATE
, 
C
, ##
__VA_ARGS__
)

21 
	#¢¥ötf
 
_¢¥ötf


	)

22 
	#v¢¥ötf
 
_v¢¥ötf


	)

25 
	#°∫ˇ£cmp
 
_°∫icmp


	)

26 
	#°rˇ£cmp
 
_°ricmp


	)

30 
ems_öt
 
°r_£t
(
ems_°r
 *
°r
, 
ems_cch¨
 *
ãxt
);

31 
ems_void
 
°r_˛ór
(
ems_°r
 *
°r
);

33 
	#°r_unöô
 
°r_˛ór


	)

34 
	#°r_öô
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

35 
	#°r_ãxt
(
°r
Ë(
ems_cch¨
 *)((°r)->
d©a
)

	)

36 
	#°r_Àn
(
°r
Ë(°r)->
Àn


	)

38 
	#°r_˝y
(
d°
, 
§c
Ë
	`°r_£t
(d°, 
	`°r_ãxt
(§c))

	)

43 
	#ems_°rög
(
°r
Ë{ (°rË- 1, (
ems_uch¨
 *)°∏}

	)

44 
	#ems_nuŒ_°rög
 {0, 
NULL
}

	)

45 
	#ems_°r_£t
(
°r
, 
ãxt
Ë\

	)

46 (
	g°r
)->
	gÀn
 = 
°æí
(
ãxt
); (°r)->
	gd©a
 =(
ems_uch¨
 *)text

	@inc/ems_types.h

2 #i‚de‡
EMS_NET_TYPES_HEADERS___


3 
	#EMS_NET_TYPES_HEADERS___


	)

7 
	tems_öt
;

8 
	tems_uöt
;

9 
	tems_void
;

10 
	tems_uch¨
;

11 c⁄° 
	tems_cch¨
;

12 
	tems_ch¨
;

13 
	tems_ul⁄g
;

14 
	tems_l⁄g
;

15 
	tems_ush‹t
;

16 
	tems_sh‹t
;

20 
	#EMS_ERR_SUCCESS
 0

	)

21 
	#EMS_ERR_UNKNOWN
 -1

	)

22 
	#EMS_ERR_TICKET_EXIST
 -2

	)

23 
	#EMS_ERR_TICKET_NOT_EXIST
 -3

	)

24 
	#EMS_ERR_ACTIVE_CODD_ALREADY_REGISTED
 -4

	)

25 
	#EMS_ERR_CONNECT_TIMEOUT
 -5

	)

26 
	#EMS_ERR_WAIT_TIMEOUT
 -6

	)

27 
	#EMS_ERR_HANDLE_OVERTIME
 -7

	)

28 
	#EMS_ERR_INVALID_ARG
 -8

	)

32 
	#EMS_OK
 
EMS_ERR_SUCCESS


	)

33 
	#EMS_ERR
 
EMS_ERR_UNKNOWN


	)

35 
ems_cch¨
 *
ems_gëîrmsg
(
ems_öt
 
îr
);

36 
	#ems_œ°îr
(Ë
î∫o


	)

37 
	#ems_œ°îrmsg
(Ë
	`ems_gëîrmsg
(
	`ems_œ°îr
())

	)

	@inc/ems_utils.h

2 #i‚de‡ 
EMS_NETWORK_UTILS__HEADER___


3 
	#EMS_NETWORK_UTILS__HEADER___


	)

6 #ifde‡
WIN32


7 
	~<wödows.h
>

9 
	~<sys/time.h
>

10 
	~<uni°d.h
>

11 
	~<±hªad.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/waô.h
>

16 #ifde‡
WIN32


17 
DWORD
 
	tems_thªadid
;

18 
PVOID
 
	tems_thªad¨g
;

19 
DWORD
 
	tems_¥o˚ssid
;

21 
±hªad_t
 
	tems_thªadid
;

22 * 
	tems_thªad¨g
;

23 
	tems_¥o˚ssid
;

27 #ifde‡
WIN32


28 
	#ems_gëpid
(Ë(()
	`GëCuºítPro˚ssId
())

	)

29 
	#ems_gëtid
(Ë(()
	`GëCuºítThªadId
())

	)

30 #ñi‡
deföed
 (
__APPLE__
)

31 
	#ems_gëpid
(Ë(()
	`gëpid
())

	)

32 
	#ems_gëtid
(Ë()
	`±hªad_£lf
()

	)

34 
	#ems_gëpid
(Ë(()
	`gëpid
())

	)

35 
	#ems_gëtid
(Ë()
	`±hªad_£lf
()

	)

39 #ifde‡
WIN32


40 
	#ems_mtx
 
HANDLE


	)

42 
	#ems_mtx
 
±hªad_muãx_t


	)

45 #ifde‡
WIN32


46 
	#ems_mtx_lock
(
A
Ë
	`WaôF‹SögÀObje˘
(A, 
INFINITE
)

	)

47 
	#ems_mtx_u∆ock
(
A
Ë
	`Rñó£Muãx
(A)

	)

48 
	#ems_mtx_öô
(
A
Ë(A = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, NULL))

	)

49 
	#ems_mtx_de°roy
(
A
Ë
	`Clo£H™dÀ
(A)

	)

51 
	#ems_mtx_lock
(
A
Ë
	`±hªad_muãx_lock
(&A)

	)

52 
	#ems_mtx_u∆ock
(
A
Ë
	`±hªad_muãx_u∆ock
(&A)

	)

53 
	#ems_mtx_öô
(
A
Ë
	`±hªad_muãx_öô
(&A, 
NULL
)

	)

54 
	#ems_mtx_de°roy
(
A
Ë
	`±hªad_muãx_de°roy
(&A)

	)

57 
	#OK
 0

	)

58 
	#ERR
 -1

	)

59 
	#YES
 1

	)

60 
	#NO
 0

	)

62 
ems_ch¨
 *
ems_åim
”ms_ch¨ *
§c
);

68 *(*
	tthªad_íåy
)(
	tems_thªad¨g
);

69 
ems_öt
 
ems_thªad¸óã
(
ems_thªadid
 *
tid
, 
thªad_íåy
 
func
, 
ems_thªad¨g
 
¨g
);

70 
ems_öt
 
ems_thªadjoö
(
ems_thªadid
 
tid
);

71 
ems_öt
 
ems_£ä⁄blockög
”ms_öà
sockfd
,Éms_öà
yes
);

72 
ems_öt
 
ems_gëho°by«me
(
ems_cch¨
 *
domaö
, 
sockaddr_ö
 *
d°
);

74 
ems_öt
 
ems_bö2°r
(
ems_cch¨
 *
s
,Éms_öà
Àn
, 
ems_ch¨
 *
d
,Éms_öà
d_l
);

75 
ems_öt
 
ems_°r2bö
(
ems_cch¨
 *
s
, 
ems_ch¨
 *
d
,Éms_öà
d_l
);

77 
ems_öt
 
ems_˝uc‹e
();

78 
ems_öt
 
ems_∑gesize
();

79 
ems_void
 
ems_¥öthex
(
ems_cch¨
 *
s
, 
ems_öt
 
Àn
);

80 
ems_öt
 
ems_memußge
();

81 
ems_öt
 
ems_˝uußge
();

82 
ems_öt
 
ems_ª£t_æimô
();

84 
ems_cch¨
 *
ems_ôﬂ
(
ems_öt
 
i
);

85 
ems_öt
 
ems_©oi
(
ems_cch¨
 *
a
);

87 
ems_ch¨
 *
uæ_ícode
(
ems_cch¨
 *
§c
, 
ems_öt
 
l°r
);

88 
ems_ch¨
 *
uæ_decode
”ms_ch¨ *
§c
, 
ems_öt
 
l°r
);

	@json/arraylist.c

12 
	~"jc⁄fig.h
"

14 #ifde‡
STDC_HEADERS


15 
	~<°dlib.h
>

16 
	~<°rög.h
>

19 #i‡
deföed
(
HAVE_STRINGS_H
Ë&& !deföed(
_STRING_H
Ë&& !deföed(
__USE_BSD
)

20 
	~<°rögs.h
>

23 
	~"bôs.h
"

24 
	~"¨øyli°.h
"

26 
¨øy_li°
*

27 
	$¨øy_li°_√w
(
¨øy_li°_‰ì_‚
 *
‰ì_‚
)

29 
¨øy_li°
 *
¨r
;

31 
¨r
 = (
¨øy_li°
*)
	`ˇŒoc
(1, (array_list));

32 if(!
¨r
Ë 
NULL
;

33 
¨r
->
size
 = 
ARRAY_LIST_DEFAULT_SIZE
;

34 
¨r
->
Àngth
 = 0;

35 
¨r
->
‰ì_‚
 = free_fn;

36 if(!(
¨r
->
¨øy
 = (**)
	`ˇŒoc
((*),áº->
size
))) {

37 
	`‰ì
(
¨r
);

38  
NULL
;

40  
¨r
;

41 
	}
}

44 
	$¨øy_li°_‰ì
(
¨øy_li°
 *
¨r
)

46 
i
;

47 
i
 = 0; i < 
¨r
->
Àngth
; i++)

48 if(
¨r
->
¨øy
[
i
]Ë¨r->
	`‰ì_‚
(arr->array[i]);

49 
	`‰ì
(
¨r
->
¨øy
);

50 
	`‰ì
(
¨r
);

51 
	}
}

54 
	$¨øy_li°_gë_idx
(
¨øy_li°
 *
¨r
, 
i
)

56 if(
i
 >
¨r
->
Àngth
Ë 
NULL
;

57  
¨r
->
¨øy
[
i
];

58 
	}
}

60 
	$¨øy_li°_ex∑nd_öã∫Æ
(
¨øy_li°
 *
¨r
, 
max
)

62 *
t
;

63 
√w_size
;

65 if(
max
 < 
¨r
->
size
)  0;

66 
√w_size
 = 
	`js⁄_max
(
¨r
->
size
 << 1, 
max
);

67 if(!(
t
 = 
	`ªÆloc
(
¨r
->
¨øy
, 
√w_size
*(*))))  -1;

68 
¨r
->
¨øy
 = (**)
t
;

69 ()
	`mem£t
(
¨r
->
¨øy
 +áº->
size
, 0, (
√w_size
-arr->size)*(*));

70 
¨r
->
size
 = 
√w_size
;

72 
	}
}

75 
	$¨øy_li°_put_idx
(
¨øy_li°
 *
¨r
, 
idx
, *
d©a
)

77 if(
	`¨øy_li°_ex∑nd_öã∫Æ
(
¨r
, 
idx
+1))  -1;

78 if(
¨r
->
¨øy
[
idx
]Ë¨r->
	`‰ì_‚
(arr->array[idx]);

79 
¨r
->
¨øy
[
idx
] = 
d©a
;

80 if(
¨r
->
Àngth
 <
idx
)árr->length = idx + 1;

82 
	}
}

85 
	$¨øy_li°_add
(
¨øy_li°
 *
¨r
, *
d©a
)

87  
	`¨øy_li°_put_idx
(
¨r
,áº->
Àngth
, 
d©a
);

88 
	}
}

91 
¨øy_li°_s‹t
(
¨øy_li°
 *
¨r
, (*
s‹t_‚
)(const *, const *))

93 
	`qs‹t
(
¨r
->
¨øy
,áº->
Àngth
, (arr->array[0]),

94 ((*)(c⁄° *, c⁄° *))
s‹t_‚
);

95 
	}
}

98 
	$¨øy_li°_Àngth
(
¨øy_li°
 *
¨r
)

100  
¨r
->
Àngth
;

101 
	}
}

	@json/arraylist.h

12 #i‚de‡
_¨øyli°_h_


13 
	#_¨øyli°_h_


	)

15 #ifde‡
__˝lu•lus


19 
	#ARRAY_LIST_DEFAULT_SIZE
 32

	)

21 (
¨øy_li°_‰ì_‚
Ë(*
	td©a
);

23 
	s¨øy_li°


25 **
¨øy
;

26 
Àngth
;

27 
size
;

28 
¨øy_li°_‰ì_‚
 *
‰ì_‚
;

31 
¨øy_li°
*

32 
¨øy_li°_√w
(
¨øy_li°_‰ì_‚
 *
‰ì_‚
);

35 
¨øy_li°_‰ì
(
¨øy_li°
 *
Æ
);

38 
¨øy_li°_gë_idx
(
¨øy_li°
 *
Æ
, 
i
);

41 
¨øy_li°_put_idx
(
¨øy_li°
 *
Æ
, 
i
, *
d©a
);

44 
¨øy_li°_add
(
¨øy_li°
 *
Æ
, *
d©a
);

47 
¨øy_li°_Àngth
(
¨øy_li°
 *
Æ
);

50 
¨øy_li°_s‹t
(
¨øy_li°
 *
¨r
, (*
com∑r
)(const *, const *));

52 #ifde‡
__˝lu•lus


	@json/bits.h

12 #i‚de‡
_bôs_h_


13 
	#_bôs_h_


	)

15 #i‚de‡
js⁄_mö


16 
	#js⁄_mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

19 #i‚de‡
js⁄_max


20 
	#js⁄_max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

23 
	#hexdigô
(
x
Ë(((xË<'9'Ë? (xË- '0' : ((xË& 7Ë+ 9)

	)

24 
	#îr‹_±r
(
îr‹
Ë((*Îº‹)

	)

25 
	#îr‹_des¸ùti⁄
(
îr‹
Ë(
js⁄_tokíî_îr‹s
[îr‹])

	)

26 
	#is_îr‹
(
±r
Ë’å =
NULL
)

	)

	@json/debug.c

12 
	~"jc⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<°d¨g.h
>

19 #i‡
HAVE_SYSLOG_H


20 
	~<sy¶og.h
>

23 #i‡
HAVE_UNISTD_H


24 
	~<uni°d.h
>

27 #i‡
HAVE_SYS_PARAM_H


28 
	~<sys/∑øm.h
>

31 
	~"debug.h
"

33 
	g_sy¶og
 = 0;

34 
	g_debug
 = 0;

36 
	$mc_£t_debug
(
debug
Ë{ 
_debug
 = debug; 
	}
}

37 
	$mc_gë_debug
(Ë{  
_debug
; 
	}
}

39 
	$mc_£t_sy¶og
(
sy¶og
)

41 
_sy¶og
 = 
sy¶og
;

42 
	}
}

44 
	$mc_ab‹t
(c⁄° *
msg
, ...)

46 
va_li°
 
≠
;

47 
	`va_°¨t
(
≠
, 
msg
);

48 #i‡
HAVE_VSYSLOG


49 if(
_sy¶og
) {

50 
	`vsy¶og
(
LOG_ERR
, 
msg
, 
≠
);

53 
	`v¥ötf
(
msg
, 
≠
);

54 
	`va_íd
(
≠
);

55 
	`exô
(1);

56 
	}
}

59 
	$mc_debug
(c⁄° *
msg
, ...)

61 
va_li°
 
≠
;

62 if(
_debug
) {

63 
	`va_°¨t
(
≠
, 
msg
);

64 #i‡
HAVE_VSYSLOG


65 if(
_sy¶og
) {

66 
	`vsy¶og
(
LOG_DEBUG
, 
msg
, 
≠
);

69 
	`v¥ötf
(
msg
, 
≠
);

70 
	`va_íd
(
≠
);

72 
	}
}

74 
	$mc_îr‹
(c⁄° *
msg
, ...)

76 
va_li°
 
≠
;

77 
	`va_°¨t
(
≠
, 
msg
);

78 #i‡
HAVE_VSYSLOG


79 if(
_sy¶og
) {

80 
	`vsy¶og
(
LOG_ERR
, 
msg
, 
≠
);

83 
	`vÂrötf
(
°dîr
, 
msg
, 
≠
);

84 
	`va_íd
(
≠
);

85 
	}
}

87 
	$mc_öfo
(c⁄° *
msg
, ...)

89 
va_li°
 
≠
;

90 
	`va_°¨t
(
≠
, 
msg
);

91 #i‡
HAVE_VSYSLOG


92 if(
_sy¶og
) {

93 
	`vsy¶og
(
LOG_INFO
, 
msg
, 
≠
);

96 
	`vÂrötf
(
°dîr
, 
msg
, 
≠
);

97 
	`va_íd
(
≠
);

98 
	}
}

	@json/debug.h

13 #i‚de‡
_DEBUG_H_


14 
	#_DEBUG_H_


	)

16 
	~<°dlib.h
>

18 #ifde‡
__˝lu•lus


22 
mc_£t_debug
(
debug
);

23 
mc_gë_debug
();

25 
mc_£t_sy¶og
(
sy¶og
);

26 
mc_ab‹t
(c⁄° *
msg
, ...);

27 
mc_debug
(c⁄° *
msg
, ...);

28 
mc_îr‹
(c⁄° *
msg
, ...);

29 
mc_öfo
(c⁄° *
msg
, ...);

31 #i‚de‡
__STRING


32 
	#__STRING
(
x
Ë#x

	)

35 #i‚de‡
PARSER_BROKEN_FIXED


37 
	#JASSERT
(
c⁄d
Ëdÿ{} 0)

	)

41 
	#JASSERT
(
c⁄d
) do { \

42 i‡(!(
c⁄d
)) { \

43 
	`mc_îr‹
("cjs⁄ás£π faûuª %s:%d : c⁄d \"" 
	`__STRING
(
c⁄d
Ë"Áûed\n", 
__FILE__
, 
__LINE__
); \

45 
	`ab‹t
(); \

47 } 0)

	)

51 
	#MC_ABORT
(
x
, ...Ë
	`mc_ab‹t
(x, ##
__VA_ARGS__
)

	)

52 
	#MC_ERROR
(
x
, ...Ë
	`mc_îr‹
(x, ##
__VA_ARGS__
)

	)

54 #ifde‡
MC_MAINTAINER_MODE


55 
	#MC_SET_DEBUG
(
x
Ë
	`mc_£t_debug
(x)

	)

56 
	#MC_GET_DEBUG
(Ë
	`mc_gë_debug
()

	)

57 
	#MC_SET_SYSLOG
(
x
Ë
	`mc_£t_sy¶og
(x)

	)

58 
	#MC_DEBUG
(
x
, ...Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

59 
	#MC_INFO
(
x
, ...Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

61 
	#MC_SET_DEBUG
(
x
Ëi‡(0Ë
	`mc_£t_debug
(x)

	)

62 
	#MC_GET_DEBUG
(Ë(0)

	)

63 
	#MC_SET_SYSLOG
(
x
Ëi‡(0Ë
	`mc_£t_sy¶og
(x)

	)

64 
	#MC_DEBUG
(
x
, ...Ëi‡(0Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

65 
	#MC_INFO
(
x
, ...Ëi‡(0Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

68 #ifde‡
__˝lu•lus


	@json/example/test1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

6 
	~"js⁄.h
"

8 
	$maö
(
¨gc
, **
¨gv
)

10 
js⁄_tokíî
 *
tok
;

11 
js⁄_obje˘
 *
my_°rög
, *
my_öt
, *
my_obje˘
, *
my_¨øy
;

12 
js⁄_obje˘
 *
√w_obj
;

13 
i
;

15 
	`MC_SET_DEBUG
(1);

17 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("\t");

18 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

19 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

20 
	`js⁄_obje˘_put
(
my_°rög
);

22 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("\\");

23 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

24 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

25 
	`js⁄_obje˘_put
(
my_°rög
);

27 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("foo");

28 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

29 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

31 
my_öt
 = 
	`js⁄_obje˘_√w_öt
(9);

32 
	`¥ötf
("my_öt=%d\n", 
	`js⁄_obje˘_gë_öt
(
my_öt
));

33 
	`¥ötf
("my_öt.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_öt
));

35 
my_¨øy
 = 
	`js⁄_obje˘_√w_¨øy
();

36 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(1));

37 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(2));

38 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(3));

39 
	`js⁄_obje˘_¨øy_put_idx
(
my_¨øy
, 4, 
	`js⁄_obje˘_√w_öt
(5));

40 
	`¥ötf
("my_array=\n");

41 
i
=0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
my_¨øy
); i++) {

42 
js⁄_obje˘
 *
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
my_¨øy
, 
i
);

43 
	`¥ötf
("\t[%d]=%s\n", 
i
, 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

45 
	`¥ötf
("my_¨øy.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_¨øy
));

47 
my_obje˘
 = 
	`js⁄_obje˘_√w_obje˘
();

48 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "abc", 
	`js⁄_obje˘_√w_öt
(12));

49 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo", 
	`js⁄_obje˘_√w_°rög
("bar"));

50 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "boﬁ0", 
	`js⁄_obje˘_√w_boﬁón
(0));

51 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "boﬁ1", 
	`js⁄_obje˘_√w_boﬁón
(1));

52 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "baz", 
	`js⁄_obje˘_√w_°rög
("bang"));

53 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "baz", 
	`js⁄_obje˘_√w_°rög
("fark"));

54 
	`js⁄_obje˘_obje˘_dñ
(
my_obje˘
, "baz");

56 
	`¥ötf
("my_object=\n");

57 
	`js⁄_obje˘_obje˘_f‹óch
(
my_obje˘
, 
key
, 
vÆ
) {

58 
	`¥ötf
("\t%s: %s\n", 
key
, 
	`js⁄_obje˘_to_js⁄_°rög
(
vÆ
));

60 
	`¥ötf
("my_obje˘.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

62 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("\"\003\"");

63 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

64 
	`js⁄_obje˘_put
(
√w_obj
);

66 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("/* hello */\"foo\"");

67 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

68 
	`js⁄_obje˘_put
(
√w_obj
);

70 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("// hello\n\"foo\"");

71 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

72 
	`js⁄_obje˘_put
(
√w_obj
);

74 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("\"\\u0041\\u0042\\u0043\"");

75 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

76 
	`js⁄_obje˘_put
(
√w_obj
);

78 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("null");

79 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

80 
	`js⁄_obje˘_put
(
√w_obj
);

82 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("True");

83 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

84 
	`js⁄_obje˘_put
(
√w_obj
);

86 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("12");

87 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

88 
	`js⁄_obje˘_put
(
√w_obj
);

90 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("12.3");

91 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

92 
	`js⁄_obje˘_put
(
√w_obj
);

94 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"\\n\"]");

95 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

96 
	`js⁄_obje˘_put
(
√w_obj
);

98 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"\\nabc\\n\"]");

99 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

100 
	`js⁄_obje˘_put
(
√w_obj
);

102 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[null]");

103 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

104 
	`js⁄_obje˘_put
(
√w_obj
);

106 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[]");

107 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

108 
	`js⁄_obje˘_put
(
√w_obj
);

110 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[false]");

111 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

112 
	`js⁄_obje˘_put
(
√w_obj
);

114 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"abc\",null,\"def\",12]");

115 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

116 
	`js⁄_obje˘_put
(
√w_obj
);

118 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{}");

119 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

120 
	`js⁄_obje˘_put
(
√w_obj
);

122 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": \"bar\" }");

123 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

124 
	`js⁄_obje˘_put
(
√w_obj
);

126 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": \"bar\", \"baz\":Çull, \"bool0\":Årue }");

127 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

128 
	`js⁄_obje˘_put
(
√w_obj
);

130 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": [null, \"foo\"] }");

131 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

132 
	`js⁄_obje˘_put
(
√w_obj
);

134 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"abc\": 12, \"foo\": \"bar\", \"bool0\": false, \"bool1\":Årue, \"arr\": [ 1, 2, 3,Çull, 5 ] }");

135 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

136 
	`js⁄_obje˘_put
(
√w_obj
);

138 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ foo }");

139 if(
	`is_îr‹
(
√w_obj
)Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

141 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("foo");

142 if(
	`is_îr‹
(
√w_obj
)Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

144 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo");

145 if(
	`is_îr‹
(
√w_obj
)Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

148 
tok
 = 
	`js⁄_tokíî_√w
();

149 
√w_obj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, "{ \"foo", 6);

150 if(
	`is_îr‹
(
√w_obj
)Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

151 
√w_obj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, "\": {\"bar", 8);

152 if(
	`is_îr‹
(
√w_obj
)Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

153 
√w_obj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, "\":13}}", 6);

154 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

155 
	`js⁄_obje˘_put
(
√w_obj
);

156 
	`js⁄_tokíî_‰ì
(
tok
);

158 
	`js⁄_obje˘_put
(
my_°rög
);

159 
	`js⁄_obje˘_put
(
my_öt
);

160 
	`js⁄_obje˘_put
(
my_obje˘
);

164 
	}
}

	@json/example/test2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

6 
	~"js⁄.h
"

9 
	$maö
(
¨gc
, **
¨gv
)

11 
js⁄_obje˘
 *
√w_obj
;

13 
	`MC_SET_DEBUG
(1);

15 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("/* more difficultÅest case */ { \"glossary\": { \"title\": \"example glossary\", \"GlossDiv\": { \"title\": \"S\", \"GlossList\": [ { \"ID\": \"SGML\", \"SortAs\": \"SGML\", \"GlossTerm\": \"Standard Generalized Markup Language\", \"Acronym\": \"SGML\", \"Abbrev\": \"ISO 8879:1986\", \"GlossDef\": \"A meta-markupÜanguage, usedÅo create markupÜanguages suchás DocBook.\", \"GlossSeeAlso\": [\"GML\", \"XML\", \"markup\"] } ] } } }");

16 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

17 
	`js⁄_obje˘_put
(
√w_obj
);

20 
	}
}

	@json/example/test3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~"js⁄.h
"

7 
	$maö
()

9 
js⁄_obje˘
 *
jobj
;

10 *
öput
 = (*)
	`mÆloc
(1024);

12 
	`fgës
(
öput
, 1024, 
°dö
Ë!
NULL
) {

13 
jobj
 = 
	`js⁄_tokíî_∑r£
(
öput
);

14 i‡(
	`is_îr‹
(
jobj
)) {

15 
	`¥ötf
("errorÖarsing json: %s\n",

16 
js⁄_tokíî_îr‹s
[-()
jobj
]);

18 
	`¥ötf
("%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
jobj
));

19 
	`js⁄_obje˘_put
(
jobj
);

23 
	}
}

	@json/example/tests/parse_flags.c

1 
	~"jc⁄fig.h
"

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	~"js⁄.h
"

7 
	~"∑r£_Êags.h
"

9 #i‡!
deföed
(
HAVE_STRCASECMP
Ë&& deföed(
_MSC_VER
)

10 
	#°rˇ£cmp
 
_°ricmp


	)

11 #ñi‡!
deföed
(
HAVE_STRCASECMP
)

12 #îr‹ 
You
 dÿ
nŸ
 
have
 
°rˇ£cmp
 
⁄
 
your
 
sy°em
.

16 c⁄° *
	m¨g
;

17 
	mÊag
;

18 } 
	gf‹m©_¨gs
[] = {

19 { "∂aö", 
JSON_C_TO_STRING_PLAIN
 },

20 { "•a˚d", 
JSON_C_TO_STRING_SPACED
 },

21 { "¥ëty", 
JSON_C_TO_STRING_PRETTY
 },

24 #i‚de‡
NELEM


25 
	#NELEM
(
x
Ë((xË/ (&x[0]))

	)

28 
	$∑r£_Êags
(
¨gc
, **
¨gv
)

30 
¨g_idx
;

31 
sÊags
 = 0;

32 
¨g_idx
 = 1;árg_idx < 
¨gc
 ;árg_idx++)

34 
jj
;

35 
jj
 = 0; jj < ()
	`NELEM
(
f‹m©_¨gs
); jj++)

37 i‡(
	`°rˇ£cmp
(
¨gv
[
¨g_idx
], 
f‹m©_¨gs
[
jj
].
¨g
) == 0)

39 
sÊags
 |
f‹m©_¨gs
[
jj
].
Êag
;

43 i‡(
jj
 =
	`NELEM
(
f‹m©_¨gs
))

45 
	`¥ötf
("Unknow¿¨g: %s\n", 
¨gv
[
¨g_idx
]);

46 
	`exô
(1);

49  
sÊags
;

50 
	}
}

	@json/example/tests/parse_flags.h

1 #i‚de‡
__∑r£_Êags_h


2 
	#__∑r£_Êags_h


	)

3 
∑r£_Êags
(
¨gc
, **
¨gv
);

	@json/example/tests/test1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

7 
	~"js⁄.h
"

8 
	~"∑r£_Êags.h
"

10 
	$s‹t_‚
 (c⁄° *
j1
, c⁄° *
j2
)

12 
js⁄_obje˘
 * c⁄° *
jso1
, * c⁄° *
jso2
;

13 
i1
, 
i2
;

15 
jso1
 = (
js⁄_obje˘
* c⁄°*)
j1
;

16 
jso2
 = (
js⁄_obje˘
* c⁄°*)
j2
;

17 i‡(!*
jso1
 && !*
jso2
)

19 i‡(!*
jso1
)

21 i‡(!*
jso2
)

24 
i1
 = 
	`js⁄_obje˘_gë_öt
(*
jso1
);

25 
i2
 = 
	`js⁄_obje˘_gë_öt
(*
jso2
);

27  
i1
 - 
i2
;

28 
	}
}

30 #ifde‡
TEST_FORMATTED


31 
	#js⁄_obje˘_to_js⁄_°rög
(
obj
Ë
	`js⁄_obje˘_to_js⁄_°rög_ext
(obj,
sÊags
)

	)

36 
	$maö
(
¨gc
, **
¨gv
)

38 
js⁄_obje˘
 *
my_°rög
, *
my_öt
, *
my_obje˘
, *
my_¨øy
;

39 
i
;

40 #ifde‡
TEST_FORMATTED


41 
sÊags
 = 0;

44 
	`MC_SET_DEBUG
(1);

46 #ifde‡
TEST_FORMATTED


47 
sÊags
 = 
	`∑r£_Êags
(
¨gc
, 
¨gv
);

50 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("\t");

51 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

52 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

53 
	`js⁄_obje˘_put
(
my_°rög
);

55 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("\\");

56 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

57 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

58 
	`js⁄_obje˘_put
(
my_°rög
);

60 
my_°rög
 = 
	`js⁄_obje˘_√w_°rög
("foo");

61 
	`¥ötf
("my_°rög=%s\n", 
	`js⁄_obje˘_gë_°rög
(
my_°rög
));

62 
	`¥ötf
("my_°rög.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_°rög
));

64 
my_öt
 = 
	`js⁄_obje˘_√w_öt
(9);

65 
	`¥ötf
("my_öt=%d\n", 
	`js⁄_obje˘_gë_öt
(
my_öt
));

66 
	`¥ötf
("my_öt.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_öt
));

68 
my_¨øy
 = 
	`js⁄_obje˘_√w_¨øy
();

69 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(1));

70 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(2));

71 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(3));

72 
	`js⁄_obje˘_¨øy_put_idx
(
my_¨øy
, 4, 
	`js⁄_obje˘_√w_öt
(5));

73 
	`¥ötf
("my_array=\n");

74 
i
=0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
my_¨øy
); i++)

76 
js⁄_obje˘
 *
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
my_¨øy
, 
i
);

77 
	`¥ötf
("\t[%d]=%s\n", 
i
, 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

79 
	`¥ötf
("my_¨øy.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_¨øy
));

81 
	`js⁄_obje˘_put
(
my_¨øy
);

83 
my_¨øy
 = 
	`js⁄_obje˘_√w_¨øy
();

84 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(3));

85 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(1));

86 
	`js⁄_obje˘_¨øy_add
(
my_¨øy
, 
	`js⁄_obje˘_√w_öt
(2));

87 
	`js⁄_obje˘_¨øy_put_idx
(
my_¨øy
, 4, 
	`js⁄_obje˘_√w_öt
(0));

88 
	`¥ötf
("my_array=\n");

89 
i
=0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
my_¨øy
); i++)

91 
js⁄_obje˘
 *
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
my_¨øy
, 
i
);

92 
	`¥ötf
("\t[%d]=%s\n", 
i
, 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

94 
	`¥ötf
("my_¨øy.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_¨øy
));

95 
	`js⁄_obje˘_¨øy_s‹t
(
my_¨øy
, 
s‹t_‚
);

96 
	`¥ötf
("my_array=\n");

97 
i
=0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
my_¨øy
); i++)

99 
js⁄_obje˘
 *
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
my_¨øy
, 
i
);

100 
	`¥ötf
("\t[%d]=%s\n", 
i
, 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

102 
	`¥ötf
("my_¨øy.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_¨øy
));

104 
my_obje˘
 = 
	`js⁄_obje˘_√w_obje˘
();

105 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "abc", 
	`js⁄_obje˘_√w_öt
(12));

106 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo", 
	`js⁄_obje˘_√w_°rög
("bar"));

107 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "boﬁ0", 
	`js⁄_obje˘_√w_boﬁón
(0));

108 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "boﬁ1", 
	`js⁄_obje˘_√w_boﬁón
(1));

109 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "baz", 
	`js⁄_obje˘_√w_°rög
("bang"));

111 
js⁄_obje˘
 *
baz_obj
 = 
	`js⁄_obje˘_√w_°rög
("fark");

112 
	`js⁄_obje˘_gë
(
baz_obj
);

113 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "baz", 
baz_obj
);

114 
	`js⁄_obje˘_obje˘_dñ
(
my_obje˘
, "baz");

117 
	`¥ötf
("baz_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
baz_obj
));

118 
	`js⁄_obje˘_put
(
baz_obj
);

121 
	`¥ötf
("my_object=\n");

122 
	`js⁄_obje˘_obje˘_f‹óch
(
my_obje˘
, 
key
, 
vÆ
)

124 
	`¥ötf
("\t%s: %s\n", 
key
, 
	`js⁄_obje˘_to_js⁄_°rög
(
vÆ
));

126 
	`¥ötf
("my_obje˘.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

128 
	`js⁄_obje˘_put
(
my_°rög
);

129 
	`js⁄_obje˘_put
(
my_öt
);

130 
	`js⁄_obje˘_put
(
my_obje˘
);

131 
	`js⁄_obje˘_put
(
my_¨øy
);

134 
	}
}

	@json/example/tests/test2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

6 
	~"js⁄.h
"

7 
	~"∑r£_Êags.h
"

9 #ifde‡
TEST_FORMATTED


10 
	#js⁄_obje˘_to_js⁄_°rög
(
obj
Ë
	`js⁄_obje˘_to_js⁄_°rög_ext
(obj,
sÊags
)

	)

16 
	$maö
(
¨gc
, **
¨gv
)

18 
js⁄_obje˘
 *
√w_obj
;

19 #ifde‡
TEST_FORMATTED


20 
sÊags
 = 0;

23 
	`MC_SET_DEBUG
(1);

25 #ifde‡
TEST_FORMATTED


26 
sÊags
 = 
	`∑r£_Êags
(
¨gc
, 
¨gv
);

29 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("/* more difficultÅest case */ { \"glossary\": { \"title\": \"example glossary\", \"GlossDiv\": { \"title\": \"S\", \"GlossList\": [ { \"ID\": \"SGML\", \"SortAs\": \"SGML\", \"GlossTerm\": \"Standard Generalized Markup Language\", \"Acronym\": \"SGML\", \"Abbrev\": \"ISO 8879:1986\", \"GlossDef\": \"A meta-markupÜanguage, usedÅo create markupÜanguages suchás DocBook.\", \"GlossSeeAlso\": [\"GML\", \"XML\", \"markup\"] } ] } } }");

30 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

31 
	`js⁄_obje˘_put
(
√w_obj
);

34 
	}
}

	@json/example/tests/test4.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~"jc⁄fig.h
"

9 
	~"js⁄_öây≥s.h
"

10 
	~"js⁄_obje˘.h
"

11 
	~"js⁄_tokíî.h
"

13 
	$¥öt_hex
–c⁄° * 
s
)

15 c⁄° *
ôî
 = 
s
;

16 
ch
;

17 (
ch
 = *
ôî
++) != 0)

19 if–',' !
ch
)

20 
	`¥ötf
("%x ", 
ch
);

22 
	`¥ötf
( ",");

24 
	`¥ötf
("\n");

25 
	}
}

27 
	$maö
()

29 c⁄° *
öput
 = "\"\\ud840\\udd26,\\ud840\\udd27,\\ud800\\udd26,\\ud800\\udd27\"";

30 c⁄° *
ex≥˘ed
 = "\xF0\xA0\x84\xA6,\xF0\xA0\x84\xA7,\xF0\x90\x84\xA6,\xF0\x90\x84\xA7";

31 
js⁄_obje˘
 *
∑r£_ªsu…
 = 
	`js⁄_tokíî_∑r£
((*)
öput
);

32 c⁄° *
unjs⁄
 = 
	`js⁄_obje˘_gë_°rög
(
∑r£_ªsu…
);

34 
	`¥ötf
("öput: %s\n", 
öput
);

36 
°rögs_m©ch
 = !
	`°rcmp
–
ex≥˘ed
, 
unjs⁄
);

37 
ªtvÆ
 = 0;

38 i‡(
°rögs_m©ch
)

40 
	`¥ötf
("JSONÖ¨£Ñesu… i†c‹ª˘: %s\n", 
unjs⁄
);

41 
	`¥ötf
("PASS\n");

43 
	`¥ötf
("JSONÖarseÑesult doesn't matchÉxpected string\n");

44 
	`¥ötf
("expected string bytes: ");

45 
	`¥öt_hex
–
ex≥˘ed
);

46 
	`¥ötf
("parsed string bytes: ");

47 
	`¥öt_hex
–
unjs⁄
);

48 
	`¥ötf
("FAIL\n");

49 
ªtvÆ
 = 1;

51 
	`js⁄_obje˘_put
(
∑r£_ªsu…
);

52  
ªtvÆ
;

53 
	}
}

	@json/example/tests/testReplaceExisting.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

6 
	~"js⁄.h
"

8 
	$maö
(
¨gc
, **
¨gv
)

10 
	`MC_SET_DEBUG
(1);

16 
js⁄_obje˘
 *
my_obje˘
 = 
	`js⁄_obje˘_√w_obje˘
();

17 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo1", 
	`js⁄_obje˘_√w_°rög
("bar1"));

18 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo2", 
	`js⁄_obje˘_√w_°rög
("bar2"));

19 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "dñëeme", 
	`js⁄_obje˘_√w_°rög
("bar2"));

20 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo3", 
	`js⁄_obje˘_√w_°rög
("bar3"));

22 
	`¥ötf
("==== delete-in-loopÅest starting ====\n");

24 
‹ig_cou¡
 = 0;

25 
	`js⁄_obje˘_obje˘_f‹óch
(
my_obje˘
, 
key0
, 
vÆ0
)

27 
	`¥ötf
("Keyáàödex %d i†[%s]", 
‹ig_cou¡
, 
key0
);

28 i‡(
	`°rcmp
(
key0
, "deleteme") == 0)

30 
	`js⁄_obje˘_obje˘_dñ
(
my_obje˘
, 
key0
);

31 
	`¥ötf
(" (deleted)\n");

34 
	`¥ötf
(" (kept)\n");

35 
‹ig_cou¡
++;

38 
	`¥ötf
("====Ñeplace-value firstÜoop starting ====\n");

40 c⁄° *
‹igöÆ_key
 = 
NULL
;

41 
‹ig_cou¡
 = 0;

42 
	`js⁄_obje˘_obje˘_f‹óch
(
my_obje˘
, 
key
, 
vÆ
)

44 
	`¥ötf
("Keyáàödex %d i†[%s]\n", 
‹ig_cou¡
, 
key
);

45 
‹ig_cou¡
++;

46 i‡(
	`°rcmp
(
key
, "foo2") != 0)

48 
	`¥ötf
("ª∂acög vÆuêf‹ key [%s]\n", 
key
);

49 
‹igöÆ_key
 = 
key
;

50 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, 
key
, 
	`js⁄_obje˘_√w_°rög
("zzz"));

53 
	`¥ötf
("==== secondÜoop starting ====\n");

55 
√w_cou¡
 = 0;

56 
ªtvÆ
 = 0;

57 
	`js⁄_obje˘_obje˘_f‹óch
(
my_obje˘
, 
key2
, 
vÆ2
)

59 
	`¥ötf
("Keyáàödex %d i†[%s]\n", 
√w_cou¡
, 
key2
);

60 
√w_cou¡
++;

61 i‡(
	`°rcmp
(
key2
, "foo2") != 0)

63 
	`¥ötf
("poöã∏f‹ key [%s] d€†%sm©ch\n", 
key2
,

64 (
key2
 =
‹igöÆ_key
) ? "" : "NOT ");

65 i‡(
key2
 !
‹igöÆ_key
)

66 
ªtvÆ
 = 1;

68 i‡(
√w_cou¡
 !
‹ig_cou¡
)

70 
	`¥ötf
("mismatch between original count (%d)ándÇew count (%d)\n",

71 
‹ig_cou¡
, 
√w_cou¡
);

72 
ªtvÆ
 = 1;

75 
	`js⁄_obje˘_put
–
my_obje˘
 );

77  
ªtvÆ
;

78 
	}
}

	@json/example/tests/test_cast.c

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

9 
	~"jc⁄fig.h
"

11 
	~"js⁄_öây≥s.h
"

12 
	~"js⁄_obje˘.h
"

13 
	~"js⁄_tokíî.h
"

14 
	~"js⁄_utû.h
"

16 
gëô
(
js⁄_obje˘
 *
√w_obj
, c⁄° *
fõld
);

17 
checkty≥_hódî
();

18 
checkty≥
(
js⁄_obje˘
 *
√w_obj
, c⁄° *
fõld
);

20 
	$maö
(
¨gc
, **
¨gv
)

22 c⁄° *
öput
 = "{\n\
\"string_of_digits\": \"123\",\n\
\"regular_number\": 222,\n\
\"decimal_number\": 99.55,\n\
\"boolean_true\":Årue,\n\
\"boolean_false\": false,\n\
\"big_number\": 2147483649,\n\
\"a_null\":Çull,\n\
}";

33 
js⁄_obje˘
 *
√w_obj
;

35 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
öput
);

36 
	`¥ötf
("P¨£d i≈ut: %s\n", 
öput
);

37 
	`¥ötf
("Resu… i†%s\n", (
√w_obj
 =
NULL
) ? "NULL (error!)" : "not NULL");

38 i‡(!
√w_obj
)

41 
	`gëô
(
√w_obj
, "string_of_digits");

42 
	`gëô
(
√w_obj
, "regular_number");

43 
	`gëô
(
√w_obj
, "decimal_number");

44 
	`gëô
(
√w_obj
, "boolean_true");

45 
	`gëô
(
√w_obj
, "boolean_false");

46 
	`gëô
(
√w_obj
, "big_number");

47 
	`gëô
(
√w_obj
, "a_null");

50 
	`¥ötf
("\n================================\n");

51 
	`checkty≥_hódî
();

52 
	`checkty≥
(
√w_obj
, 
NULL
);

53 
	`checkty≥
(
√w_obj
, "string_of_digits");

54 
	`checkty≥
(
√w_obj
, "regular_number");

55 
	`checkty≥
(
√w_obj
, "decimal_number");

56 
	`checkty≥
(
√w_obj
, "boolean_true");

57 
	`checkty≥
(
√w_obj
, "boolean_false");

58 
	`checkty≥
(
√w_obj
, "big_number");

59 
	`checkty≥
(
√w_obj
, "a_null");

61 
	`js⁄_obje˘_put
(
√w_obj
);

64 
	}
}

66 
	$gëô
(
js⁄_obje˘
 *
√w_obj
, c⁄° *
fõld
)

68 
js⁄_obje˘
 *
o
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, 
fõld
);

70 
js⁄_ty≥
 
o_ty≥
 = 
	`js⁄_obje˘_gë_ty≥
(
o
);

71 
	`¥ötf
("√w_obj.%†js⁄_obje˘_gë_ty≥()=%s\n", 
fõld
,

72 
	`js⁄_ty≥_to_«me
(
o_ty≥
));

73 
	`¥ötf
("√w_obj.%†js⁄_obje˘_gë_öt()=%d\n", 
fõld
,

74 
	`js⁄_obje˘_gë_öt
(
o
));

75 
	`¥ötf
("√w_obj.%†js⁄_obje˘_gë_öt64()=%" 
PRId64
 "\n", 
fõld
,

76 
	`js⁄_obje˘_gë_öt64
(
o
));

77 
	`¥ötf
("√w_obj.%†js⁄_obje˘_gë_boﬁón()=%d\n", 
fõld
,

78 
	`js⁄_obje˘_gë_boﬁón
(
o
));

79 
	`¥ötf
("√w_obj.%†js⁄_obje˘_gë_doubÀ()=%f\n", 
fõld
,

80 
	`js⁄_obje˘_gë_doubÀ
(
o
));

81 
	}
}

83 
	$checkty≥_hódî
()

85 
	`¥ötf
("json_object_is_type: %s,%s,%s,%s,%s,%s,%s\n",

86 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_nuŒ
),

87 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_boﬁón
),

88 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_doubÀ
),

89 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_öt
),

90 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_obje˘
),

91 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_¨øy
),

92 
	`js⁄_ty≥_to_«me
(
js⁄_ty≥_°rög
));

93 
	}
}

94 
	$checkty≥
(
js⁄_obje˘
 *
√w_obj
, c⁄° *
fõld
)

96 
js⁄_obje˘
 *
o
 = 
fõld
 ? 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, field) :Çew_obj;

97 
	`¥ötf
("new_obj%s%-18s: %d,%d,%d,%d,%d,%d,%d\n",

98 
fõld
 ? "." : " ", field ? field : "",

99 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_nuŒ
),

100 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_boﬁón
),

101 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_doubÀ
),

102 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_öt
),

103 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_obje˘
),

104 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_¨øy
),

105 
	`js⁄_obje˘_is_ty≥
(
o
, 
js⁄_ty≥_°rög
));

106 
	}
}

	@json/example/tests/test_locale.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

7 
	~"jc⁄fig.h
"

8 
	~"js⁄.h
"

9 
	~"js⁄_tokíî.h
"

11 #ifde‡
HAVE_LOCALE_H


12 
	~<loˇÀ.h
>

15 
	$maö
(
¨gc
, **
¨gv
)

17 
js⁄_obje˘
 *
√w_obj
;

18 #ifde‡
HAVE_SETLOCALE


19 
	`£éoˇÀ
(
LC_NUMERIC
, "de_DE");

21 
	`¥ötf
("NoÜocale\n");

24 
	`MC_SET_DEBUG
(1);

26 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[1.2,3.4,123456.78,5.0,2.3e10]");

27 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

28 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög_ext
(
√w_obj
,
JSON_C_TO_STRING_NOZERO
));

29 
	`js⁄_obje˘_put
(
√w_obj
);

30 
	}
}

	@json/example/tests/test_null.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~"jc⁄fig.h
"

9 
	~"js⁄_öây≥s.h
"

10 
	~"js⁄_obje˘.h
"

11 
	~"js⁄_tokíî.h
"

13 
	$maö
()

16 c⁄° *
öput
 = " \0 ";

17 c⁄° *
ex≥˘ed
 = "\" \\u0000 \"";

18 
js⁄_obje˘
 *
°rög
 = 
	`js⁄_obje˘_√w_°rög_Àn
(
öput
, 3);

19 c⁄° *
js⁄
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
°rög
);

21 
°rögs_m©ch
 = !
	`°rcmp
–
ex≥˘ed
, 
js⁄
);

22 
ªtvÆ
 = 0;

23 i‡(
°rögs_m©ch
)

25 
	`¥ötf
("JSON wrôêªsu… i†c‹ª˘: %s\n", 
js⁄
);

26 
	`¥ötf
("PASS\n");

28 
	`¥ötf
("JSON writeÑesult doesn't matchÉxpected string\n");

29 
	`¥ötf
("expected string: ");

30 
	`¥ötf
("%s\n", 
ex≥˘ed
);

31 
	`¥ötf
("parsed string: ");

32 
	`¥ötf
("%s\n", 
js⁄
);

33 
	`¥ötf
("FAIL\n");

34 
ªtvÆ
=1;

36 
	`js⁄_obje˘_put
(
°rög
);

38 
js⁄_obje˘
 *
∑r£d_°r
 = 
	`js⁄_tokíî_∑r£
(
ex≥˘ed
);

39 i‡(
∑r£d_°r
)

41 
∑r£d_Àn
 = 
	`js⁄_obje˘_gë_°rög_Àn
(
∑r£d_°r
);

42 c⁄° *
∑r£d_c°r
 = 
	`js⁄_obje˘_gë_°rög
(
∑r£d_°r
);

43 
ii
;

44 
	`¥ötf
("Re-∑r£d obje˘ såögÜí=%d, ch¨s=[", 
∑r£d_Àn
);

45 
ii
 = 0; iò< 
∑r£d_Àn
 ; ii++)

47 
	`¥ötf
("%s%d", (
ii
 ? ", " : ""), ()
∑r£d_c°r
[ii]);

49 
	`¥ötf
("]\n");

50 
	`js⁄_obje˘_put
(
∑r£d_°r
);

54 
	`¥ötf
("ERROR: failedÅoÖarse\n");

56  
ªtvÆ
;

57 
	}
}

	@json/example/tests/test_parse.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°ddef.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

7 
	~"js⁄.h
"

8 
	~"js⁄_tokíî.h
"

10 
ã°_basic_∑r£
();

11 
ã°_vîbo£_∑r£
();

12 
ã°_ö¸emíèl_∑r£
();

14 
	$maö
(
¨gc
, **
¨gv
)

16 
	`MC_SET_DEBUG
(1);

18 
	`ã°_basic_∑r£
();

19 
	`¥ötf
("==================================\n");

20 
	`ã°_vîbo£_∑r£
();

21 
	`¥ötf
("==================================\n");

22 
	`ã°_ö¸emíèl_∑r£
();

23 
	`¥ötf
("==================================\n");

24 
	}
}

26 
	$ã°_basic_∑r£
()

28 
js⁄_obje˘
 *
√w_obj
;

30 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("\"\003\"");

31 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

32 
	`js⁄_obje˘_put
(
√w_obj
);

34 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("/* hello */\"foo\"");

35 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

36 
	`js⁄_obje˘_put
(
√w_obj
);

38 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("// hello\n\"foo\"");

39 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

40 
	`js⁄_obje˘_put
(
√w_obj
);

42 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("\"\\u0041\\u0042\\u0043\"");

43 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

44 
	`js⁄_obje˘_put
(
√w_obj
);

46 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("null");

47 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

48 
	`js⁄_obje˘_put
(
√w_obj
);

50 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("True");

51 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

52 
	`js⁄_obje˘_put
(
√w_obj
);

54 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("12");

55 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

56 
	`js⁄_obje˘_put
(
√w_obj
);

58 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("12.3");

59 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

60 
	`js⁄_obje˘_put
(
√w_obj
);

62 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"\\n\"]");

63 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

64 
	`js⁄_obje˘_put
(
√w_obj
);

66 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"\\nabc\\n\"]");

67 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

68 
	`js⁄_obje˘_put
(
√w_obj
);

70 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[null]");

71 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

72 
	`js⁄_obje˘_put
(
√w_obj
);

74 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[]");

75 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

76 
	`js⁄_obje˘_put
(
√w_obj
);

78 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[false]");

79 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

80 
	`js⁄_obje˘_put
(
√w_obj
);

82 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("[\"abc\",null,\"def\",12]");

83 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

84 
	`js⁄_obje˘_put
(
√w_obj
);

86 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{}");

87 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

88 
	`js⁄_obje˘_put
(
√w_obj
);

90 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": \"bar\" }");

91 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

92 
	`js⁄_obje˘_put
(
√w_obj
);

94 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": \"bar\", \"baz\":Çull, \"bool0\":Årue }");

95 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

96 
	`js⁄_obje˘_put
(
√w_obj
);

98 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"foo\": [null, \"foo\"] }");

99 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

100 
	`js⁄_obje˘_put
(
√w_obj
);

102 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ \"abc\": 12, \"foo\": \"bar\", \"bool0\": false, \"bool1\":Årue, \"arr\": [ 1, 2, 3,Çull, 5 ] }");

103 
	`¥ötf
("√w_obj.to_°rög()=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

104 
	`js⁄_obje˘_put
(
√w_obj
);

105 
	}
}

107 
	$ã°_vîbo£_∑r£
()

109 
js⁄_obje˘
 *
√w_obj
;

110 
js⁄_tokíî_îr‹
 
îr‹
 = 
js⁄_tokíî_suc˚ss
;

112 
√w_obj
 = 
	`js⁄_tokíî_∑r£_vîbo£
("{ foÿ}", &
îr‹
);

113 
	`as£π
 (
îr‹
 =
js⁄_tokíî_îr‹_∑r£_obje˘_key_«me
);

114 
	`as£π
 (
√w_obj
 =
NULL
);

116 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("{ foo }");

117 
	`as£π
 (
√w_obj
 =
NULL
);

119 
√w_obj
 = 
	`js⁄_tokíî_∑r£
("foo");

120 
	`as£π
 (
√w_obj
 =
NULL
);

121 
√w_obj
 = 
	`js⁄_tokíî_∑r£_vîbo£
("foo", &
îr‹
);

122 
	`as£π
 (
√w_obj
 =
NULL
);

125 
	`as£π
 (
îr‹
 =
js⁄_tokíî_îr‹_∑r£_boﬁón
);

127 
	`¥ötf
("json_tokener_parse_versbose() OK\n");

128 
	}
}

130 
	sö¸emíèl_°ï
 {

131 c⁄° *
	m°rög_to_∑r£
;

132 
	mÀngth
;

133 
	mch¨_off£t
;

134 
js⁄_tokíî_îr‹
 
	mex≥˘ed_îr‹
;

135 
	mª£t_tokíî
;

136 } 
	gö¸emíèl_°ïs
[] = {

139 { "{ \"foo\": 123 }", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

140 { "{ \"foo\": 456 }", -1, -1, 
js⁄_tokíî_suc˚ss
, 1 },

141 { "{ \"foo\": 789 }", -1, -1, 
js⁄_tokíî_suc˚ss
, 1 },

144 { "{ \"foo", -1, -1, 
js⁄_tokíî_c⁄töue
, 0 },

145 { "\": {\"b¨", -1, -1, 
js⁄_tokíî_c⁄töue
, 0 },

146 { "\":13}}", -1, -1, 
js⁄_tokíî_suc˚ss
, 1 },

149 { "{ \"foo", -1, -1, 
js⁄_tokíî_c⁄töue
, 1 },

150 { ": \"b¨\"}", -1, 0, 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
, 1 },

153 { "{ \"foo", -1, -1, 
js⁄_tokíî_c⁄töue
, 0 },

154 { "\": {\"b¨", -1, -1, 
js⁄_tokíî_c⁄töue
, 0 },

155 { "\":13}}XXXX", 10, 6, 
js⁄_tokíî_suc˚ss
, 0 },

156 { "XXXX", 4, 0, 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
, 1 },

159 { "{\"x\": 123 }\"X\"", -1, 11, 
js⁄_tokíî_suc˚ss
, 0 },

160 { "\"Y\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 1 },

163 { "1", 1, 1, 
js⁄_tokíî_c⁄töue
, 0 },

164 { "2", 2, 1, 
js⁄_tokíî_suc˚ss
, 0 },

167 { "\"blue\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

170 { "\"\\\"\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

171 { "\"\\\\\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

172 { "\"\\b\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

173 { "\"\\f\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

174 { "\"\\n\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

175 { "\"\\r\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

176 { "\"\\t\"", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

178 { "[1,2,3]", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

183 { "[1,2,3,]", -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

184 { "[1,2,,3,]", -1, 5, 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
, 0 },

186 { "[1,2,3,]", -1, 7, 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
, 3 },

187 { "{\"a\":1,}", -1, 7, 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
, 3 },

189 { 
NULL
, -1, -1, 
js⁄_tokíî_suc˚ss
, 0 },

192 
	$ã°_ö¸emíèl_∑r£
()

194 
js⁄_obje˘
 *
√w_obj
;

195 
js⁄_tokíî_îr‹
 
jîr
;

196 
js⁄_tokíî
 *
tok
;

197 c⁄° *
°rög_to_∑r£
;

198 
ii
;

199 
num_ok
, 
num_îr‹
;

201 
num_ok
 = 0;

202 
num_îr‹
 = 0;

204 
	`¥ötf
("Starting incrementalÅests.\n");

205 
	`¥ötf
("Note: quotesánd backslashes seen inÅhe output hereáreÜiteral valuesÖassed\n");

206 
	`¥ötf
("ÅoÅheÖarse functions.É.g.Åhis is 4 characters: \"\\f\"\n");

208 
°rög_to_∑r£
 = "{ \"foo";

209 
	`¥ötf
("js⁄_tokíî_∑r£(%sË... ", 
°rög_to_∑r£
);

210 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
°rög_to_∑r£
);

211 i‡(
√w_obj
 =
NULL
Ë
	`¥ötf
("gotÉrrorásÉxpected\n");

214 
tok
 = 
	`js⁄_tokíî_√w
();

215 
ii
 = 0; 
ö¸emíèl_°ïs
[ii].
°rög_to_∑r£
 !
NULL
; ii++)

217 
this_°ï_ok
 = 0;

218 
ö¸emíèl_°ï
 *
°ï
 = &
ö¸emíèl_°ïs
[
ii
];

219 
Àngth
 = 
°ï
->length;

220 
ex≥˘ed_ch¨_off£t
 = 
°ï
->
ch¨_off£t
;

222 i‡(
°ï
->
ª£t_tokíî
 & 2)

223 
	`js⁄_tokíî_£t_Êags
(
tok
, 
JSON_TOKENER_STRICT
);

225 
	`js⁄_tokíî_£t_Êags
(
tok
, 0);

227 i‡(
Àngth
 == -1)

228 
Àngth
 = 
	`°æí
(
°ï
->
°rög_to_∑r£
);

229 i‡(
ex≥˘ed_ch¨_off£t
 == -1)

230 
ex≥˘ed_ch¨_off£t
 = 
Àngth
;

232 
	`¥ötf
("json_tokener_parse_ex(tok, %-12s, %3d) ... ",

233 
°ï
->
°rög_to_∑r£
, 
Àngth
);

234 
√w_obj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, 
°ï
->
°rög_to_∑r£
, 
Àngth
);

236 
jîr
 = 
	`js⁄_tokíî_gë_îr‹
(
tok
);

237 i‡(
°ï
->
ex≥˘ed_îr‹
 !
js⁄_tokíî_suc˚ss
)

239 i‡(
√w_obj
 !
NULL
)

240 
	`¥ötf
("ERROR: invalid objectÑeturned: %s\n",

241 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

242 i‡(
jîr
 !
°ï
->
ex≥˘ed_îr‹
)

243 
	`¥ötf
("ERROR: got wrongÉrror: %s\n",

244 
	`js⁄_tokíî_îr‹_desc
(
jîr
));

245 i‡(
tok
->
ch¨_off£t
 !
ex≥˘ed_ch¨_off£t
)

246 
	`¥ötf
("ERROR: wrong char_offset %d !=Éxpected %d\n",

247 
tok
->
ch¨_off£t
,

248 
ex≥˘ed_ch¨_off£t
);

251 
	`¥ötf
("OK: gŸ c‹ª˘Éº‹: %s\n", 
	`js⁄_tokíî_îr‹_desc
(
jîr
));

252 
this_°ï_ok
 = 1;

257 i‡(
√w_obj
 =
NULL
)

258 
	`¥ötf
("ERROR:Éxpected valid object, instead: %s\n",

259 
	`js⁄_tokíî_îr‹_desc
(
jîr
));

260 i‡(
tok
->
ch¨_off£t
 !
ex≥˘ed_ch¨_off£t
)

261 
	`¥ötf
("ERROR: wrong char_offset %d !=Éxpected %d\n",

262 
tok
->
ch¨_off£t
,

263 
ex≥˘ed_ch¨_off£t
);

266 
	`¥ötf
("OK: got object ofÅype [%s]: %s\n",

267 
	`js⁄_ty≥_to_«me
(
	`js⁄_obje˘_gë_ty≥
(
√w_obj
)),

268 
	`js⁄_obje˘_to_js⁄_°rög
(
√w_obj
));

269 
this_°ï_ok
 = 1;

273 i‡(
√w_obj
)

274 
	`js⁄_obje˘_put
(
√w_obj
);

276 i‡(
°ï
->
ª£t_tokíî
 & 1)

277 
	`js⁄_tokíî_ª£t
(
tok
);

279 i‡(
this_°ï_ok
)

280 
num_ok
++;

282 
num_îr‹
++;

285 
	`js⁄_tokíî_‰ì
(
tok
);

287 
	`¥ötf
("End In¸emíè»Te°†OK=%d ERROR=%d\n", 
num_ok
, 
num_îr‹
);

290 
	}
}

	@json/example/tests/test_parse_int64.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	~"jc⁄fig.h
"

7 
	~"js⁄_öây≥s.h
"

8 
	~"js⁄_utû.h
"

10 
	$checkô
(c⁄° *
buf
)

12 
öt64_t
 
cöt64
 = -666;

14 
ªtvÆ
 = 
	`js⁄_∑r£_öt64
(
buf
, &
cöt64
);

15 
	`¥ötf
("buf=%†∑r£ô=%d, vÆue=%" 
PRId64
 " \n", 
buf
, 
ªtvÆ
, 
cöt64
);

16 
	}
}

26 
	$maö
()

28 
buf
[100];

30 
	`checkô
("x");

32 
	`checkô
("0");

33 
	`checkô
("-0");

35 
	`checkô
("00000000");

36 
	`checkô
("-00000000");

38 
	`checkô
("1");

40 
	`°r˝y
(
buf
, "2147483647");

41 
	`checkô
(
buf
);

43 
	`°r˝y
(
buf
, "-1");

44 
	`checkô
(
buf
);

46 
	`°r˝y
(
buf
, " -1");

47 
	`checkô
(
buf
);

49 
	`°r˝y
(
buf
, "00001234");

50 
	`checkô
(
buf
);

52 
	`°r˝y
(
buf
, "0001234x");

53 
	`checkô
(
buf
);

55 
	`°r˝y
(
buf
, "-00001234");

56 
	`checkô
(
buf
);

58 
	`°r˝y
(
buf
, "-00001234x");

59 
	`checkô
(
buf
);

61 
	`°r˝y
(
buf
, "4294967295");

63 
	`•rötf
(
buf
, "4294967296");

65 
	`°r˝y
(
buf
, "21474836470");

66 
	`checkô
(
buf
);

68 
	`°r˝y
(
buf
, "31474836470");

69 
	`checkô
(
buf
);

71 
	`°r˝y
(
buf
, "-2147483647");

72 
	`checkô
(
buf
);

74 
	`°r˝y
(
buf
, "-2147483648");

75 
	`checkô
(
buf
);

77 
	`°r˝y
(
buf
, "-2147483649");

78 
	`checkô
(
buf
);

80 
	`°r˝y
(
buf
, "-21474836480");

81 
	`checkô
(
buf
);

83 
	`°r˝y
(
buf
, "9223372036854775806");

84 
	`checkô
(
buf
);

86 
	`°r˝y
(
buf
, "9223372036854775807");

87 
	`checkô
(
buf
);

89 
	`°r˝y
(
buf
, "9223372036854775808");

90 
	`checkô
(
buf
);

92 
	`°r˝y
(
buf
, "-9223372036854775808");

93 
	`checkô
(
buf
);

95 
	`°r˝y
(
buf
, "-9223372036854775809");

96 
	`checkô
(
buf
);

98 
	`°r˝y
(
buf
, "18446744073709551614");

99 
	`checkô
(
buf
);

101 
	`°r˝y
(
buf
, "18446744073709551615");

102 
	`checkô
(
buf
);

104 
	`°r˝y
(
buf
, "18446744073709551616");

105 
	`checkô
(
buf
);

107 
	`°r˝y
(
buf
, "-18446744073709551616");

108 
	`checkô
(
buf
);

111 
	`°r˝y
(
buf
, "123");

112 
	`checkô
(
buf
);

115 
	}
}

	@json/example/tests/test_printbuf.c

1 
	~<as£π.h
>

2 
	~<°ddef.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<limôs.h
>

8 
	~"debug.h
"

9 
	~"¥ötbuf.h
"

11 
ã°_basic_¥ötbuf_mem£t
();

12 
ã°_¥ötbuf_mem£t_Àngth
();

14 
	$ã°_basic_¥ötbuf_mem£t
()

16 
¥ötbuf
 *
pb
;

18 
	`¥ötf
("%s: sèπögÅe°\n", 
__func__
);

19 
pb
 = 
	`¥ötbuf_√w
();

20 
	`•rötbuf
(
pb
, "blue:%d", 1);

21 
	`¥ötbuf_mem£t
(
pb
, -1, 'x', 52);

22 
	`¥ötf
("Buf„∏c⁄ã¡s:%.*s\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

23 
	`¥ötbuf_‰ì
(
pb
);

24 
	`¥ötf
("%s:ÉndÅe°\n", 
__func__
);

25 
	}
}

27 
	$ã°_¥ötbuf_mem£t_Àngth
()

29 
¥ötbuf
 *
pb
;

31 
	`¥ötf
("%s: sèπögÅe°\n", 
__func__
);

32 
pb
 = 
	`¥ötbuf_√w
();

33 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 0);

34 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 0);

35 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 0);

36 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 0);

37 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 0);

38 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

39 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 2);

40 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 4);

41 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 6);

42 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

43 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 6);

44 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

45 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 8);

46 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 10);

47 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 10);

48 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 10);

49 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 20);

50 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

53 
	`¥ötbuf_mem£t
(
pb
, 0, 'x', 30);

54 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

57 
	`¥ötbuf_mem£t
(
pb
, 0, 'x', 
	`¥ötbuf_Àngth
(pb) + 1);

58 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

60 
	`¥ötbuf_‰ì
(
pb
);

61 
	`¥ötf
("%s:ÉndÅe°\n", 
__func__
);

62 
	}
}

64 
ã°_¥ötbuf_mem≠≥nd
(*
bef‹e_ªsize
);

65 
	$ã°_¥ötbuf_mem≠≥nd
(*
bef‹e_ªsize
)

67 
¥ötbuf
 *
pb
;

68 
öôül_size
;

70 
	`¥ötf
("%s: sèπögÅe°\n", 
__func__
);

71 
pb
 = 
	`¥ötbuf_√w
();

72 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

74 
öôül_size
 = 
pb
->
size
;

76 
pb
->
size
 =
öôül_size
)

78 
	`¥ötbuf_mem≠≥nd_Á°
(
pb
, "x", 1);

80 *
bef‹e_ªsize
 = 
	`¥ötbuf_Àngth
(
pb
) - 1;

81 
	`¥ötf
("Aµíded %d byã†f‹Ñesize: [%s]\n", *
bef‹e_ªsize
 + 1, 
pb
->
buf
);

83 
	`¥ötbuf_ª£t
(
pb
);

84 
	`¥ötbuf_mem≠≥nd_Á°
(
pb
, "bluexyz123", 3);

85 
	`¥ötf
("P¨tü»≠≥nd: %d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

87 
wôh_nuŒs
[] = { 'a', 'b', '\0', 'c' };

88 
	`¥ötbuf_ª£t
(
pb
);

89 
	`¥ötbuf_mem≠≥nd_Á°
(
pb
, 
wôh_nuŒs
, ()(with_nulls));

90 
	`¥ötf
("WôhÉmbedded \\0 ch¨a˘î: %d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

92 
	`¥ötbuf_‰ì
(
pb
);

93 
pb
 = 
	`¥ötbuf_√w
();

94 *
d©a
 = 
	`mÆloc
(*
bef‹e_ªsize
);

95 
	`mem£t
(
d©a
, 'X', *
bef‹e_ªsize
);

96 
	`¥ötbuf_mem≠≥nd_Á°
(
pb
, 
d©a
, *
bef‹e_ªsize
);

97 
	`¥ötf
("AµídÅÿju° bef‹êªsize: %d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

99 
	`‰ì
(
d©a
);

100 
	`¥ötbuf_‰ì
(
pb
);

102 
pb
 = 
	`¥ötbuf_√w
();

103 
d©a
 = 
	`mÆloc
(*
bef‹e_ªsize
 + 1);

104 
	`mem£t
(
d©a
, 'X', *
bef‹e_ªsize
 + 1);

105 
	`¥ötbuf_mem≠≥nd_Á°
(
pb
, 
d©a
, *
bef‹e_ªsize
 + 1);

106 
	`¥ötf
("AµídÅÿju°á·îÑesize: %d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

108 
	`‰ì
(
d©a
);

110 
	`¥ötbuf_‰ì
(
pb
);

111 
	`¥ötf
("%s:ÉndÅe°\n", 
__func__
);

112 
	}
}

114 
ã°_•rötbuf
(
bef‹e_ªsize
);

115 
	$ã°_•rötbuf
(
bef‹e_ªsize
)

117 
¥ötbuf
 *
pb
;

119 
	`¥ötf
("%s: sèπögÅe°\n", 
__func__
);

120 
pb
 = 
	`¥ötbuf_√w
();

121 
	`¥ötf
("Buf„∏Àngth: %d\n", 
	`¥ötbuf_Àngth
(
pb
));

123 *
d©a
 = 
	`mÆloc
(
bef‹e_ªsize
 + 1 + 1);

124 
	`mem£t
(
d©a
, 'X', 
bef‹e_ªsize
 + 1 + 1);

125 
d©a
[
bef‹e_ªsize
 + 1] = '\0';

126 
	`•rötbuf
(
pb
, "%s", 
d©a
);

127 
	`‰ì
(
d©a
);

128 
	`¥ötf
("•rötbu‡tÿju°á·îÑesize(%d+1): %d, [%s], såÀn(buf)=%d\n", 
bef‹e_ªsize
, 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
, ()
	`°æí
(pb->buf));

130 
	`¥ötbuf_ª£t
(
pb
);

131 
	`•rötbuf
(
pb
, "plain");

132 
	`¥ötf
("%d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

134 
	`•rötbuf
(
pb
, "%d", 1);

135 
	`¥ötf
("%d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

137 
	`•rötbuf
(
pb
, "%d", 
INT_MAX
);

138 
	`¥ötf
("%d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

140 
	`•rötbuf
(
pb
, "%d", 
INT_MIN
);

141 
	`¥ötf
("%d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

143 
	`•rötbuf
(
pb
, "%s", "%s");

144 
	`¥ötf
("%d, [%s]\n", 
	`¥ötbuf_Àngth
(
pb
),Öb->
buf
);

146 
	`¥ötbuf_‰ì
(
pb
);

147 
	`¥ötf
("%s:ÉndÅe°\n", 
__func__
);

148 
	}
}

150 
	$maö
(
¨gc
, **
¨gv
)

152 
bef‹e_ªsize
 = 0;

154 
	`mc_£t_debug
(1);

156 
	`ã°_basic_¥ötbuf_mem£t
();

157 
	`¥ötf
("========================================\n");

158 
	`ã°_¥ötbuf_mem£t_Àngth
();

159 
	`¥ötf
("========================================\n");

160 
	`ã°_¥ötbuf_mem≠≥nd
(&
bef‹e_ªsize
);

161 
	`¥ötf
("========================================\n");

162 
	`ã°_•rötbuf
(
bef‹e_ªsize
);

163 
	`¥ötf
("========================================\n");

166 
	}
}

	@json/example/tests/test_set_serializer.c

1 
	~<as£π.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	~"js⁄.h
"

6 
	~"¥ötbuf.h
"

8 
	smyöfo
 {

9 
	mvÆue
;

12 
	g‰ìô_was_ˇŒed
 = 0;

13 
	$‰ìô
(
js⁄_obje˘
 *
jso
, *
u£rd©a
)

15 
myöfo
 *
öfo
 = 
u£rd©a
;

16 
	`¥ötf
("‰ìô, vÆue=%d\n", 
öfo
->
vÆue
);

18 
‰ìô_was_ˇŒed
 = 1;

19 
	}
}

20 
	$cu°om_£rülizî
(
js⁄_obje˘
 *
o
,

21 
¥ötbuf
 *
pb
,

22 
Àvñ
,

23 
Êags
)

25 
	`•rötbuf
(
pb
, "Custom Output");

27 
	}
}

29 
	$maö
(
¨gc
, **
¨gv
)

31 
js⁄_obje˘
 *
my_obje˘
;

33 
	`MC_SET_DEBUG
(1);

35 
	`¥ötf
("Test setting,ÅhenÑesettingá custom serializer:\n");

36 
my_obje˘
 = 
	`js⁄_obje˘_√w_obje˘
();

37 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "abc", 
	`js⁄_obje˘_√w_öt
(12));

38 
	`js⁄_obje˘_obje˘_add
(
my_obje˘
, "foo", 
	`js⁄_obje˘_√w_°rög
("bar"));

40 
	`¥ötf
("my_obje˘.to_°rög(°™d¨d)=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

42 
myöfo
 
u£rd©a
 = { .
vÆue
 = 123 };

43 
	`js⁄_obje˘_£t_£rülizî
(
my_obje˘
, 
cu°om_£rülizî
, &
u£rd©a
, 
‰ìô
);

45 
	`¥ötf
("my_obje˘.to_°rög(cu°om sîülizî)=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

47 
	`¥ötf
("NextÜine of output should be fromÅhe custom freeit function:\n");

48 
‰ìô_was_ˇŒed
 = 0;

49 
	`js⁄_obje˘_£t_£rülizî
(
my_obje˘
, 
NULL
, NULL, NULL);

50 
	`as£π
(
‰ìô_was_ˇŒed
);

52 
	`¥ötf
("my_obje˘.to_°rög(°™d¨d)=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

54 
	`js⁄_obje˘_put
(
my_obje˘
);

58 
my_obje˘
 = 
	`js⁄_obje˘_√w_obje˘
();

59 
	`¥ötf
("CheckÅhatÅhe custom serializer isn't free'd untilÅheÜast json_object_put:\n");

60 
	`js⁄_obje˘_£t_£rülizî
(
my_obje˘
, 
cu°om_£rülizî
, &
u£rd©a
, 
‰ìô
);

61 
	`js⁄_obje˘_gë
(
my_obje˘
);

62 
	`js⁄_obje˘_put
(
my_obje˘
);

63 
	`¥ötf
("my_obje˘.to_°rög(cu°om sîülizî)=%s\n", 
	`js⁄_obje˘_to_js⁄_°rög
(
my_obje˘
));

64 
	`¥ötf
("NextÜine of output should be fromÅhe custom freeit function:\n");

66 
‰ìô_was_ˇŒed
 = 0;

67 
	`js⁄_obje˘_put
(
my_obje˘
);

68 
	`as£π
(
‰ìô_was_ˇŒed
);

71 
	}
}

	@json/jconfig.h

8 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_FCNTL_H
 1

	)

17 
	#HAVE_INTTYPES_H
 1

	)

20 
	#HAVE_LIMITS_H
 1

	)

23 
	#HAVE_LOCALE_H
 1

	)

27 
	#HAVE_MALLOC
 1

	)

30 
	#HAVE_MEMORY_H
 1

	)

33 
	#HAVE_OPEN
 1

	)

37 
	#HAVE_REALLOC
 1

	)

40 
	#HAVE_SETLOCALE
 1

	)

43 
	#HAVE_SNPRINTF
 1

	)

46 
	#HAVE_STDARG_H
 1

	)

49 
	#HAVE_STDINT_H
 1

	)

52 
	#HAVE_STDLIB_H
 1

	)

55 
	#HAVE_STRCASECMP
 1

	)

58 
	#HAVE_STRDUP
 1

	)

61 
	#HAVE_STRERROR
 1

	)

64 
	#HAVE_STRINGS_H
 1

	)

67 
	#HAVE_STRING_H
 1

	)

70 
	#HAVE_STRNCASECMP
 1

	)

73 
	#HAVE_STRNDUP
 1

	)

76 
	#HAVE_SYSLOG_H
 1

	)

79 
	#HAVE_SYS_CDEFS_H
 1

	)

82 
	#HAVE_SYS_PARAM_H
 1

	)

85 
	#HAVE_SYS_STAT_H
 1

	)

88 
	#HAVE_SYS_TYPES_H
 1

	)

91 
	#HAVE_UNISTD_H
 1

	)

94 
	#HAVE_VASPRINTF
 1

	)

97 
	#HAVE_VPRINTF
 1

	)

100 
	#HAVE_VSNPRINTF
 1

	)

103 
	#HAVE_VSYSLOG
 1

	)

106 
	#JSON_C_HAVE_INTTYPES_H
 1

	)

110 
	#LT_OBJDIR
 ".libs/"

	)

113 
	#PACKAGE
 "js⁄-c"

	)

116 
	#PACKAGE_BUGREPORT
 "js⁄-c@googÀgroups.com"

	)

119 
	#PACKAGE_NAME
 "js⁄-c"

	)

122 
	#PACKAGE_STRING
 "js⁄-¯0.11"

	)

125 
	#PACKAGE_TARNAME
 "js⁄-c"

	)

128 
	#PACKAGE_URL
 ""

	)

131 
	#PACKAGE_VERSION
 "0.11"

	)

134 
	#STDC_HEADERS
 1

	)

137 
	#VERSION
 "0.11"

	)

	@json/json.h

13 #i‚de‡
_js⁄_h_


14 
	#_js⁄_h_


	)

16 #ifde‡
__˝lu•lus


20 
	~"bôs.h
"

21 
	~"debug.h
"

22 
	~"lökhash.h
"

23 
	~"¨øyli°.h
"

24 
	~"js⁄_utû.h
"

25 
	~"js⁄_obje˘.h
"

26 
	~"js⁄_tokíî.h
"

27 
	~"js⁄_obje˘_ôî©‹.h
"

28 
	~"js⁄_c_vîsi⁄.h
"

30 #ifde‡
__˝lu•lus


	@json/json_c_version.c

7 
	~"jc⁄fig.h
"

9 
	~"js⁄_c_vîsi⁄.h
"

11 c⁄° *
	$js⁄_c_vîsi⁄
()

13  
JSON_C_VERSION
;

14 
	}
}

16 
	$js⁄_c_vîsi⁄_num
()

18  
JSON_C_VERSION_NUM
;

19 
	}
}

	@json/json_c_version.h

8 #i‚de‡
_js⁄_c_vîsi⁄_h_


9 
	#_js⁄_c_vîsi⁄_h_


	)

11 
	#JSON_C_MAJOR_VERSION
 0

	)

12 
	#JSON_C_MINOR_VERSION
 11

	)

13 
	#JSON_C_MICRO_VERSION
 0

	)

14 
	#JSON_C_VERSION_NUM
 ((
JSON_C_MAJOR_VERSION
 << 16) | \

15 (
JSON_C_MINOR_VERSION
 << 8) | \

16 
JSON_C_MICRO_VERSION
)

	)

17 
	#JSON_C_VERSION
 "0.11"

	)

19 c⁄° *
js⁄_c_vîsi⁄
();

20 
js⁄_c_vîsi⁄_num
();

	@json/json_config.h

4 
	#JSON_C_HAVE_INTTYPES_H
 1

	)

	@json/json_inttypes.h

2 #i‚de‡
_js⁄_öây≥s_h_


3 
	#_js⁄_öây≥s_h_


	)

5 
	~"js⁄_c⁄fig.h
"

7 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1700

10 
__öt32
 
	töt32_t
;

11 
	#INT32_MIN
 ((
öt32_t
)
_I32_MIN
)

	)

12 
	#INT32_MAX
 ((
öt32_t
)
_I32_MAX
)

	)

13 
__öt64
 
	töt64_t
;

14 
	#INT64_MIN
 ((
öt64_t
)
_I64_MIN
)

	)

15 
	#INT64_MAX
 ((
öt64_t
)
_I64_MAX
)

	)

16 
	#PRId64
 "I64d"

	)

17 
	#SCNd64
 "I64d"

	)

21 #ifde‡
JSON_C_HAVE_INTTYPES_H


22 
	~<öây≥s.h
>

	@json/json_object.c

13 
	~"jc⁄fig.h
"

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°ddef.h
>

18 
	~<°rög.h
>

20 
	~"debug.h
"

21 
	~"¥ötbuf.h
"

22 
	~"lökhash.h
"

23 
	~"¨øyli°.h
"

24 
	~"js⁄_öây≥s.h
"

25 
	~"js⁄_obje˘.h
"

26 
	~"js⁄_obje˘_¥iv©e.h
"

27 
	~"js⁄_utû.h
"

29 #i‡!
deföed
(
HAVE_STRDUP
Ë&& deföed(
_MSC_VER
)

31 
	#°rdup
 
_°rdup


	)

32 #ñi‡!
deföed
(
HAVE_STRDUP
)

33 #îr‹ 
You
 dÿ
nŸ
 
have
 
°rdup
 
⁄
 
your
 
sy°em
.

36 #i‡!
deföed
(
HAVE_STRNDUP
)

37 * 
°∫dup
(c⁄° * 
°r
, 
size_t
 
n
);

43 c⁄° *
	gjs⁄_numbî_ch¨s
 = "0123456789.+-eE";

44 c⁄° *
	gjs⁄_hex_ch¨s
 = "0123456789abcdefABCDEF";

46 
js⁄_obje˘_gíîic_dñëe
(
js⁄_obje˘
* 
jso
);

47 
js⁄_obje˘
* 
js⁄_obje˘_√w
(
js⁄_ty≥
 
o_ty≥
);

49 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_obje˘_to_js⁄_°rög
;

50 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_boﬁón_to_js⁄_°rög
;

51 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_öt_to_js⁄_°rög
;

52 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_doubÀ_to_js⁄_°rög
;

53 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_°rög_to_js⁄_°rög
;

54 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_¨øy_to_js⁄_°rög
;

59 #ifde‡
REFCOUNT_DEBUG


61 
lh_èbÀ
 *
	gjs⁄_obje˘_èbÀ
;

63 
	$js⁄_obje˘_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

64 
	$js⁄_obje˘_öô
() {

65 
	`MC_DEBUG
("json_object_init: creating objectÅable\n");

66 
js⁄_obje˘_èbÀ
 = 
	`lh_k±r_èbÀ_√w
(128, "js⁄_obje˘_èbÀ", 
NULL
);

67 
	}
}

69 
	$js⁄_obje˘_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

70 
	$js⁄_obje˘_föi
() {

71 
lh_íåy
 *
ít
;

72 if(
	`MC_GET_DEBUG
()) {

73 i‡(
js⁄_obje˘_èbÀ
->
cou¡
) {

74 
	`MC_DEBUG
("json_object_fini: %dÑeferenced objectsátÉxit\n",

75 
js⁄_obje˘_èbÀ
->
cou¡
);

76 
	`lh_f‹óch
(
js⁄_obje˘_èbÀ
, 
ít
) {

77 
js⁄_obje˘
* 
obj
 = (js⁄_obje˘*)
ít
->
v
;

78 
	`MC_DEBUG
("\t%s:%p\n", 
	`js⁄_ty≥_to_«me
(
obj
->
o_ty≥
), obj);

82 
	`MC_DEBUG
("json_object_fini: freeing objectÅable\n");

83 
	`lh_èbÀ_‰ì
(
js⁄_obje˘_èbÀ
);

84 
	}
}

90 
	$js⁄_esˇ≥_°r
(
¥ötbuf
 *
pb
, *
°r
, 
Àn
)

92 
pos
 = 0, 
°¨t_off£t
 = 0;

93 
c
;

94 
Àn
--) {

95 
c
 = 
°r
[
pos
];

96 
c
) {

105 if(
pos
 - 
°¨t_off£t
 > 0)

106 
	`¥ötbuf_mem≠≥nd
(
pb
, 
°r
 + 
°¨t_off£t
, 
pos
 - start_offset);

107 if(
c
 ='\b'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\b", 2);

108 if(
c
 ='\n'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\n", 2);

109 if(
c
 ='\r'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\r", 2);

110 if(
c
 ='\t'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\t", 2);

111 if(
c
 ='\f'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\f", 2);

112 if(
c
 ='"'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\\"", 2);

113 if(
c
 ='\\'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\\\", 2);

114 if(
c
 ='/'Ë
	`¥ötbuf_mem≠≥nd
(
pb
, "\\/", 2);

115 
°¨t_off£t
 = ++
pos
;

118 if(
c
 < ' ') {

119 if(
pos
 - 
°¨t_off£t
 > 0)

120 
	`¥ötbuf_mem≠≥nd
(
pb
, 
°r
 + 
°¨t_off£t
, 
pos
 - start_offset);

121 
	`•rötbuf
(
pb
, "\\u00%c%c",

122 
js⁄_hex_ch¨s
[
c
 >> 4],

123 
js⁄_hex_ch¨s
[
c
 & 0xf]);

124 
°¨t_off£t
 = ++
pos
;

125 } 
pos
++;

128 if(
pos
 - 
°¨t_off£t
 > 0)

129 
	`¥ötbuf_mem≠≥nd
(
pb
, 
°r
 + 
°¨t_off£t
, 
pos
 - start_offset);

131 
	}
}

136 
js⁄_obje˘
* 
	$js⁄_obje˘_gë
(
js⁄_obje˘
 *
jso
)

138 if(
jso
) {

139 
jso
->
_ªf_cou¡
++;

141  
jso
;

142 
	}
}

144 
	$js⁄_obje˘_put
(
js⁄_obje˘
 *
jso
)

146 if(
jso
)

148 
jso
->
_ªf_cou¡
--;

149 if(!
jso
->
_ªf_cou¡
)

151 i‡(
jso
->
_u£r_dñëe
)

152 
jso
->
	`_u£r_dñëe
(jso, jso->
_u£rd©a
);

153 
jso
->
	`_dñëe
(jso);

158 
	}
}

163 
	$js⁄_obje˘_gíîic_dñëe
(
js⁄_obje˘
* 
jso
)

165 #ifde‡
REFCOUNT_DEBUG


166 
	`MC_DEBUG
("json_object_delete_%s: %p\n",

167 
	`js⁄_ty≥_to_«me
(
jso
->
o_ty≥
), jso);

168 
	`lh_èbÀ_dñëe
(
js⁄_obje˘_èbÀ
, 
jso
);

170 
	`¥ötbuf_‰ì
(
jso
->
_pb
);

171 
	`‰ì
(
jso
);

172 
	}
}

174 
js⁄_obje˘
* 
	$js⁄_obje˘_√w
(
js⁄_ty≥
 
o_ty≥
)

176 
js⁄_obje˘
 *
jso
;

178 
jso
 = (
js⁄_obje˘
*)
	`ˇŒoc
((json_object), 1);

179 if(!
jso
Ë 
NULL
;

180 
jso
->
o_ty≥
 = o_type;

181 
jso
->
_ªf_cou¡
 = 1;

182 
jso
->
_dñëe
 = &
js⁄_obje˘_gíîic_dñëe
;

183 #ifde‡
REFCOUNT_DEBUG


184 
	`lh_èbÀ_ö£π
(
js⁄_obje˘_èbÀ
, 
jso
, jso);

185 
	`MC_DEBUG
("js⁄_obje˘_√w_%s: %p\n", 
	`js⁄_ty≥_to_«me
(
jso
->
o_ty≥
), jso);

187  
jso
;

188 
	}
}

193 
	$js⁄_obje˘_is_ty≥
(
js⁄_obje˘
 *
jso
, 
js⁄_ty≥
 
ty≥
)

195 i‡(!
jso
)

196  (
ty≥
 =
js⁄_ty≥_nuŒ
);

197  (
jso
->
o_ty≥
 =
ty≥
);

198 
	}
}

200 
js⁄_ty≥
 
	$js⁄_obje˘_gë_ty≥
(
js⁄_obje˘
 *
jso
)

202 i‡(!
jso
)

203  
js⁄_ty≥_nuŒ
;

204  
jso
->
o_ty≥
;

205 
	}
}

209 
	$js⁄_obje˘_£t_£rülizî
(
js⁄_obje˘
 *
jso
,

210 
js⁄_obje˘_to_js⁄_°rög_‚
 
to_°rög_func
,

211 *
u£rd©a
,

212 
js⁄_obje˘_dñëe_‚
 *
u£r_dñëe
)

215 i‡(
jso
->
_u£r_dñëe
)

217 
jso
->
	`_u£r_dñëe
(jso, jso->
_u£rd©a
);

219 
jso
->
_u£rd©a
 = 
NULL
;

220 
jso
->
_u£r_dñëe
 = 
NULL
;

222 i‡(
to_°rög_func
 =
NULL
)

225 
jso
->
o_ty≥
)

227 
js⁄_ty≥_nuŒ
:

228 
jso
->
_to_js⁄_°rög
 = 
NULL
;

230 
js⁄_ty≥_boﬁón
:

231 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_boﬁón_to_js⁄_°rög
;

233 
js⁄_ty≥_doubÀ
:

234 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_doubÀ_to_js⁄_°rög
;

236 
js⁄_ty≥_öt
:

237 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_öt_to_js⁄_°rög
;

239 
js⁄_ty≥_obje˘
:

240 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_obje˘_to_js⁄_°rög
;

242 
js⁄_ty≥_¨øy
:

243 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_¨øy_to_js⁄_°rög
;

245 
js⁄_ty≥_°rög
:

246 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_°rög_to_js⁄_°rög
;

252 
jso
->
_to_js⁄_°rög
 = 
to_°rög_func
;

253 
jso
->
_u£rd©a
 = 
u£rd©a
;

254 
jso
->
_u£r_dñëe
 = 
u£r_dñëe
;

255 
	}
}

260 c⁄° * 
	$js⁄_obje˘_to_js⁄_°rög_ext
(
js⁄_obje˘
 *
jso
, 
Êags
)

262 i‡(!
jso
)

265 i‡((!
jso
->
_pb
Ë&& !(jso->_pb = 
	`¥ötbuf_√w
()))

266  
NULL
;

268 
	`¥ötbuf_ª£t
(
jso
->
_pb
);

270 if(
jso
->
	`_to_js⁄_°rög
(jso, jso->
_pb
, 0, 
Êags
) < 0)

271  
NULL
;

273  
jso
->
_pb
->
buf
;

274 
	}
}

278 c⁄° * 
	$js⁄_obje˘_to_js⁄_°rög
(
js⁄_obje˘
 *
jso
)

280  
	`js⁄_obje˘_to_js⁄_°rög_ext
(
jso
, 
JSON_C_TO_STRING_SPACED
);

281 
	}
}

283 
	$ödít
(
¥ötbuf
 *
pb
, 
Àvñ
, 
Êags
)

285 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

287 
	`¥ötbuf_mem£t
(
pb
, -1, ' ', 
Àvñ
 * 2);

289 
	}
}

293 
	$js⁄_obje˘_obje˘_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

294 
¥ötbuf
 *
pb
,

295 
Àvñ
,

296 
Êags
)

298 
had_chûdªn
 = 0;

299 
js⁄_obje˘_ôî
 
ôî
;

301 
	`•rötbuf
(
pb
, "{" );

302 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

303 
	`•rötbuf
(
pb
, "\n");

304 
	`js⁄_obje˘_obje˘_f‹óchC
(
jso
, 
ôî
)

306 i‡(
had_chûdªn
)

308 
	`•rötbuf
(
pb
, ",");

309 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

310 
	`•rötbuf
(
pb
, "\n");

312 
had_chûdªn
 = 1;

313 i‡(
Êags
 & 
JSON_C_TO_STRING_SPACED
)

314 
	`•rötbuf
(
pb
, " ");

315 
	`ödít
(
pb
, 
Àvñ
+1, 
Êags
);

316 
	`•rötbuf
(
pb
, "\"");

317 
	`js⁄_esˇ≥_°r
(
pb
, 
ôî
.
key
, 
	`°æí
(iter.key));

318 i‡(
Êags
 & 
JSON_C_TO_STRING_SPACED
)

319 
	`•rötbuf
(
pb
, "\": ");

321 
	`•rötbuf
(
pb
, "\":");

322 if(
ôî
.
vÆ
 =
NULL
)

323 
	`•rötbuf
(
pb
, "null");

325 
ôî
.
vÆ
->
	`_to_js⁄_°rög
(ôî.vÆ, 
pb
, 
Àvñ
+1,
Êags
);

327 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

329 i‡(
had_chûdªn
)

330 
	`•rötbuf
(
pb
, "\n");

331 
	`ödít
(
pb
,
Àvñ
,
Êags
);

333 i‡(
Êags
 & 
JSON_C_TO_STRING_SPACED
)

334  
	`•rötbuf
(
pb
, " }");

336  
	`•rötbuf
(
pb
, "}");

337 
	}
}

340 
	$js⁄_obje˘_lh_íåy_‰ì
(
lh_íåy
 *
ít
)

342 
	`‰ì
(
ít
->
k
);

343 
	`js⁄_obje˘_put
((
js⁄_obje˘
*)
ít
->
v
);

344 
	}
}

346 
	$js⁄_obje˘_obje˘_dñëe
(
js⁄_obje˘
* 
jso
)

348 
	`lh_èbÀ_‰ì
(
jso
->
o
.
c_obje˘
);

349 
	`js⁄_obje˘_gíîic_dñëe
(
jso
);

350 
	}
}

352 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_obje˘
()

354 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_obje˘
);

355 if(!
jso
Ë 
NULL
;

356 
jso
->
_dñëe
 = &
js⁄_obje˘_obje˘_dñëe
;

357 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_obje˘_to_js⁄_°rög
;

358 
jso
->
o
.
c_obje˘
 = 
	`lh_kch¨_èbÀ_√w
(
JSON_OBJECT_DEF_HASH_ENTRIES
,

359 
NULL
, &
js⁄_obje˘_lh_íåy_‰ì
);

360  
jso
;

361 
	}
}

363 
lh_èbÀ
* 
	$js⁄_obje˘_gë_obje˘
(
js⁄_obje˘
 *
jso
)

365 if(!
jso
Ë 
NULL
;

366 
jso
->
o_ty≥
) {

367 
js⁄_ty≥_obje˘
:

368  
jso
->
o
.
c_obje˘
;

370  
NULL
;

372 
	}
}

374 
	$js⁄_obje˘_obje˘_add
(
js⁄_obje˘
* 
jso
, c⁄° *
key
,

375 
js⁄_obje˘
 *
vÆ
)

379 
js⁄_obje˘
 *
exi°ög_vÆue
 = 
NULL
;

380 
lh_íåy
 *
exi°ög_íåy
;

381 
exi°ög_íåy
 = 
	`lh_èbÀ_lookup_íåy
(
jso
->
o
.
c_obje˘
, (*)
key
);

382 i‡(!
exi°ög_íåy
)

384 
	`lh_èbÀ_ö£π
(
jso
->
o
.
c_obje˘
, 
	`°rdup
(
key
), 
vÆ
);

387 
exi°ög_vÆue
 = (*)
exi°ög_íåy
->
v
;

388 i‡(
exi°ög_vÆue
)

389 
	`js⁄_obje˘_put
(
exi°ög_vÆue
);

390 
exi°ög_íåy
->
v
 = 
vÆ
;

391 
	}
}

393 
	$js⁄_obje˘_obje˘_Àngth
(
js⁄_obje˘
 *
jso
)

395  
	`lh_èbÀ_Àngth
(
jso
->
o
.
c_obje˘
);

396 
	}
}

398 
js⁄_obje˘
* 
	$js⁄_obje˘_obje˘_gë
(
js⁄_obje˘
* 
jso
, c⁄° *
key
)

400 
js⁄_obje˘
 *
ªsu…
 = 
NULL
;

401 
	`js⁄_obje˘_obje˘_gë_ex
(
jso
, 
key
, &
ªsu…
);

402  
ªsu…
;

403 
	}
}

405 
js⁄_boﬁ
 
	$js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
* 
jso
, c⁄° *
key
, js⁄_obje˘ **
vÆue
)

407 i‡(
vÆue
 !
NULL
)

408 *
vÆue
 = 
NULL
;

410 i‡(
NULL
 =
jso
)

411  
FALSE
;

413 
jso
->
o_ty≥
)

415 
js⁄_ty≥_obje˘
:

416  
	`lh_èbÀ_lookup_ex
(
jso
->
o
.
c_obje˘
, (*)
key
, (**)
vÆue
);

418 i‡(
vÆue
 !
NULL
)

419 *
vÆue
 = 
NULL
;

420  
FALSE
;

422 
	}
}

424 
	$js⁄_obje˘_obje˘_dñ
(
js⁄_obje˘
* 
jso
, c⁄° *
key
)

426 
	`lh_èbÀ_dñëe
(
jso
->
o
.
c_obje˘
, 
key
);

427 
	}
}

432 
	$js⁄_obje˘_boﬁón_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

433 
¥ötbuf
 *
pb
,

434 
Àvñ
,

435 
Êags
)

437 if(
jso
->
o
.
c_boﬁón
Ë 
	`•rötbuf
(
pb
, "true");

438  
	`•rötbuf
(
pb
, "false");

439 
	}
}

441 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_boﬁón
(
js⁄_boﬁ
 
b
)

443 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_boﬁón
);

444 if(!
jso
Ë 
NULL
;

445 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_boﬁón_to_js⁄_°rög
;

446 
jso
->
o
.
c_boﬁón
 = 
b
;

447  
jso
;

448 
	}
}

450 
js⁄_boﬁ
 
	$js⁄_obje˘_gë_boﬁón
(
js⁄_obje˘
 *
jso
)

452 if(!
jso
Ë 
FALSE
;

453 
jso
->
o_ty≥
) {

454 
js⁄_ty≥_boﬁón
:

455  
jso
->
o
.
c_boﬁón
;

456 
js⁄_ty≥_öt
:

457  (
jso
->
o
.
c_öt64
 != 0);

458 
js⁄_ty≥_doubÀ
:

459  (
jso
->
o
.
c_doubÀ
 != 0);

460 
js⁄_ty≥_°rög
:

461  (
jso
->
o
.
c_°rög
.
Àn
 != 0);

463  
FALSE
;

465 
	}
}

470 
	$js⁄_obje˘_öt_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

471 
¥ötbuf
 *
pb
,

472 
Àvñ
,

473 
Êags
)

475  
	`•rötbuf
(
pb
, "%"
PRId64
, 
jso
->
o
.
c_öt64
);

476 
	}
}

478 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_öt
(
öt32_t
 
i
)

480 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_öt
);

481 if(!
jso
Ë 
NULL
;

482 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_öt_to_js⁄_°rög
;

483 
jso
->
o
.
c_öt64
 = 
i
;

484  
jso
;

485 
	}
}

487 
öt32_t
 
	$js⁄_obje˘_gë_öt
(
js⁄_obje˘
 *
jso
)

489 
öt64_t
 
cöt64
;

490 
js⁄_ty≥
 
o_ty≥
;

492 if(!
jso
)  0;

494 
o_ty≥
 = 
jso
->o_type;

495 
cöt64
 = 
jso
->
o
.
c_öt64
;

497 i‡(
o_ty≥
 =
js⁄_ty≥_°rög
)

503 i‡(
	`js⁄_∑r£_öt64
(
jso
->
o
.
c_°rög
.
°r
, &
cöt64
) != 0)

505 
o_ty≥
 = 
js⁄_ty≥_öt
;

508 
o_ty≥
) {

509 
js⁄_ty≥_öt
:

511 i‡(
cöt64
 <
INT32_MIN
)

512  
INT32_MIN
;

513 i‡(
cöt64
 >
INT32_MAX
)

514  
INT32_MAX
;

516  (
öt32_t
)
cöt64
;

517 
js⁄_ty≥_doubÀ
:

518  (
öt32_t
)
jso
->
o
.
c_doubÀ
;

519 
js⁄_ty≥_boﬁón
:

520  
jso
->
o
.
c_boﬁón
;

524 
	}
}

526 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_öt64
(
öt64_t
 
i
)

528 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_öt
);

529 if(!
jso
Ë 
NULL
;

530 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_öt_to_js⁄_°rög
;

531 
jso
->
o
.
c_öt64
 = 
i
;

532  
jso
;

533 
	}
}

535 
öt64_t
 
	$js⁄_obje˘_gë_öt64
(
js⁄_obje˘
 *
jso
)

537 
öt64_t
 
cöt
;

539 if(!
jso
)  0;

540 
jso
->
o_ty≥
) {

541 
js⁄_ty≥_öt
:

542  
jso
->
o
.
c_öt64
;

543 
js⁄_ty≥_doubÀ
:

544  (
öt64_t
)
jso
->
o
.
c_doubÀ
;

545 
js⁄_ty≥_boﬁón
:

546  
jso
->
o
.
c_boﬁón
;

547 
js⁄_ty≥_°rög
:

548 i‡(
	`js⁄_∑r£_öt64
(
jso
->
o
.
c_°rög
.
°r
, &
cöt
) == 0)  cint;

552 
	}
}

557 
	$js⁄_obje˘_doubÀ_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

558 
¥ötbuf
 *
pb
,

559 
Àvñ
,

560 
Êags
)

562 
buf
[128], *
p
, *
q
;

563 
size
;

565 
size
 = 
	`¢¥ötf
(
buf
, 128, "%f", 
jso
->
o
.
c_doubÀ
);

566 
p
 = 
	`°rchr
(
buf
, ',');

567 i‡(
p
) {

568 *
p
 = '.';

570 
p
 = 
	`°rchr
(
buf
, '.');

572 i‡(
p
 && (
Êags
 & 
JSON_C_TO_STRING_NOZERO
)) {

574 
p
++;

575 
q
=
p
 ; *q ; q++) {

576 i‡(*
q
!='0'Ë
p
=q;

579 *(++
p
) = 0;

580 
size
 = 
p
-
buf
;

582 
	`¥ötbuf_mem≠≥nd
(
pb
, 
buf
, 
size
);

583  
size
;

584 
	}
}

586 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_doubÀ
(
d
)

588 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_doubÀ
);

589 if(!
jso
Ë 
NULL
;

590 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_doubÀ_to_js⁄_°rög
;

591 
jso
->
o
.
c_doubÀ
 = 
d
;

592  
jso
;

593 
	}
}

595 
	$js⁄_obje˘_gë_doubÀ
(
js⁄_obje˘
 *
jso
)

597 
cdoubÀ
;

599 if(!
jso
)  0.0;

600 
jso
->
o_ty≥
) {

601 
js⁄_ty≥_doubÀ
:

602  
jso
->
o
.
c_doubÀ
;

603 
js⁄_ty≥_öt
:

604  
jso
->
o
.
c_öt64
;

605 
js⁄_ty≥_boﬁón
:

606  
jso
->
o
.
c_boﬁón
;

607 
js⁄_ty≥_°rög
:

608 if(
	`ssˇnf
(
jso
->
o
.
c_°rög
.
°r
, "%lf", &
cdoubÀ
) == 1)  cdouble;

612 
	}
}

617 
	$js⁄_obje˘_°rög_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

618 
¥ötbuf
 *
pb
,

619 
Àvñ
,

620 
Êags
)

622 
	`•rötbuf
(
pb
, "\"");

623 
	`js⁄_esˇ≥_°r
(
pb
, 
jso
->
o
.
c_°rög
.
°r
, jso->o.c_°rög.
Àn
);

624 
	`•rötbuf
(
pb
, "\"");

626 
	}
}

628 
	$js⁄_obje˘_°rög_dñëe
(
js⁄_obje˘
* 
jso
)

630 
	`‰ì
(
jso
->
o
.
c_°rög
.
°r
);

631 
	`js⁄_obje˘_gíîic_dñëe
(
jso
);

632 
	}
}

634 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_°rög
(c⁄° *
s
)

636 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_°rög
);

637 if(!
jso
Ë 
NULL
;

638 
jso
->
_dñëe
 = &
js⁄_obje˘_°rög_dñëe
;

639 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_°rög_to_js⁄_°rög
;

640 
jso
->
o
.
c_°rög
.
°r
 = 
	`°rdup
(
s
);

641 
jso
->
o
.
c_°rög
.
Àn
 = 
	`°æí
(
s
);

642  
jso
;

643 
	}
}

645 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_°rög_Àn
(c⁄° *
s
, 
Àn
)

647 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_°rög
);

648 if(!
jso
Ë 
NULL
;

649 
jso
->
_dñëe
 = &
js⁄_obje˘_°rög_dñëe
;

650 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_°rög_to_js⁄_°rög
;

651 
jso
->
o
.
c_°rög
.
°r
 = (*)
	`mÆloc
(
Àn
 + 1);

652 
	`mem˝y
(
jso
->
o
.
c_°rög
.
°r
, (*)
s
, 
Àn
);

653 
jso
->
o
.
c_°rög
.
°r
[
Àn
] = '\0';

654 
jso
->
o
.
c_°rög
.
Àn
 =Üen;

655  
jso
;

656 
	}
}

658 c⁄° * 
	$js⁄_obje˘_gë_°rög
(
js⁄_obje˘
 *
jso
)

660 if(!
jso
Ë 
NULL
;

661 
jso
->
o_ty≥
) {

662 
js⁄_ty≥_°rög
:

663  
jso
->
o
.
c_°rög
.
°r
;

665  
	`js⁄_obje˘_to_js⁄_°rög
(
jso
);

667 
	}
}

669 
	$js⁄_obje˘_gë_°rög_Àn
(
js⁄_obje˘
 *
jso
) {

670 if(!
jso
)  0;

671 
jso
->
o_ty≥
) {

672 
js⁄_ty≥_°rög
:

673  
jso
->
o
.
c_°rög
.
Àn
;

677 
	}
}

682 
	$js⁄_obje˘_¨øy_to_js⁄_°rög
(
js⁄_obje˘
* 
jso
,

683 
¥ötbuf
 *
pb
,

684 
Àvñ
,

685 
Êags
)

687 
had_chûdªn
 = 0;

688 
ii
;

689 
	`•rötbuf
(
pb
, "[");

690 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

691 
	`•rötbuf
(
pb
, "\n");

692 
ii
=0; iò< 
	`js⁄_obje˘_¨øy_Àngth
(
jso
); ii++)

694 
js⁄_obje˘
 *
vÆ
;

695 i‡(
had_chûdªn
)

697 
	`•rötbuf
(
pb
, ",");

698 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

699 
	`•rötbuf
(
pb
, "\n");

701 
had_chûdªn
 = 1;

702 i‡(
Êags
 & 
JSON_C_TO_STRING_SPACED
)

703 
	`•rötbuf
(
pb
, " ");

704 
	`ödít
(
pb
, 
Àvñ
 + 1, 
Êags
);

705 
vÆ
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
jso
, 
ii
);

706 if(
vÆ
 =
NULL
)

707 
	`•rötbuf
(
pb
, "null");

709 
vÆ
->
	`_to_js⁄_°rög
(vÆ, 
pb
, 
Àvñ
+1, 
Êags
);

711 i‡(
Êags
 & 
JSON_C_TO_STRING_PRETTY
)

713 i‡(
had_chûdªn
)

714 
	`•rötbuf
(
pb
, "\n");

715 
	`ödít
(
pb
,
Àvñ
,
Êags
);

718 i‡(
Êags
 & 
JSON_C_TO_STRING_SPACED
)

719  
	`•rötbuf
(
pb
, " ]");

721  
	`•rötbuf
(
pb
, "]");

722 
	}
}

724 
	$js⁄_obje˘_¨øy_íåy_‰ì
(*
d©a
)

726 
	`js⁄_obje˘_put
((
js⁄_obje˘
*)
d©a
);

727 
	}
}

729 
	$js⁄_obje˘_¨øy_dñëe
(
js⁄_obje˘
* 
jso
)

731 
	`¨øy_li°_‰ì
(
jso
->
o
.
c_¨øy
);

732 
	`js⁄_obje˘_gíîic_dñëe
(
jso
);

733 
	}
}

735 
js⁄_obje˘
* 
	$js⁄_obje˘_√w_¨øy
()

737 
js⁄_obje˘
 *
jso
 = 
	`js⁄_obje˘_√w
(
js⁄_ty≥_¨øy
);

738 if(!
jso
Ë 
NULL
;

739 
jso
->
_dñëe
 = &
js⁄_obje˘_¨øy_dñëe
;

740 
jso
->
_to_js⁄_°rög
 = &
js⁄_obje˘_¨øy_to_js⁄_°rög
;

741 
jso
->
o
.
c_¨øy
 = 
	`¨øy_li°_√w
(&
js⁄_obje˘_¨øy_íåy_‰ì
);

742  
jso
;

743 
	}
}

745 
¨øy_li°
* 
	$js⁄_obje˘_gë_¨øy
(
js⁄_obje˘
 *
jso
)

747 if(!
jso
Ë 
NULL
;

748 
jso
->
o_ty≥
) {

749 
js⁄_ty≥_¨øy
:

750  
jso
->
o
.
c_¨øy
;

752  
NULL
;

754 
	}
}

756 
js⁄_obje˘_¨øy_s‹t
(
js⁄_obje˘
 *
jso
, (*
s‹t_‚
)(const *, const *))

758 
	`¨øy_li°_s‹t
(
jso
->
o
.
c_¨øy
, 
s‹t_‚
);

759 
	}
}

761 
	$js⁄_obje˘_¨øy_Àngth
(
js⁄_obje˘
 *
jso
)

763  
	`¨øy_li°_Àngth
(
jso
->
o
.
c_¨øy
);

764 
	}
}

766 
	$js⁄_obje˘_¨øy_add
(
js⁄_obje˘
 *
jso
,js⁄_obje˘ *
vÆ
)

768  
	`¨øy_li°_add
(
jso
->
o
.
c_¨øy
, 
vÆ
);

769 
	}
}

771 
	$js⁄_obje˘_¨øy_put_idx
(
js⁄_obje˘
 *
jso
, 
idx
,

772 
js⁄_obje˘
 *
vÆ
)

774  
	`¨øy_li°_put_idx
(
jso
->
o
.
c_¨øy
, 
idx
, 
vÆ
);

775 
	}
}

777 
js⁄_obje˘
* 
	$js⁄_obje˘_¨øy_gë_idx
(
js⁄_obje˘
 *
jso
,

778 
idx
)

780  (
js⁄_obje˘
*)
	`¨øy_li°_gë_idx
(
jso
->
o
.
c_¨øy
, 
idx
);

781 
	}
}

	@json/json_object.h

13 #i‚de‡
_js⁄_obje˘_h_


14 
	#_js⁄_obje˘_h_


	)

16 
	~"js⁄_öây≥s.h
"

18 #ifde‡
__˝lu•lus


22 
	#JSON_OBJECT_DEF_HASH_ENTRIES
 16

	)

29 
	#JSON_C_TO_STRING_PLAIN
 0

	)

35 
	#JSON_C_TO_STRING_SPACED
 (1<<0)

	)

44 
	#JSON_C_TO_STRING_PRETTY
 (1<<1)

	)

48 
	#JSON_C_TO_STRING_NOZERO
 (1<<2)

	)

50 #unde‡
FALSE


51 
	#FALSE
 ((
js⁄_boﬁ
)0)

	)

53 #unde‡
TRUE


54 
	#TRUE
 ((
js⁄_boﬁ
)1)

	)

56 c⁄° *
js⁄_numbî_ch¨s
;

57 c⁄° *
js⁄_hex_ch¨s
;

60 
	sjs⁄_obje˘_ôî


62 *
	gkey
;

63 
js⁄_obje˘
 *
	gvÆ
;

64 
lh_íåy
 *
	gíåy
;

69 
	tjs⁄_boﬁ
;

70 
¥ötbuf
 
	t¥ötbuf
;

71 
lh_èbÀ
 
	tlh_èbÀ
;

72 
¨øy_li°
 
	t¨øy_li°
;

73 
js⁄_obje˘
 
	tjs⁄_obje˘
;

74 
js⁄_obje˘_ôî
 
	tjs⁄_obje˘_ôî
;

75 
js⁄_tokíî
 
	tjs⁄_tokíî
;

80 (
	gjs⁄_obje˘_dñëe_‚
)(
	tjs⁄_obje˘
 *
	tjso
, *
	tu£rd©a
);

85 (
	gjs⁄_obje˘_to_js⁄_°rög_‚
)(
	tjs⁄_obje˘
 *
	tjso
,

86 
	t¥ötbuf
 *
	tpb
,

87 
	tÀvñ
,

88 
	tÊags
);

92 
	ejs⁄_ty≥
 {

94 
	gjs⁄_ty≥_nuŒ
,

95 
	gjs⁄_ty≥_boﬁón
,

96 
	gjs⁄_ty≥_doubÀ
,

97 
	gjs⁄_ty≥_öt
,

98 
	gjs⁄_ty≥_obje˘
,

99 
	gjs⁄_ty≥_¨øy
,

100 
	gjs⁄_ty≥_°rög
,

101 } 
	tjs⁄_ty≥
;

111 
js⁄_obje˘
* 
js⁄_obje˘_gë
(js⁄_obje˘ *
obj
);

121 
js⁄_obje˘_put
(
js⁄_obje˘
 *
obj
);

135 
js⁄_obje˘_is_ty≥
(
js⁄_obje˘
 *
obj
, 
js⁄_ty≥
 
ty≥
);

151 
js⁄_ty≥
 
js⁄_obje˘_gë_ty≥
(
js⁄_obje˘
 *
obj
);

159 c⁄° * 
js⁄_obje˘_to_js⁄_°rög
(
js⁄_obje˘
 *
obj
);

166 c⁄° * 
js⁄_obje˘_to_js⁄_°rög_ext
(
js⁄_obje˘
 *
obj
, 

167 
Êags
);

195 
js⁄_obje˘_£t_£rülizî
(
js⁄_obje˘
 *
jso
,

196 
js⁄_obje˘_to_js⁄_°rög_‚
 
to_°rög_func
,

197 *
u£rd©a
,

198 
js⁄_obje˘_dñëe_‚
 *
u£r_dñëe
);

214 
js⁄_obje˘
* 
js⁄_obje˘_√w_obje˘
();

220 
lh_èbÀ
* 
js⁄_obje˘_gë_obje˘
(
js⁄_obje˘
 *
obj
);

225 
js⁄_obje˘_obje˘_Àngth
(
js⁄_obje˘
* 
obj
);

243 
js⁄_obje˘_obje˘_add
(
js⁄_obje˘
* 
obj
, c⁄° *
key
,

244 
js⁄_obje˘
 *
vÆ
);

263 
js⁄_obje˘
* 
js⁄_obje˘_obje˘_gë
(js⁄_obje˘* 
obj
,

264 c⁄° *
key
);

284 
js⁄_boﬁ
 
js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
* 
obj
,

285 c⁄° *
key
,

286 
js⁄_obje˘
 **
vÆue
);

297 
js⁄_obje˘_obje˘_dñ
(
js⁄_obje˘
* 
obj
, c⁄° *
key
);

312 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
Ë&& 
__STDC_VERSION__
 >= 199901L

314 
	#js⁄_obje˘_obje˘_f‹óch
(
obj
,
key
,
vÆ
) \

315 *
key
; \

316 
js⁄_obje˘
 *
vÆ
 
	`__©åibuã__
((
__unu£d__
)); \

317 
lh_íåy
 *
íåy
 ## 
key
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
, *
íåy_√xt
 ## key = 
NULL
; \

318 ({ if(
íåy
 ## 
key
) { \

319 
key
 = (*)
íåy
 ## key->
k
; \

320 
vÆ
 = (
js⁄_obje˘
*)
íåy
 ## 
key
->
v
; \

321 
íåy_√xt
 ## 
key
 = 
íåy
 ## key->
√xt
; \

322 } ; 
íåy
 ## 
key
; }); \

323 
íåy
 ## 
key
 = 
íåy_√xt
 ## key )

	)

327 
	#js⁄_obje˘_obje˘_f‹óch
(
obj
,
key
,
vÆ
) \

328 *
key
;\

329 
js⁄_obje˘
 *
vÆ
; \

330 
lh_íåy
 *
íåy
 ## 
key
; \

331 
lh_íåy
 *
íåy_√xt
 ## 
key
 = 
NULL
; \

332 
íåy
 ## 
key
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
; \

333 (
íåy
 ## 
key
 ? ( \

334 
key
 = (*)
íåy
 ## key->
k
, \

335 
vÆ
 = (
js⁄_obje˘
*)
íåy
 ## 
key
->
v
, \

336 
íåy_√xt
 ## 
key
 = 
íåy
 ## key->
√xt
, \

337 
íåy
 ## 
key
) : 0); \

338 
íåy
 ## 
key
 = 
íåy_√xt
 ## key)

	)

346 
	#js⁄_obje˘_obje˘_f‹óchC
(
obj
,
ôî
) \

347 
ôî
.
íåy
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
; (ôî.íåy ? (ôî.
key
 = (*)ôî.íåy->
k
, iãr.
vÆ
 = (
js⁄_obje˘
*)ôî.íåy->
v
, iãr.íåyË: 0); iãr.íåy = iãr.íåy->
√xt
)

	)

354 
js⁄_obje˘
* 
js⁄_obje˘_√w_¨øy
();

360 
¨øy_li°
* 
js⁄_obje˘_gë_¨øy
(
js⁄_obje˘
 *
obj
);

366 
js⁄_obje˘_¨øy_Àngth
(
js⁄_obje˘
 *
obj
);

376 
js⁄_obje˘_¨øy_s‹t
(
js⁄_obje˘
 *
jso
, (*
s‹t_‚
)(const *, const *));

387 
js⁄_obje˘_¨øy_add
(
js⁄_obje˘
 *
obj
,

388 
js⁄_obje˘
 *
vÆ
);

405 
js⁄_obje˘_¨øy_put_idx
(
js⁄_obje˘
 *
obj
, 
idx
,

406 
js⁄_obje˘
 *
vÆ
);

413 
js⁄_obje˘
* 
js⁄_obje˘_¨øy_gë_idx
(js⁄_obje˘ *
obj
,

414 
idx
);

422 
js⁄_obje˘
* 
js⁄_obje˘_√w_boﬁón
(
js⁄_boﬁ
 
b
);

435 
js⁄_boﬁ
 
js⁄_obje˘_gë_boﬁón
(
js⁄_obje˘
 *
obj
);

446 
js⁄_obje˘
* 
js⁄_obje˘_√w_öt
(
öt32_t
 
i
);

453 
js⁄_obje˘
* 
js⁄_obje˘_√w_öt64
(
öt64_t
 
i
);

470 
öt32_t
 
js⁄_obje˘_gë_öt
(
js⁄_obje˘
 *
obj
);

485 
öt64_t
 
js⁄_obje˘_gë_öt64
(
js⁄_obje˘
 *
obj
);

494 
js⁄_obje˘
* 
js⁄_obje˘_√w_doubÀ
(
d
);

519 
js⁄_obje˘_gë_doubÀ
(
js⁄_obje˘
 *
obj
);

531 
js⁄_obje˘
* 
js⁄_obje˘_√w_°rög
(c⁄° *
s
);

533 
js⁄_obje˘
* 
js⁄_obje˘_√w_°rög_Àn
(c⁄° *
s
, 
Àn
);

546 c⁄° * 
js⁄_obje˘_gë_°rög
(
js⁄_obje˘
 *
obj
);

556 
js⁄_obje˘_gë_°rög_Àn
(
js⁄_obje˘
 *
obj
);

558 #ifde‡
__˝lu•lus


	@json/json_object_iterator.c

18 
	~<°ddef.h
>

20 
	~"js⁄.h
"

21 
	~"js⁄_obje˘_¥iv©e.h
"

23 
	~"js⁄_obje˘_ôî©‹.h
"

61 c⁄° * 
	gkObje˘EndIãrVÆue
 = 
NULL
;

66 
js⁄_obje˘_ôî©‹


67 
	$js⁄_obje˘_ôî_begö
(
js⁄_obje˘
* 
obj
)

69 
js⁄_obje˘_ôî©‹
 
ôî
;

70 
lh_èbÀ
* 
pTabÀ
;

74 
pTabÀ
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
);

75 
	`JASSERT
(
NULL
 !
pTabÀ
);

79 
ôî
.
›aque_
 = 
pTabÀ
->
hód
;

80  
ôî
;

81 
	}
}

86 
js⁄_obje˘_ôî©‹


87 
	$js⁄_obje˘_ôî_íd
(c⁄° 
js⁄_obje˘
* 
obj
)

89 
js⁄_obje˘_ôî©‹
 
ôî
;

91 
	`JASSERT
(
NULL
 !
obj
);

92 
	`JASSERT
(
	`js⁄_obje˘_is_ty≥
(
obj
, 
js⁄_ty≥_obje˘
));

94 
ôî
.
›aque_
 = 
kObje˘EndIãrVÆue
;

96  
ôî
;

97 
	}
}

103 
	$js⁄_obje˘_ôî_√xt
(
js⁄_obje˘_ôî©‹
* 
ôî
)

105 
	`JASSERT
(
NULL
 !
ôî
);

106 
	`JASSERT
(
kObje˘EndIãrVÆue
 !
ôî
->
›aque_
);

108 
ôî
->
›aque_
 = ((
lh_íåy
 *)ôî->›aque_)->
√xt
;

109 
	}
}

116 
	$js⁄_obje˘_ôî_≥ek_«me
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî
)

118 
	`JASSERT
(
NULL
 !
ôî
);

119 
	`JASSERT
(
kObje˘EndIãrVÆue
 !
ôî
->
›aque_
);

121  (c⁄° *)(((
lh_íåy
 *)
ôî
->
›aque_
)->
k
);

122 
	}
}

128 
js⁄_obje˘
*

129 
	$js⁄_obje˘_ôî_≥ek_vÆue
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî
)

131 
	`JASSERT
(
NULL
 !
ôî
);

132 
	`JASSERT
(
kObje˘EndIãrVÆue
 !
ôî
->
›aque_
);

134  (
js⁄_obje˘
*)(((
lh_íåy
 *)
ôî
->
›aque_
)->
v
);

135 
	}
}

141 
js⁄_boﬁ


142 
	$js⁄_obje˘_ôî_equÆ
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî1
,

143 c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî2
)

145 
	`JASSERT
(
NULL
 !
ôî1
);

146 
	`JASSERT
(
NULL
 !
ôî2
);

148  (
ôî1
->
›aque_
 =
ôî2
->opaque_);

149 
	}
}

155 
js⁄_obje˘_ôî©‹


156 
	$js⁄_obje˘_ôî_öô_deÁu…
()

158 
js⁄_obje˘_ôî©‹
 
ôî
;

165 
ôî
.
›aque_
 = 
NULL
;

167  
ôî
;

168 
	}
}

	@json/json_object_iterator.h

23 #i‚de‡
JSON_OBJECT_ITERATOR_H


24 
	#JSON_OBJECT_ITERATOR_H


	)

26 
	~<°ddef.h
>

28 #ifde‡
__˝lu•lus


35 
js⁄_obje˘_ôî_öfo_
;

41 
	sjs⁄_obje˘_ôî©‹
 {

42 c⁄° * 
›aque_
;

49 
js⁄_obje˘
;

74 
js⁄_obje˘_ôî©‹


75 
js⁄_obje˘_ôî_öô_deÁu…
();

108 
js⁄_obje˘_ôî©‹


109 
js⁄_obje˘_ôî_begö
(
js⁄_obje˘
* 
obj
);

139 
js⁄_obje˘_ôî©‹


140 
js⁄_obje˘_ôî_íd
(c⁄° 
js⁄_obje˘
* 
obj
);

158 
js⁄_obje˘_ôî_√xt
(
js⁄_obje˘_ôî©‹
* 
ôî
);

177 
js⁄_obje˘_ôî_≥ek_«me
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî
);

199 
js⁄_obje˘
*

200 
js⁄_obje˘_ôî_≥ek_vÆue
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî
);

229 
js⁄_boﬁ


230 
js⁄_obje˘_ôî_equÆ
(c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî1
,

231 c⁄° 
js⁄_obje˘_ôî©‹
* 
ôî2
);

234 #ifde‡
__˝lu•lus


	@json/json_object_private.h

12 #i‚de‡
_js⁄_obje˘_¥iv©e_h_


13 
	#_js⁄_obje˘_¥iv©e_h_


	)

15 #ifde‡
__˝lu•lus


19 (
js⁄_obje˘_¥iv©e_dñëe_‚
)(
	tjs⁄_obje˘
 *
	to
);

21 
	sjs⁄_obje˘


23 
js⁄_ty≥
 
o_ty≥
;

24 
js⁄_obje˘_¥iv©e_dñëe_‚
 *
_dñëe
;

25 
js⁄_obje˘_to_js⁄_°rög_‚
 *
_to_js⁄_°rög
;

26 
_ªf_cou¡
;

27 
¥ötbuf
 *
_pb
;

28 
	ud©a
 {

29 
js⁄_boﬁ
 
c_boﬁón
;

30 
c_doubÀ
;

31 
öt64_t
 
c_öt64
;

32 
lh_èbÀ
 *
c_obje˘
;

33 
¨øy_li°
 *
c_¨øy
;

35 *
°r
;

36 
Àn
;

37 } 
c_°rög
;

38 } 
o
;

39 
js⁄_obje˘_dñëe_‚
 *
_u£r_dñëe
;

40 *
_u£rd©a
;

43 #ifde‡
__˝lu•lus


	@json/json_tokener.c

16 
	~"jc⁄fig.h
"

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°ddef.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<limôs.h
>

25 
	~"bôs.h
"

26 
	~"debug.h
"

27 
	~"¥ötbuf.h
"

28 
	~"¨øyli°.h
"

29 
	~"js⁄_öây≥s.h
"

30 
	~"js⁄_obje˘.h
"

31 
	~"js⁄_tokíî.h
"

32 
	~"js⁄_utû.h
"

34 #ifde‡
HAVE_LOCALE_H


35 
	~<loˇÀ.h
>

38 #i‡!
HAVE_STRDUP
 && 
deföed
(
_MSC_VER
)

40 
	#°rdup
 
_°rdup


	)

41 #ñi‡!
HAVE_STRDUP


42 #îr‹ 
You
 dÿ
nŸ
 
have
 
°rdup
 
⁄
 
your
 
sy°em
.

45 #i‡!
HAVE_STRNCASECMP
 && 
deföed
(
_MSC_VER
)

47 
	#°∫ˇ£cmp
 
_°∫icmp


	)

48 #ñi‡!
HAVE_STRNCASECMP


49 #îr‹ 
You
 dÿ
nŸ
 
have
 
°∫ˇ£cmp
 
⁄
 
your
 
sy°em
.

52 c⁄° * 
	gjs⁄_nuŒ_°r
 = "null";

53 c⁄° * 
	gjs⁄_åue_°r
 = "true";

54 c⁄° * 
	gjs⁄_Ál£_°r
 = "false";

57 c⁄° * 
	gjs⁄_tokíî_îr‹s
[] = {

74 c⁄° *
	$js⁄_tokíî_îr‹_desc
(
js⁄_tokíî_îr‹
 
jîr
)

76 
jîr_öt
 = ()
jîr
;

77 i‡(
jîr_öt
 < 0 || jîr_öà> ()(
js⁄_tokíî_îr‹s
))

79  
js⁄_tokíî_îr‹s
[
jîr
];

80 
	}
}

82 
js⁄_tokíî_îr‹
 
	$js⁄_tokíî_gë_îr‹
(
js⁄_tokíî
 *
tok
)

84  
tok
->
îr
;

85 
	}
}

88 
	#IS_HIGH_SURROGATE
(
uc
Ë(((ucË& 0xFC00Ë=0xD800)

	)

89 
	#IS_LOW_SURROGATE
(
uc
Ë(((ucË& 0xFC00Ë=0xDC00)

	)

90 
	#DECODE_SURROGATE_PAIR
(
hi
,
lo
Ë((((hiË& 0x3FFË<< 10Ë+ (÷oË& 0x3FFË+ 0x10000)

	)

91 
	gutf8_ª∂a˚mít_ch¨
[3] = { 0xEF, 0xBF, 0xBD };

93 
js⁄_tokíî
* 
	$js⁄_tokíî_√w_ex
(
dïth
)

95 
js⁄_tokíî
 *
tok
;

97 
tok
 = (
js⁄_tokíî
*)
	`ˇŒoc
(1, (json_tokener));

98 i‡(!
tok
Ë 
NULL
;

99 
tok
->
°ack
 = (
js⁄_tokíî_§ec
 *)
	`ˇŒoc
(
dïth
, (json_tokener_srec));

100 i‡(!
tok
->
°ack
) {

101 
	`‰ì
(
tok
);

102  
NULL
;

104 
tok
->
pb
 = 
	`¥ötbuf_√w
();

105 
tok
->
max_dïth
 = 
dïth
;

106 
	`js⁄_tokíî_ª£t
(
tok
);

107  
tok
;

108 
	}
}

110 
js⁄_tokíî
* 
	$js⁄_tokíî_√w
()

112  
	`js⁄_tokíî_√w_ex
(
JSON_TOKENER_DEFAULT_DEPTH
);

113 
	}
}

115 
	$js⁄_tokíî_‰ì
(
js⁄_tokíî
 *
tok
)

117 
	`js⁄_tokíî_ª£t
(
tok
);

118 i‡(
tok
->
pb
Ë
	`¥ötbuf_‰ì
(tok->pb);

119 i‡(
tok
->
°ack
Ë
	`‰ì
(tok->stack);

120 
	`‰ì
(
tok
);

121 
	}
}

123 
	$js⁄_tokíî_ª£t_Àvñ
(
js⁄_tokíî
 *
tok
, 
dïth
)

125 
tok
->
°ack
[
dïth
].
°©e
 = 
js⁄_tokíî_°©e_ótws
;

126 
tok
->
°ack
[
dïth
].
ßved_°©e
 = 
js⁄_tokíî_°©e_°¨t
;

127 
	`js⁄_obje˘_put
(
tok
->
°ack
[
dïth
].
cuºít
);

128 
tok
->
°ack
[
dïth
].
cuºít
 = 
NULL
;

129 
	`‰ì
(
tok
->
°ack
[
dïth
].
obj_fõld_«me
);

130 
tok
->
°ack
[
dïth
].
obj_fõld_«me
 = 
NULL
;

131 
	}
}

133 
	$js⁄_tokíî_ª£t
(
js⁄_tokíî
 *
tok
)

135 
i
;

136 i‡(!
tok
)

139 
i
 = 
tok
->
dïth
; i >= 0; i--)

140 
	`js⁄_tokíî_ª£t_Àvñ
(
tok
, 
i
);

141 
tok
->
dïth
 = 0;

142 
tok
->
îr
 = 
js⁄_tokíî_suc˚ss
;

143 
	}
}

145 
js⁄_obje˘
* 
	$js⁄_tokíî_∑r£
(c⁄° *
°r
)

147 
js⁄_tokíî_îr‹
 
jîr_ign‹ed
;

148 
js⁄_obje˘
* 
obj
;

149 
obj
 = 
	`js⁄_tokíî_∑r£_vîbo£
(
°r
, &
jîr_ign‹ed
);

150  
obj
;

151 
	}
}

153 
js⁄_obje˘
* 
	$js⁄_tokíî_∑r£_vîbo£
(c⁄° *
°r
, 
js⁄_tokíî_îr‹
 *
îr‹
)

155 
js⁄_tokíî
* 
tok
;

156 
js⁄_obje˘
* 
obj
;

158 
tok
 = 
	`js⁄_tokíî_√w
();

159 i‡(!
tok
)

160  
NULL
;

161 
obj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, 
°r
, -1);

162 *
îr‹
 = 
tok
->
îr
;

163 if(
tok
->
îr
 !
js⁄_tokíî_suc˚ss
) {

164 i‡(
obj
 !
NULL
)

165 
	`js⁄_obje˘_put
(
obj
);

166 
obj
 = 
NULL
;

169 
	`js⁄_tokíî_‰ì
(
tok
);

170  
obj
;

171 
	}
}

174 #i‡!
HAVE_STRNDUP


176 * 
	$°∫dup
(c⁄° * 
°r
, 
size_t
 
n
)

178 if(
°r
) {

179 
size_t
 
Àn
 = 
	`°æí
(
°r
);

180 
size_t
 
¬
 = 
	`js⁄_mö
(
Àn
,
n
);

181 * 
s
 = (*)
	`mÆloc
((Ë* (
¬
 + 1));

183 if(
s
) {

184 
	`mem˝y
(
s
, 
°r
, 
¬
);

185 
s
[
¬
] = '\0';

188  
s
;

191  
NULL
;

192 
	}
}

196 
	#°©e
 
tok
->
°ack
[tok->
dïth
].
°©e


	)

197 
	#ßved_°©e
 
tok
->
°ack
[tok->
dïth
].
ßved_°©e


	)

198 
	#cuºít
 
tok
->
°ack
[tok->
dïth
].
cuºít


	)

199 
	#obj_fõld_«me
 
tok
->
°ack
[tok->
dïth
].
obj_fõld_«me


	)

219 
	#PEEK_CHAR
(
de°
, 
tok
) \

220 (((
tok
)->
ch¨_off£t
 =
Àn
) ? \

221 (((
tok
)->
dïth
 =0 && 
°©e
 =
js⁄_tokíî_°©e_ótws
 && 
ßved_°©e
 =
js⁄_tokíî_°©e_föish
) ? \

222 (((
tok
)->
îr
 = 
js⁄_tokíî_suc˚ss
), 0) \

224 (((
tok
)->
îr
 = 
js⁄_tokíî_c⁄töue
), 0) \

226 (((
de°
Ë*
°r
), 1) \

227 )

	)

234 
	#ADVANCE_CHAR
(
°r
, 
tok
) \

235 –++(
°r
), ((
tok
)->
ch¨_off£t
)++, 
c
)

	)

241 
js⁄_obje˘
* 
	$js⁄_tokíî_∑r£_ex
(
js⁄_tokíî
 *
tok
,

242 c⁄° *
°r
, 
Àn
)

244 
js⁄_obje˘
 *
obj
 = 
NULL
;

245 
c
 = '\1';

246 #ifde‡
HAVE_SETLOCALE


247 *
ﬁdloˇÀ
=
NULL
, *
tm∂oˇÀ
;

249 
tm∂oˇÀ
 = 
	`£éoˇÀ
(
LC_NUMERIC
, 
NULL
);

250 i‡(
tm∂oˇÀ
Ë
ﬁdloˇÀ
 = 
	`°rdup
(tmplocale);

251 
	`£éoˇÀ
(
LC_NUMERIC
, "C");

254 
tok
->
ch¨_off£t
 = 0;

255 
tok
->
îr
 = 
js⁄_tokíî_suc˚ss
;

257 
	`PEEK_CHAR
(
c
, 
tok
)) {

259 
ªdo_ch¨
:

260 
°©e
) {

262 
js⁄_tokíî_°©e_ótws
:

264 
	`is•a˚
(()
c
)) {

265 i‡((!
	`ADVANCE_CHAR
(
°r
, 
tok
)Ë|| (!
	`PEEK_CHAR
(
c
,Åok)))

266 
out
;

268 if(
c
 == '/') {

269 
	`¥ötbuf_ª£t
(
tok
->
pb
);

270 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

271 
°©e
 = 
js⁄_tokíî_°©e_commít_°¨t
;

273 
°©e
 = 
ßved_°©e
;

274 
ªdo_ch¨
;

278 
js⁄_tokíî_°©e_°¨t
:

279 
c
) {

281 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

282 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_fõld_°¨t
;

283 
cuºít
 = 
	`js⁄_obje˘_√w_obje˘
();

286 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

287 
ßved_°©e
 = 
js⁄_tokíî_°©e_¨øy
;

288 
cuºít
 = 
	`js⁄_obje˘_√w_¨øy
();

292 
°©e
 = 
js⁄_tokíî_°©e_nuŒ
;

293 
	`¥ötbuf_ª£t
(
tok
->
pb
);

294 
tok
->
°_pos
 = 0;

295 
ªdo_ch¨
;

298 
°©e
 = 
js⁄_tokíî_°©e_°rög
;

299 
	`¥ötbuf_ª£t
(
tok
->
pb
);

300 
tok
->
quŸe_ch¨
 = 
c
;

306 
°©e
 = 
js⁄_tokíî_°©e_boﬁón
;

307 
	`¥ötbuf_ª£t
(
tok
->
pb
);

308 
tok
->
°_pos
 = 0;

309 
ªdo_ch¨
;

310 #i‡
	`deföed
(
__GNUC__
)

325 
°©e
 = 
js⁄_tokíî_°©e_numbî
;

326 
	`¥ötbuf_ª£t
(
tok
->
pb
);

327 
tok
->
is_doubÀ
 = 0;

328 
ªdo_ch¨
;

330 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
;

331 
out
;

335 
js⁄_tokíî_°©e_föish
:

336 if(
tok
->
dïth
 =0Ë
out
;

337 
obj
 = 
	`js⁄_obje˘_gë
(
cuºít
);

338 
	`js⁄_tokíî_ª£t_Àvñ
(
tok
,Åok->
dïth
);

339 
tok
->
dïth
--;

340 
ªdo_ch¨
;

342 
js⁄_tokíî_°©e_nuŒ
:

343 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

344 if(
	`°∫ˇ£cmp
(
js⁄_nuŒ_°r
, 
tok
->
pb
->
buf
,

345 
	`js⁄_mö
(
tok
->
°_pos
+1, ()
	`°æí
(
js⁄_nuŒ_°r
))) == 0) {

346 if(
tok
->
°_pos
 =()
	`°æí
(
js⁄_nuŒ_°r
)) {

347 
cuºít
 = 
NULL
;

348 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

349 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

350 
ªdo_ch¨
;

353 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_nuŒ
;

354 
out
;

356 
tok
->
°_pos
++;

359 
js⁄_tokíî_°©e_commít_°¨t
:

360 if(
c
 == '*') {

361 
°©e
 = 
js⁄_tokíî_°©e_commít
;

362 } if(
c
 == '/') {

363 
°©e
 = 
js⁄_tokíî_°©e_commít_eﬁ
;

365 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_commít
;

366 
out
;

368 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

371 
js⁄_tokíî_°©e_commít
:

374 c⁄° *
ˇ£_°¨t
 = 
°r
;

375 
c
 != '*') {

376 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

377 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

378 
out
;

381 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 1+
°r
-case_start);

382 
°©e
 = 
js⁄_tokíî_°©e_commít_íd
;

386 
js⁄_tokíî_°©e_commít_eﬁ
:

389 c⁄° *
ˇ£_°¨t
 = 
°r
;

390 
c
 != '\n') {

391 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

392 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

393 
out
;

396 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

397 
	`MC_DEBUG
("js⁄_tokíî_commít: %s\n", 
tok
->
pb
->
buf
);

398 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

402 
js⁄_tokíî_°©e_commít_íd
:

403 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

404 if(
c
 == '/') {

405 
	`MC_DEBUG
("js⁄_tokíî_commít: %s\n", 
tok
->
pb
->
buf
);

406 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

408 
°©e
 = 
js⁄_tokíî_°©e_commít
;

412 
js⁄_tokíî_°©e_°rög
:

415 c⁄° *
ˇ£_°¨t
 = 
°r
;

417 if(
c
 =
tok
->
quŸe_ch¨
) {

418 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

419 
cuºít
 = 
	`js⁄_obje˘_√w_°rög_Àn
(
tok
->
pb
->
buf
,Åok->pb->
bpos
);

420 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

421 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

423 } if(
c
 == '\\') {

424 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

425 
ßved_°©e
 = 
js⁄_tokíî_°©e_°rög
;

426 
°©e
 = 
js⁄_tokíî_°©e_°rög_esˇ≥
;

429 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

430 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

431 
out
;

437 
js⁄_tokíî_°©e_°rög_esˇ≥
:

438 
c
) {

442 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

443 
°©e
 = 
ßved_°©e
;

450 if(
c
 ='b'Ë
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, "\b", 1);

451 if(
c
 ='n'Ë
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, "\n", 1);

452 if(
c
 ='r'Ë
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, "\r", 1);

453 if(
c
 ='t'Ë
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, "\t", 1);

454 if(
c
 ='f'Ë
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, "\f", 1);

455 
°©e
 = 
ßved_°©e
;

458 
tok
->
ucs_ch¨
 = 0;

459 
tok
->
°_pos
 = 0;

460 
°©e
 = 
js⁄_tokíî_°©e_esˇ≥_unicode
;

463 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_°rög
;

464 
out
;

468 
js⁄_tokíî_°©e_esˇ≥_unicode
:

470 
gŸ_hi_suºog©e
 = 0;

474 if(
	`°rchr
(
js⁄_hex_ch¨s
, 
c
)) {

475 
tok
->
ucs_ch¨
 +(()
	`hexdigô
(
c
Ë<< ((3-tok->
°_pos
++)*4));

476 if(
tok
->
°_pos
 == 4) {

477 
u√sˇ≥d_utf
[4];

479 i‡(
gŸ_hi_suºog©e
) {

480 i‡(
	`IS_LOW_SURROGATE
(
tok
->
ucs_ch¨
)) {

482 
tok
->
ucs_ch¨
 = 
	`DECODE_SURROGATE_PAIR
(
gŸ_hi_suºog©e
,Åok->ucs_char);

486 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

488 
gŸ_hi_suºog©e
 = 0;

491 i‡(
tok
->
ucs_ch¨
 < 0x80) {

492 
u√sˇ≥d_utf
[0] = 
tok
->
ucs_ch¨
;

493 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
u√sˇ≥d_utf
, 1);

494 } i‡(
tok
->
ucs_ch¨
 < 0x800) {

495 
u√sˇ≥d_utf
[0] = 0xc0 | (
tok
->
ucs_ch¨
 >> 6);

496 
u√sˇ≥d_utf
[1] = 0x80 | (
tok
->
ucs_ch¨
 & 0x3f);

497 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
u√sˇ≥d_utf
, 2);

498 } i‡(
	`IS_HIGH_SURROGATE
(
tok
->
ucs_ch¨
)) {

503 
gŸ_hi_suºog©e
 = 
tok
->
ucs_ch¨
;

505 i‡((
tok
->
ch¨_off£t
+1 !
Àn
) &&

506 (
tok
->
ch¨_off£t
+2 !
Àn
) &&

507 (
°r
[1] == '\\') &&

508 (
°r
[2] == 'u'))

514 if–!
	`ADVANCE_CHAR
(
°r
, 
tok
) || !ADVANCE_CHAR(str,Åok) ) {

515 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

520 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

521 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

522 
out
;

524 
tok
->
ucs_ch¨
 = 0;

525 
tok
->
°_pos
 = 0;

532 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

534 } i‡(
	`IS_LOW_SURROGATE
(
tok
->
ucs_ch¨
)) {

536 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

537 } i‡(
tok
->
ucs_ch¨
 < 0x10000) {

538 
u√sˇ≥d_utf
[0] = 0xe0 | (
tok
->
ucs_ch¨
 >> 12);

539 
u√sˇ≥d_utf
[1] = 0x80 | ((
tok
->
ucs_ch¨
 >> 6) & 0x3f);

540 
u√sˇ≥d_utf
[2] = 0x80 | (
tok
->
ucs_ch¨
 & 0x3f);

541 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
u√sˇ≥d_utf
, 3);

542 } i‡(
tok
->
ucs_ch¨
 < 0x110000) {

543 
u√sˇ≥d_utf
[0] = 0xf0 | ((
tok
->
ucs_ch¨
 >> 18) & 0x07);

544 
u√sˇ≥d_utf
[1] = 0x80 | ((
tok
->
ucs_ch¨
 >> 12) & 0x3f);

545 
u√sˇ≥d_utf
[2] = 0x80 | ((
tok
->
ucs_ch¨
 >> 6) & 0x3f);

546 
u√sˇ≥d_utf
[3] = 0x80 | (
tok
->
ucs_ch¨
 & 0x3f);

547 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
u√sˇ≥d_utf
, 4);

550 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

552 
°©e
 = 
ßved_°©e
;

556 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_°rög
;

557 
out
;

559 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

560 i‡(
gŸ_hi_suºog©e
)

561 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, (*)
utf8_ª∂a˚mít_ch¨
, 3);

562 
out
;

568 
js⁄_tokíî_°©e_boﬁón
:

569 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, &
c
, 1);

570 if(
	`°∫ˇ£cmp
(
js⁄_åue_°r
, 
tok
->
pb
->
buf
,

571 
	`js⁄_mö
(
tok
->
°_pos
+1, ()
	`°æí
(
js⁄_åue_°r
))) == 0) {

572 if(
tok
->
°_pos
 =()
	`°æí
(
js⁄_åue_°r
)) {

573 
cuºít
 = 
	`js⁄_obje˘_√w_boﬁón
(1);

574 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

575 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

576 
ªdo_ch¨
;

578 } if(
	`°∫ˇ£cmp
(
js⁄_Ál£_°r
, 
tok
->
pb
->
buf
,

579 
	`js⁄_mö
(
tok
->
°_pos
+1, ()
	`°æí
(
js⁄_Ál£_°r
))) == 0) {

580 if(
tok
->
°_pos
 =()
	`°æí
(
js⁄_Ál£_°r
)) {

581 
cuºít
 = 
	`js⁄_obje˘_√w_boﬁón
(0);

582 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

583 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

584 
ªdo_ch¨
;

587 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_boﬁón
;

588 
out
;

590 
tok
->
°_pos
++;

593 
js⁄_tokíî_°©e_numbî
:

596 c⁄° *
ˇ£_°¨t
 = 
°r
;

597 
ˇ£_Àn
=0;

598 
c
 && 
	`°rchr
(
js⁄_numbî_ch¨s
, c)) {

599 ++
ˇ£_Àn
;

600 if(
c
 == '.' || c == 'e' || c == 'E')

601 
tok
->
is_doubÀ
 = 1;

602 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

603 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
ˇ£_Àn
);

604 
out
;

607 i‡(
ˇ£_Àn
>0)

608 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
ˇ£_Àn
);

611 
öt64_t
 
num64
;

612 
numd
;

613 i‡(!
tok
->
is_doubÀ
 && 
	`js⁄_∑r£_öt64
—ok->
pb
->
buf
, &
num64
) == 0) {

614 
cuºít
 = 
	`js⁄_obje˘_√w_öt64
(
num64
);

615 } if(
tok
->
is_doubÀ
 && 
	`js⁄_∑r£_doubÀ
—ok->
pb
->
buf
, &
numd
) == 0) {

616 
cuºít
 = 
	`js⁄_obje˘_√w_doubÀ
(
numd
);

618 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_numbî
;

619 
out
;

621 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

622 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

623 
ªdo_ch¨
;

627 
js⁄_tokíî_°©e_¨øy_a·î_£p
:

628 
js⁄_tokíî_°©e_¨øy
:

629 if(
c
 == ']') {

630 i‡(
°©e
 =
js⁄_tokíî_°©e_¨øy_a·î_£p
 &&

631 (
tok
->
Êags
 & 
JSON_TOKENER_STRICT
))

633 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
;

634 
out
;

636 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

637 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

639 if(
tok
->
dïth
 >tok->
max_dïth
-1) {

640 
tok
->
îr
 = 
js⁄_tokíî_îr‹_dïth
;

641 
out
;

643 
°©e
 = 
js⁄_tokíî_°©e_¨øy_add
;

644 
tok
->
dïth
++;

645 
	`js⁄_tokíî_ª£t_Àvñ
(
tok
,Åok->
dïth
);

646 
ªdo_ch¨
;

650 
js⁄_tokíî_°©e_¨øy_add
:

651 
	`js⁄_obje˘_¨øy_add
(
cuºít
, 
obj
);

652 
ßved_°©e
 = 
js⁄_tokíî_°©e_¨øy_£p
;

653 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

654 
ªdo_ch¨
;

656 
js⁄_tokíî_°©e_¨øy_£p
:

657 if(
c
 == ']') {

658 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

659 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

660 } if(
c
 == ',') {

661 
ßved_°©e
 = 
js⁄_tokíî_°©e_¨øy_a·î_£p
;

662 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

664 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_¨øy
;

665 
out
;

669 
js⁄_tokíî_°©e_obje˘_fõld_°¨t
:

670 
js⁄_tokíî_°©e_obje˘_fõld_°¨t_a·î_£p
:

671 if(
c
 == '}') {

672 i‡(
°©e
 =
js⁄_tokíî_°©e_obje˘_fõld_°¨t_a·î_£p
 &&

673 (
tok
->
Êags
 & 
JSON_TOKENER_STRICT
))

675 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
;

676 
out
;

678 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

679 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

680 } i‡(
c
 == '"' || c == '\'') {

681 
tok
->
quŸe_ch¨
 = 
c
;

682 
	`¥ötbuf_ª£t
(
tok
->
pb
);

683 
°©e
 = 
js⁄_tokíî_°©e_obje˘_fõld
;

685 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_obje˘_key_«me
;

686 
out
;

690 
js⁄_tokíî_°©e_obje˘_fõld
:

693 c⁄° *
ˇ£_°¨t
 = 
°r
;

695 if(
c
 =
tok
->
quŸe_ch¨
) {

696 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

697 
obj_fõld_«me
 = 
	`°rdup
(
tok
->
pb
->
buf
);

698 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_fõld_íd
;

699 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

701 } if(
c
 == '\\') {

702 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

703 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_fõld
;

704 
°©e
 = 
js⁄_tokíî_°©e_°rög_esˇ≥
;

707 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
Ë|| !
	`PEEK_CHAR
(
c
,Åok)) {

708 
	`¥ötbuf_mem≠≥nd_Á°
(
tok
->
pb
, 
ˇ£_°¨t
, 
°r
-case_start);

709 
out
;

715 
js⁄_tokíî_°©e_obje˘_fõld_íd
:

716 if(
c
 == ':') {

717 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_vÆue
;

718 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

720 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_obje˘_key_£p
;

721 
out
;

725 
js⁄_tokíî_°©e_obje˘_vÆue
:

726 if(
tok
->
dïth
 >tok->
max_dïth
-1) {

727 
tok
->
îr
 = 
js⁄_tokíî_îr‹_dïth
;

728 
out
;

730 
°©e
 = 
js⁄_tokíî_°©e_obje˘_vÆue_add
;

731 
tok
->
dïth
++;

732 
	`js⁄_tokíî_ª£t_Àvñ
(
tok
,Åok->
dïth
);

733 
ªdo_ch¨
;

735 
js⁄_tokíî_°©e_obje˘_vÆue_add
:

736 
	`js⁄_obje˘_obje˘_add
(
cuºít
, 
obj_fõld_«me
, 
obj
);

737 
	`‰ì
(
obj_fõld_«me
);

738 
obj_fõld_«me
 = 
NULL
;

739 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_£p
;

740 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

741 
ªdo_ch¨
;

743 
js⁄_tokíî_°©e_obje˘_£p
:

744 if(
c
 == '}') {

745 
ßved_°©e
 = 
js⁄_tokíî_°©e_föish
;

746 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

747 } if(
c
 == ',') {

748 
ßved_°©e
 = 
js⁄_tokíî_°©e_obje˘_fõld_°¨t_a·î_£p
;

749 
°©e
 = 
js⁄_tokíî_°©e_ótws
;

751 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_obje˘_vÆue_£p
;

752 
out
;

757 i‡(!
	`ADVANCE_CHAR
(
°r
, 
tok
))

758 
out
;

761 
out
:

762 i‡(!
c
) {

763 if(
°©e
 !
js⁄_tokíî_°©e_föish
 &&

764 
ßved_°©e
 !
js⁄_tokíî_°©e_föish
)

765 
tok
->
îr
 = 
js⁄_tokíî_îr‹_∑r£_eof
;

768 #ifde‡
HAVE_SETLOCALE


769 
	`£éoˇÀ
(
LC_NUMERIC
, 
ﬁdloˇÀ
);

770 i‡(
ﬁdloˇÀ
Ë
	`‰ì
(oldlocale);

773 i‡(
tok
->
îr
 =
js⁄_tokíî_suc˚ss
)

775 
js⁄_obje˘
 *
ªt
 = 
	`js⁄_obje˘_gë
(
cuºít
);

776 
ii
;

779 
ii
 = 
tok
->
dïth
; ii >= 0; ii--)

780 
	`js⁄_tokíî_ª£t_Àvñ
(
tok
, 
ii
);

781  
ªt
;

784 
	`MC_DEBUG
("json_tokener_parse_ex:Érror %sát offset %d\n",

785 
js⁄_tokíî_îr‹s
[
tok
->
îr
],Åok->
ch¨_off£t
);

786  
NULL
;

787 
	}
}

789 
	$js⁄_tokíî_£t_Êags
(
js⁄_tokíî
 *
tok
, 
Êags
)

791 
tok
->
Êags
 = flags;

792 
	}
}

	@json/json_tokener.h

12 #i‚de‡
_js⁄_tokíî_h_


13 
	#_js⁄_tokíî_h_


	)

15 
	~<°ddef.h
>

16 
	~"js⁄_obje˘.h
"

18 #ifde‡
__˝lu•lus


22 
	ejs⁄_tokíî_îr‹
 {

23 
js⁄_tokíî_suc˚ss
,

24 
js⁄_tokíî_c⁄töue
,

25 
js⁄_tokíî_îr‹_dïth
,

26 
js⁄_tokíî_îr‹_∑r£_eof
,

27 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
,

28 
js⁄_tokíî_îr‹_∑r£_nuŒ
,

29 
js⁄_tokíî_îr‹_∑r£_boﬁón
,

30 
js⁄_tokíî_îr‹_∑r£_numbî
,

31 
js⁄_tokíî_îr‹_∑r£_¨øy
,

32 
js⁄_tokíî_îr‹_∑r£_obje˘_key_«me
,

33 
js⁄_tokíî_îr‹_∑r£_obje˘_key_£p
,

34 
js⁄_tokíî_îr‹_∑r£_obje˘_vÆue_£p
,

35 
js⁄_tokíî_îr‹_∑r£_°rög
,

36 
js⁄_tokíî_îr‹_∑r£_commít


39 
	ejs⁄_tokíî_°©e
 {

40 
js⁄_tokíî_°©e_ótws
,

41 
js⁄_tokíî_°©e_°¨t
,

42 
js⁄_tokíî_°©e_föish
,

43 
js⁄_tokíî_°©e_nuŒ
,

44 
js⁄_tokíî_°©e_commít_°¨t
,

45 
js⁄_tokíî_°©e_commít
,

46 
js⁄_tokíî_°©e_commít_eﬁ
,

47 
js⁄_tokíî_°©e_commít_íd
,

48 
js⁄_tokíî_°©e_°rög
,

49 
js⁄_tokíî_°©e_°rög_esˇ≥
,

50 
js⁄_tokíî_°©e_esˇ≥_unicode
,

51 
js⁄_tokíî_°©e_boﬁón
,

52 
js⁄_tokíî_°©e_numbî
,

53 
js⁄_tokíî_°©e_¨øy
,

54 
js⁄_tokíî_°©e_¨øy_add
,

55 
js⁄_tokíî_°©e_¨øy_£p
,

56 
js⁄_tokíî_°©e_obje˘_fõld_°¨t
,

57 
js⁄_tokíî_°©e_obje˘_fõld
,

58 
js⁄_tokíî_°©e_obje˘_fõld_íd
,

59 
js⁄_tokíî_°©e_obje˘_vÆue
,

60 
js⁄_tokíî_°©e_obje˘_vÆue_add
,

61 
js⁄_tokíî_°©e_obje˘_£p
,

62 
js⁄_tokíî_°©e_¨øy_a·î_£p
,

63 
js⁄_tokíî_°©e_obje˘_fõld_°¨t_a·î_£p


66 
	sjs⁄_tokíî_§ec


68 
js⁄_tokíî_°©e
 
°©e
, 
ßved_°©e
;

69 
js⁄_obje˘
 *
obj
;

70 
js⁄_obje˘
 *
cuºít
;

71 *
obj_fõld_«me
;

74 
	#JSON_TOKENER_DEFAULT_DEPTH
 32

	)

76 
	sjs⁄_tokíî


78 *
°r
;

79 
¥ötbuf
 *
pb
;

80 
max_dïth
, 
dïth
, 
is_doubÀ
, 
°_pos
, 
ch¨_off£t
;

81 
js⁄_tokíî_îr‹
 
îr
;

82 
ucs_ch¨
;

83 
quŸe_ch¨
;

84 
js⁄_tokíî_§ec
 *
°ack
;

85 
Êags
;

98 
	#JSON_TOKENER_STRICT
 0x01

	)

106 c⁄° *
js⁄_tokíî_îr‹_desc
(
js⁄_tokíî_îr‹
 
jîr
);

114 c⁄° * 
js⁄_tokíî_îr‹s
[];

125 
js⁄_tokíî_îr‹
 
js⁄_tokíî_gë_îr‹
(
js⁄_tokíî
 *
tok
);

127 
js⁄_tokíî
* 
js⁄_tokíî_√w
();

128 
js⁄_tokíî
* 
js⁄_tokíî_√w_ex
(
dïth
);

129 
js⁄_tokíî_‰ì
(
js⁄_tokíî
 *
tok
);

130 
js⁄_tokíî_ª£t
(
js⁄_tokíî
 *
tok
);

131 
js⁄_obje˘
* 
js⁄_tokíî_∑r£
(c⁄° *
°r
);

132 
js⁄_obje˘
* 
js⁄_tokíî_∑r£_vîbo£
(c⁄° *
°r
, 
js⁄_tokíî_îr‹
 *
îr‹
);

137 
js⁄_tokíî_£t_Êags
(
js⁄_tokíî
 *
tok
, 
Êags
);

202 
js⁄_obje˘
* 
js⁄_tokíî_∑r£_ex
(
js⁄_tokíî
 *
tok
,

203 c⁄° *
°r
, 
Àn
);

205 #ifde‡
__˝lu•lus


	@json/json_util.c

12 
	~"jc⁄fig.h
"

13 #unde‡
ªÆloc


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°ddef.h
>

18 
	~<limôs.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<˘y≥.h
>

23 #ifde‡
HAVE_SYS_TYPES_H


24 
	~<sys/ty≥s.h
>

27 #ifde‡
HAVE_SYS_STAT_H


28 
	~<sys/°©.h
>

31 #ifde‡
HAVE_FCNTL_H


32 
	~<f˙é.h
>

35 #ifde‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

39 #ifde‡
WIN32


40 
	#WIN32_LEAN_AND_MEAN


	)

41 
	~<wödows.h
>

42 
	~<io.h
>

45 #i‡!
deföed
(
HAVE_OPEN
Ë&& deföed(
WIN32
)

46 
	#›í
 
_›í


	)

49 #i‡!
deföed
(
HAVE_SNPRINTF
Ë&& deföed(
_MSC_VER
)

51 
	#¢¥ötf
 
_¢¥ötf


	)

52 #ñi‡!
deföed
(
HAVE_SNPRINTF
)

53 #îr‹ 
You
 dÿ
nŸ
 
have
 
¢¥ötf
 
⁄
 
your
 
sy°em
.

56 
	~"bôs.h
"

57 
	~"debug.h
"

58 
	~"¥ötbuf.h
"

59 
	~"js⁄_öây≥s.h
"

60 
	~"js⁄_obje˘.h
"

61 
	~"js⁄_tokíî.h
"

62 
	~"js⁄_utû.h
"

64 
	gssˇnf_is_brokí
 = 0;

65 
	gssˇnf_is_brokí_ã°d⁄e
 = 0;

66 
ssˇnf_is_brokí_ã°
();

68 
js⁄_obje˘
* 
	$js⁄_obje˘_‰om_fûe
(c⁄° *
fûíame
)

70 
¥ötbuf
 *
pb
;

71 
js⁄_obje˘
 *
obj
;

72 
buf
[
JSON_FILE_BUF_SIZE
];

73 
fd
, 
ªt
;

75 if((
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
)) < 0) {

76 
	`MC_ERROR
("json_object_from_file:ÉrrorÑeading file %s: %s\n",

77 
fûíame
, 
	`°ªº‹
(
î∫o
));

78  
NULL
;

80 if(!(
pb
 = 
	`¥ötbuf_√w
())) {

81 
	`˛o£
(
fd
);

82 
	`MC_ERROR
("json_object_from_file:Örintbuf_new failed\n");

83  
NULL
;

85 (
ªt
 = 
	`ªad
(
fd
, 
buf
, 
JSON_FILE_BUF_SIZE
)) > 0) {

86 
	`¥ötbuf_mem≠≥nd
(
pb
, 
buf
, 
ªt
);

88 
	`˛o£
(
fd
);

89 if(
ªt
 < 0) {

90 
	`MC_ABORT
("json_object_from_file:ÉrrorÑeading file %s: %s\n",

91 
fûíame
, 
	`°ªº‹
(
î∫o
));

92 
	`¥ötbuf_‰ì
(
pb
);

93  
NULL
;

95 
obj
 = 
	`js⁄_tokíî_∑r£
(
pb
->
buf
);

96 
	`¥ötbuf_‰ì
(
pb
);

97  
obj
;

98 
	}
}

102 
	$js⁄_obje˘_to_fûe_ext
(*
fûíame
, 
js⁄_obje˘
 *
obj
, 
Êags
)

104 c⁄° *
js⁄_°r
;

105 
fd
, 
ªt
;

106 
wpos
, 
wsize
;

108 if(!
obj
) {

109 
	`MC_ERROR
("json_object_to_file: object isÇull\n");

113 if((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
, 0644)) < 0) {

114 
	`MC_ERROR
("json_object_to_file:Érror opening file %s: %s\n",

115 
fûíame
, 
	`°ªº‹
(
î∫o
));

119 if(!(
js⁄_°r
 = 
	`js⁄_obje˘_to_js⁄_°rög_ext
(
obj
,
Êags
))) {

120 
	`˛o£
(
fd
);

124 
wsize
 = ()(
	`°æí
(
js⁄_°r
Ë& 
UINT_MAX
);

125 
wpos
 = 0;

126 
wpos
 < 
wsize
) {

127 if((
ªt
 = 
	`wrôe
(
fd
, 
js⁄_°r
 + 
wpos
, 
wsize
-wpos)) < 0) {

128 
	`˛o£
(
fd
);

129 
	`MC_ERROR
("json_object_to_file:Érror writing file %s: %s\n",

130 
fûíame
, 
	`°ªº‹
(
î∫o
));

135 
wpos
 +()
ªt
;

138 
	`˛o£
(
fd
);

140 
	}
}

144 
	$js⁄_obje˘_to_fûe
(*
fûíame
, 
js⁄_obje˘
 *
obj
)

146  
	`js⁄_obje˘_to_fûe_ext
(
fûíame
, 
obj
, 
JSON_C_TO_STRING_PLAIN
);

147 
	}
}

149 
	$js⁄_∑r£_doubÀ
(c⁄° *
buf
, *
ªtvÆ
)

151  (
	`ssˇnf
(
buf
, "%lf", 
ªtvÆ
)==1 ? 0 : 1);

152 
	}
}

159 
	$ssˇnf_is_brokí_ã°
()

161 
öt64_t
 
num64
;

163 ()
	`ssˇnf
(" -01234567890123456789012345", "%" 
SCNd64
, &
num64
);

164 
ªt_î∫o
 = 
î∫o
;

165 
is_öt64_mö
 = (
num64
 =
INT64_MIN
);

167 ()
	`ssˇnf
(" 01234567890123456789012345", "%" 
SCNd64
, &
num64
);

168 
ªt_î∫o2
 = 
î∫o
;

169 
is_öt64_max
 = (
num64
 =
INT64_MAX
);

171 i‡(
ªt_î∫o
 !
ERANGE
 || !
is_öt64_mö
 ||

172 
ªt_î∫o2
 !
ERANGE
 || !
is_öt64_max
)

174 
	`MC_DEBUG
("sscanf_is_broken_test failed,Énabling workaround code\n");

175 
ssˇnf_is_brokí
 = 1;

177 
	}
}

179 
	$js⁄_∑r£_öt64
(c⁄° *
buf
, 
öt64_t
 *
ªtvÆ
)

181 
öt64_t
 
num64
;

182 c⁄° *
buf_sig_digôs
;

183 
‹ig_has_√g
;

184 
ßved_î∫o
;

186 i‡(!
ssˇnf_is_brokí_ã°d⁄e
)

188 
	`ssˇnf_is_brokí_ã°
();

189 
ssˇnf_is_brokí_ã°d⁄e
 = 1;

193 
	`is•a˚
(()*
buf
) && *buf)

194 
buf
++;

196 
î∫o
 = 0;

197 i‡(
	`ssˇnf
(
buf
, "%" 
SCNd64
, &
num64
) != 1)

199 
	`MC_DEBUG
("FailedÅoÖarse, sscanf != 1\n");

203 
ßved_î∫o
 = 
î∫o
;

204 
buf_sig_digôs
 = 
buf
;

205 
‹ig_has_√g
 = 0;

206 i‡(*
buf_sig_digôs
 == '-')

208 
buf_sig_digôs
++;

209 
‹ig_has_√g
 = 1;

213 i‡(
ssˇnf_is_brokí
 && 
ßved_î∫o
 !
ERANGE
)

215 
buf_cmp
[100];

216 *
buf_cmp_°¨t
 = 
buf_cmp
;

217 
ªcheck_has_√g
 = 0;

218 
buf_cmp_Àn
;

221 
buf_sig_digôs
[0] == '0' && buf_sig_digits[1] != '\0')

222 
buf_sig_digôs
++;

223 i‡(
num64
 == 0)

224 
‹ig_has_√g
 = 0;

226 
	`¢¥ötf
(
buf_cmp_°¨t
, (
buf_cmp
), "%" 
PRId64
, 
num64
);

227 i‡(*
buf_cmp_°¨t
 == '-')

229 
ªcheck_has_√g
 = 1;

230 
buf_cmp_°¨t
++;

234 
buf_cmp_Àn
 = 
	`°æí
(
buf_cmp_°¨t
);

241 i‡(
‹ig_has_√g
 !
ªcheck_has_√g
 ||

242 
	`°∫cmp
(
buf_sig_digôs
, 
buf_cmp_°¨t
, 
	`°æí
(buf_cmp_start)) != 0 ||

243 (()
	`°æí
(
buf_sig_digôs
Ë!
buf_cmp_Àn
 &&

244 
	`isdigô
(()
buf_sig_digôs
[
buf_cmp_Àn
])

248 
ßved_î∫o
 = 
ERANGE
;

255 i‡(
ßved_î∫o
 =
ERANGE
)

257 i‡(
‹ig_has_√g
)

258 
num64
 = 
INT64_MIN
;

260 
num64
 = 
INT64_MAX
;

262 *
ªtvÆ
 = 
num64
;

264 
	}
}

266 #i‚de‡
HAVE_REALLOC


267 * 
	$Ωl_ªÆloc
(* 
p
, 
size_t
 
n
)

269 i‡(
n
 == 0)

270 
n
 = 1;

271 i‡(
p
 == 0)

272  
	`mÆloc
(
n
);

273  
	`ªÆloc
(
p
, 
n
);

274 
	}
}

277 
	#NELEM
(
a
Ë(◊Ë/ ◊[0]))

	)

278 c⁄° * 
	gjs⁄_ty≥_«me
[] = {

289 c⁄° *
	$js⁄_ty≥_to_«me
(
js⁄_ty≥
 
o_ty≥
)

291 
o_ty≥_öt
 = ()
o_ty≥
;

292 i‡(
o_ty≥_öt
 < 0 || o_ty≥_öà>()
	`NELEM
(
js⁄_ty≥_«me
))

294 
	`MC_ERROR
("js⁄_ty≥_to_«me:Åy≥ %d i†ouào‡øngê[0,%d]\n", 
o_ty≥
, 
	`NELEM
(
js⁄_ty≥_«me
));

295  
NULL
;

297  
js⁄_ty≥_«me
[
o_ty≥
];

298 
	}
}

	@json/json_util.h

12 #i‚de‡
_js⁄_utû_h_


13 
	#_js⁄_utû_h_


	)

15 
	~"js⁄_obje˘.h
"

17 #ifde‡
__˝lu•lus


21 
	#JSON_FILE_BUF_SIZE
 4096

	)

24 
js⁄_obje˘
* 
js⁄_obje˘_‰om_fûe
(c⁄° *
fûíame
);

25 
js⁄_obje˘_to_fûe
(*
fûíame
, 
js⁄_obje˘
 *
obj
);

26 
js⁄_obje˘_to_fûe_ext
(*
fûíame
, 
js⁄_obje˘
 *
obj
, 
Êags
);

27 
js⁄_∑r£_öt64
(c⁄° *
buf
, 
öt64_t
 *
ªtvÆ
);

28 
js⁄_∑r£_doubÀ
(c⁄° *
buf
, *
ªtvÆ
);

35 c⁄° *
js⁄_ty≥_to_«me
(
js⁄_ty≥
 
o_ty≥
);

37 #ifde‡
__˝lu•lus


	@json/libjson.c

4 #i‡
deföed
(
HAVE_CDEFS_H
)

5 
	~<sys/cdefs.h
>

8 #i‚de‡
__w¨n_ª„ªn˚s


10 #i‡
deföed
(
__GNUC__
Ë&& deföed (
HAS_GNU_WARNING_LONG
)

12 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

13 
	`__asm__
(".£˘i⁄ .gnu" #sym ",\n\t.asciò\"" 
msg
 "\"\n\t.ãxt");

	)

16 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
Ë

	)

21 
	~"js⁄_obje˘.h
"

23 
__w¨n_ª„ªn˚s
(
js⁄_obje˘_gë
, "Warning:ÖleaseÜinkágainstÜibjson-c instead ofÜibjson");

	@json/linkhash.c

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<°dlib.h
>

16 
	~<°d¨g.h
>

17 
	~<°ddef.h
>

18 
	~<limôs.h
>

20 
	~"lökhash.h
"

22 
	$lh_ab‹t
(c⁄° *
msg
, ...)

24 
va_li°
 
≠
;

25 
	`va_°¨t
(
≠
, 
msg
);

26 
	`v¥ötf
(
msg
, 
≠
);

27 
	`va_íd
(
≠
);

28 
	`exô
(1);

29 
	}
}

31 
	$lh_±r_hash
(c⁄° *
k
)

34  ()((((
±rdiff_t
)
k
 * 
LH_PRIME
Ë>> 4Ë& 
ULONG_MAX
);

35 
	}
}

37 
	$lh_±r_equÆ
(c⁄° *
k1
, c⁄° *
k2
)

39  (
k1
 =
k2
);

40 
	}
}

42 
	$lh_ch¨_hash
(c⁄° *
k
)

44 
h
 = 0;

45 c⁄° * 
d©a
 = (c⁄° *)
k
;

47  *
d©a
!=0 ) 
h
 = h*129 + ()(*d©a++Ë+ 
LH_PRIME
;

49  
h
;

50 
	}
}

52 
	$lh_ch¨_equÆ
(c⁄° *
k1
, c⁄° *
k2
)

54  (
	`°rcmp
((c⁄° *)
k1
, (c⁄° *)
k2
) == 0);

55 
	}
}

57 
lh_èbÀ
* 
	$lh_èbÀ_√w
(
size
, c⁄° *
«me
,

58 
lh_íåy_‰ì_‚
 *
‰ì_‚
,

59 
lh_hash_‚
 *
hash_‚
,

60 
lh_equÆ_‚
 *
equÆ_‚
)

62 
i
;

63 
lh_èbÀ
 *
t
;

65 
t
 = (
lh_èbÀ
*)
	`ˇŒoc
(1, (lh_table));

66 if(!
t
Ë
	`lh_ab‹t
("lh_table_new: calloc failed\n");

67 
t
->
cou¡
 = 0;

68 
t
->
size
 = size;

69 
t
->
«me
 =Çame;

70 
t
->
èbÀ
 = (
lh_íåy
*)
	`ˇŒoc
(
size
, (lh_entry));

71 if(!
t
->
èbÀ
Ë
	`lh_ab‹t
("lh_table_new: calloc failed\n");

72 
t
->
‰ì_‚
 = free_fn;

73 
t
->
hash_‚
 = hash_fn;

74 
t
->
equÆ_‚
 =Équal_fn;

75 
i
 = 0; i < 
size
; i++Ë
t
->
èbÀ
[i].
k
 = 
LH_EMPTY
;

76  
t
;

77 
	}
}

79 
lh_èbÀ
* 
	$lh_kch¨_èbÀ_√w
(
size
, c⁄° *
«me
,

80 
lh_íåy_‰ì_‚
 *
‰ì_‚
)

82  
	`lh_èbÀ_√w
(
size
, 
«me
, 
‰ì_‚
, 
lh_ch¨_hash
, 
lh_ch¨_equÆ
);

83 
	}
}

85 
lh_èbÀ
* 
	$lh_k±r_èbÀ_√w
(
size
, c⁄° *
«me
,

86 
lh_íåy_‰ì_‚
 *
‰ì_‚
)

88  
	`lh_èbÀ_√w
(
size
, 
«me
, 
‰ì_‚
, 
lh_±r_hash
, 
lh_±r_equÆ
);

89 
	}
}

91 
	$lh_èbÀ_ªsize
(
lh_èbÀ
 *
t
, 
√w_size
)

93 
lh_èbÀ
 *
√w_t
;

94 
lh_íåy
 *
ít
;

96 
√w_t
 = 
	`lh_èbÀ_√w
(
√w_size
, 
t
->
«me
, 
NULL
,Å->
hash_‚
,Å->
equÆ_‚
);

97 
ít
 = 
t
->
hód
;

98 
ít
) {

99 
	`lh_èbÀ_ö£π
(
√w_t
, 
ít
->
k
,É¡->
v
);

100 
ít
 =É¡->
√xt
;

102 
	`‰ì
(
t
->
èbÀ
);

103 
t
->
èbÀ
 = 
√w_t
->table;

104 
t
->
size
 = 
√w_size
;

105 
t
->
hód
 = 
√w_t
->head;

106 
t
->
èû
 = 
√w_t
->tail;

107 
t
->
ªsizes
++;

108 
	`‰ì
(
√w_t
);

109 
	}
}

111 
	$lh_èbÀ_‰ì
(
lh_èbÀ
 *
t
)

113 
lh_íåy
 *
c
;

114 
c
 = 
t
->
hód
; c !
NULL
; c = c->
√xt
) {

115 if(
t
->
‰ì_‚
) {

116 
t
->
	`‰ì_‚
(
c
);

119 
	`‰ì
(
t
->
èbÀ
);

120 
	`‰ì
(
t
);

121 
	}
}

124 
	$lh_èbÀ_ö£π
(
lh_èbÀ
 *
t
, *
k
, c⁄° *
v
)

126 
h
, 
n
;

128 
t
->
ö£πs
++;

129 if(
t
->
cou¡
 >t->
size
 * 
LH_LOAD_FACTOR
Ë
	`lh_èbÀ_ªsize
(t,Å->size * 2);

131 
h
 = 
t
->
	`hash_‚
(
k
);

132 
n
 = 
h
 % 
t
->
size
;

135 if(
t
->
èbÀ
[
n
].
k
 =
LH_EMPTY
 ||Å->èbÀ[n].k =
LH_FREED
) ;

136 
t
->
cﬁlisi⁄s
++;

137 i‡(()++
n
 =
t
->
size
)Ç = 0;

140 
t
->
èbÀ
[
n
].
k
 = k;

141 
t
->
èbÀ
[
n
].
v
 = v;

142 
t
->
cou¡
++;

144 if(
t
->
hód
 =
NULL
) {

145 
t
->
hód
 =Å->
èû
 = &t->
èbÀ
[
n
];

146 
t
->
èbÀ
[
n
].
√xt
 =Å->èbÀ[n].
¥ev
 = 
NULL
;

148 
t
->
èû
->
√xt
 = &t->
èbÀ
[
n
];

149 
t
->
èbÀ
[
n
].
¥ev
 =Å->
èû
;

150 
t
->
èbÀ
[
n
].
√xt
 = 
NULL
;

151 
t
->
èû
 = &t->
èbÀ
[
n
];

155 
	}
}

158 
lh_íåy
* 
	$lh_èbÀ_lookup_íåy
(
lh_èbÀ
 *
t
, c⁄° *
k
)

160 
h
 = 
t
->
	`hash_‚
(
k
);

161 
n
 = 
h
 % 
t
->
size
;

162 
cou¡
 = 0;

164 
t
->
lookups
++;

165  
cou¡
 < 
t
->
size
 ) {

166 if(
t
->
èbÀ
[
n
].
k
 =
LH_EMPTY
Ë 
NULL
;

167 if(
t
->
èbÀ
[
n
].
k
 !
LH_FREED
 &&

168 
t
->
	`equÆ_‚
—->
èbÀ
[
n
].
k
, k))  &t->table[n];

169 i‡(()++
n
 =
t
->
size
)Ç = 0;

170 
cou¡
++;

172  
NULL
;

173 
	}
}

176 c⁄° * 
	$lh_èbÀ_lookup
(
lh_èbÀ
 *
t
, c⁄° *
k
)

178 *
ªsu…
;

179 
	`lh_èbÀ_lookup_ex
(
t
, 
k
, &
ªsu…
);

180  
ªsu…
;

181 
	}
}

183 
js⁄_boﬁ
 
	$lh_èbÀ_lookup_ex
(
lh_èbÀ
* 
t
, c⁄° * 
k
, **
v
)

185 
lh_íåy
 *
e
 = 
	`lh_èbÀ_lookup_íåy
(
t
, 
k
);

186 i‡(
e
 !
NULL
) {

187 i‡(
v
 !
NULL
Ë*v = (*)
e
->v;

188  
TRUE
;

190 i‡(
v
 !
NULL
) *v = NULL;

191  
FALSE
;

192 
	}
}

194 
	$lh_èbÀ_dñëe_íåy
(
lh_èbÀ
 *
t
, 
lh_íåy
 *
e
)

196 
±rdiff_t
 
n
 = (±rdiff_t)(
e
 - 
t
->
èbÀ
);

199 if(
n
 < 0) {  -2; }

201 if(
t
->
èbÀ
[
n
].
k
 =
LH_EMPTY
 ||Å->èbÀ[n].k =
LH_FREED
)  -1;

202 
t
->
cou¡
--;

203 if(
t
->
‰ì_‚
Ët->
	`‰ì_‚
(
e
);

204 
t
->
èbÀ
[
n
].
v
 = 
NULL
;

205 
t
->
èbÀ
[
n
].
k
 = 
LH_FREED
;

206 if(
t
->
èû
 =&t->
èbÀ
[
n
] &&Å->
hód
 == &t->table[n]) {

207 
t
->
hód
 =Å->
èû
 = 
NULL
;

208 } i‡(
t
->
hód
 =&t->
èbÀ
[
n
]) {

209 
t
->
hód
->
√xt
->
¥ev
 = 
NULL
;

210 
t
->
hód
 =Å->hód->
√xt
;

211 } i‡(
t
->
èû
 =&t->
èbÀ
[
n
]) {

212 
t
->
èû
->
¥ev
->
√xt
 = 
NULL
;

213 
t
->
èû
 =Å->èû->
¥ev
;

215 
t
->
èbÀ
[
n
].
¥ev
->
√xt
 =Å->table[n].next;

216 
t
->
èbÀ
[
n
].
√xt
->
¥ev
 =Å->table[n].prev;

218 
t
->
èbÀ
[
n
].
√xt
 =Å->èbÀ[n].
¥ev
 = 
NULL
;

220 
	}
}

223 
	$lh_èbÀ_dñëe
(
lh_èbÀ
 *
t
, c⁄° *
k
)

225 
lh_íåy
 *
e
 = 
	`lh_èbÀ_lookup_íåy
(
t
, 
k
);

226 if(!
e
)  -1;

227  
	`lh_èbÀ_dñëe_íåy
(
t
, 
e
);

228 
	}
}

230 
	$lh_èbÀ_Àngth
(
lh_èbÀ
 *
t
)

232  
t
->
cou¡
;

233 
	}
}

	@json/linkhash.h

13 #i‚de‡
_lökhash_h_


14 
	#_lökhash_h_


	)

16 
	~"js⁄_obje˘.h
"

18 #ifde‡
__˝lu•lus


25 
	#LH_PRIME
 0x9e370001UL

	)

32 
	#LH_LOAD_FACTOR
 0.66

	)

37 
	#LH_EMPTY
 (*)-1

	)

42 
	#LH_FREED
 (*)-2

	)

44 
lh_íåy
;

49 (
lh_íåy_‰ì_‚
Ë(
	tlh_íåy
 *
	te
);

53 (
	tlh_hash_‚
Ë(c⁄° *
	tk
);

57 (
lh_equÆ_‚
Ë(c⁄° *
	tk1
, c⁄° *
	tk2
);

62 
	slh_íåy
 {

66 *
k
;

70 c⁄° *
v
;

74 
lh_íåy
 *
√xt
;

78 
lh_íåy
 *
¥ev
;

85 
	slh_èbÀ
 {

89 
size
;

93 
cou¡
;

98 
cﬁlisi⁄s
;

103 
ªsizes
;

108 
lookups
;

113 
ö£πs
;

118 
dñëes
;

123 c⁄° *
«me
;

128 
lh_íåy
 *
hód
;

133 
lh_íåy
 *
èû
;

135 
lh_íåy
 *
èbÀ
;

140 
lh_íåy_‰ì_‚
 *
‰ì_‚
;

141 
lh_hash_‚
 *
hash_‚
;

142 
lh_equÆ_‚
 *
equÆ_‚
;

149 
lh_±r_hash
(c⁄° *
k
);

150 
lh_±r_equÆ
(c⁄° *
k1
, c⁄° *
k2
);

152 
lh_ch¨_hash
(c⁄° *
k
);

153 
lh_ch¨_equÆ
(c⁄° *
k1
, c⁄° *
k2
);

159 
	#lh_f‹óch
(
èbÀ
, 
íåy
) \

160 
íåy
 = 
èbÀ
->
hód
;É¡ry;É¡ry =É¡ry->
√xt
)

	)

165 
	#lh_f‹óch_ß„
(
èbÀ
, 
íåy
, 
tmp
) \

166 
íåy
 = 
èbÀ
->
hód
;É¡ry && ((
tmp
 =É¡ry->
√xt
Ë|| 1);É¡ry =Åmp)

	)

187 
lh_èbÀ
* 
lh_èbÀ_√w
(
size
, c⁄° *
«me
,

188 
lh_íåy_‰ì_‚
 *
‰ì_‚
,

189 
lh_hash_‚
 *
hash_‚
,

190 
lh_equÆ_‚
 *
equÆ_‚
);

200 
lh_èbÀ
* 
lh_kch¨_èbÀ_√w
(
size
, c⁄° *
«me
,

201 
lh_íåy_‰ì_‚
 *
‰ì_‚
);

212 
lh_èbÀ
* 
lh_k±r_èbÀ_√w
(
size
, c⁄° *
«me
,

213 
lh_íåy_‰ì_‚
 *
‰ì_‚
);

222 
lh_èbÀ_‰ì
(
lh_èbÀ
 *
t
);

231 
lh_èbÀ_ö£π
(
lh_èbÀ
 *
t
, *
k
, c⁄° *
v
);

240 
lh_íåy
* 
lh_èbÀ_lookup_íåy
(
lh_èbÀ
 *
t
, c⁄° *
k
);

249 c⁄° * 
lh_èbÀ_lookup
(
lh_èbÀ
 *
t
, c⁄° *
k
);

258 
js⁄_boﬁ
 
lh_èbÀ_lookup_ex
(
lh_èbÀ
 *
t
, c⁄° *
k
, **
v
);

269 
lh_èbÀ_dñëe_íåy
(
lh_èbÀ
 *
t
, 
lh_íåy
 *
e
);

281 
lh_èbÀ_dñëe
(
lh_èbÀ
 *
t
, c⁄° *
k
);

283 
lh_èbÀ_Àngth
(
lh_èbÀ
 *
t
);

285 
lh_ab‹t
(c⁄° *
msg
, ...);

286 
lh_èbÀ_ªsize
(
lh_èbÀ
 *
t
, 
√w_size
);

288 #ifde‡
__˝lu•lus


	@json/printbuf.c

16 
	~"jc⁄fig.h
"

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 #ifde‡
HAVE_STDARG_H


23 
	~<°d¨g.h
>

25 #îr‹ 
NŸ
 
íough
 
v¨
 
¨g
 
suµ‹t
!

28 
	~"bôs.h
"

29 
	~"debug.h
"

30 
	~"¥ötbuf.h
"

32 
¥ötbuf_exãnd
(
¥ötbuf
 *
p
, 
mö_size
);

34 
¥ötbuf
* 
	$¥ötbuf_√w
()

36 
¥ötbuf
 *
p
;

38 
p
 = (
¥ötbuf
*)
	`ˇŒoc
(1, (printbuf));

39 if(!
p
Ë 
NULL
;

40 
p
->
size
 = 32;

41 
p
->
bpos
 = 0;

42 if(!(
p
->
buf
 = (*)
	`mÆloc
’->
size
))) {

43 
	`‰ì
(
p
);

44  
NULL
;

46  
p
;

47 
	}
}

58 
	$¥ötbuf_exãnd
(
¥ötbuf
 *
p
, 
mö_size
)

60 *
t
;

61 
√w_size
;

63 i‡(
p
->
size
 >
mö_size
)

66 
√w_size
 = 
	`js⁄_max
(
p
->
size
 * 2, 
mö_size
 + 8);

67 #ifde‡
PRINTBUF_DEBUG


68 
	`MC_DEBUG
("printbuf_memappend:Ñealloc "

70 
p
->
bpos
, 
mö_size
,Ö->
size
, 
√w_size
);

72 if(!(
t
 = (*)
	`ªÆloc
(
p
->
buf
, 
√w_size
)))

74 
p
->
size
 = 
√w_size
;

75 
p
->
buf
 = 
t
;

77 
	}
}

79 
	$¥ötbuf_mem≠≥nd
(
¥ötbuf
 *
p
, c⁄° *
buf
, 
size
)

81 i‡(
p
->
size
 <p->
bpos
 + size + 1) {

82 i‡(
	`¥ötbuf_exãnd
(
p
,Ö->
bpos
 + 
size
 + 1) < 0)

85 
	`mem˝y
(
p
->
buf
 +Ö->
bpos
, buf, 
size
);

86 
p
->
bpos
 +
size
;

87 
p
->
buf
[p->
bpos
]= '\0';

88  
size
;

89 
	}
}

91 
	$¥ötbuf_mem£t
(
¥ötbuf
 *
pb
, 
off£t
, 
ch¨vÆue
, 
Àn
)

93 
size_√eded
;

95 i‡(
off£t
 == -1)

96 
off£t
 = 
pb
->
bpos
;

97 
size_√eded
 = 
off£t
 + 
Àn
;

98 i‡(
pb
->
size
 < 
size_√eded
)

100 i‡(
	`¥ötbuf_exãnd
(
pb
, 
size_√eded
) < 0)

104 
	`mem£t
(
pb
->
buf
 + 
off£t
, 
ch¨vÆue
, 
Àn
);

105 i‡(
pb
->
bpos
 < 
size_√eded
)

106 
pb
->
bpos
 = 
size_√eded
;

109 
	}
}

111 #i‡!
deföed
(
HAVE_VSNPRINTF
Ë&& deföed(
_MSC_VER
)

112 
	#v¢¥ötf
 
_v¢¥ötf


	)

113 #ñi‡!
deföed
(
HAVE_VSNPRINTF
)

114 #îr‹ 
Nìd
 
v¢¥ötf
!

117 #i‡!
deföed
(
HAVE_VASPRINTF
)

119 
	$va•rötf
(**
buf
, c⁄° *
fmt
, 
va_li°
 
≠
)

121 #i‚de‡
WIN32


122 
_T_em±ybuf„r
 = '\0';

124 
ch¨s
;

125 *
b
;

127 if(!
buf
) {  -1; }

129 #ifde‡
WIN32


130 
ch¨s
 = 
	`_vs˝rötf
(
fmt
, 
≠
)+1;

134 
ch¨s
 = 
	`v¢¥ötf
(&
_T_em±ybuf„r
, 0, 
fmt
, 
≠
)+1;

135 if(
ch¨s
 < 0) { chars *= -1; }

138 
b
 = (*)
	`mÆloc
(()*
ch¨s
);

139 if(!
b
) {  -1; }

141 if((
ch¨s
 = 
	`v•rötf
(
b
, 
fmt
, 
≠
)) < 0)

143 
	`‰ì
(
b
);

145 *
buf
 = 
b
;

148  
ch¨s
;

149 
	}
}

152 
	$•rötbuf
(
¥ötbuf
 *
p
, c⁄° *
msg
, ...)

154 
va_li°
 
≠
;

155 *
t
;

156 
size
;

157 
buf
[128];

160 
	`va_°¨t
(
≠
, 
msg
);

161 
size
 = 
	`v¢¥ötf
(
buf
, 128, 
msg
, 
≠
);

162 
	`va_íd
(
≠
);

167 if(
size
 == -1 || size > 127) {

168 
	`va_°¨t
(
≠
, 
msg
);

169 if((
size
 = 
	`va•rötf
(&
t
, 
msg
, 
≠
)Ë< 0Ë{ 
	`va_íd
(ap);  -1; }

170 
	`va_íd
(
≠
);

171 
	`¥ötbuf_mem≠≥nd
(
p
, 
t
, 
size
);

172 
	`‰ì
(
t
);

173  
size
;

175 
	`¥ötbuf_mem≠≥nd
(
p
, 
buf
, 
size
);

176  
size
;

178 
	}
}

180 
	$¥ötbuf_ª£t
(
¥ötbuf
 *
p
)

182 
p
->
buf
[0] = '\0';

183 
p
->
bpos
 = 0;

184 
	}
}

186 
	$¥ötbuf_‰ì
(
¥ötbuf
 *
p
)

188 if(
p
) {

189 
	`‰ì
(
p
->
buf
);

190 
	`‰ì
(
p
);

192 
	}
}

	@json/printbuf.h

16 #i‚de‡
_¥ötbuf_h_


17 
	#_¥ötbuf_h_


	)

19 #ifde‡
__˝lu•lus


23 
	s¥ötbuf
 {

24 *
buf
;

25 
bpos
;

26 
size
;

29 
¥ötbuf
*

30 
¥ötbuf_√w
();

40 
¥ötbuf_mem≠≥nd
(
¥ötbuf
 *
p
, c⁄° *
buf
, 
size
);

42 
	#¥ötbuf_mem≠≥nd_Á°
(
p
, 
buÂå
, 
bufsize
) \

44 i‡((
p
->
size
 -Ö->
bpos
Ë> 
bufsize
) { \

45 
	`mem˝y
(
p
->
buf
 +Ö->
bpos
, (
buÂå
), 
bufsize
); \

46 
p
->
bpos
 +
bufsize
; \

47 
p
->
buf
[p->
bpos
]= '\0'; \

48 } { 
	`¥ötbuf_mem≠≥nd
(
p
, (
buÂå
), 
bufsize
); } \

49 } 0)

	)

51 
	#¥ötbuf_Àngth
(
p
Ë(’)->
bpos
)

	)

62 
¥ötbuf_mem£t
(
¥ötbuf
 *
pb
, 
off£t
, 
ch¨vÆue
, 
Àn
);

65 
•rötbuf
(
¥ötbuf
 *
p
, c⁄° *
msg
, ...);

68 
¥ötbuf_ª£t
(
¥ötbuf
 *
p
);

71 
¥ötbuf_‰ì
(
¥ötbuf
 *
p
);

73 #ifde‡
__˝lu•lus


	@radius/example/local.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

15 
	~<mesßges.h
>

16 
	~<ødlogö.h
>

18 
ENV
 *
ív
;

20 
LFUNC
 
	$auth_loˇl
(*
u£∫ame
, *
∑sswd
)

22 
∑sswd
 *
pw
;

23 *
x∑sswd
;

24 #ifde‡
SHADOW_PASSWORD


25 
•wd
 *
•w
;

28 i‡((
pw
 = 
	`gëpw«m
(
u£∫ame
)Ë=
NULL
) {

29 
	`ídpwít
();

30 
	`rc_log
(
LOG_NOTICE
, "authítiˇti⁄ FAILED,Åy≥Üoˇl, u£∫amê%s", 
u£∫ame
);

31 
	`¥ötf
(
SC_LOCAL_FAILED
);

32  
NULL
;

34 
	`ídpwít
();

36 #ifde‡
SHADOW_PASSWORD


37 if((
•w
 = 
	`gë•«m
(
pw
->
pw_«me
)Ë=
NULL
) {

38 
	`íd•ít
();

39 
	`rc_log
(
LOG_NOTICE
, "authítiˇti⁄ FAILED,Åy≥Üoˇl, u£∫amê%s", 
u£∫ame
);

40 
	`¥ötf
(
SC_LOCAL_FAILED
);

41  
NULL
;

45 
pw
->
pw_∑sswd
 = 
•w
->
•_pwdp
;

47 
	`íd•ít
();

50 
x∑sswd
 = 
	`¸y±
(
∑sswd
, 
pw
->
pw_∑sswd
);

52 i‡(*
pw
->
pw_∑sswd
 ='\0' || 
	`°rcmp
(
x∑sswd
,Öw->pw_passwd)) {

53 
	`rc_log
(
LOG_NOTICE
, "authítiˇti⁄ FAILED,Åy≥Üoˇl, u£∫amê%s", 
u£∫ame
);

54 
	`¥ötf
(
SC_LOCAL_FAILED
);

55  
NULL
;

58 
	`rc_log
(
LOG_NOTICE
, "authítiˇti⁄ OK,Åy≥Üoˇl, u£∫amê%s", 
u£∫ame
);

59 
	`¥ötf
(
SC_LOCAL_OK
);

61  
loˇl_logö
;

62 
	}
}

65 
	$loˇl_logö
(
rc_h™dÀ
 *
rh
, *
u£∫ame
)

67 *
logö_loˇl
 = 
	`rc_c⁄f_°r
(
rh
, "login_local");

72 i‡(*
u£∫ame
 == '-') {

73 
	`rc_log
(
LOG_WARNING
, "username can't start withá dash");

74 
	`exô
(
ERROR_RC
);

80 
	`exe˛e
(
logö_loˇl
,Üogö_loˇl, "-h", "loˇlho°", "-f", 
u£∫ame
, 
NULL
, 
ív
->env);

81 
	`rc_log
(
LOG_ERR
, "couldn'àexecuã %s: %s", 
logö_loˇl
, 
	`°ªº‹
(
î∫o
));

82 
	`¶ìp
(1);

83 
	`exô
(
ERROR_RC
);

84 
	}
}

	@radius/example/radacct.c

12 
	grcsid
[] =

15 
	~<r_c⁄fig.h
>

16 
	~<ö˛udes.h
>

17 
	~<‰ìødius-˛õ¡.h
>

18 
	~<mesßges.h
>

19 
	~<∑th«mes.h
>

21 *
	g≤ame
;

23 
	$ußge
()

25 
	`Ârötf
(
°dîr
,"Ußge: %†[-Vh] [-‡<c⁄fig_fûe>] [-ò<˛õ¡_p‹t>]\n\n", 
≤ame
);

26 
	`Ârötf
(
°dîr
," -V output version information\n");

27 
	`Ârötf
(
°dîr
," -h outputÅhisÅext\n");

28 
	`Ârötf
(
°dîr
," -f filename ofálternate config file\n");

29 
	`Ârötf
(
°dîr
," -iÅtynameÅo sendÅoÅhe server\n");

30 
	`exô
(
ERROR_RC
);

31 
	}
}

33 
	$vîsi⁄
()

35 
	`Ârötf
(
°dîr
,"%s: %s\n", 
≤ame
 ,
rcsid
);

36 
	`exô
(
ERROR_RC
);

37 
	}
}

40 
	$maö
 (
¨gc
, **
¨gv
)

42 
ªsu…
 = 
ERROR_RC
;

43 
VALUE_PAIR
 *
£nd
 = 
NULL
;

44 
uöt32_t
 
˛õ¡_p‹t
;

45 
c
;

46 
VALUE_PAIR
 *
vp
;

47 
DICT_VALUE
 *
dvÆ
;

48 *
u£∫ame
, *
£rvi˚
, *
ÂrŸo
, *
ty≥
;

49 *
∑th_ødius˛õ¡_c⁄f
 = 
RC_CONFIG_FILE
;

50 *
âyn
 = 
NULL
;

51 
rc_h™dÀ
 *
rh
;

53 *
›èrg
;

55 
≤ame
 = (≤amê
	`°ºchr
(
¨gv
[0],'/'))?pname+1:argv[0];

57 
	`rc_›ílog
(
≤ame
);

59 (
c
 = 
	`gë›t
(
¨gc
,
¨gv
,"f:i:hV")) > 0)

61 
c
)

64 
∑th_ødius˛õ¡_c⁄f
 = 
›èrg
;

67 
âyn
 = 
›èrg
;

70 
	`vîsi⁄
();

73 
	`ußge
();

76 
	`exô
(
ERROR_RC
);

81 i‡((
rh
 = 
	`rc_ªad_c⁄fig
(
∑th_ødius˛õ¡_c⁄f
)Ë=
NULL
)

82 
	`exô
(
ERROR_RC
);

84 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0)

85 
	`exô
 (
ERROR_RC
);

87 i‡(
	`rc_ªad_m≠fûe
(
rh
, 
	`rc_c⁄f_°r
(rh, "mapfile")) != 0)

88 
	`exô
 (
ERROR_RC
);

90 i‡(
âyn
 !
NULL
)

92 
˛õ¡_p‹t
 = 
	`rc_m≠2id
(
rh
, 
âyn
);

99 i‡((
âyn
 = 
	`ây«me
(1)Ë!
NULL
)

101 
˛õ¡_p‹t
 = 
	`rc_m≠2id
(
rh
, 
âyn
);

105 
˛õ¡_p‹t
 = 0;

109 i‡((
£nd
 = 
	`rc_av∑ú_ªadö
(
rh
, 
°dö
))) {

111 
u£∫ame
 = 
£rvi˚
 = 
ty≥
 = "(unknown)";

112 
ÂrŸo
 = 
NULL
;

114 i‡((
vp
 = 
	`rc_av∑ú_gë
(
£nd
, 
PW_ACCT_STATUS_TYPE
, 0)Ë!
NULL
)

115 i‡((
dvÆ
 = 
	`rc_di˘_gëvÆ
(
rh
, 
vp
->
lvÆue
, vp->
«me
)Ë!
NULL
) {

116 
ty≥
 = 
dvÆ
->
«me
;

119 i‡((
vp
 = 
	`rc_av∑ú_gë
(
£nd
, 
PW_USER_NAME
, 0)Ë!
NULL
)

120 
u£∫ame
 = 
vp
->
°rvÆue
;

122 i‡((
vp
 = 
	`rc_av∑ú_gë
(
£nd
, 
PW_SERVICE_TYPE
, 0)Ë!
NULL
)

123 i‡((
dvÆ
 = 
	`rc_di˘_gëvÆ
(
rh
, 
vp
->
lvÆue
, vp->
«me
)Ë!
NULL
) {

124 
£rvi˚
 = 
dvÆ
->
«me
;

127 i‡(
vp
 && (vp->
lvÆue
 =
PW_FRAMED
) &&

128 ((
vp
 = 
	`rc_av∑ú_gë
(
£nd
, 
PW_FRAMED_PROTOCOL
, 0)Ë!
NULL
))

129 i‡((
dvÆ
 = 
	`rc_di˘_gëvÆ
(
rh
, 
vp
->
lvÆue
, vp->
«me
)Ë!
NULL
) {

130 
ÂrŸo
 = 
dvÆ
->
«me
;

133 
ªsu…
 = 
	`rc_ac˘
(
rh
, 
˛õ¡_p‹t
, 
£nd
);

134 i‡(
ªsu…
 =
OK_RC
)

136 
	`Ârötf
(
°dîr
, 
SC_ACCT_OK
);

137 
	`rc_log
(
LOG_NOTICE
, "accounting OK,Åype %s, username %s, service %s%s%s",

138 
ty≥
, 
u£∫ame
, 
£rvi˚
,(
ÂrŸo
)?"/":"", (fproto)?fproto:"");

142 
	`Ârötf
(
°dîr
, 
SC_ACCT_FAILED
, 
ªsu…
);

143 
	`rc_log
(
LOG_NOTICE
, "accounting FAILED,Åype %s, username %s, service %s%s%s",

144 
ty≥
, 
u£∫ame
, 
£rvi˚
,(
ÂrŸo
)?"/":"", (fproto)?fproto:"");

146 
	`rc_av∑ú_‰ì
(
£nd
);

149 
	`exô
 (
ªsu…
);

150 
	}
}

	@radius/example/radembedded.c

7 
	~<°dlib.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sy¶og.h
>

10 
	~<‰ìødius-˛õ¡.h
>

14 
	$maö
 (
¨gc
, **
¨gv
)

16 
ªtvÆ
 = 0;

17 
rc_h™dÀ
 *
rh
 = 
NULL
;

19 
uöt32_t
 
˛õ¡_p‹t
 = 0;

20 
uöt32_t
 
°©us_ty≥
 = 
PW_STATUS_STOP
;

21 
VALUE_PAIR
 *
£nd
 = 
NULL
;

26 
u£∫ame
[255] = "bob@somedomain.here";

27 
ˇŒ‰om
[255] = "8475551212";

28 
ˇŒto
[255] = "8479630116";

29 
myuuid
[255] = "981743-asdf-90834klj234";

33 
rh
 = 
	`rc_√w
();

34 i‡(
rh
 =
NULL
)

36 
	`¥ötf
("ERROR: FailedÅoállocate initial structure\n");

37 
	`exô
(1);

42 
rh
 = 
	`rc_c⁄fig_öô
(rh);

43 i‡(
rh
 =
NULL
)

45 
	`¥ötf
("ERROR: FailedÅo initialze configuration\n");

46 
	`exô
(1);

55 i‡(
	`rc_add_c⁄fig
(
rh
, "auth_order", "radius", "config", 0) != 0)

57 
	`¥ötf
("ERROR: UnableÅo setáuth_order.\n");

58 
	`rc_de°roy
(
rh
);

59 
	`exô
(1);

62 i‡(
	`rc_add_c⁄fig
(
rh
, "login_tries", "4", "config", 0) != 0)

64 
	`¥ötf
("ERROR: UnableÅo setÜogin_tries.\n");

65 
	`rc_de°roy
(
rh
);

66 
	`exô
(1);

69 i‡(
	`rc_add_c⁄fig
(
rh
, "dictionary", "/usr/local/radius/dictionary", "config", 0) != 0)

71 
	`¥ötf
("ERROR: UnableÅo set dictionary.\n");

72 
	`rc_de°roy
(
rh
);

73 
	`exô
(1);

76 i‡(
	`rc_add_c⁄fig
(
rh
, "seqfile", "/var/run/radius.seq", "config", 0) != 0)

78 
	`¥ötf
("ERROR: UnableÅo set seq file.\n");

79 
	`rc_de°roy
(
rh
);

80 
	`exô
(1);

83 i‡(
	`rc_add_c⁄fig
(
rh
, "radius_retries", "3", "config", 0) != 0)

85 
	`¥ötf
("ERROR: UnableÅo setÑadius_retries.\n");

86 
	`rc_de°roy
(
rh
);

87 
	`exô
(1);

90 i‡(
	`rc_add_c⁄fig
(
rh
, "radius_timeout", "5", "config", 0) != 0)

92 
	`¥ötf
("ERROR: UnableÅo setÑadius_timeout.\n");

93 
	`rc_de°roy
(
rh
);

94 
	`exô
(1);

103 i‡(
	`rc_add_c⁄fig
(
rh
, "authserver", "localhost::testing123", "config", 0) != 0)

105 
	`¥ötf
("ERROR: UnableÅo setáuthserver.\n");

106 
	`rc_de°roy
(
rh
);

107 
	`exô
(1);

110 i‡(
	`rc_add_c⁄fig
(
rh
, "acctserver", "localhost:1813:testing123", "config", 0) != 0)

112 
	`¥ötf
("ERROR: UnableÅo setácctserver.\n");

113 
	`rc_de°roy
(
rh
);

114 
	`exô
(1);

121 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0)

123 
	`¥ötf
("ERROR: FailedÅo initializeÑadius dictionary\n");

124 
	`exô
(1);

127 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_ACCT_STATUS_TYPE
, &
°©us_ty≥
, -1, 0Ë=
NULL
)

129 
	`¥ötf
("ERROR: Faûedáddög Ac˘-Sètus-Ty≥:Åÿ%d\n", 
°©us_ty≥
);

130 
	`exô
(1);

132 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_ACCT_SESSION_ID
, 
myuuid
, -1, 0Ë=
NULL
)

134 
	`¥ötf
("ERROR: Faûedáddög Ac˘-Sessi⁄-ID:Åÿ%s\n", 
myuuid
);

135 
	`exô
(1);

137 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_USER_NAME
, 
u£∫ame
, -1, 0Ë=
NULL
)

139 
	`¥ötf
("ERROR: Faûedáddög U£r-Name:Åÿ%s\n", 
u£∫ame
);

140 
	`exô
(1);

142 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_CALLED_STATION_ID
, 
ˇŒto
, -1, 0Ë=
NULL
)

144 
	`¥ötf
("ERROR: Faûedáddög CÆÀd-Sèti⁄-ID:Åÿ%s\n", 
ˇŒto
);

145 
	`exô
(1);

147 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_CALLING_STATION_ID
, 
ˇŒ‰om
, -1, 0Ë=
NULL
)

149 
	`¥ötf
("ERROR: Faûedáddög CÆlög-Sèti⁄-ID:Åÿ%s\n", 
ˇŒ‰om
);

150 
	`exô
(1);

153 if(
	`rc_ac˘
(
rh
, 
˛õ¡_p‹t
, 
£nd
Ë=
OK_RC
)

155 
	`¥ötf
("INFO: Accou¡ög OK: %s\n", 
u£∫ame
);

156 
ªtvÆ
 = 0;

160 
	`¥ötf
("INFO: Accou¡ög Faûed: %s\n", 
u£∫ame
);

161 
ªtvÆ
 = -1;

163 
	`rc_de°roy
(
rh
);

164 
	`rc_av∑ú_‰ì
(
£nd
);

166 
	`exô
(
ªtvÆ
);

167 
	}
}

	@radius/example/radexample.c

13 
	~<r_c⁄fig.h
>

14 
	~<ö˛udes.h
>

15 
	~<‰ìødius-˛õ¡.h
>

16 
	~<∑th«mes.h
>

18 *
	g≤ame
 = 
NULL
;

20 
	#åa˚löe
(Ë
	`¥ötf
("fûe: %s,Üöe: %u\n", 
__FILE__
, 
__LINE__
)

	)

23 
	$maö
 (
¨gc
, **
¨gv
)

25 
ªsu…
;

26 
u£∫ame
[128];

27 
∑sswd
[
AUTH_PASS_LEN
 + 1];

28 
VALUE_PAIR
 *
£nd
, *
ª˚ived
;

29 
uöt32_t
 
£rvi˚
;

30 
msg
[4096], 
u£∫ame_ªÆm
[256];

31 *
deÁu…_ªÆm
;

32 
rc_h™dÀ
 *
rh
;

34 
≤ame
 = (≤amê
	`°ºchr
(
¨gv
[0],'/'))?pname+1:argv[0];

36 
	`rc_›ílog
(
≤ame
);

38 i‡((
rh
 = 
	`rc_ªad_c⁄fig
(
RC_CONFIG_FILE
)Ë=
NULL
)

39  
ERROR_RC
;

41 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0)

42  
ERROR_RC
;

44 
deÁu…_ªÆm
 = 
	`rc_c⁄f_°r
(
rh
, "default_realm");

46 
	`°∫˝y
(
u£∫ame
, 
	`rc_gë°r
 (
rh
, "login: ",1), (username));

47 
	`°∫˝y
 (
∑sswd
, 
	`rc_gë°r
(
rh
, "Password: ",0),  (passwd));

49 
£nd
 = 
NULL
;

55 
	`°∫˝y
(
u£∫ame_ªÆm
, 
u£∫ame
, (username_realm));

58 i‡((
	`°rchr
(
u£∫ame_ªÆm
, '@'Ë=
NULL
Ë&& 
deÁu…_ªÆm
 &&

59 (*
deÁu…_ªÆm
 != '\0'))

61 
	`°∫ˇt
(
u£∫ame_ªÆm
, "@", (u£∫ame_ªÆm)-
	`°æí
(username_realm)-1);

62 
	`°∫ˇt
(
u£∫ame_ªÆm
, 
deÁu…_ªÆm
, (u£∫ame_ªÆm)-
	`°æí
(username_realm)-1);

65 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_USER_NAME
, 
u£∫ame_ªÆm
, -1, 0Ë=
NULL
)

66  
ERROR_RC
;

72 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_USER_PASSWORD
, 
∑sswd
, -1, 0Ë=
NULL
)

73  
ERROR_RC
;

79 
£rvi˚
 = 
PW_AUTHENTICATE_ONLY
;

80 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_SERVICE_TYPE
, &
£rvi˚
, -1, 0Ë=
NULL
)

81  
ERROR_RC
;

83 
ªsu…
 = 
	`rc_auth
(
rh
, 0, 
£nd
, &
ª˚ived
, 
msg
);

85 i‡(
ªsu…
 =
OK_RC
)

87 
	`Ârötf
(
°dîr
, "\"%s\" RADIUS Authítiˇti⁄ OK\n", 
u£∫ame
);

91 
	`Ârötf
(
°dîr
, "\"%s\" RADIUS Authítiˇti⁄ faûuª (RC=%i)\n", 
u£∫ame
, 
ªsu…
);

94  
ªsu…
;

95 
	}
}

	@radius/example/radius.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

15 
	~<mesßges.h
>

16 
	~<ødlogö.h
>

18 
ENV
 *
ív
;

20 
LFUNC
 
	$auth_ødius
(
rc_h™dÀ
 *
rh
, 
uöt32_t
 
˛õ¡_p‹t
, *
u£∫ame
, *
∑sswd
)

23 
VALUE_PAIR
 *
£nd
, *
ª˚ived
, *
vp
, *
£rvi˚_vp
;

24 
uöt32_t
 
£rvi˚
, 
·y≥
, 
˘y≥
;

25 
msg
[4096], *
p
, 
u£∫ame_ªÆm
[256];

26 
«me
[2048], 
vÆue
[2048];

27 
ªsu…
;

28 *
deÁu…_ªÆm
, *
£rvi˚_°r
, *
·y≥_°r
;

29 
DICT_VALUE
 *
dvÆ
;

31 
£nd
 = 
ª˚ived
 = 
NULL
;

37 #ifde‡
SCP


43 *
u£∫ame
)

46 
£rvi˚
 = 
PW_FRAMED
;

47 
·y≥
 = 
PW_SLIP
;

48 
˘y≥
 = 0;

49 
u£∫ame
++;

52 
£rvi˚
 = 
PW_FRAMED
;

53 
·y≥
 = 
PW_SLIP
;

54 
˘y≥
 = 
PW_VAN_JACOBSON_TCP_IP
;

55 
u£∫ame
++;

58 
£rvi˚
 = 
PW_FRAMED
;

59 
·y≥
 = 
PW_PPP
;

60 
˘y≥
 = 0;

61 
u£∫ame
++;

64 
£rvi˚
 = 
PW_LOGIN
;

65 
·y≥
 = 0;

66 
˘y≥
 = 0;

70 
£rvi˚
 = 
PW_LOGIN
;

71 
·y≥
 = 0;

72 
˘y≥
 = 0;

75 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_SERVICE_TYPE
, &
£rvi˚
, -1, 0Ë=
NULL
)

76  
NULL
;

80 i‡(
·y≥
 != 0)

82 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_FRAMED_PROTOCOL
, &
·y≥
, -1, 0Ë=
NULL
)

83  
NULL
;

88 i‡(
˘y≥
 != 0)

90 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_FRAMED_COMPRESSION
, &
˘y≥
, -1, 0Ë=
NULL
)

91  
NULL
;

98 
	`°∫˝y
(
u£∫ame_ªÆm
, 
u£∫ame
, (username_realm));

101 
deÁu…_ªÆm
 = 
	`rc_c⁄f_°r
(
rh
, "default_realm");

103 i‡((
	`°rchr
(
u£∫ame_ªÆm
, '@'Ë=
NULL
Ë&& 
deÁu…_ªÆm
 &&

104 ((*
deÁu…_ªÆm
) != '\0'))

106 
	`°∫ˇt
(
u£∫ame_ªÆm
, "@", (u£∫ame_ªÆm)-
	`°æí
(username_realm)-1);

107 
	`°∫ˇt
(
u£∫ame_ªÆm
, 
deÁu…_ªÆm
, (u£∫ame_ªÆm)-
	`°æí
(username_realm)-1);

110 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_USER_NAME
, 
u£∫ame_ªÆm
, -1, 0Ë=
NULL
)

111  
NULL
;

117 i‡(
	`rc_av∑ú_add
(
rh
, &
£nd
, 
PW_USER_PASSWORD
, 
∑sswd
, -1, 0Ë=
NULL
)

118  
NULL
;

120 
ªsu…
 = 
	`rc_auth
(
rh
, 
˛õ¡_p‹t
, 
£nd
, &
ª˚ived
, 
msg
);

122 i‡(
ªsu…
 =
OK_RC
)

125 
acou¡
[256], 
©å
;

127 
	`mem£t
(
acou¡
, 0, (acount));

129 
	`rc_add_ív
(
ív
, "RADIUS_USER_NAME", 
u£∫ame
);

131 
vp
 = 
ª˚ived
;

137 
vp
)

139 
	`°r˝y
(
«me
, "RADIUS_");

140 i‡(
	`rc_av∑ú_to°r
(
rh
, 
vp
, 
«me
+7, “ame)-7, 
vÆue
, (value)) < 0) {

141 
	`rc_av∑ú_‰ì
(
£nd
);

142 
	`rc_av∑ú_‰ì
(
ª˚ived
);

143  
NULL
;

147 
p
 = 
«me
; *p;Ö++) {

148 *
p
 = 
	`touµî
(*p);

149 i‡(*
p
 == '-') *p = '_';

154 i‡((
©å
 = 
vp
->
©åibuã
) < 256)

156 
cou¡
;

157 i‡((
cou¡
 = 
acou¡
[
©å
]++) > 0) {

158 
buf
[10];

159 
	`•rötf
(
buf
, "_%d", 
cou¡
);

160 
	`°rˇt
(
«me
,
buf
);

164 i‡(
	`rc_add_ív
(
ív
, 
«me
, 
vÆue
) < 0)

166 
	`rc_av∑ú_‰ì
(
£nd
);

167 
	`rc_av∑ú_‰ì
(
ª˚ived
);

168  
NULL
;

171 
vp
 = vp->
√xt
;

174 
£rvi˚_°r
 = "(unknown)";

175 
·y≥_°r
 = 
NULL
;

177 i‡((
£rvi˚_vp
 = 
	`rc_av∑ú_gë
(
ª˚ived
, 
PW_SERVICE_TYPE
, 0)Ë!
NULL
)

178 i‡((
dvÆ
 = 
	`rc_di˘_gëvÆ
(
rh
, 
£rvi˚_vp
->
lvÆue
, sîvi˚_vp->
«me
)Ë!
NULL
) {

179 
£rvi˚_°r
 = 
dvÆ
->
«me
;

182 i‡(
£rvi˚_vp
 && (£rvi˚_vp->
lvÆue
 =
PW_FRAMED
) &&

183 ((
vp
 = 
	`rc_av∑ú_gë
(
ª˚ived
, 
PW_FRAMED_PROTOCOL
, 0)Ë!
NULL
))

184 i‡((
dvÆ
 = 
	`rc_di˘_gëvÆ
(
rh
, 
vp
->
lvÆue
, vp->
«me
)Ë!
NULL
) {

185 
·y≥_°r
 = 
dvÆ
->
«me
;

188 
	`rc_log
(
LOG_NOTICE
, "authentication OK, username %s, service %s%s%s",

189 
u£∫ame
, 
£rvi˚_°r
,(
·y≥_°r
)?"/":"", (ftype_str)?ftype_str:"");

191 i‡(
msg
 && (*msg != '\0'))

192 
	`¥ötf
(
SC_SERVER_REPLY
, 
msg
);

194 
	`¥ötf
(
SC_RADIUS_OK
);

196 
	`rc_av∑ú_‰ì
(
£nd
);

197 
	`rc_av∑ú_‰ì
(
ª˚ived
);

199  
ødius_logö
;

203 
	`rc_log
(
LOG_NOTICE
, "authentication FAILED,Åype RADIUS, username %s",

204 
u£∫ame_ªÆm
);

205 i‡(
msg
 && (*msg != '\0'))

206 
	`¥ötf
(
SC_SERVER_REPLY
, 
msg
);

208 
	`¥ötf
(
SC_RADIUS_FAILED
);

211 
	`rc_av∑ú_‰ì
(
£nd
);

212 i‡(
ª˚ived
)

213 
	`rc_av∑ú_‰ì
(
ª˚ived
);

215  
NULL
;

216 
	}
}

219 
	$ødius_logö
(
rc_h™dÀ
 *
rh
, *
u£∫ame
)

221 *
logö_ødius
 = 
	`rc_c⁄f_°r
(
rh
, "login_radius");

223 
	`exe˛e
(
logö_ødius
,Üogö_ødius, 
NULL
, 
ív
->env);

225 
	`rc_log
(
LOG_ERR
, "couldn'àexecuã %s: %s", 
logö_ødius
, 
	`°ªº‹
(
î∫o
));

226 
	`Ârötf
(
°dîr
, "couldn'àexecuã %s: %s", 
logö_ødius
, 
	`°ªº‹
(
î∫o
));

228 
	`¶ìp
(1);

229 
	`exô
(
ERROR_RC
);

230 
	}
}

	@radius/example/radiusclient.c

29 
	~<˘y≥.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

35 
	~<‰ìødius-˛õ¡.h
>

37 
¥o˚ss
(*, 
VALUE_PAIR
 *, , );

40 
	$ußge
()

43 
	`Ârötf
(
°dîr
, "usage:Ñadiusclient [-f config_file] [-pÇas_port] [-s | [-a]á1=v1 [a2=v2[...[aN=vN]...]]]\n");

44 
	`exô
(1);

45 
	}
}

48 
	$maö
(
¨gc
, **
¨gv
)

50 
i
, 
«s_p‹t
, 
ch
, 
ac˘
, 
£rvî
, 
ecou¡
, 
fú°löe
, 
thìnd
;

51 *
rh
;

52 
size_t
 
Àn
;

53 
VALUE_PAIR
 *
£nd
, **
vp
;

54 *
rc_c⁄f
, *
˝
;

55 
lbuf
[4096];

57 
rc_c⁄f
 = 
RC_CONFIG_FILE
;

58 
«s_p‹t
 = 5060;

60 
ac˘
 = 0;

61 
£rvî
 = 0;

62 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "af:p:s")) != -1) {

63 
ch
) {

65 
rc_c⁄f
 = 
›èrg
;

69 
«s_p‹t
 = 
	`©oi
(
›èrg
);

73 
ac˘
 = 1;

77 
£rvî
 = 1;

81 
	`ußge
();

84 
¨gc
 -
›töd
;

85 
¨gv
 +
›töd
;

87 i‡((
¨gc
 =0 && 
£rvî
 == 0) || (argc != 0 && server != 0))

88 
	`ußge
();

90 i‡((
rh
 = 
	`rc_ªad_c⁄fig
(
rc_c⁄f
)Ë=
NULL
) {

91 
	`Ârötf
(
°dîr
, "error openingÑadius configuration file\n");

92 
	`exô
(1);

95 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0) {

96 
	`Ârötf
(
°dîr
, "errorÑeadingÑadius dictionary\n");

97 
	`exô
(2);

100 i‡(
£rvî
 == 0) {

101 
£nd
 = 
NULL
;

102 
vp
 = &
£nd
;

103 
i
 = 0; i < 
¨gc
; i++) {

104 i‡(
	`rc_av∑ú_∑r£
(
rh
, 
¨gv
[
i
], 
vp
) < 0) {

105 
	`Ârötf
(
°dîr
, "%s: c™'à∑r£ AVÖaú\n", 
¨gv
[
i
]);

106 
	`exô
(3);

108 
vp
 = &
£nd
->
√xt
;

110 
	`exô
(
	`¥o˚ss
(
rh
, 
£nd
, 
ac˘
, 
«s_p‹t
));

113 
£nd
 = 
NULL
;

114 
vp
 = &
£nd
;

115 
ecou¡
 = 0;

116 
fú°löe
 = 1;

117 
ac˘
 = 0;

119 
Àn
 = 0;

120 
˝
 = 
	`rc_fgë 
(
°dö
, &
Àn
);

121 
thìnd
 = 1;

122 i‡(
˝
 !
NULL
 && 
Àn
 > 0) {

123 i‡(
fú°löe
 != 0) {

124 i‡(
Àn
 >4 && 
	`memcmp
(
˝
, "ACCT", 4) == 0)

125 
ac˘
 = 1;

126 
fú°löe
 = 0;

127 
thìnd
 = 0;

130 
i
 = 0; i < 
Àn
; i++) {

131 i‡(!
	`is•a˚
(
˝
[
i
])) {

132 
thìnd
 = 0;

136 i‡(
thìnd
 == 0) {

137 
	`mem˝y
(
lbuf
, 
˝
, 
Àn
);

138 
lbuf
[
Àn
] = '\0';

139 i‡(
	`rc_av∑ú_∑r£
(
rh
, 
lbuf
, 
vp
) < 0) {

140 
	`Ârötf
(
°dîr
, "%s: c™'à∑r£ AVÖaú\n", 
lbuf
);

141 
ecou¡
++;

143 
vp
 = &
£nd
->
√xt
;

147 } 
thìnd
 == 0);

148 i‡(
£nd
 !
NULL
 && 
ecou¡
 == 0)

149 
	`¥ötf
("%d\n\n", 
	`¥o˚ss
(
rh
, 
£nd
, 
ac˘
, 
«s_p‹t
));

151 
	`¥ötf
("%d\n\n", -1);

152 
	`fÊush
(
°dout
);

153 i‡(
£nd
 !
NULL
)

154 
	`rc_av∑ú_‰ì
(
£nd
);

155 i‡(
˝
 =
NULL
 || 
Àn
 <= 0)

158 
	`exô
(0);

159 
	}
}

162 
	$¥o˚ss
(*
rh
, 
VALUE_PAIR
 *
£nd
, 
ac˘
, 
«s_p‹t
)

164 
VALUE_PAIR
 *
ª˚ived
;

165 
msg
[4096];

166 
i
;

168 
ª˚ived
 = 
NULL
;

169 i‡(
ac˘
 == 0) {

170 
i
 = 
	`rc_auth
(
rh
, 
«s_p‹t
, 
£nd
, &
ª˚ived
, 
msg
);

171 i‡(
ª˚ived
 !
NULL
) {

172 
	`¥ötf
("%s", 
	`rc_av∑ú_log
(
rh
, 
ª˚ived
));

173 
	`rc_av∑ú_‰ì
(
ª˚ived
);

176 
i
 = 
	`rc_ac˘
(
rh
, 
«s_p‹t
, 
£nd
);

179  (
i
 =
OK_RC
) ? 0 : 1;

180 
	}
}

	@radius/example/radlogin.c

13 
	grcsid
[] =

16 
	~<r_c⁄fig.h
>

17 
	~<ö˛udes.h
>

18 
	~<‰ìødius-˛õ¡.h
>

19 
	~<mesßges.h
>

20 
	~<∑th«mes.h
>

21 
	~<ødlogö.h
>

23 
ENV
 *
	gív
 = 
NULL
;

24 *
	g≤ame
 = 
NULL
;

25 
rc_h™dÀ
 *
	grh
 = 
NULL
;

27 
RETSIGTYPE


28 
	$Æ¨m_h™dÀr
(
¢
)

30 
	`Ârötf
(
°dîr
, 
SC_TIMEOUT
, 
	`rc_c⁄f_öt
(
rh
, "login_timeout"));

31 
	`¶ìp
(1);

32 
	`exô
(
ERROR_RC
);

33 
	}
}

36 
	$logö_Ælowed
(*
ây
)

38 
FILE
 *
Â
;

39 
‚ame
[
PATH_MAX
];

40 
c
;

42 
	`°r˝y
(
‚ame
, 
	`rc_c⁄f_°r
(
rh
, "nologin"));

43 i‡(
	`ac˚ss
(
‚ame
, 
F_OK
) < 0) {

44 i‡(
ây
) {

45 
	`•rötf
(
‚ame
, "%s.%s", 
	`rc_c⁄f_°r
(
rh
, "nﬁogö"), 
ây
);

46 i‡(
	`ac˚ss
(
‚ame
, 
F_OK
) < 0)

53 i‡((
Â
 = 
	`f›í
(
‚ame
, "r")Ë!
NULL
)

55 (
c
 = 
	`fgëc
(
Â
)Ë!
EOF
)

57 i‡(
c
 == '\n')

58 
	`Âutc
('\r', 
°dout
);

59 
	`Âutc
(
c
, 
°dout
);

61 
	`fÊush
(
°dout
);

62 
	`f˛o£
(
Â
);

64 
	`¥ötf
(
SC_NOLOGIN
);

67 
	}
}

70 
	$sub°_∂a˚hﬁdîs
(*
°r
, *
ây
)

72 *
p
,*
q
;

73 
buf
[4096];

74 #i‡
	`deföed
(
HAVE_UNAME
)

75 
ut¢ame
 
uts
;

77 #i‡!
	`deföed
(
HAVE_STRUCT_UTSNAME_DOMAINNAME
Ë&& deföed(
HAVE_GETDOMAINNAME
)

78 
domaö«me
[256];

81 #i‡
	`deföed
(
HAVE_UNAME
)

82 
	`u«me
(&
uts
);

85 
p
 = 
°r
;

86 
q
 = 
buf
;

88 *
p
 != '\0') {

89 *
p
) {

91 i‡(*(
p
+1) == '\0')

93 
p
++;

94 *
p
) {

96 
	`°r˝y
(
q
, 
rcsid
);

97 
q
 +
	`°æí
(
rcsid
);

101 
	`°r˝y
(
q
, 
ây
);

102 
q
 +
	`°æí
(
ây
);

104 #i‡
	`deföed
(
HAVE_UNAME
)

106 
	`°r˝y
(
q
, 
uts
.
sy¢ame
);

107 
q
 +
	`°æí
(
uts
.
sy¢ame
);

110 
	`°r˝y
(
q
, 
uts
.
nodíame
);

111 
q
 +
	`°æí
(
uts
.
nodíame
);

114 
	`°r˝y
(
q
, 
uts
.
ªÀa£
);

115 
q
 +
	`°æí
(
uts
.
ªÀa£
);

118 
	`°r˝y
(
q
, 
uts
.
vîsi⁄
);

119 
q
 +
	`°æí
(
uts
.
vîsi⁄
);

122 
	`°r˝y
(
q
, 
uts
.
machöe
);

123 
q
 +
	`°æí
(
uts
.
machöe
);

127 #i‡
	`deföed
(
HAVE_STRUCT_UTSNAME_DOMAINNAME
)

128 
	`°r˝y
(
q
, 
uts
.
domaö«me
);

129 
q
 +
	`°æí
(
uts
.
domaö«me
);

130 #ñi‡
	`deföed
(
HAVE_GETDOMAINNAME
)

131 
	`gëdomaö«me
(
domaö«me
, (domainname));

132 
	`°r˝y
(
q
, 
domaö«me
);

133 
q
 +
	`°æí
(
domaö«me
);

137 *
q
 = '\\';

138 
q
++;

142 #i‡
	`deföed
(
HAVE_UNAME
)

144 
	`°r˝y
(
q
, 
uts
.
nodíame
);

145 
q
 +
	`°æí
(
uts
.
nodíame
);

149 
	`°r˝y
(
q
,"\r\n");

150 
q
 += 2;

153 *
q
 = *
p
;

154 
q
++;

158 
p
++;

160 *
q
 = '\0';

162  
buf
;

163 
	}
}

166 
	$ußge
()

168 
	`Ârötf
(
°dîr
,"Ußge: %†[-Vhnd] [-‡<c⁄fig_fûe>] [-ò<˛õ¡_p‹t>] [-m <logö_åõs>]\n\n", 
≤ame
);

169 
	`Ârötf
(
°dîr
," -V output version information\n");

170 
	`Ârötf
(
°dîr
," -h outputÅhisÅext\n");

171 
	`Ârötf
(
°dîr
," -n don't display issue file\n");

172 
	`Ârötf
(
°dîr
," -f filename ofálternate config file\n");

173 
	`Ârötf
(
°dîr
," -iÅtynameÅo sendÅoÅhe server\n");

174 
	`Ârötf
(
°dîr
," -m maximumÜoginÅries (overrides value in config file)\n");

175 
	`exô
(
ERROR_RC
);

176 
	}
}

179 
	$vîsi⁄
()

181 
	`Ârötf
(
°dîr
,"%s: %s\n", 
≤ame
 ,
rcsid
);

182 
	`exô
(
ERROR_RC
);

183 
	}
}

186 
	$maö
 (
¨gc
, **
¨gv
)

188 
u£∫ame
[128];

189 
∑sswd
[
AUTH_PASS_LEN
 + 1];

190 
åõs
, 
ªmaöög
, 
c
;

191 
uöt32_t
 
˛õ¡_p‹t
;

192 (*
logö_func
)(
rc_h™dÀ
 *, *);

193 
FILE
 *
Â
;

194 
buf
[4096];

195 
ây
[1024], *
p
;

196 
noissue
 = 0;

197 
maxåõs
 = 0;

198 *
âyn
 = 
NULL
;

199 *
∑th_ødius˛õ¡_c⁄f
 = 
RC_CONFIG_FILE
;

201 *
›èrg
;

202 
›töd
;

204 
≤ame
 = (≤amê
	`°ºchr
(
¨gv
[0],'/'))?pname+1:argv[0];

206 
	`rc_›ílog
(
≤ame
);

208 (
c
 = 
	`gë›t
(
¨gc
,
¨gv
,"f:m:i:nhV")) > 0)

210 
c
) {

212 
∑th_ødius˛õ¡_c⁄f
 = 
›èrg
;

215 
âyn
 = 
›èrg
;

218 
noissue
 = 1;

221 
maxåõs
 = 
	`©oi
(
›èrg
);

224 
	`vîsi⁄
();

227 
	`ußge
();

230 
	`exô
(
ERROR_RC
);

235 i‡((
rh
 = 
	`rc_ªad_c⁄fig
(
∑th_ødius˛õ¡_c⁄f
)Ë=
NULL
)

236 
	`exô
(
ERROR_RC
);

238 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0)

239 
	`exô
 (
ERROR_RC
);

241 i‡(
	`rc_ªad_m≠fûe
(
rh
, 
	`rc_c⁄f_°r
(rh, "mapfile")) != 0)

242 
	`exô
 (
ERROR_RC
);

244 i‡(
âyn
 !
NULL
)

246 
˛õ¡_p‹t
 = 
	`rc_m≠2id
(
rh
, 
âyn
);

248 i‡((
p
 = 
	`°ºchr
(
âyn
, '/')Ë=
NULL
)

249 
	`°∫˝y
(
ây
, 
âyn
, (tty));

251 
	`°∫˝y
(
ây
, 
p
+1, (tty));

255 
âyn
 = 
	`ây«me
(0);

256 i‡(
âyn
)

258 i‡((
p
 = 
	`°ºchr
(
âyn
, '/')Ë=
NULL
)

259 
	`°∫˝y
(
ây
, 
âyn
, (tty));

261 
	`°∫˝y
(
ây
, 
p
+1, (tty));

263 
˛õ¡_p‹t
 = 
	`rc_m≠2id
(
rh
, 
âyn
);

267 *
ây
 = '\0';

268 
˛õ¡_p‹t
 = 0;

272 #ifde‡
SETVBUF_REVERSED


273 
	`£tvbuf
(
°dout
, 
_IONBF
, 
NULL
, 0);

275 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

278 i‡((
¨gc
 - 
›töd
) == 1)

280 
	`°∫˝y
(
u£∫ame
,
¨gv
[
›töd
], (username));

284 *
u£∫ame
 = '\0';

286 i‡(!
noissue
) {

287 i‡(
	`rc_c⁄f_°r
(
rh
, "issue"Ë&& ((
Â
 = 
	`f›í
‘c_c⁄f_°r‘h, "issue"), "r")Ë!
NULL
))

289 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
)

290 
	`Âuts
(
	`sub°_∂a˚hﬁdîs
(
buf
, 
ây
), 
°dout
);

292 
	`fÊush
(
°dout
);

293 
	`f˛o£
(
Â
);

295 
	`Âuts
(
	`sub°_∂a˚hﬁdîs
(
SC_DEFAULT_ISSUE
, 
ây
), 
°dout
);

296 
	`fÊush
(
°dout
);

301 i‡((
ív
 = 
	`rc_√w_ív
(
ENV_SIZE
)Ë=
NULL
)

303 
	`rc_log
(
LOG_CRIT
, "rc_new_env: FATAL: out of memory");

304 
	`ab‹t
();

307 #ifde‡
SECURITY_DISABLED


308 i‡(
	`rc_imp‹t_ív
(
ív
,
ívú⁄
) < 0)

310 
	`rc_log
(
LOG_CRIT
, "rc_import_env: FATAL:ÇotÉnough space forÉnvironment (increase ENV_SIZE)");

311 
	`ab‹t
();

314 
	`rc_add_ív
(
ív
, "IFS", " ");

315 
	`rc_add_ív
(
ív
, "PATH", 
RC_SECURE_PATH
);

318 
	`sig«l
(
SIGALRM
, 
Æ¨m_h™dÀr
);

320 
ªmaöög
 = 
	`rc_c⁄f_öt
(
rh
, "login_timeout");

322 i‡(!
maxåõs
)

323 
maxåõs
 = 
	`rc_c⁄f_öt
(
rh
, "login_tries");

325 
åõs
 = 1;

326 
åõs
 <
maxåõs
)

328 
	`Æ¨m
(
ªmaöög
);

330 !*
u£∫ame
) {

331 
p
 = 
	`rc_gë°r
 (
rh
, 
SC_LOGIN
, 1);

332 i‡(
p
)

333 
	`°∫˝y
(
u£∫ame
, 
p
, (username));

335 
	`exô
 (
ERROR_RC
);

337 
p
 = 
	`rc_gë°r
(
rh
, 
SC_PASSWORD
,0);

338 i‡(
p
)

339 
	`°∫˝y
 (
∑sswd
, 
p
,  (passwd));

341 
	`exô
 (
ERROR_RC
);

343 
ªmaöög
 = 
	`Æ¨m
(0);

345 
logö_func
 = 
NULL
;

347 i‡(
	`rc_c⁄f_öt
(
rh
, "auth_‹dî"Ë& 
AUTH_LOCAL_FST
)

349 
logö_func
 = 
	`auth_loˇl
(
u£∫ame
, 
∑sswd
);

351 i‡(!
logö_func
)

352 i‡(
	`rc_c⁄f_öt
(
rh
, "auth_‹dî"Ë& 
AUTH_RADIUS_SND
)

353 
logö_func
 = 
	`auth_ødius
(
rh
, 
˛õ¡_p‹t
, 
u£∫ame
, 
∑sswd
);

357 
logö_func
 = 
	`auth_ødius
(
rh
, 
˛õ¡_p‹t
, 
u£∫ame
, 
∑sswd
);

358 i‡(!
logö_func
)

359 i‡(
	`rc_c⁄f_öt
(
rh
, "auth_‹dî"Ë& 
AUTH_LOCAL_SND
)

360 
logö_func
 = 
	`auth_loˇl
(
u£∫ame
, 
∑sswd
);

363 
	`mem£t
(
∑sswd
, '\0', (passwd));

365 i‡(
logö_func
 !
NULL
) {

366 i‡(
	`logö_Ælowed
(
ây
)) {

367 (*
logö_func
)(
rh
, 
u£∫ame
);

369 
	`¶ìp
(1);

370 
	`exô
 (
ERROR_RC
);

374 *
u£∫ame
 = '\0';

376 i‡((++
åõs
Ë<
maxåõs
) {

377 
	`Æ¨m
(
ªmaöög
);

378 
	`¶ìp
(
åõs
 * 2);

379 
ªmaöög
 = 
	`Æ¨m
(0);

384 
	`Ârötf
(
°dîr
, 
SC_EXCEEDED
);

385 
	`¶ìp
(1);

387 
	`exô
 (
ERROR_RC
);

388 
	}
}

	@radius/example/radlogin.h

12 #i‚de‡
RADLOGIN_H


13 
	#RADLOGIN_H


	)

15 (*
	tLFUNC
)(
	trc_h™dÀ
 *, *);

18 
LFUNC
 
	`auth_ødius
(
rc_h™dÀ
 *, 
uöt32_t
, *, *);

19 
	`ødius_logö
(
rc_h™dÀ
 *, *);

22 
LFUNC
 
	`auth_loˇl
(*, *);

23 
	`loˇl_logö
(
rc_h™dÀ
 *, *);

	@radius/example/radstatus.c

17 
	#FIX_ME_SECRET
 "fixme"

	)

19 
	grcsid
[] =

22 
	~<r_c⁄fig.h
>

23 
	~<ö˛udes.h
>

24 
	~<‰ìødius-˛õ¡.h
>

25 
	~<∑th«mes.h
>

26 
	~<mesßges.h
>

28 *
	g≤ame
;

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
,"Ußge: %†[-Vh] [-‡<c⁄fig_fûe>] [£rvî[:p‹t[:£¸ë]] ...\n\n", 
≤ame
);

34 
	`Ârötf
(
°dîr
," -V output version information\n");

35 
	`Ârötf
(
°dîr
," -h outputÅhisÅext\n");

36 
	`Ârötf
(
°dîr
," -f filename ofálternate config file\n");

37 
	`exô
(
ERROR_RC
);

38 
	}
}

40 
	$vîsi⁄
()

42 
	`Ârötf
(
°dîr
,"%s: %s\n", 
≤ame
 ,
rcsid
);

43 
	`exô
(
ERROR_RC
);

44 
	}
}

46 
	$maö
 (
¨gc
, **
¨gv
)

48 
ªsu…
 = 
ERROR_RC
;

49 
c
,
i
;

50 *
p
, 
msg
[4096];

51 
SERVER
 *
§v
;

52 *
∑th_ødius˛õ¡_c⁄f
 = 
RC_CONFIG_FILE
;

53 
rc_h™dÀ
 *
rh
;

55 
›töd
;

57 
≤ame
 = (≤amê
	`°ºchr
(
¨gv
[0],'/'))?pname+1:argv[0];

59 
	`rc_›ílog
(
≤ame
);

61 (
c
 = 
	`gë›t
(
¨gc
,
¨gv
,"hVf:")) > 0)

63 
c
) {

65 
∑th_ødius˛õ¡_c⁄f
 = 
›èrg
;

68 
	`vîsi⁄
();

71 
	`ußge
();

74 
	`exô
(
ERROR_RC
);

79 
¨gc
 -
›töd
;

80 
¨gv
 +
›töd
;

82 i‡((
rh
 = 
	`rc_ªad_c⁄fig
(
∑th_ødius˛õ¡_c⁄f
)Ë=
NULL
)

83 
	`exô
(
ERROR_RC
);

85 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
	`rc_c⁄f_°r
(rh, "dictionary")) != 0)

86 
	`exô
 (
ERROR_RC
);

88 i‡(
¨gc
 > 0) {

89 
i
 = 0; i < 
¨gc
; i++) {

90 i‡((
p
 = 
	`°rchr
(
¨gv
[
i
], ':')Ë=
NULL
) {

91 
ªsu…
 = 
	`rc_check
(
rh
, 
¨gv
[
i
],
FIX_ME_SECRET
,
	`rc_gëp‹t
(
AUTH
), 
msg
);

92 } i‡(!
	`°rcmp
(
p
+1, "auth")) {

93 *
p
 = '\0';

94 
ªsu…
 = 
	`rc_check
(
rh
, 
¨gv
[
i
],
FIX_ME_SECRET
,
	`rc_gëp‹t
(
AUTH
), 
msg
);

95 } i‡(!
	`°rcmp
(
p
+1, "acct")) {

96 *
p
 = '\0';

97 
ªsu…
 = 
	`rc_check
(
rh
, 
¨gv
[
i
],
FIX_ME_SECRET
,
	`rc_gëp‹t
(
ACCT
), 
msg
);

99 *
p
 = '\0';

100 
ªsu…
 = 
	`rc_check
(
rh
, 
¨gv
[
i
],
FIX_ME_SECRET
,
	`©oi
(
p
+1), 
msg
);

102 i‡(
ªsu…
 =
OK_RC
)

103 
	`Âuts
(
msg
, 
°dout
);

105 
	`¥ötf
(
SC_STATUS_FAILED
);

108 
§v
 = 
	`rc_c⁄f_§v
(
rh
, "authserver");

109 
i
=0; i<
§v
->
max
 ; i++)

111 
ªsu…
 = 
	`rc_check
(
rh
, 
§v
->
«me
[
i
], srv->
£¸ë
[i], srv->
p‹t
[i], 
msg
);

112 
	`Âuts
(
msg
, 
°dout
);

115 
§v
 = 
	`rc_c⁄f_§v
(
rh
, "acctserver");

116 
i
=0; i<
§v
->
max
 ; i++)

118 
ªsu…
 = 
	`rc_check
(
rh
, 
§v
->
«me
[
i
], srv->
£¸ë
[i], srv->
p‹t
[i], 
msg
);

119 
	`Âuts
(
msg
, 
°dout
);

124 
	}
}

	@radius/src/avpair.c

17 
	~<r_c⁄fig.h
>

18 
	~<ö˛udes.h
>

19 
	~<‰ìødius-˛õ¡.h
>

32 
VALUE_PAIR
 *
	$rc_av∑ú_add
 (c⁄° 
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 **
li°
, 
©åid
, *
pvÆ
, 
Àn
, 
víd‹≥c
)

34 
VALUE_PAIR
 *
vp
;

36 
vp
 = 
	`rc_av∑ú_√w
 (
rh
, 
©åid
, 
pvÆ
, 
Àn
, 
víd‹≥c
);

38 i‡(
vp
 !
NULL
)

40 
	`rc_av∑ú_ö£π
 (
li°
, 
NULL
, 
vp
);

43  
vp
;

45 
	}
}

57 
	$rc_av∑ú_assign
 (
VALUE_PAIR
 *
vp
, *
pvÆ
, 
Àn
)

59 i‡(!
vp
)

62 
vp
->
ty≥
)

64 
PW_TYPE_STRING
:

65 i‡(
Àn
 == -1)

66 
Àn
 = (
uöt32_t
)
	`°æí
((*)
pvÆ
);

67 i‡(
Àn
 > 
AUTH_STRING_LEN
) {

68 
	`rc_log
(
LOG_ERR
, "rc_avpair_assign: badáttributeÜength");

71 
	`mem˝y
(
vp
->
°rvÆue
, (*)
pvÆ
, 
Àn
);

72 
vp
->
°rvÆue
[
Àn
] = '\0';

73 
vp
->
lvÆue
 = 
Àn
;

76 
PW_TYPE_DATE
:

77 
PW_TYPE_INTEGER
:

78 
PW_TYPE_IPADDR
:

79 
vp
->
lvÆue
 = * (
uöt32_t
 *Ë
pvÆ
;

83 
	`rc_log
(
LOG_ERR
, "rc_av∑ú_assign: unknow¿©åibuã %d", 
vp
->
ty≥
);

87 
	}
}

98 
VALUE_PAIR
 *
	$rc_av∑ú_√w
 (c⁄° 
rc_h™dÀ
 *
rh
, 
©åid
, *
pvÆ
, 
Àn
, 
víd‹≥c
)

100 
VALUE_PAIR
 *
vp
 = 
NULL
;

101 
DICT_ATTR
 *
pda
;

103 
©åid
 =áârid | (
víd‹≥c
 << 16);

104 i‡((
pda
 = 
	`rc_di˘_gë©å
 (
rh
, 
©åid
)Ë=
NULL
)

106 
	`rc_log
(
LOG_ERR
,"rc_av∑ú_√w: unknow¿©åibuã %d", 
©åid
);

107  
NULL
;

109 i‡(
víd‹≥c
 !0 && 
	`rc_di˘_gëvíd
(
rh
, víd‹≥cË=
NULL
)

111 
	`rc_log
(
LOG_ERR
,"rc_av∑ú_√w: unknow¿Víd‹-Id %d", 
víd‹≥c
);

112  
NULL
;

114 i‡((
vp
 = 
	`mÆloc
 ( (
VALUE_PAIR
))Ë!
NULL
)

116 
	`°∫˝y
 (
vp
->
«me
, 
pda
->name,  (vp->name));

117 
vp
->
©åibuã
 = 
©åid
;

118 
vp
->
√xt
 = 
NULL
;

119 
vp
->
ty≥
 = 
pda
->type;

120 i‡(
	`rc_av∑ú_assign
 (
vp
, 
pvÆ
, 
Àn
) == 0)

123 
vp
->
©åibuã
) {

124 
PW_DIGEST_REALM
:

125 
PW_DIGEST_NONCE
:

126 
PW_DIGEST_METHOD
:

127 
PW_DIGEST_URI
:

128 
PW_DIGEST_QOP
:

129 
PW_DIGEST_ALGORITHM
:

130 
PW_DIGEST_BODY_DIGEST
:

131 
PW_DIGEST_CNONCE
:

132 
PW_DIGEST_NONCE_COUNT
:

133 
PW_DIGEST_USER_NAME
:

135 i‡(
vp
->
lvÆue
 > 
AUTH_STRING_LEN
 - 2)

136 
vp
->
lvÆue
 = 
AUTH_STRING_LEN
 - 2;

137 
	`memmove
(&
vp
->
°rvÆue
[2], &vp->°rvÆue[0], vp->
lvÆue
);

138 
vp
->
°rvÆue
[0] = vp->
©åibuã
 - 
PW_DIGEST_REALM
 + 1;

139 
vp
->
lvÆue
 += 2;

140 
vp
->
°rvÆue
[1] = vp->
lvÆue
;

141 
vp
->
°rvÆue
[vp->
lvÆue
] = '\0';

142 
vp
->
©åibuã
 = 
PW_DIGEST_ATTRIBUTES
;

146  
vp
;

148 
	`‰ì
 (
vp
);

149 
vp
 = 
NULL
;

153 
	`rc_log
(
LOG_CRIT
,"rc_avpair_new: out of memory");

156  
vp
;

157 
	}
}

169 
VALUE_PAIR
 *

170 
	$rc_av∑ú_gí
(c⁄° 
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 *
∑ú
, *
±r
,

171 
Àngth
, 
víd‹≥c
)

173 
©åibuã
, 
©åÀn
, 
x_Àn
;

174 *
x_±r
;

175 
uöt32_t
 
lvÆue
;

176 
DICT_ATTR
 *
©å
;

177 
VALUE_PAIR
 *
Ωaú
;

178 
buf„r
[(
AUTH_STRING_LEN
 * 2) + 1];

180 
hex
[3];

182 i‡(
Àngth
 < 2) {

183 
	`rc_log
(
LOG_ERR
, "rc_avpair_gen:Ñeceivedáttribute with "

185 
shôh≠≥ns
;

187 
©åÀn
 = 
±r
[1];

188 i‡(
Àngth
 < 
©åÀn
 ||áttrlen < 2) {

189 
	`rc_log
(
LOG_ERR
, "rc_avpair_gen:Ñeceivedáttribute with "

191 
shôh≠≥ns
;

195 i‡(
Àngth
 !
©åÀn
) {

196 
∑ú
 = 
	`rc_av∑ú_gí
(
rh
,Öaú, 
±r
 + 
©åÀn
, 
Àngth
 -áttrlen,

197 
víd‹≥c
);

198 i‡(
∑ú
 =
NULL
)

199  
NULL
;

203 
©åibuã
 = 
±r
[0] | (
víd‹≥c
 << 16);

204 
±r
 += 2;

205 
©åÀn
 -= 2;

208 i‡(
©åibuã
 =
PW_VENDOR_SPECIFIC
) {

209 i‡(
©åÀn
 < 4) {

210 
	`rc_log
(
LOG_ERR
, "rc_avpair_gen:Ñeceived VSA "

212 
shôh≠≥ns
;

214 
	`mem˝y
(&
lvÆue
, 
±r
, 4);

215 
víd‹≥c
 = 
	`¡ohl
(
lvÆue
);

216 i‡(
	`rc_di˘_gëvíd
(
rh
, 
víd‹≥c
Ë=
NULL
) {

218 
	`rc_log
(
LOG_WARNING
, "rc_avpair_gen:Ñeceived VSA "

219 "©åibuã wôh unknow¿Víd‹-Id %d", 
víd‹≥c
);

220  
∑ú
;

223  
	`rc_av∑ú_gí
(
rh
, 
∑ú
, 
±r
 + 4, 
©åÀn
 - 4,

224 
víd‹≥c
);

228 
©å
 = 
	`rc_di˘_gë©å
(
rh
, 
©åibuã
);

229 i‡(
©å
 =
NULL
) {

230 
buf„r
[0] = '\0';

231 
x_±r
 = 
±r
;

232 
x_Àn
 = 
©åÀn
; x_À¿> 0; x_Àn--, 
x_±r
++) {

233 
	`•rötf
(
hex
, "%2.2X", 
x_±r
[0]);

234 
	`°rˇt
(
buf„r
, 
hex
);

236 i‡(
víd‹≥c
 == 0) {

237 
	`rc_log
(
LOG_WARNING
, "rc_avpair_gen:Ñeceived "

239 
©åibuã
, 
©åÀn
 + 2, 
buf„r
);

241 
	`rc_log
(
LOG_WARNING
, "rc_avpair_gen:Ñeceived "

243 "Àngth %d: 0x%s", 
©åibuã
 & 0xffff,

244 
	`VENDOR
(
©åibuã
), 
©åÀn
 + 2, 
buf„r
);

246 
shôh≠≥ns
;

249 
Ωaú
 = 
	`mÆloc
((*rpair));

250 i‡(
Ωaú
 =
NULL
) {

251 
	`rc_log
(
LOG_CRIT
, "rc_avpair_gen: out of memory");

252 
shôh≠≥ns
;

254 
	`mem£t
(
Ωaú
, '\0', (*rpair));

257 
Ωaú
->
√xt
 = 
∑ú
;

258 
∑ú
 = 
Ωaú
;

259 
	`°r˝y
(
∑ú
->
«me
, 
©å
->name);

260 
∑ú
->
©åibuã
 = 
©å
->
vÆue
;

261 
∑ú
->
ty≥
 = 
©å
->type;

263 
©å
->
ty≥
) {

264 
PW_TYPE_STRING
:

265 
	`mem˝y
(
∑ú
->
°rvÆue
, (*)
±r
, (
size_t
)
©åÀn
);

266 
∑ú
->
°rvÆue
[
©åÀn
] = '\0';

267 
∑ú
->
lvÆue
 = 
©åÀn
;

270 
PW_TYPE_INTEGER
:

271 i‡(
©åÀn
 != 4) {

272 
	`rc_log
(
LOG_ERR
, "rc_avpair_gen:Ñeceived INT "

274 
shôh≠≥ns
;

276 
PW_TYPE_IPADDR
:

277 i‡(
©åÀn
 != 4) {

278 
	`rc_log
(
LOG_ERR
, "rc_avpair_gen:Ñeceived IPADDR"

280 
shôh≠≥ns
;

282 
	`mem˝y
((*)&
lvÆue
, (*)
±r
, 4);

283 
∑ú
->
lvÆue
 = 
	`¡ohl
(lvalue);

287 
	`rc_log
(
LOG_WARNING
, "rc_avpair_gen: %s has unknownÅype",

288 
©å
->
«me
);

289 
shôh≠≥ns
;

291  
∑ú
;

293 
shôh≠≥ns
:

294 
∑ú
 !
NULL
) {

295 
Ωaú
 = 
∑ú
->
√xt
;

296 
	`‰ì
(
∑ú
);

297 
∑ú
 = 
Ωaú
;

299  
NULL
;

300 
	}
}

312 
VALUE_PAIR
 *
	$rc_av∑ú_gë
 (
VALUE_PAIR
 *
vp
, 
©åid
, 
víd‹≥c
)

314 ; 
vp
 !
NULL
 && !(
	`ATTRID
(vp->
©åibuã
Ë=ATTRID(
©åid
) &&

315 
	`VENDOR
(
vp
->
©åibuã
Ë=
víd‹≥c
); v∞vp->
√xt
)

319  
vp
;

320 
	}
}

332 
	$rc_av∑ú_ö£π
 (
VALUE_PAIR
 **
a
, VALUE_PAIR *
p
, VALUE_PAIR *
b
)

334 
VALUE_PAIR
 *
this_node
 = 
NULL
;

335 
VALUE_PAIR
 *
vp
;

337 i‡(
b
->
√xt
 !
NULL
)

339 
	`rc_log
(
LOG_CRIT
, "rc_av∑ú_ö£π: vÆuê∑ú (0x%pË√xà±r. (0x%pËnŸ NULL", 
b
, b->
√xt
);

340 
	`ab‹t
 ();

343 i‡(*
a
 =
NULL
)

345 *
a
 = 
b
;

349 
vp
 = *
a
;

351 i‡–
p
 =
NULL
)

353 
vp
 !
NULL
)

355 
this_node
 = 
vp
;

356 
vp
 = vp->
√xt
;

361 
this_node
 = *
a
;

362 
this_node
 !
NULL
)

364 i‡(
this_node
 =
p
)

368 
this_node
 =Åhis_node->
√xt
;

372 
b
->
√xt
 = 
this_node
->next;

373 
this_node
->
√xt
 = 
b
;

376 
	}
}

385 
	$rc_av∑ú_‰ì
 (
VALUE_PAIR
 *
∑ú
)

387 
VALUE_PAIR
 *
√xt
;

389 
∑ú
 !
NULL
)

391 
√xt
 = 
∑ú
->next;

392 
	`‰ì
 (
∑ú
);

393 
∑ú
 = 
√xt
;

395 
	}
}

408 
	$rc_fõld˝y
(*
°rög
, **
u±r
, c⁄° *
°›©
, 
size_t
 
Àn
)

410 *
±r
, *
e°rög
;

412 
±r
 = *
u±r
;

413 
e°rög
 = 
°rög
 + 
Àn
 - 1;

414 i‡(*
±r
 == '"')

416 
±r
++;

417 *
±r
 != '"' && *ptr != '\0' && *ptr != '\n')

419 i‡(
°rög
 < 
e°rög
)

420 *
°rög
++ = *
±r
;

421 
±r
++;

423 i‡(*
±r
 == '"')

425 
±r
++;

427 *
°rög
 = '\0';

428 *
u±r
 = 
±r
;

432 *
±r
 !'\0' && 
	`°rchr
(
°›©
, *±rË=
NULL
)

434 i‡(
°rög
 < 
e°rög
)

435 *
°rög
++ = *
±r
;

436 
±r
++;

438 *
°rög
 = '\0';

439 *
u±r
 = 
±r
;

441 
	}
}

454 
	#PARSE_MODE_NAME
 0

	)

455 
	#PARSE_MODE_EQUAL
 1

	)

456 
	#PARSE_MODE_VALUE
 2

	)

457 
	#PARSE_MODE_INVALID
 3

	)

459 
	$rc_av∑ú_∑r£
 (c⁄° 
rc_h™dÀ
 *
rh
, *
buf„r
, 
VALUE_PAIR
 **
fú°_∑ú
)

461 
mode
;

462 
©å°r
[
AUTH_ID_LEN
];

463 
vÆ°r
[
AUTH_STRING_LEN
 + 1];

464 
DICT_ATTR
 *
©å
 = 
NULL
;

465 
DICT_VALUE
 *
dvÆ
;

466 
VALUE_PAIR
 *
∑ú
;

467 
VALUE_PAIR
 *
lök
;

468 
tm
 *tm;

469 
time_t
 
timevÆ
;

471 
mode
 = 
PARSE_MODE_NAME
;

472 *
buf„r
 != '\n' && *buffer != '\0')

474 i‡(*
buf„r
 == ' ' || *buffer == '\t')

476 
buf„r
++;

480 
mode
)

482 
PARSE_MODE_NAME
:

483 
	`rc_fõld˝y
 (
©å°r
, &
buf„r
, " \t\n=,", (attrstr));

484 i‡((
©å
 =

485 
	`rc_di˘_föd©å
 (
rh
, 
©å°r
)Ë=
NULL
)

487 
	`rc_log
(
LOG_ERR
, "rc_avpair_parse: unknownáttribute");

488 i‡(*
fú°_∑ú
) {

489 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

490 *
fú°_∑ú
 = 
NULL
;

494 
mode
 = 
PARSE_MODE_EQUAL
;

497 
PARSE_MODE_EQUAL
:

498 i‡(*
buf„r
 == '=')

500 
mode
 = 
PARSE_MODE_VALUE
;

501 
buf„r
++;

505 
	`rc_log
(
LOG_ERR
, "rc_avpair_parse: missing or misplacedÉqual sign");

506 i‡(*
fú°_∑ú
) {

507 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

508 *
fú°_∑ú
 = 
NULL
;

514 
PARSE_MODE_VALUE
:

515 
	`rc_fõld˝y
 (
vÆ°r
, &
buf„r
, " \t\n,", (valstr));

517 i‡((
∑ú
 = 
	`mÆloc
 ( (
VALUE_PAIR
))Ë=
NULL
)

519 
	`rc_log
(
LOG_CRIT
, "rc_avpair_parse: out of memory");

520 i‡(*
fú°_∑ú
) {

521 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

522 *
fú°_∑ú
 = 
NULL
;

526 
	`°r˝y
 (
∑ú
->
«me
, 
©å
->name);

527 
∑ú
->
©åibuã
 = 
©å
->
vÆue
;

528 
∑ú
->
ty≥
 = 
©å
->type;

530 
∑ú
->
ty≥
)

533 
PW_TYPE_STRING
:

534 
	`°r˝y
 (
∑ú
->
°rvÆue
, 
vÆ°r
);

535 
∑ú
->
lvÆue
 = (
uöt32_t
)
	`°æí
(
vÆ°r
);

538 
PW_TYPE_INTEGER
:

539 i‡(
	`isdigô
 (*
vÆ°r
))

541 
∑ú
->
lvÆue
 = 
	`©oi
 (
vÆ°r
);

545 i‡((
dvÆ
 = 
	`rc_di˘_födvÆ
 (
rh
, 
vÆ°r
))

546 =
NULL
)

548 
	`rc_log
(
LOG_ERR
, "rc_av∑ú_∑r£: unknow¿©åibuã vÆue: %s", 
vÆ°r
);

549 i‡(*
fú°_∑ú
) {

550 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

551 *
fú°_∑ú
 = 
NULL
;

553 
	`‰ì
 (
∑ú
);

558 
∑ú
->
lvÆue
 = 
dvÆ
->
vÆue
;

563 
PW_TYPE_IPADDR
:

564 
∑ú
->
lvÆue
 = 
	`rc_gë_ùaddr
(
vÆ°r
);

567 
PW_TYPE_DATE
:

568 
timevÆ
 = 
	`time
 (0);

569 
tm
 = 
	`loˇ…ime
 (&
timevÆ
);

570 
tm
->
tm_hour
 = 0;

571 
tm
->
tm_mö
 = 0;

572 
tm
->
tm_£c
 = 0;

573 
	`rc_°r2tm
 (
vÆ°r
, 
tm
);

574 #ifde‡
TIMELOCAL


575 
∑ú
->
lvÆue
 = (
uöt32_t
Ë
	`timñoˇl
 (
tm
);

577 
∑ú
->
lvÆue
 = (
uöt32_t
Ë
	`mktime
 (
tm
);

582 
	`rc_log
(
LOG_ERR
, "rc_av∑ú_∑r£: unknow¿©åibuãÅy≥ %d", 
∑ú
->
ty≥
);

583 i‡(*
fú°_∑ú
) {

584 
	`rc_av∑ú_‰ì
(*
fú°_∑ú
);

585 *
fú°_∑ú
 = 
NULL
;

587 
	`‰ì
 (
∑ú
);

592 
∑ú
->
©åibuã
) {

593 
PW_DIGEST_REALM
:

594 
PW_DIGEST_NONCE
:

595 
PW_DIGEST_METHOD
:

596 
PW_DIGEST_URI
:

597 
PW_DIGEST_QOP
:

598 
PW_DIGEST_ALGORITHM
:

599 
PW_DIGEST_BODY_DIGEST
:

600 
PW_DIGEST_CNONCE
:

601 
PW_DIGEST_NONCE_COUNT
:

602 
PW_DIGEST_USER_NAME
:

604 i‡(
∑ú
->
lvÆue
 > 
AUTH_STRING_LEN
 - 2)

605 
∑ú
->
lvÆue
 = 
AUTH_STRING_LEN
 - 2;

606 
	`memmove
(&
∑ú
->
°rvÆue
[2], &∑ú->°rvÆue[0],Öaú->
lvÆue
);

607 
∑ú
->
°rvÆue
[0] =Öaú->
©åibuã
 - 
PW_DIGEST_REALM
 + 1;

608 
∑ú
->
lvÆue
 += 2;

609 
∑ú
->
°rvÆue
[1] =Öaú->
lvÆue
;

610 
∑ú
->
°rvÆue
[∑ú->
lvÆue
] = '\0';

611 
∑ú
->
©åibuã
 = 
PW_DIGEST_ATTRIBUTES
;

614 
∑ú
->
√xt
 = 
NULL
;

616 i‡(*
fú°_∑ú
 =
NULL
)

618 *
fú°_∑ú
 = 
∑ú
;

622 
lök
 = *
fú°_∑ú
;

623 
lök
->
√xt
 !
NULL
)

625 
lök
 =Üök->
√xt
;

627 
lök
->
√xt
 = 
∑ú
;

630 
mode
 = 
PARSE_MODE_NAME
;

634 
mode
 = 
PARSE_MODE_NAME
;

639 
	}
}

650 
	$rc_av∑ú_to°r
 (c⁄° 
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 *
∑ú
, *
«me
, 
 
, *
vÆue
, 
lv
)

652 
DICT_VALUE
 *
dvÆ
;

653 
buf„r
[32];

654 
ö_addr
 
öad
;

655 *
±r
;

657 *
«me
 = *
vÆue
 = '\0';

659 i‡(!
∑ú
 ||Öaú->
«me
[0] == '\0') {

660 
	`rc_log
(
LOG_ERR
, "rc_avpair_tostr:Öair is NULL orÉmpty");

664 
	`°∫˝y
(
«me
, 
∑ú
->«me, (
size_t
Ë
 
);

666 
∑ú
->
ty≥
)

668 
PW_TYPE_STRING
:

669 
lv
--;

670 
±r
 = (*Ë
∑ú
->
°rvÆue
;

671 i‡(
∑ú
->
©åibuã
 =
PW_DIGEST_ATTRIBUTES
) {

672 
∑ú
->
°rvÆue
[*(
±r
 + 1)] = '\0';

673 
±r
 += 2;

675 *
±r
 != '\0')

677 i‡(!(
	`i•röt
 (*
±r
)))

679 
	`•rötf
 (
buf„r
, "\\%03o", *
±r
);

680 
	`°∫ˇt
(
vÆue
, 
buf„r
, (
size_t
Ë
lv
);

681 
lv
 -= 4;

682 i‡(
lv
 < 0) ;

686 
	`°∫ˇt
(
vÆue
, (*)
±r
, 1);

687 
lv
--;

688 i‡(
lv
 < 0) ;

690 
±r
++;

694 
PW_TYPE_INTEGER
:

695 
dvÆ
 = 
	`rc_di˘_gëvÆ
 (
rh
, 
∑ú
->
lvÆue
,Öaú->
«me
);

696 i‡(
dvÆ
 !
NULL
)

698 
	`°∫˝y
(
vÆue
, 
dvÆ
->
«me
, (
size_t
Ë
lv
-1);

702 
	`•rötf
 (
buf„r
, "%ld", ()
∑ú
->
lvÆue
);

703 
	`°∫˝y
(
vÆue
, 
buf„r
, (
size_t
Ë
lv
);

707 
PW_TYPE_IPADDR
:

708 
öad
.
s_addr
 = 
	`ht⁄l
(
∑ú
->
lvÆue
);

709 
	`°∫˝y
 (
vÆue
, 
	`öë_¡ﬂ
 (
öad
), (
size_t
Ë
lv
-1);

712 
PW_TYPE_DATE
:

713 
	`°r·ime
 (
buf„r
,  (buffer), "%m/%d/%y %H:%M:%S",

714 
	`gmtime
 ((
time_t
 *Ë& 
∑ú
->
lvÆue
));

715 
	`°∫˝y
(
vÆue
, 
buf„r
, 
lv
-1);

719 
	`rc_log
(
LOG_ERR
, "rc_av∑ú_to°r: unknow¿©åibuãÅy≥ %d", 
∑ú
->
ty≥
);

725 
	}
}

737 
	$rc_av∑ú_log
(
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 *
∑ú
)

739 
size_t
 
Àn
, 
∆í
;

740 
VALUE_PAIR
 *
vp
;

741 
«me
[33], 
vÆue
[256];

742 *
˝
;

744 
Àn
 = 0;

745 
vp
 = 
∑ú
; v∞!
NULL
; v∞vp->
√xt
) {

746 i‡(
	`rc_av∑ú_to°r
(
rh
, 
vp
, 
«me
, “ame), 
vÆue
,

747 (
vÆue
)) == -1)

748  
NULL
;

749 
∆í
 = 
Àn
 + 32 + 3 + 
	`°æí
(
vÆue
) + 2 + 2;

750 
˝
 = 
	`ªÆloc
(
rh
->
µbuf
, 
∆í
);

751 i‡(
˝
 =
NULL
) {

752 
	`rc_log
(
LOG_ERR
, "rc_avpair_log: can'tállocate memory");

753  
NULL
;

755 
	`•rötf
(
˝
 + 
Àn
, "%-32†'%s'\n", 
«me
, 
vÆue
);

756 
rh
->
µbuf
 = 
˝
;

757 
Àn
 = 
∆í
 - 1;

759  (
Àn
 > 0Ë? 
rh
->
µbuf
 : 
NULL
;

760 
	}
}

770 
VALUE_PAIR
 *
	$rc_av∑ú_ªadö
(c⁄° 
rc_h™dÀ
 *
rh
, 
FILE
 *
öput
)

772 
VALUE_PAIR
 *
vp
 = 
NULL
;

773 
buf„r
[1024], *
q
;

775 
	`fgës
(
buf„r
, (buf„r), 
öput
Ë!
NULL
)

777 
q
 = 
buf„r
;

779 *
q
 && 
	`is•a˚
(*q)) q++;

781 i‡((*
q
 == '\n') || (*q == '#') || (*q == '\0'))

784 i‡(
	`rc_av∑ú_∑r£
(
rh
, 
q
, &
vp
) < 0) {

785 
	`rc_log
(
LOG_ERR
, "rc_av∑ú_ªadö: mÆf‹medáâribuã: %s", 
buf„r
);

786 
	`rc_av∑ú_‰ì
(
vp
);

787  
NULL
;

791  
vp
;

792 
	}
}

	@radius/src/buildreq.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

16 
rc_gë_£qnbr
(
rc_h™dÀ
 *);

26 
	$rc_buûdªq
(
rc_h™dÀ
 *
rh
, 
SEND_DATA
 *
d©a
, 
code
, *
£rvî
, 
p‹t
,

27 *
£¸ë
, 
timeout
, 
ªåõs
)

29 
d©a
->
£rvî
 = server;

30 
d©a
->
£¸ë
 = secret;

31 
d©a
->
svc_p‹t
 = 
p‹t
;

32 
d©a
->
£q_nbr
 = 
	`rc_gë_£qnbr
(
rh
);

33 
d©a
->
timeout
 =Åimeout;

34 
d©a
->
ªåõs
 =Ñetries;

35 
d©a
->
code
 = code;

36 
	}
}

45 
	$rc_guess_£qnbr
()

47 
	`§™dom
(()(
	`time
(
NULL
)+
	`gëpid
()));

48  ()(
	`øndom
(Ë& 
UCHAR_MAX
);

49 
	}
}

58 
	$rc_gë_£qnbr
(
rc_h™dÀ
 *
rh
)

60 
FILE
 *
sf
;

61 
åõs
 = 1;

62 
£q_nbr
;

63 *
£qfûe
 = 
	`rc_c⁄f_°r
(
rh
, "seqfile");

65 i‡((
sf
 = 
	`f›í
(
£qfûe
, "a+")Ë=
NULL
)

67 
	`rc_log
(
LOG_ERR
,"rc_gë_£qnbr: couldn'à›í sequí˚ fûê%s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

69  
	`rc_guess_£qnbr
();

72 
	`do_lock_ex˛usive
(
sf
)!= 0)

74 i‡(
î∫o
 !
EWOULDBLOCK
) {

75 
	`rc_log
(
LOG_ERR
, "rc_gë_£qnbr: flock faûuª: %s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

76 
	`f˛o£
(
sf
);

77  
	`rc_guess_£qnbr
();

79 
åõs
++;

80 i‡(
åõs
 <= 10)

81 
	`rc_mdñay
(500);

86 i‡(
åõs
 > 10) {

87 
	`rc_log
(
LOG_ERR
,"rc_gë_£qnbr: couldn'àgëÜocká·î %dÅrõs: %s", 
åõs
-1, 
£qfûe
);

88 
	`f˛o£
(
sf
);

89  
	`rc_guess_£qnbr
();

92 
	`ªwöd
(
sf
);

93 i‡(
	`fsˇnf
(
sf
, "%d", &
£q_nbr
) != 1) {

94 
	`rc_log
(
LOG_ERR
,"rc_gë_£qnbr: fsˇn‡Áûuª: %s", 
£qfûe
);

95 
£q_nbr
 = 
	`rc_guess_£qnbr
();

98 
	`ªwöd
(
sf
);

99 
	`·runˇã
(
	`fûío
(
sf
),0);

100 
	`Ârötf
(
sf
,"%d\n", (
£q_nbr
+1Ë& 
UCHAR_MAX
);

102 
	`fÊush
(
sf
);

104 i‡(
	`do_u∆ock
(
sf
) != 0)

105 
	`rc_log
(
LOG_ERR
, "rc_gë_£qnbr: couldn'àªÀa£Üock o¿%s: %s", 
£qfûe
, 
	`°ªº‹
(
î∫o
));

107 
	`f˛o£
(
sf
);

109  ()
£q_nbr
;

110 
	}
}

123 
	$rc_Øa
(
rc_h™dÀ
 *
rh
, 
uöt32_t
 
˛õ¡_p‹t
, 
VALUE_PAIR
 *
£nd
, VALUE_PAIR **
ª˚ived
,

124 *
msg
, 
add_«s_p‹t
, 
ªque°_ty≥
)

126 
SEND_DATA
 
d©a
;

127 
VALUE_PAIR
 *
adt_vp
 = 
NULL
;

128 
ªsu…
;

129 
i
, 
skù_cou¡
;

130 
SERVER
 *
Øa£rvî
;

131 
timeout
 = 
	`rc_c⁄f_öt
(
rh
, "radius_timeout");

132 
ªåõs
 = 
	`rc_c⁄f_öt
(
rh
, "radius_retries");

133 
ødius_dódtime
 = 
	`rc_c⁄f_öt
(
rh
, "radius_deadtime");

134 
°¨t_time
;

135 
time_t
 
dtime
;

137 i‡(
ªque°_ty≥
 !
PW_ACCOUNTING_REQUEST
) {

138 
Øa£rvî
 = 
	`rc_c⁄f_§v
(
rh
, "authserver");

140 
Øa£rvî
 = 
	`rc_c⁄f_§v
(
rh
, "acctserver");

142 i‡(
Øa£rvî
 =
NULL
)

143  
ERROR_RC
;

145 
d©a
.
£nd_∑ús
 = 
£nd
;

146 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

148 i‡(
add_«s_p‹t
 != 0) {

152 i‡(
	`rc_av∑ú_add
(
rh
, &(
d©a
.
£nd_∑ús
), 
PW_NAS_PORT
,

153 &
˛õ¡_p‹t
, 0, 0Ë=
NULL
)

154  
ERROR_RC
;

157 i‡(
ªque°_ty≥
 =
PW_ACCOUNTING_REQUEST
) {

161 
dtime
 = 0;

162 i‡((
adt_vp
 = 
	`rc_av∑ú_add
(
rh
, &(
d©a
.
£nd_∑ús
),

163 
PW_ACCT_DELAY_TIME
, &
dtime
, 0, 0)Ë=
NULL
)

164  
ERROR_RC
;

167 
°¨t_time
 = 
	`rc_gë˘ime
();

168 
skù_cou¡
 = 0;

169 
ªsu…
 = 
ERROR_RC
;

170 
i
=0; (ò< 
Øa£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

171 ; 
i
++)

173 i‡(
Øa£rvî
->
dódtime_íds
[
i
] != -1 &&

174 
Øa£rvî
->
dódtime_íds
[
i
] > 
°¨t_time
) {

175 
skù_cou¡
++;

178 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

179 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

180 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

182 
	`rc_buûdªq
(
rh
, &
d©a
, 
ªque°_ty≥
, 
Øa£rvî
->
«me
[
i
],

183 
Øa£rvî
->
p‹t
[
i
],áØ£rvî->
£¸ë
[i], 
timeout
, 
ªåõs
);

185 i‡(
ªque°_ty≥
 =
PW_ACCOUNTING_REQUEST
) {

186 
dtime
 = 
	`rc_gë˘ime
(Ë- 
°¨t_time
;

187 
	`rc_av∑ú_assign
(
adt_vp
, &
dtime
, 0);

190 
ªsu…
 = 
	`rc_£nd_£rvî
 (
rh
, &
d©a
, 
msg
);

191 i‡(
ªsu…
 =
TIMEOUT_RC
 && 
ødius_dódtime
 > 0)

192 
Øa£rvî
->
dódtime_íds
[
i
] = 
°¨t_time
 + ()
ødius_dódtime
;

194 i‡(
ªsu…
 =
OK_RC
 ||Ñesu… =
BADRESP_RC
 || 
skù_cou¡
 == 0)

195 
exô
;

197 
ªsu…
 = 
ERROR_RC
;

198 
i
=0; (ò< 
Øa£rvî
->
max
Ë&& (
ªsu…
 !
OK_RC
Ë&& (ªsu… !
BADRESP_RC
)

199 ; 
i
++)

201 i‡(
Øa£rvî
->
dódtime_íds
[
i
] == -1 ||

202 
Øa£rvî
->
dódtime_íds
[
i
] <
°¨t_time
) {

205 i‡(
d©a
.
ª˚ive_∑ús
 !
NULL
) {

206 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

207 
d©a
.
ª˚ive_∑ús
 = 
NULL
;

209 
	`rc_buûdªq
(
rh
, &
d©a
, 
ªque°_ty≥
, 
Øa£rvî
->
«me
[
i
],

210 
Øa£rvî
->
p‹t
[
i
],áØ£rvî->
£¸ë
[i], 
timeout
, 
ªåõs
);

212 i‡(
ªque°_ty≥
 =
PW_ACCOUNTING_REQUEST
) {

213 
dtime
 = 
	`rc_gë˘ime
(Ë- 
°¨t_time
;

214 
	`rc_av∑ú_assign
(
adt_vp
, &
dtime
, 0);

217 
ªsu…
 = 
	`rc_£nd_£rvî
 (
rh
, &
d©a
, 
msg
);

218 i‡(
ªsu…
 !
TIMEOUT_RC
)

219 
Øa£rvî
->
dódtime_íds
[
i
] = -1;

222 
exô
:

223 i‡(
ªque°_ty≥
 !
PW_ACCOUNTING_REQUEST
) {

224 *
ª˚ived
 = 
d©a
.
ª˚ive_∑ús
;

226 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

229  
ªsu…
;

230 
	}
}

243 
	$rc_auth
(
rc_h™dÀ
 *
rh
, 
uöt32_t
 
˛õ¡_p‹t
, 
VALUE_PAIR
 *
£nd
, VALUE_PAIR **
ª˚ived
,

244 *
msg
)

247  
	`rc_Øa
(
rh
, 
˛õ¡_p‹t
, 
£nd
, 
ª˚ived
, 
msg
, 1, 
PW_ACCESS_REQUEST
);

248 
	}
}

263 
	$rc_auth_¥oxy
(
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 *
£nd
, VALUE_PAIR **
ª˚ived
, *
msg
)

266  
	`rc_Øa
(
rh
, 0, 
£nd
, 
ª˚ived
, 
msg
, 0, 
PW_ACCESS_REQUEST
);

267 
	}
}

280 
	$rc_ac˘
(
rc_h™dÀ
 *
rh
, 
uöt32_t
 
˛õ¡_p‹t
, 
VALUE_PAIR
 *
£nd
)

282 
msg
[4096];

284  
	`rc_Øa
(
rh
, 
˛õ¡_p‹t
, 
£nd
, 
NULL
, 
msg
, 1, 
PW_ACCOUNTING_REQUEST
);

285 
	}
}

294 
	$rc_ac˘_¥oxy
(
rc_h™dÀ
 *
rh
, 
VALUE_PAIR
 *
£nd
)

296 
msg
[4096];

298  
	`rc_Øa
(
rh
, 0, 
£nd
, 
NULL
, 
msg
, 0, 
PW_ACCOUNTING_REQUEST
);

299 
	}
}

309 
	$rc_check
(
rc_h™dÀ
 *
rh
, *
ho°
, *
£¸ë
, 
p‹t
, *
msg
)

311 
SEND_DATA
 
d©a
;

312 
ªsu…
;

313 
uöt32_t
 
£rvi˚_ty≥
;

314 
timeout
 = 
	`rc_c⁄f_öt
(
rh
, "radius_timeout");

315 
ªåõs
 = 
	`rc_c⁄f_öt
(
rh
, "radius_retries");

317 
d©a
.
£nd_∑ús
 = d©a.
ª˚ive_∑ús
 = 
NULL
;

323 
£rvi˚_ty≥
 = 
PW_ADMINISTRATIVE
;

324 
	`rc_av∑ú_add
(
rh
, &(
d©a
.
£nd_∑ús
), 
PW_SERVICE_TYPE
, &
£rvi˚_ty≥
, 0, 0);

326 
	`rc_buûdªq
(
rh
, &
d©a
, 
PW_STATUS_SERVER
, 
ho°
, 
p‹t
, 
£¸ë
, 
timeout
, 
ªåõs
);

327 
ªsu…
 = 
	`rc_£nd_£rvî
 (
rh
, &
d©a
, 
msg
);

329 
	`rc_av∑ú_‰ì
(
d©a
.
ª˚ive_∑ús
);

331  
ªsu…
;

332 
	}
}

	@radius/src/clientid.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

16 
	sm≠2id_s
 {

17 *
	m«me
;

18 
uöt32_t
 
	mid
;

20 
m≠2id_s
 *
	m√xt
;

33 
	$rc_ªad_m≠fûe
(
rc_h™dÀ
 *
rh
, *
fûíame
)

35 
buf„r
[1024];

36 
FILE
 *
m≠fd
;

37 *
c
, *
«me
, *
id
, *
q
;

38 
m≠2id_s
 *
p
;

39 
 r
 = 0;

41 i‡((
m≠fd
 = 
	`f›í
(
fûíame
,"r")Ë=
NULL
)

43 
	`rc_log
(
LOG_ERR
,"rc_ªad_m≠fûe: c™'àªad %s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

47 
	#SKIP
(
p
Ë*∞&& 
	`is•a˚
(*p)Ëp++;

	)

49 
	`fgës
(
buf„r
, (buf„r), 
m≠fd
Ë!
NULL
)

51 
 r
++;

53 
q
 = 
buf„r
;

55 
	`SKIP
(
q
);

57 i‡((*
q
 == '\n') || (*q == '#') || (*q == '\0'))

60 i‡(–
c
 = 
	`°rchr
(
q
, ' ')) || (c = strchr(q,'\t'))) {

62 *
c
 = '\0'; c++;

63 
	`SKIP
(
c
);

65 
«me
 = 
q
;

66 
id
 = 
c
;

68 i‡((
p
 = (
m≠2id_s
 *)
	`mÆloc
((*p))Ë=
NULL
) {

69 
	`rc_log
(
LOG_CRIT
,"rc_read_mapfile: out of memory");

70 
	`f˛o£
(
m≠fd
);

74 
p
->
«me
 = 
	`°rdup
(name);

75 
p
->
id
 = 
	`©oi
(id);

76 
p
->
√xt
 = 
rh
->
m≠2id_li°
;

77 
rh
->
m≠2id_li°
 = 
p
;

81 
	`rc_log
(
LOG_ERR
, "rc_ªad_m≠fûe: mÆf‹medÜöêö %s,Üöê%d", 
fûíame
, 
 r
);

82 
	`f˛o£
(
m≠fd
);

88 #unde‡
SKIP


90 
	`f˛o£
(
m≠fd
);

93 
	}
}

105 
uöt32_t
 
	$rc_m≠2id
(
rc_h™dÀ
 *
rh
, *
«me
)

107 
m≠2id_s
 *
p
;

108 
ây«me
[
PATH_MAX
];

110 *
ây«me
 = '\0';

111 i‡(*
«me
 != '/')

112 
	`°r˝y
(
ây«me
, "/dev/");

114 
	`°∫ˇt
(
ây«me
, 
«me
, —ty«me)-
	`°æí
(ttyname)-1);

116 
p
 = 
rh
->
m≠2id_li°
;Ö;Ö =Ö->
√xt
)

117 i‡(!
	`°rcmp
(
ây«me
, 
p
->
«me
)ËÖ->
id
;

119 
	`rc_log
(
LOG_WARNING
,"rc_m≠2id: c™'àfödÅty %†ö m≠ d©aba£", 
ây«me
);

122 
	}
}

133 
	$rc_m≠2id_‰ì
(
rc_h™dÀ
 *
rh
)

135 
m≠2id_s
 *
p
, *
≈
;

137 i‡(
rh
->
m≠2id_li°
 =
NULL
)

140 
p
 = 
rh
->
m≠2id_li°
;Ö !
NULL
;Ö = 
≈
) {

141 
≈
 = 
p
->
√xt
;

142 
	`‰ì
(
p
->
«me
);

143 
	`‰ì
(
p
);

145 
rh
->
m≠2id_li°
 = 
NULL
;

146 
	}
}

	@radius/src/config.c

17 
	~<r_c⁄fig.h
>

18 
	~<ö˛udes.h
>

19 
	~<‰ìødius-˛õ¡.h
>

20 
	~<›ti⁄s.h
>

30 
OPTION
 *
	$föd_›ti⁄
(
rc_h™dÀ
 *
rh
, c⁄° *
›äame
, 
ty≥
)

32 
i
;

35 
i
 = 0; i < 
NUM_OPTIONS
; i++) {

36 i‡(!
	`°rcmp
(
rh
->
c⁄fig_›ti⁄s
[
i
].
«me
, 
›äame
) &&

37 (
rh
->
c⁄fig_›ti⁄s
[
i
].
ty≥
 &Åype))

39  &
rh
->
c⁄fig_›ti⁄s
[
i
];

43  
NULL
;

44 
	}
}

54 
	$£t_›ti⁄_°r
(c⁄° *
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, c⁄° *
p
)

56 i‡(
p
) {

57 
›ti⁄
->
vÆ
 = (*Ë
	`°rdup
(
p
);

58 i‡(
›ti⁄
->
vÆ
 =
NULL
) {

59 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

63 
›ti⁄
->
vÆ
 = 
NULL
;

67 
	}
}

69 
	$£t_›ti⁄_öt
(c⁄° *
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, c⁄° *
p
)

71 *
ùå
;

73 i‡(
p
 =
NULL
) {

74 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d: bogu†›ti⁄ vÆue", 
fûíame
, 
löe
);

78 i‡((
ùå
 = 
	`mÆloc
((*ùå))Ë=
NULL
) {

79 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

83 *
ùå
 = 
	`©oi
(
p
);

84 
›ti⁄
->
vÆ
 = (*Ë
ùå
;

87 
	}
}

89 
	$£t_›ti⁄_§v
(c⁄° *
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, c⁄° *
p
)

91 
SERVER
 *
£rv
;

92 *
p_poöãr
;

93 *
p_du≥
;

94 *
p_ßve
;

95 *
q
;

96 *
s
;

97 
£rvít
 *
svp
;

99 
p_du≥
 = 
	`°rdup
(
p
);

101 i‡(
p_du≥
 =
NULL
) {

102 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d: InvÆid o±i⁄ o∏mem‹y faûuª", 
fûíame
, 
löe
);

106 
£rv
 = (
SERVER
 *Ë
›ti⁄
->
vÆ
;

107 i‡(
£rv
 =
NULL
) {

108 
	`rc_log
(
LOG_ERR
, "option->val / server is NULL,állocating memory");

109 
£rv
 = 
	`mÆloc
((*serv));

110 i‡(
£rv
 =
NULL
) {

111 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

112 
	`‰ì
(
p_du≥
);

115 
£rv
->
max
 = 0;

118 
p_poöãr
 = 
	`°πok_r
(
p_du≥
, ", \t", &
p_ßve
);

121 i‡((
q
 = 
	`°rchr
(
p_poöãr
,':')Ë!
NULL
) {

122 *
q
 = '\0';

123 
q
++;

126 if((
s
 = 
	`°rchr
(
q
,':')Ë!
NULL
) {

127 *
s
 = '\0';

128 
s
++;

129 
£rv
->
£¸ë
[£rv->
max
] = 
	`°rdup
(
s
);

130 i‡(
£rv
->
£¸ë
[£rv->
max
] =
NULL
) {

131 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

132 i‡(
›ti⁄
->
vÆ
 =
NULL
) {

133 
	`‰ì
(
p_du≥
);

134 
	`‰ì
(
£rv
);

140 if(
q
 && 
	`°æí
(q) > 0) {

141 
£rv
->
p‹t
[£rv->
max
] = 
	`©oi
(
q
);

143 i‡(!
	`°rcmp
(
›ti⁄
->
«me
,"authserver"))

144 i‡((
svp
 = 
	`gë£rvby«me
 ("ødius", "udp")Ë=
NULL
)

145 
£rv
->
p‹t
[£rv->
max
] = 
PW_AUTH_UDP_PORT
;

147 
£rv
->
p‹t
[£rv->
max
] = 
	`¡ohs
 ((Ë
svp
->
s_p‹t
);

148 i‡(!
	`°rcmp
(
›ti⁄
->
«me
, "acctserver"))

149 i‡((
svp
 = 
	`gë£rvby«me
 ("ødac˘", "udp")Ë=
NULL
)

150 
£rv
->
p‹t
[£rv->
max
] = 
PW_ACCT_UDP_PORT
;

152 
£rv
->
p‹t
[£rv->
max
] = 
	`¡ohs
 ((Ë
svp
->
s_p‹t
);

154 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d:ÇÿdeÁu…Ö‹àf‹ %s", 
fûíame
, 
löe
, 
›ti⁄
->
«me
);

155 i‡(
›ti⁄
->
vÆ
 =
NULL
) {

156 
	`‰ì
(
p_du≥
);

157 
	`‰ì
(
£rv
);

163 
£rv
->
«me
[£rv->
max
] = 
	`°rdup
(
p_poöãr
);

164 i‡(
£rv
->
«me
[£rv->
max
] =
NULL
) {

165 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

166 i‡(
›ti⁄
->
vÆ
 =
NULL
) {

167 
	`‰ì
(
p_du≥
);

168 
	`‰ì
(
£rv
);

172 
	`‰ì
(
p_du≥
);

174 
£rv
->
dódtime_íds
[£rv->
max
] = -1;

175 
£rv
->
max
++;

177 i‡(
›ti⁄
->
vÆ
 =
NULL
)

178 
›ti⁄
->
vÆ
 = (*)
£rv
;

181 
	}
}

183 
	$£t_›ti⁄_auo
(c⁄° *
fûíame
, 
löe
, 
OPTION
 *
›ti⁄
, c⁄° *
p
)

185 *
ùå
;

186 *
p_du≥
 = 
NULL
;

187 *
p_poöãr
 = 
NULL
;

188 *
p_ßve
 = 
NULL
;

190 
p_du≥
 = 
	`°rdup
(
p
);

192 i‡(
p_du≥
 =
NULL
) {

193 
	`rc_log
(
LOG_WARNING
, "%s:Üöê%d: bogu†›ti⁄ vÆue", 
fûíame
, 
löe
);

197 i‡((
ùå
 = 
	`mÆloc
((ùå))Ë=
NULL
) {

198 
	`rc_log
(
LOG_CRIT
, "read_config: out of memory");

202 *
ùå
 = 0;

204 
p_poöãr
 = 
	`°πok_r
(
p_du≥
, ", \t", &
p_ßve
);

207 i‡(!
	`°∫cmp
(
p_poöãr
, "local", 5))

208 *
ùå
 = 
AUTH_LOCAL_FST
;

209 i‡(!
	`°∫cmp
(
p_poöãr
, "radius", 6))

210 *
ùå
 = 
AUTH_RADIUS_FST
;

212 
	`rc_log
(
LOG_ERR
,"%s:áuth_‹dî: unknow¿keyw‹d: %s", 
fûíame
, 
p
);

213 
	`‰ì
(
p_du≥
);

217 
p_poöãr
 = 
	`°πok_r
(
NULL
, ", \t", &
p_ßve
);

219 i‡(
p_poöãr
 && (*p_pointer != '\0')) {

220 i‡((*
ùå
 & 
AUTH_RADIUS_FST
Ë&& !
	`°rcmp
(
p_poöãr
, "local"))

221 *
ùå
 = (*ùåË| 
AUTH_LOCAL_SND
;

222 i‡((*
ùå
 & 
AUTH_LOCAL_FST
Ë&& !
	`°rcmp
(
p_poöãr
, "radius"))

223 *
ùå
 = (*ùåË| 
AUTH_RADIUS_SND
;

225 
	`rc_log
(
LOG_ERR
,"%s:áuth_‹dî: unknow¿‹ u√x≥˘ed keyw‹d: %s", 
fûíame
, 
p
);

226 
	`‰ì
(
p_du≥
);

231 
›ti⁄
->
vÆ
 = (*Ë
ùå
;

233 
	`‰ì
(
p_du≥
);

235 
	}
}

245 
	$rc_add_c⁄fig
(
rc_h™dÀ
 *
rh
, c⁄° *
›ti⁄_«me
, c⁄° *
›ti⁄_vÆ
, c⁄° *
sour˚
, c⁄° 
löe
)

247 
OPTION
 *
›ti⁄
;

249 i‡((
›ti⁄
 = 
	`föd_›ti⁄
(
rh
, 
›ti⁄_«me
, 
OT_ANY
)Ë=
NULL
)

251 
	`rc_log
(
LOG_ERR
, "ERROR: uƒecognized o±i⁄: %s", 
›ti⁄_«me
);

255 i‡(
›ti⁄
->
°©us
 !
ST_UNDEF
)

257 
	`rc_log
(
LOG_ERR
, "ERROR: du∂iˇã o±i⁄: %s", 
›ti⁄_«me
);

261 
›ti⁄
->
ty≥
) {

262 
OT_STR
:

263 i‡(
	`£t_›ti⁄_°r
(
sour˚
, 
löe
, 
›ti⁄
, 
›ti⁄_vÆ
) < 0) {

267 
OT_INT
:

268 i‡(
	`£t_›ti⁄_öt
(
sour˚
, 
löe
, 
›ti⁄
, 
›ti⁄_vÆ
) < 0) {

272 
OT_SRV
:

273 i‡(
	`£t_›ti⁄_§v
(
sour˚
, 
löe
, 
›ti⁄
, 
›ti⁄_vÆ
) < 0) {

277 
OT_AUO
:

278 i‡(
	`£t_›ti⁄_auo
(
sour˚
, 
löe
, 
›ti⁄
, 
›ti⁄_vÆ
) < 0) {

283 
	`rc_log
(
LOG_CRIT
, "rc_read_config: impossible case branch!");

284 
	`ab‹t
();

287 
	}
}

298 
rc_h™dÀ
 *

299 
	$rc_c⁄fig_öô
(
rc_h™dÀ
 *
rh
)

302 
i
;

303 
SERVER
 *
auth£rvîs
;

304 
SERVER
 *
ac˘£rvîs
;

307 
rh
->
c⁄fig_›ti⁄s
 = 
	`mÆloc
((
c⁄fig_›ti⁄s_deÁu…
));

308 i‡(
rh
->
c⁄fig_›ti⁄s
 =
NULL
)

310 
	`rc_log
(
LOG_CRIT
, "rc_config_init: out of memory");

311 
	`rc_de°roy
(
rh
);

312  
NULL
;

314 
	`mem˝y
(
rh
->
c⁄fig_›ti⁄s
, &
c⁄fig_›ti⁄s_deÁu…
, (config_options_default));

317 
auth£rvîs
 = 
	`rc_c⁄f_§v
(
rh
, "authserver");

318 
ac˘£rvîs
 = 
	`rc_c⁄f_§v
(
rh
, "acctserver");

319 
auth£rvîs
 = 
	`mÆloc
((
SERVER
));

320 
ac˘£rvîs
 = 
	`mÆloc
((
SERVER
));

322 if(
auth£rvîs
 =
NULL
 || 
ac˘£rvîs
 == NULL)

324 
	`rc_log
(
LOG_CRIT
, "rc_config_init:Érror initializing server structs");

325 
	`rc_de°roy
(
rh
);

326  
NULL
;

330 
auth£rvîs
->
max
 = 0;

331 
ac˘£rvîs
->
max
 = 0;

333 
i
=0; i < 
SERVER_MAX
; i++)

335 
auth£rvîs
->
«me
[
i
] = 
NULL
;

336 
auth£rvîs
->
£¸ë
[
i
] = 
NULL
;

337 
ac˘£rvîs
->
«me
[
i
] = 
NULL
;

338 
ac˘£rvîs
->
£¸ë
[
i
] = 
NULL
;

341  
rh
;

342 
	}
}

353 
rc_h™dÀ
 *

354 
	$rc_ªad_c⁄fig
(*
fûíame
)

356 
FILE
 *
c⁄figfd
;

357 
buf„r
[512], *
p
;

358 
OPTION
 *
›ti⁄
;

359 
löe
;

360 
size_t
 
pos
;

361 
rc_h™dÀ
 *
rh
;

363 
rh
 = 
	`rc_√w
();

364 i‡(
rh
 =
NULL
)

365  
NULL
;

367 
rh
->
c⁄fig_›ti⁄s
 = 
	`mÆloc
((
c⁄fig_›ti⁄s_deÁu…
));

368 i‡(
rh
->
c⁄fig_›ti⁄s
 =
NULL
) {

369 
	`rc_log
(
LOG_CRIT
, "rc_read_config: out of memory");

370 
	`rc_de°roy
(
rh
);

371  
NULL
;

373 
	`mem˝y
(
rh
->
c⁄fig_›ti⁄s
, &
c⁄fig_›ti⁄s_deÁu…
, (config_options_default));

375 i‡((
c⁄figfd
 = 
	`f›í
(
fûíame
,"r")Ë=
NULL
)

377 
	`rc_log
(
LOG_ERR
,"rc_ªad_c⁄fig: c™'à›í %s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

378 
	`rc_de°roy
(
rh
);

379  
NULL
;

382 
löe
 = 0;

383 (
	`fgës
(
buf„r
, (buf„r), 
c⁄figfd
Ë!
NULL
))

385 
löe
++;

386 
p
 = 
buf„r
;

388 i‡((*
p
 == '\n') || (*p == '#') || (*p == '\0'))

391 
p
[
	`°æí
(p)-1] = '\0';

394 i‡((
pos
 = 
	`°rc•n
(
p
, "\t ")) == 0) {

395 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d: bogu†f‹m©: %s", 
fûíame
, 
löe
, 
p
);

396 
	`f˛o£
(
c⁄figfd
);

397 
	`rc_de°roy
(
rh
);

398  
NULL
;

401 
p
[
pos
] = '\0';

403 i‡((
›ti⁄
 = 
	`föd_›ti⁄
(
rh
, 
p
, 
OT_ANY
)Ë=
NULL
) {

404 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d: uƒecognized keyw‹d: %s", 
fûíame
, 
löe
, 
p
);

405 
	`f˛o£
(
c⁄figfd
);

406 
	`rc_de°roy
(
rh
);

407  
NULL
;

410 i‡(
›ti⁄
->
°©us
 !
ST_UNDEF
) {

411 
	`rc_log
(
LOG_ERR
, "%s:Üöê%d: du∂iˇã o±i⁄Üöe: %s", 
fûíame
, 
löe
, 
p
);

412 
	`f˛o£
(
c⁄figfd
);

413 
	`rc_de°roy
(
rh
);

414  
NULL
;

417 
p
 +
pos
+1;

418 
	`is•a˚
(*
p
))

419 
p
++;

420 
pos
 = 
	`°æí
(
p
) - 1;

421 
pos
 >0 && 
	`is•a˚
(
p
[pos]))

422 
pos
--;

423 
p
[
pos
 + 1] = '\0';

425 
›ti⁄
->
ty≥
) {

426 
OT_STR
:

427 i‡(
	`£t_›ti⁄_°r
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0) {

428 
	`f˛o£
(
c⁄figfd
);

429 
	`rc_de°roy
(
rh
);

430  
NULL
;

433 
OT_INT
:

434 i‡(
	`£t_›ti⁄_öt
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0) {

435 
	`f˛o£
(
c⁄figfd
);

436 
	`rc_de°roy
(
rh
);

437  
NULL
;

440 
OT_SRV
:

441 i‡(
	`£t_›ti⁄_§v
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0) {

442 
	`f˛o£
(
c⁄figfd
);

443 
	`rc_de°roy
(
rh
);

444  
NULL
;

447 
OT_AUO
:

448 i‡(
	`£t_›ti⁄_auo
(
fûíame
, 
löe
, 
›ti⁄
, 
p
) < 0) {

449 
	`f˛o£
(
c⁄figfd
);

450 
	`rc_de°roy
(
rh
);

451  
NULL
;

455 
	`rc_log
(
LOG_CRIT
, "rc_read_config: impossible case branch!");

456 
	`ab‹t
();

459 
	`f˛o£
(
c⁄figfd
);

461 i‡(
	`ã°_c⁄fig
(
rh
, 
fûíame
) == -1) {

462 
	`rc_de°roy
(
rh
);

463  
NULL
;

465  
rh
;

466 
	}
}

476 *
	$rc_c⁄f_°r
(
rc_h™dÀ
 *
rh
, *
›äame
)

478 
OPTION
 *
›ti⁄
;

480 
›ti⁄
 = 
	`föd_›ti⁄
(
rh
, 
›äame
, 
OT_STR
);

482 i‡(
›ti⁄
 !
NULL
) {

483  (*)
›ti⁄
->
vÆ
;

485 
	`rc_log
(
LOG_CRIT
, "rc_c⁄f_°r: unkow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

486 
	`ab‹t
();

487  
NULL
;

489 
	}
}

491 
	$rc_c⁄f_öt
(
rc_h™dÀ
 *
rh
, *
›äame
)

493 
OPTION
 *
›ti⁄
;

495 
›ti⁄
 = 
	`föd_›ti⁄
(
rh
, 
›äame
, 
OT_INT
|
OT_AUO
);

497 i‡(
›ti⁄
 !
NULL
) {

498  *((*)
›ti⁄
->
vÆ
);

500 
	`rc_log
(
LOG_CRIT
, "rc_c⁄f_öt: unkow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

501 
	`ab‹t
();

504 
	}
}

506 
SERVER
 *
	$rc_c⁄f_§v
(
rc_h™dÀ
 *
rh
, *
›äame
)

508 
OPTION
 *
›ti⁄
;

510 
›ti⁄
 = 
	`föd_›ti⁄
(
rh
, 
›äame
, 
OT_SRV
);

512 i‡(
›ti⁄
 !
NULL
) {

513  (
SERVER
 *)
›ti⁄
->
vÆ
;

515 
	`rc_log
(
LOG_CRIT
, "rc_c⁄f_§v: unkow¿c⁄fig o±i⁄Ñeque°ed: %s", 
›äame
);

516 
	`ab‹t
();

517  
NULL
;

519 
	}
}

529 
	$ã°_c⁄fig
(
rc_h™dÀ
 *
rh
, *
fûíame
)

532 
°©
 
°
;

533 *
fûe
;

536 i‡(!(
	`rc_c⁄f_§v
(
rh
, "auth£rvî")->
max
))

538 
	`rc_log
(
LOG_ERR
,"%s:Çÿauth£rvî s≥cifõd", 
fûíame
);

541 i‡(!(
	`rc_c⁄f_§v
(
rh
, "ac˘£rvî")->
max
))

543 
	`rc_log
(
LOG_ERR
,"%s:Çÿac˘£rvî s≥cifõd", 
fûíame
);

546 i‡(!
	`rc_c⁄f_°r
(
rh
, "servers"))

548 
	`rc_log
(
LOG_ERR
,"%s:Çÿ£rvî†fûê•ecifõd", 
fûíame
);

551 i‡(!
	`rc_c⁄f_°r
(
rh
, "dictionary"))

553 
	`rc_log
(
LOG_ERR
,"%s:Çÿdi˘i⁄¨y s≥cifõd", 
fûíame
);

557 i‡(
	`rc_c⁄f_öt
(
rh
, "radius_timeout") <= 0)

559 
	`rc_log
(
LOG_ERR
,"%s:Ñadius_timeouà<0 i†ûÀgÆ", 
fûíame
);

562 i‡(
	`rc_c⁄f_öt
(
rh
, "radius_retries") <= 0)

564 
	`rc_log
(
LOG_ERR
,"%s:Ñadius_ªåõ†<0 i†ûÀgÆ", 
fûíame
);

567 i‡(
	`rc_c⁄f_öt
(
rh
, "radius_deadtime") < 0)

569 
	`rc_log
(
LOG_ERR
,"%s:Ñadius_dódtimêi†ûÀgÆ", 
fûíame
);

573 
fûe
 = 
	`rc_c⁄f_°r
(
rh
, "login_local");

574 i‡(
	`°©
(
fûe
, &
°
) == 0)

576 i‡(!
	`S_ISREG
(
°
.
°_mode
)) {

577 
	`rc_log
(
LOG_ERR
,"%s:ÇŸáÑeguœ∏fûe: %s", 
fûíame
, 
fûe
);

581 
	`rc_log
(
LOG_ERR
,"%s: fûênŸ found: %s", 
fûíame
, 
fûe
);

584 
fûe
 = 
	`rc_c⁄f_°r
(
rh
, "login_radius");

585 i‡(
	`°©
(
fûe
, &
°
) == 0)

587 i‡(!
	`S_ISREG
(
°
.
°_mode
)) {

588 
	`rc_log
(
LOG_ERR
,"%s:ÇŸáÑeguœ∏fûe: %s", 
fûíame
, 
fûe
);

592 
	`rc_log
(
LOG_ERR
,"%s: fûênŸ found: %s", 
fûíame
, 
fûe
);

597 i‡(
	`rc_c⁄f_öt
(
rh
, "login_tries") <= 0)

599 
	`rc_log
(
LOG_ERR
,"%s:Üogö_åõ†<0 i†ûÀgÆ", 
fûíame
);

602 i‡(
	`rc_c⁄f_°r
(
rh
, "£qfûe"Ë=
NULL
)

604 
	`rc_log
(
LOG_ERR
,"%s: seqfûênŸ s≥cifõd", 
fûíame
);

607 i‡(
	`rc_c⁄f_öt
(
rh
, "login_timeout") <= 0)

609 
	`rc_log
(
LOG_ERR
,"%s:Üogö_timeouà<0 i†ûÀgÆ", 
fûíame
);

612 i‡(
	`rc_c⁄f_°r
(
rh
, "m≠fûe"Ë=
NULL
)

614 
	`rc_log
(
LOG_ERR
,"%s: m≠fûênŸ s≥cifõd", 
fûíame
);

617 i‡(
	`rc_c⁄f_°r
(
rh
, "nﬁogö"Ë=
NULL
)

619 
	`rc_log
(
LOG_ERR
,"%s:ÇﬁogöÇŸ s≥cifõd", 
fûíame
);

624 
	}
}

635 
	$föd_m©ch
 (
uöt32_t
 *
ù_addr
, *
ho°«me
)

638 
uöt32_t
 
addr
;

639 **
∑ddr
;

640 
ho°ít
 *
hp
;

642 i‡(
	`rc_good_ùaddr
 (
ho°«me
) == 0)

644 i‡(*
ù_addr
 =
	`¡ohl
(
	`öë_addr
 (
ho°«me
)))

651 i‡((
hp
 = 
	`rc_gëho°by«me
(
ho°«me
)Ë=
NULL
)

656 
∑ddr
 = 
hp
->
h_addr_li°
; *paddr;Öaddr++)

658 
addr
 = ** (
uöt32_t
 **Ë
∑ddr
;

659 i‡(
	`¡ohl
(
addr
Ë=*
ù_addr
)

665 
	}
}

677 
	$rc_ùaddr_loˇl
(
uöt32_t
 
ù_addr
)

679 
ãmp_sock
, 
ªs
, 
£ºno
;

680 
sockaddr_ö
 
sö
;

682 
ãmp_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

683 i‡(
ãmp_sock
 == -1)

685 
	`mem£t
(&
sö
, '\0', (sin));

686 
sö
.
sö_Ámûy
 = 
AF_INET
;

687 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
ù_addr
);

688 
sö
.
sö_p‹t
 = 
	`ht⁄s
(0);

689 
ªs
 = 
	`böd
(
ãmp_sock
, (
sockaddr
 *)&
sö
, (sin));

690 
£ºno
 = 
î∫o
;

691 
	`˛o£
(
ãmp_sock
);

692 i‡(
ªs
 == 0)

694 i‡(
£ºno
 =
EADDRNOTAVAIL
)

697 
	}
}

709 
	$rc_is_my«me
(*
ho°«me
)

711 
uöt32_t
 
addr
;

712 **
∑ddr
;

713 
ho°ít
 *
hp
;

714 
ªs
;

716 i‡(
	`rc_good_ùaddr
(
ho°«me
) == 0)

717  
	`rc_ùaddr_loˇl
(
	`¡ohl
(
	`öë_addr
(
ho°«me
)));

719 i‡((
hp
 = 
	`rc_gëho°by«me
(
ho°«me
)Ë=
NULL
)

721 
∑ddr
 = 
hp
->
h_addr_li°
; *paddr;Öaddr++) {

722 
addr
 = **(
uöt32_t
 **)
∑ddr
;

723 
ªs
 = 
	`rc_ùaddr_loˇl
(
	`¡ohl
(
addr
));

724 i‡(
ªs
 == 0 ||Ñes == -1)

725  
ªs
;

728 
	}
}

739 
	$rc_föd_£rvî
 (
rc_h™dÀ
 *
rh
, *
£rvî_«me
, 
uöt32_t
 *
ù_addr
, *
£¸ë
)

741 
i
;

742 
size_t
 
Àn
;

743 
ªsu…
 = 0;

744 
FILE
 *
˛õ¡fd
;

745 *
h
;

746 *
s
;

747 
buf„r
[128];

748 
ho°nm
[
AUTH_ID_LEN
 + 1];

749 *
buf„r_ßve
;

750 *
ho°nm_ßve
;

751 
SERVER
 *
auth£rvîs
;

752 
SERVER
 *
ac˘£rvîs
;

755 i‡((*
ù_addr
 = 
	`rc_gë_ùaddr
 (
£rvî_«me
)Ë=(
uöt32_t
) 0)

759 if–(
auth£rvîs
 = 
	`rc_c⁄f_§v
(
rh
, "auth£rvî")Ë!
NULL
 )

761  
i
 = 0; i < 
auth£rvîs
->
max
; i++ )

763 if–(
	`°∫cmp
(
£rvî_«me
, 
auth£rvîs
->
«me
[
i
], 
	`°æí
(server_name)) == 0) &&

764 (
auth£rvîs
->
£¸ë
[
i
] !
NULL
) )

766 
	`mem£t
 (
£¸ë
, '\0', 
MAX_SECRET_LENGTH
);

767 
Àn
 = 
	`°æí
 (
auth£rvîs
->
£¸ë
[
i
]);

768 i‡(
Àn
 > 
MAX_SECRET_LENGTH
)

770 
Àn
 = 
MAX_SECRET_LENGTH
;

772 
	`°∫˝y
 (
£¸ë
, 
auth£rvîs
->£¸ë[
i
], (
size_t
Ë
Àn
);

773 
£¸ë
[
MAX_SECRET_LENGTH
] = '\0';

779 if–(
ac˘£rvîs
 = 
	`rc_c⁄f_§v
(
rh
, "ac˘£rvî")Ë!
NULL
 )

781  
i
 = 0; i < 
ac˘£rvîs
->
max
; i++ )

783 if–(
	`°∫cmp
(
£rvî_«me
, 
ac˘£rvîs
->
«me
[
i
], 
	`°æí
(server_name)) == 0) &&

784 (
ac˘£rvîs
->
£¸ë
[
i
] !
NULL
) )

786 
	`mem£t
 (
£¸ë
, '\0', 
MAX_SECRET_LENGTH
);

787 
Àn
 = 
	`°æí
 (
ac˘£rvîs
->
£¸ë
[
i
]);

788 i‡(
Àn
 > 
MAX_SECRET_LENGTH
)

790 
Àn
 = 
MAX_SECRET_LENGTH
;

792 
	`°∫˝y
 (
£¸ë
, 
ac˘£rvîs
->£¸ë[
i
], (
size_t
Ë
Àn
);

793 
£¸ë
[
MAX_SECRET_LENGTH
] = '\0';

803 i‡((
˛õ¡fd
 = 
	`f›í
 (
	`rc_c⁄f_°r
(
rh
, "£rvîs"), "r")Ë=
NULL
)

805 
	`rc_log
(
LOG_ERR
, "rc_föd_£rvî: couldn'à›í fûe: %s: %s", 
	`°ªº‹
(
î∫o
), 
	`rc_c⁄f_°r
(
rh
, "servers"));

809 
	`fgës
 (
buf„r
,  (buf„r), 
˛õ¡fd
Ë!
NULL
)

811 i‡(*
buf„r
 == '#')

814 i‡((
h
 = 
	`°πok_r
(
buf„r
, " \t\n", &
buf„r_ßve
)Ë=
NULL
)

817 
	`mem£t
 (
ho°nm
, '\0', 
AUTH_ID_LEN
);

818 
Àn
 = 
	`°æí
 (
h
);

819 i‡(
Àn
 > 
AUTH_ID_LEN
)

821 
Àn
 = 
AUTH_ID_LEN
;

823 
	`°∫˝y
 (
ho°nm
, 
h
, (
size_t
Ë
Àn
);

824 
ho°nm
[
AUTH_ID_LEN
] = '\0';

826 i‡((
s
 = 
	`°πok_r
 (
NULL
, " \t\n", &
buf„r_ßve
)) == NULL)

829 
	`mem£t
 (
£¸ë
, '\0', 
MAX_SECRET_LENGTH
);

830 
Àn
 = 
	`°æí
 (
s
);

831 i‡(
Àn
 > 
MAX_SECRET_LENGTH
)

833 
Àn
 = 
MAX_SECRET_LENGTH
;

835 
	`°∫˝y
 (
£¸ë
, 
s
, (
size_t
Ë
Àn
);

836 
£¸ë
[
MAX_SECRET_LENGTH
] = '\0';

838 i‡(!
	`°rchr
 (
ho°nm
, '/'))

840 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°nm
) == 0)

842 
ªsu…
++;

848 
	`°πok_r
(
ho°nm
, "/", &
ho°nm_ßve
);

849 i‡(
	`rc_is_my«me
(
ho°nm
) == 0)

851 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°nm_ßve
) == 0)

853 
ªsu…
++;

859 i‡(
	`föd_m©ch
 (
ù_addr
, 
ho°nm
) == 0)

861 
ªsu…
++;

867 
	`f˛o£
 (
˛õ¡fd
);

868 i‡(
ªsu…
 == 0)

870 
	`mem£t
 (
buf„r
, '\0',  (buffer));

871 *
£¸ë
 = '\0';

872 
	`rc_log
(
LOG_ERR
, "rc_find_server: couldn't find RADIUS server %s in %s",

873 
£rvî_«me
, 
	`rc_c⁄f_°r
(
rh
, "servers"));

877 
	}
}

888 
	$rc_c⁄fig_‰ì
(
rc_h™dÀ
 *
rh
)

890 
i
, 
j
;

891 
SERVER
 *
£rv
;

893 i‡(
rh
->
c⁄fig_›ti⁄s
 =
NULL
)

896 
i
 = 0; i < 
NUM_OPTIONS
; i++) {

897 i‡(
rh
->
c⁄fig_›ti⁄s
[
i
].
vÆ
 =
NULL
)

899 i‡(
rh
->
c⁄fig_›ti⁄s
[
i
].
ty≥
 =
OT_SRV
) {

900 
£rv
 = (
SERVER
 *)
rh
->
c⁄fig_›ti⁄s
[
i
].
vÆ
;

901 
j
 = 0; j < 
£rv
->
max
; j++)

902 
	`‰ì
(
£rv
->
«me
[
j
]);

903 
	`‰ì
(
£rv
);

905 
	`‰ì
(
rh
->
c⁄fig_›ti⁄s
[
i
].
vÆ
);

908 
	`‰ì
(
rh
->
c⁄fig_›ti⁄s
);

909 
rh
->
c⁄fig_›ti⁄s
 = 
NULL
;

910 
	}
}

	@radius/src/dict.c

17 
	~<r_c⁄fig.h
>

18 
	~<ö˛udes.h
>

19 
	~<‰ìødius-˛õ¡.h
>

30 
	$rc_ªad_di˘i⁄¨y
 (
rc_h™dÀ
 *
rh
, c⁄° *
fûíame
)

32 
FILE
 *
di˘fd
;

33 
dummy°r
[
AUTH_ID_LEN
];

34 
«me°r
[
AUTH_ID_LEN
];

35 
vÆ°r
[
AUTH_ID_LEN
];

36 
©å°r
[
AUTH_ID_LEN
];

37 
ty≥°r
[
AUTH_ID_LEN
];

38 
›t°r
[
AUTH_ID_LEN
];

39 *
˝
, *
ifûíame
;

40 
löe_no
;

41 
DICT_ATTR
 *
©å
;

42 
DICT_VALUE
 *
dvÆ
;

43 
DICT_VENDOR
 *
dvíd
;

44 
buf„r
[256];

45 
vÆue
;

46 
ty≥
;

48 i‡((
di˘fd
 = 
	`f›í
 (
fûíame
, "r")Ë=
NULL
)

50 
	`rc_log
(
LOG_ERR
, "rc_read_dictionary: couldn't open dictionary %s: %s",

51 
fûíame
, 
	`°ªº‹
(
î∫o
));

55 
löe_no
 = 0;

56 
	`fgës
 (
buf„r
,  (buf„r), 
di˘fd
Ë!
NULL
)

58 
löe_no
++;

61 i‡(*
buf„r
 == '#' || *buffer == '\0' || *buffer == '\n' || \

62 *
buf„r
 == '\r')

68 
˝
 = 
	`°rchr
(
buf„r
, '#');

69 i‡(
˝
 !
NULL
)

71 *
˝
 = '\0';

74 i‡(
	`°∫cmp
 (
buf„r
, "ATTRIBUTE", 9) == 0)

76 
›t°r
[0] = '\0';

78 i‡(
	`ssˇnf
 (
buf„r
, "%s%s%s%s%s", 
dummy°r
, 
«me°r
,

79 
vÆ°r
, 
ty≥°r
, 
›t°r
) < 4)

81 
	`rc_log
(
LOG_ERR
, "rc_read_dictionary: invalidáttribute onÜine %d of dictionary %s",

82 
löe_no
, 
fûíame
);

83 
	`f˛o£
(
di˘fd
);

90 i‡(
	`°æí
 (
«me°r
Ë> 
NAME_LENGTH
)

92 
	`rc_log
(
LOG_ERR
, "rc_read_dictionary: invalidÇameÜength onÜine %d of dictionary %s",

93 
löe_no
, 
fûíame
);

94 
	`f˛o£
(
di˘fd
);

98 i‡(!
	`isdigô
 (*
vÆ°r
))

100 
	`rc_log
(
LOG_ERR
,

102 
löe_no
, 
fûíame
);

103 
	`f˛o£
(
di˘fd
);

106 
vÆue
 = 
	`©oi
 (
vÆ°r
);

108 i‡(
	`°rcmp
 (
ty≥°r
, "string") == 0)

110 
ty≥
 = 
PW_TYPE_STRING
;

112 i‡(
	`°rcmp
 (
ty≥°r
, "integer") == 0)

114 
ty≥
 = 
PW_TYPE_INTEGER
;

116 i‡(
	`°rcmp
 (
ty≥°r
, "ipaddr") == 0)

118 
ty≥
 = 
PW_TYPE_IPADDR
;

120 i‡(
	`°rcmp
 (
ty≥°r
, "date") == 0)

122 
ty≥
 = 
PW_TYPE_DATE
;

126 
	`rc_log
(
LOG_ERR
,

128 
löe_no
, 
fûíame
);

129 
	`f˛o£
(
di˘fd
);

133 
dvíd
 = 
NULL
;

134 i‡(
›t°r
[0] != '\0') {

135 *
˝1
;

136 
˝1
 = 
›t°r
; cp1 !
NULL
; cp1 = 
˝
) {

137 
˝
 = 
	`°rchr
(
˝1
, ',');

138 i‡(
˝
 !
NULL
) {

139 *
˝
 = '\0';

140 
˝
++;

142 i‡(
	`°∫cmp
(
˝1
, "vendor=", 7) == 0)

143 
˝1
 += 7;

144 
dvíd
 = 
	`rc_di˘_födvíd
(
rh
, 
˝1
);

145 i‡(
dvíd
 =
NULL
) {

146 
	`rc_log
(
LOG_ERR
,

148 
˝1
, 
löe_no
, 
fûíame
);

149 
	`f˛o£
(
di˘fd
);

156 i‡((
©å
 = 
	`mÆloc
 ( (
DICT_ATTR
))Ë=
NULL
)

158 
	`rc_log
(
LOG_CRIT
, "rc_read_dictionary: out of memory");

159 
	`f˛o£
(
di˘fd
);

162 
	`°r˝y
 (
©å
->
«me
, 
«me°r
);

163 
©å
->
vÆue
 = value;

164 
©å
->
ty≥
 =Åype;

166 i‡(
dvíd
 !
NULL
)

167 
©å
->
vÆue
 |(
dvíd
->
víd‹≥c
 << 16);

170 
©å
->
√xt
 = 
rh
->
di˘i⁄¨y_©åibuãs
;

171 
rh
->
di˘i⁄¨y_©åibuãs
 = 
©å
;

173 i‡(
	`°∫cmp
 (
buf„r
, "VALUE", 5) == 0)

176 i‡(
	`ssˇnf
 (
buf„r
, "%s%s%s%s", 
dummy°r
, 
©å°r
,

177 
«me°r
, 
vÆ°r
) != 4)

179 
	`rc_log
(
LOG_ERR
,

181 
löe_no
, 
fûíame
);

182 
	`f˛o£
(
di˘fd
);

189 i‡(
	`°æí
 (
©å°r
Ë> 
NAME_LENGTH
)

191 
	`rc_log
(
LOG_ERR
,

193 
löe_no
, 
fûíame
);

194 
	`f˛o£
(
di˘fd
);

198 i‡(
	`°æí
 (
«me°r
Ë> 
NAME_LENGTH
)

200 
	`rc_log
(
LOG_ERR
,

202 
löe_no
, 
fûíame
);

203 
	`f˛o£
(
di˘fd
);

207 i‡(!
	`isdigô
 (*
vÆ°r
))

209 
	`rc_log
(
LOG_ERR
,

211 
löe_no
, 
fûíame
);

212 
	`f˛o£
(
di˘fd
);

215 
vÆue
 = 
	`©oi
 (
vÆ°r
);

218 i‡((
dvÆ
 = 
	`mÆloc
 ( (
DICT_VALUE
))Ë=
NULL
)

220 
	`rc_log
(
LOG_CRIT
, "rc_read_dictionary: out of memory");

221 
	`f˛o£
(
di˘fd
);

224 
	`°r˝y
 (
dvÆ
->
©å«me
, 
©å°r
);

225 
	`°r˝y
 (
dvÆ
->
«me
, 
«me°r
);

226 
dvÆ
->
vÆue
 = value;

229 
dvÆ
->
√xt
 = 
rh
->
di˘i⁄¨y_vÆues
;

230 
rh
->
di˘i⁄¨y_vÆues
 = 
dvÆ
;

232 i‡(
	`°∫cmp
 (
buf„r
, "$INCLUDE", 8) == 0)

235 i‡(
	`ssˇnf
 (
buf„r
, "%s%s", 
dummy°r
, 
«me°r
) != 2)

237 
	`rc_log
(
LOG_ERR
,

239 
löe_no
, 
fûíame
);

240 
	`f˛o£
(
di˘fd
);

243 
ifûíame
 = 
«me°r
;

245 i‡(
«me°r
[0] != '/') {

246 
˝
 = 
	`°ºchr
(
fûíame
, '/');

247 i‡(
˝
 !
NULL
) {

248 
ifûíame
 = 
	`Æloˇ
(
AUTH_ID_LEN
);

249 *
˝
 = '\0';

250 
	`•rötf
(
ifûíame
, "%s/%s", 
fûíame
, 
«me°r
);

251 *
˝
 = '/';

254 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
ifûíame
) < 0)

256 
	`f˛o£
(
di˘fd
);

260 i‡(
	`°∫cmp
 (
buf„r
, "VENDOR", 6) == 0)

263 i‡(
	`ssˇnf
 (
buf„r
, "%s%s%s", 
dummy°r
, 
©å°r
, 
vÆ°r
) != 3)

265 
	`rc_log
(
LOG_ERR
,

267 
löe_no
, 
fûíame
);

268 
	`f˛o£
(
di˘fd
);

273 i‡(
	`°æí
 (
©å°r
Ë> 
NAME_LENGTH
)

275 
	`rc_log
(
LOG_ERR
,

277 
löe_no
, 
fûíame
);

278 
	`f˛o£
(
di˘fd
);

282 i‡(!
	`isdigô
 (*
vÆ°r
))

284 
	`rc_log
(
LOG_ERR
,

286 
löe_no
, 
fûíame
);

287 
	`f˛o£
(
di˘fd
);

290 
vÆue
 = 
	`©oi
 (
vÆ°r
);

293 
dvíd
 = 
	`mÆloc
((
DICT_VENDOR
));

294 i‡(
dvíd
 =
NULL
)

296 
	`rc_log
(
LOG_CRIT
, "rc_read_dictionary: out of memory");

297 
	`f˛o£
(
di˘fd
);

300 
	`°r˝y
 (
dvíd
->
víd‹«me
, 
©å°r
);

301 
dvíd
->
víd‹≥c
 = 
vÆue
;

304 
dvíd
->
√xt
 = 
rh
->
di˘i⁄¨y_víd‹s
;

305 
rh
->
di˘i⁄¨y_víd‹s
 = 
dvíd
;

308 
	`f˛o£
 (
di˘fd
);

310 
	}
}

320 
DICT_ATTR
 *
	$rc_di˘_gë©å
 (c⁄° 
rc_h™dÀ
 *
rh
, 
©åibuã
)

322 
DICT_ATTR
 *
©å
;

324 
©å
 = 
rh
->
di˘i⁄¨y_©åibuãs
;

325 
©å
 !
NULL
)

327 i‡(
©å
->
vÆue
 =
©åibuã
)

329  
©å
;

331 
©å
 =áâr->
√xt
;

333  
NULL
;

334 
	}
}

344 
DICT_ATTR
 *
	$rc_di˘_föd©å
 (c⁄° 
rc_h™dÀ
 *
rh
, c⁄° *
©å«me
)

346 
DICT_ATTR
 *
©å
;

348 
©å
 = 
rh
->
di˘i⁄¨y_©åibuãs
;

349 
©å
 !
NULL
)

351 i‡(
	`°rˇ£cmp
 (
©å
->
«me
, 
©å«me
) == 0)

353  
©å
;

355 
©å
 =áâr->
√xt
;

357  
NULL
;

358 
	}
}

369 
DICT_VALUE
 *
	$rc_di˘_födvÆ
 (c⁄° 
rc_h™dÀ
 *
rh
, c⁄° *
vÆ«me
)

371 
DICT_VALUE
 *
vÆ
;

373 
vÆ
 = 
rh
->
di˘i⁄¨y_vÆues
;

374 
vÆ
 !
NULL
)

376 i‡(
	`°rˇ£cmp
 (
vÆ
->
«me
, 
vÆ«me
) == 0)

378  
vÆ
;

380 
vÆ
 = vÆ->
√xt
;

382  
NULL
;

383 
	}
}

393 
DICT_VENDOR
 *

394 
	$rc_di˘_födvíd
(c⁄° 
rc_h™dÀ
 *
rh
, c⁄° *
víd‹«me
)

396 
DICT_VENDOR
 *
víd
;

398 
víd
 = 
rh
->
di˘i⁄¨y_víd‹s
; víd !
NULL
; víd = víd->
√xt
)

399 i‡(
	`°rˇ£cmp
(
víd
->
víd‹«me
, vendorname) == 0)

400  
víd
;

401  
NULL
;

402 
	}
}

412 
DICT_VENDOR
 *

413 
	$rc_di˘_gëvíd
 (c⁄° 
rc_h™dÀ
 *
rh
, 
víd‹≥c
)

415 
DICT_VENDOR
 *
víd
;

417 
víd
 = 
rh
->
di˘i⁄¨y_víd‹s
; víd !
NULL
; víd = víd->
√xt
)

418 i‡(
víd
->
víd‹≥c
 == vendorpec)

419  
víd
;

420  
NULL
;

421 
	}
}

431 
DICT_VALUE
 *

432 
	$rc_di˘_gëvÆ
 (c⁄° 
rc_h™dÀ
 *
rh
, 
uöt32_t
 
vÆue
, c⁄° *
©å«me
)

434 
DICT_VALUE
 *
vÆ
;

436 
vÆ
 = 
rh
->
di˘i⁄¨y_vÆues
;

437 
vÆ
 !
NULL
)

439 i‡(
	`°rcmp
 (
vÆ
->
©å«me
,áttrname) == 0 &&

440 
vÆ
->
vÆue
 == value)

442  
vÆ
;

444 
vÆ
 = vÆ->
√xt
;

446  
NULL
;

447 
	}
}

458 
	$rc_di˘_‰ì
(
rc_h™dÀ
 *
rh
)

460 
DICT_ATTR
 *
©å
, *
«âr
;

461 
DICT_VALUE
 *
vÆ
, *
nvÆ
;

462 
DICT_VENDOR
 *
víd
, *
nvíd
;

464 
©å
 = 
rh
->
di˘i⁄¨y_©åibuãs
;áâ∏!
NULL
;áâ∏
«âr
) {

465 
«âr
 = 
©å
->
√xt
;

466 
	`‰ì
(
©å
);

468 
vÆ
 = 
rh
->
di˘i⁄¨y_vÆues
; vÆ !
NULL
; vÆ = 
nvÆ
) {

469 
nvÆ
 = 
vÆ
->
√xt
;

470 
	`‰ì
(
vÆ
);

472 
víd
 = 
rh
->
di˘i⁄¨y_víd‹s
; víd !
NULL
; víd = 
nvíd
) {

473 
nvíd
 = 
víd
->
√xt
;

474 
	`‰ì
(
víd
);

476 
rh
->
di˘i⁄¨y_©åibuãs
 = 
NULL
;

477 
rh
->
di˘i⁄¨y_vÆues
 = 
NULL
;

478 
rh
->
di˘i⁄¨y_víd‹s
 = 
NULL
;

479 
	}
}

	@radius/src/env.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

23 
ENV
 *
	$rc_√w_ív
(
size
)

25 
ENV
 *
p
;

27 i‡(
size
 < 1)

28  
NULL
;

30 i‡((
p
 = 
	`mÆloc
((*p))Ë=
NULL
)

31  
NULL
;

33 i‡((
p
->
ív
 = 
	`mÆloc
(
size
 * (*))Ë=
NULL
)

35 
	`rc_log
(
LOG_CRIT
, "rc_new_env: out of memory");

36 
	`‰ì
(
p
);

37  
NULL
;

40 
p
->
ív
[0] = 
NULL
;

42 
p
->
size
 = 0;

43 
p
->
maxsize
 = 
size
;

45  
p
;

46 
	}
}

55 
	$rc_‰ì_ív
(
ENV
 *
ív
)

57 
	`‰ì
(
ív
->env);

58 
	`‰ì
(
ív
);

59 
	}
}

68 
	$rc_add_ív
(
ENV
 *
ív
, *
«me
, *
vÆue
)

70 
i
;

71 *
√w_ív
;

73 
i
 = 0; 
ív
->ív[i] !
NULL
; i++)

75 i‡(
	`°∫cmp
(
ív
->ív[
i
], 
«me
, 
	`MAX
(
	`°rchr
”nv->ív[i], '='Ë-Énv->ív[i], ()
	`°æí
(name))) == 0)

79 i‡(
ív
->ív[
i
])

81 i‡((
√w_ív
 = 
	`ªÆloc
(
ív
->ív[
i
], 
	`°æí
(
«me
)+°æí(
vÆue
)+2)Ë=
NULL
)

84 
ív
->ív[
i
] = 
√w_ív
;

86 
	`•rötf
(
ív
->ív[
i
],"%s=%s", 
«me
, 
vÆue
);

88 i‡(
ív
->
size
 =”nv->
maxsize
-1)) {

89 
	`rc_log
(
LOG_CRIT
, "rc_add_env:ÇotÉnough space forÉnvironment (increase ENV_SIZE)");

93 i‡((
ív
->ív[ív->
size
] = 
	`mÆloc
(
	`°æí
(
«me
)+°æí(
vÆue
)+2)Ë=
NULL
) {

94 
	`rc_log
(
LOG_CRIT
, "rc_add_env: out of memory");

98 
	`•rötf
(
ív
->ív[ív->
size
],"%s=%s", 
«me
, 
vÆue
);

100 
ív
->
size
++;

102 
ív
->ív[ív->
size
] = 
NULL
;

106 
	}
}

115 
	$rc_imp‹t_ív
(
ENV
 *
ív
, **
imp‹t
)

117 *
es
;

119 *
imp‹t
)

121 
es
 = 
	`°rchr
(*
imp‹t
, '=');

123 i‡(!
es
)

125 
imp‹t
++;

130 *
es
 = '\0';

132 i‡(
	`rc_add_ív
(
ív
, *
imp‹t
, 
es
+1) < 0)

134 *
es
 = '=';

138 *
es
 = '=';

140 
imp‹t
++;

144 
	}
}

	@radius/src/freeradius-client.h

17 #i‚de‡
FREERADIUS_CLIENT_H


18 
	#FREERADIUS_CLIENT_H


	)

21 
	~<sys/ty≥s.h
>

27 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<time.h
>

32 #unde‡
__BEGIN_DECLS


33 #unde‡
__END_DECLS


34 #ifde‡
__˝lu•lus


35 
	#__BEGIN_DECLS
 "C" {

	)

36 
	#__END_DECLS
 }

	)

38 
	#__BEGIN_DECLS


	)

39 
	#__END_DECLS


	)

42 
	#AUTH_VECTOR_LEN
 16

	)

43 
	#AUTH_PASS_LEN
 (3 * 16Ë

	)

44 
	#AUTH_ID_LEN
 64

	)

45 
	#AUTH_STRING_LEN
 253

	)

47 
	#BUFFER_LEN
 8192

	)

49 
	#NAME_LENGTH
 32

	)

50 
	#GETSTR_LENGTH
 128

	)

52 
	#MAX_SECRET_LENGTH
 (3 * 16Ë

	)

54 
	#VENDOR
(
x
Ë(((xË>> 16Ë& 0xffff)

	)

55 
	#ATTRID
(
x
Ë((xË& 0xffff)

	)

58 
	#AUTH
 0

	)

59 
	#ACCT
 1

	)

63 
	#SERVER_MAX
 8

	)

65 
	#AUTH_LOCAL_FST
 (1<<0)

	)

66 
	#AUTH_RADIUS_FST
 (1<<1)

	)

67 
	#AUTH_LOCAL_SND
 (1<<2)

	)

68 
	#AUTH_RADIUS_SND
 (1<<3)

	)

70 
	s£rvî
 {

71 
max
;

72 *
«me
[
SERVER_MAX
];

73 
uöt16_t
 
p‹t
[
SERVER_MAX
];

74 *
£¸ë
[
SERVER_MAX
];

75 
dódtime_íds
[
SERVER_MAX
];

76 } 
	tSERVER
;

78 
	spw_auth_hdr


80 
uöt8_t
 
	mcode
;

81 
uöt8_t
 
	mid
;

82 
uöt16_t
 
	mÀngth
;

83 
uöt8_t
 
	mve˘‹
[
AUTH_VECTOR_LEN
];

84 
uöt8_t
 
	md©a
[2];

85 } 
	tAUTH_HDR
;

87 
	src_c⁄f


89 
_›ti⁄
 *
	mc⁄fig_›ti⁄s
;

90 
uöt32_t
 
	mthis_ho°_ùaddr
;

91 
uöt32_t
 *
	mthis_ho°_böd_ùaddr
;

92 
m≠2id_s
 *
	mm≠2id_li°
;

93 
di˘_©å
 *
	mdi˘i⁄¨y_©åibuãs
;

94 
di˘_vÆue
 *
	mdi˘i⁄¨y_vÆues
;

95 
di˘_víd‹
 *
	mdi˘i⁄¨y_víd‹s
;

96 
	mbuf
[
GETSTR_LENGTH
];

97 
	mbuf1
[14];

98 
	mi‚ame
[512];

99 *
	mµbuf
;

102 
rc_c⁄f
 
	trc_h™dÀ
;

104 
	#AUTH_HDR_LEN
 20

	)

105 
	#CHAP_VALUE_LENGTH
 16

	)

107 
	#PW_AUTH_UDP_PORT
 1645

	)

108 
	#PW_ACCT_UDP_PORT
 1646

	)

110 
	#PW_TYPE_STRING
 0

	)

111 
	#PW_TYPE_INTEGER
 1

	)

112 
	#PW_TYPE_IPADDR
 2

	)

113 
	#PW_TYPE_DATE
 3

	)

117 
	#PW_ACCESS_REQUEST
 1

	)

118 
	#PW_ACCESS_ACCEPT
 2

	)

119 
	#PW_ACCESS_REJECT
 3

	)

120 
	#PW_ACCOUNTING_REQUEST
 4

	)

121 
	#PW_ACCOUNTING_RESPONSE
 5

	)

122 
	#PW_ACCOUNTING_STATUS
 6

	)

123 
	#PW_PASSWORD_REQUEST
 7

	)

124 
	#PW_PASSWORD_ACK
 8

	)

125 
	#PW_PASSWORD_REJECT
 9

	)

126 
	#PW_ACCOUNTING_MESSAGE
 10

	)

127 
	#PW_ACCESS_CHALLENGE
 11

	)

128 
	#PW_STATUS_SERVER
 12

	)

129 
	#PW_STATUS_CLIENT
 13

	)

134 
	#PW_USER_NAME
 1

	)

135 
	#PW_USER_PASSWORD
 2

	)

136 
	#PW_CHAP_PASSWORD
 3

	)

137 
	#PW_NAS_IP_ADDRESS
 4

	)

138 
	#PW_NAS_PORT
 5

	)

139 
	#PW_SERVICE_TYPE
 6

	)

140 
	#PW_FRAMED_PROTOCOL
 7

	)

141 
	#PW_FRAMED_IP_ADDRESS
 8

	)

142 
	#PW_FRAMED_IP_NETMASK
 9

	)

143 
	#PW_FRAMED_ROUTING
 10

	)

144 
	#PW_FILTER_ID
 11

	)

145 
	#PW_FRAMED_MTU
 12

	)

146 
	#PW_FRAMED_COMPRESSION
 13

	)

147 
	#PW_LOGIN_IP_HOST
 14

	)

148 
	#PW_LOGIN_SERVICE
 15

	)

149 
	#PW_LOGIN_PORT
 16

	)

150 
	#PW_OLD_PASSWORD
 17

	)

151 
	#PW_REPLY_MESSAGE
 18

	)

152 
	#PW_LOGIN_CALLBACK_NUMBER
 19

	)

153 
	#PW_FRAMED_CALLBACK_ID
 20

	)

154 
	#PW_EXPIRATION
 21

	)

155 
	#PW_FRAMED_ROUTE
 22

	)

156 
	#PW_FRAMED_IPX_NETWORK
 23

	)

157 
	#PW_STATE
 24

	)

158 
	#PW_CLASS
 25

	)

159 
	#PW_VENDOR_SPECIFIC
 26

	)

160 
	#PW_SESSION_TIMEOUT
 27

	)

161 
	#PW_IDLE_TIMEOUT
 28

	)

162 
	#PW_TERMINATION_ACTION
 29

	)

163 
	#PW_CALLED_STATION_ID
 30

	)

164 
	#PW_CALLING_STATION_ID
 31

	)

165 
	#PW_NAS_IDENTIFIER
 32

	)

166 
	#PW_PROXY_STATE
 33

	)

167 
	#PW_LOGIN_LAT_SERVICE
 34

	)

168 
	#PW_LOGIN_LAT_NODE
 35

	)

169 
	#PW_LOGIN_LAT_GROUP
 36

	)

170 
	#PW_FRAMED_APPLETALK_LINK
 37

	)

171 
	#PW_FRAMED_APPLETALK_NETWORK
 38

	)

172 
	#PW_FRAMED_APPLETALK_ZONE
 39

	)

173 
	#PW_EVENT_TIMESTAMP
 55

	)

174 
	#PW_CHAP_CHALLENGE
 60

	)

175 
	#PW_NAS_PORT_TYPE
 61

	)

176 
	#PW_PORT_LIMIT
 62

	)

177 
	#PW_LOGIN_LAT_PORT
 63

	)

178 
	#PW_CONNECT_INFO
 77

	)

183 
	#PW_MESSAGE_AUTHENTICATOR
 80

	)

188 
	#PW_NAS_IPV6_ADDRESS
 95

	)

189 
	#PW_FRAMED_INTERFACE_ID
 96

	)

190 
	#PW_FRAMED_IPV6_PREFIX
 97

	)

191 
	#PW_LOGIN_IPV6_HOST
 98

	)

192 
	#PW_FRAMED_IPV6_ROUTE
 99

	)

193 
	#PW_FRAMED_IPV6_POOL
 100

	)

197 
	#PW_ACCT_STATUS_TYPE
 40

	)

198 
	#PW_ACCT_DELAY_TIME
 41

	)

199 
	#PW_ACCT_INPUT_OCTETS
 42

	)

200 
	#PW_ACCT_OUTPUT_OCTETS
 43

	)

201 
	#PW_ACCT_SESSION_ID
 44

	)

202 
	#PW_ACCT_AUTHENTIC
 45

	)

203 
	#PW_ACCT_SESSION_TIME
 46

	)

204 
	#PW_ACCT_INPUT_PACKETS
 47

	)

205 
	#PW_ACCT_OUTPUT_PACKETS
 48

	)

206 
	#PW_ACCT_TERMINATE_CAUSE
 49

	)

207 
	#PW_ACCT_MULTI_SESSION_ID
 50

	)

208 
	#PW_ACCT_LINK_COUNT
 51

	)

213 
	#PW_ACCT_INPUT_GIGAWORDS
 52

	)

214 
	#PW_ACCT_OUTPUT_GIGAWORDS
 53

	)

218 
	#PW_DIGEST_RESPONSE
 206

	)

219 
	#PW_DIGEST_ATTRIBUTES
 207

	)

220 
	#PW_DIGEST_REALM
 1063

	)

221 
	#PW_DIGEST_NONCE
 1064

	)

222 
	#PW_DIGEST_METHOD
 1065

	)

223 
	#PW_DIGEST_URI
 1066

	)

224 
	#PW_DIGEST_QOP
 1067

	)

225 
	#PW_DIGEST_ALGORITHM
 1068

	)

226 
	#PW_DIGEST_BODY_DIGEST
 1069

	)

227 
	#PW_DIGEST_CNONCE
 1070

	)

228 
	#PW_DIGEST_NONCE_COUNT
 1071

	)

229 
	#PW_DIGEST_USER_NAME
 1072

	)

233 
	#PW_USER_ID
 222

	)

234 
	#PW_USER_REALM
 223

	)

240 
	#PW_LOGIN
 1

	)

241 
	#PW_FRAMED
 2

	)

242 
	#PW_CALLBACK_LOGIN
 3

	)

243 
	#PW_CALLBACK_FRAMED
 4

	)

244 
	#PW_OUTBOUND
 5

	)

245 
	#PW_ADMINISTRATIVE
 6

	)

246 
	#PW_NAS_PROMPT
 7

	)

247 
	#PW_AUTHENTICATE_ONLY
 8

	)

248 
	#PW_CALLBACK_NAS_PROMPT
 9

	)

252 
	#PW_PPP
 1

	)

253 
	#PW_SLIP
 2

	)

254 
	#PW_ARA
 3

	)

255 
	#PW_GANDALF
 4

	)

256 
	#PW_XYLOGICS
 5

	)

260 
	#PW_NONE
 0

	)

261 
	#PW_BROADCAST
 1

	)

262 
	#PW_LISTEN
 2

	)

263 
	#PW_BROADCAST_LISTEN
 3

	)

267 
	#PW_VAN_JACOBSON_TCP_IP
 1

	)

268 
	#PW_IPX_HEADER_COMPRESSION
 2

	)

272 
	#PW_TELNET
 0

	)

273 
	#PW_RLOGIN
 1

	)

274 
	#PW_TCP_CLEAR
 2

	)

275 
	#PW_PORTMASTER
 3

	)

276 
	#PW_LAT
 4

	)

277 
	#PW_X25_PAD
 5

	)

278 
	#PW_X25_T3POS
 6

	)

282 
	#PW_DEFAULT
 0

	)

283 
	#PW_RADIUS_REQUEST
 1

	)

287 
	#PW_DUMB
 0

	)

288 
	#PW_AUTH_ONLY
 3

	)

289 
	#PW_ALL
 255

	)

293 
	#PW_STATUS_START
 1

	)

294 
	#PW_STATUS_STOP
 2

	)

295 
	#PW_STATUS_ALIVE
 3

	)

296 
	#PW_STATUS_MODEM_START
 4

	)

297 
	#PW_STATUS_MODEM_STOP
 5

	)

298 
	#PW_STATUS_CANCEL
 6

	)

299 
	#PW_ACCOUNTING_ON
 7

	)

300 
	#PW_ACCOUNTING_OFF
 8

	)

304 
	#PW_USER_REQUEST
 1

	)

305 
	#PW_LOST_CARRIER
 2

	)

306 
	#PW_LOST_SERVICE
 3

	)

307 
	#PW_ACCT_IDLE_TIMEOUT
 4

	)

308 
	#PW_ACCT_SESSION_TIMEOUT
 5

	)

309 
	#PW_ADMIN_RESET
 6

	)

310 
	#PW_ADMIN_REBOOT
 7

	)

311 
	#PW_PORT_ERROR
 8

	)

312 
	#PW_NAS_ERROR
 9

	)

313 
	#PW_NAS_REQUEST
 10

	)

314 
	#PW_NAS_REBOOT
 11

	)

315 
	#PW_PORT_UNNEEDED
 12

	)

316 
	#PW_PORT_PREEMPTED
 13

	)

317 
	#PW_PORT_SUSPENDED
 14

	)

318 
	#PW_SERVICE_UNAVAILABLE
 15

	)

319 
	#PW_CALLBACK
 16

	)

320 
	#PW_USER_ERROR
 17

	)

321 
	#PW_HOST_REQUEST
 18

	)

325 
	#PW_ASYNC
 0

	)

326 
	#PW_SYNC
 1

	)

327 
	#PW_ISDN_SYNC
 2

	)

328 
	#PW_ISDN_SYNC_V120
 3

	)

329 
	#PW_ISDN_SYNC_V110
 4

	)

330 
	#PW_VIRTUAL
 5

	)

333 
	#PW_RADIUS
 1

	)

334 
	#PW_LOCAL
 2

	)

335 
	#PW_REMOTE
 3

	)

339 
	sdi˘_©å


341 
	m«me
[
NAME_LENGTH
 + 1];

342 
	mvÆue
;

343 
	mty≥
;

344 
di˘_©å
 *
	m√xt
;

345 } 
	tDICT_ATTR
;

347 
	sdi˘_vÆue


349 
	m©å«me
[
NAME_LENGTH
 +1];

350 
	m«me
[
NAME_LENGTH
 + 1];

351 
	mvÆue
;

352 
di˘_vÆue
 *
	m√xt
;

353 } 
	tDICT_VALUE
;

355 
	sdi˘_víd‹


357 
	mvíd‹«me
[
NAME_LENGTH
 +1];

358 
	mvíd‹≥c
;

359 
di˘_víd‹
 *
	m√xt
;

360 } 
	tDICT_VENDOR
;

362 
	svÆue_∑ú


364 
	m«me
[
NAME_LENGTH
 + 1];

365 
	m©åibuã
;

366 
	mty≥
;

367 
uöt32_t
 
	mlvÆue
;

368 
	m°rvÆue
[
AUTH_STRING_LEN
 + 1];

369 
vÆue_∑ú
 *
	m√xt
;

370 } 
	tVALUE_PAIR
;

373 
	#MGMT_POLL_SECRET
 "H¨dlya£¸ë"

	)

377 
	#BADRESP_RC
 -2

	)

378 
	#ERROR_RC
 -1

	)

379 
	#OK_RC
 0

	)

380 
	#TIMEOUT_RC
 1

	)

381 
	#REJECT_RC
 2

	)

383 
	s£nd_d©a


385 
uöt8_t
 
	mcode
;

386 
uöt8_t
 
	m£q_nbr
;

387 *
	m£rvî
;

388 
	msvc_p‹t
;

389 *
	m£¸ë
;

390 
	mtimeout
;

391 
	mªåõs
;

392 
VALUE_PAIR
 *
	m£nd_∑ús
;

393 
VALUE_PAIR
 *
	mª˚ive_∑ús
;

394 } 
	tSEND_DATA
;

396 #i‚de‡
MIN


397 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

399 #i‚de‡
MAX


400 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

403 #i‚de‡
PATH_MAX


404 
	#PATH_MAX
 1024

	)

407 
	sív


409 
	mmaxsize
, 
	msize
;

410 **
	mív
;

411 } 
	tENV
;

413 
	#ENV_SIZE
 128

	)

415 
__BEGIN_DECLS


421 
VALUE_PAIR
 *
rc_av∑ú_add
(c⁄° 
rc_h™dÀ
 *, VALUE_PAIR **, , *, , );

422 
rc_av∑ú_assign
(
VALUE_PAIR
 *, *, );

423 
VALUE_PAIR
 *
rc_av∑ú_√w
(c⁄° 
rc_h™dÀ
 *, , *, , );

424 
VALUE_PAIR
 *
rc_av∑ú_gí
(c⁄° 
rc_h™dÀ
 *, VALUE_PAIR *, *, , );

425 
VALUE_PAIR
 *
rc_av∑ú_gë
(VALUE_PAIR *, , );

426 
rc_av∑ú_ö£π
(
VALUE_PAIR
 **, VALUE_PAIR *, VALUE_PAIR *);

427 
rc_av∑ú_‰ì
(
VALUE_PAIR
 *);

428 
rc_av∑ú_∑r£
(c⁄° 
rc_h™dÀ
 *, *, 
VALUE_PAIR
 **);

429 
rc_av∑ú_to°r
(c⁄° 
rc_h™dÀ
 *, 
VALUE_PAIR
 *, *, , *, );

430 *
rc_av∑ú_log
(
rc_h™dÀ
 *, 
VALUE_PAIR
 *);

431 
VALUE_PAIR
 *
rc_av∑ú_ªadö
(c⁄° 
rc_h™dÀ
 *, 
FILE
 *);

435 
rc_buûdªq
(
rc_h™dÀ
 *, 
SEND_DATA
 *, , *, , *, , );

436 
rc_gë_£qnbr
(
rc_h™dÀ
 *);

437 
rc_auth
(
rc_h™dÀ
 *, 
uöt32_t
, 
VALUE_PAIR
 *, VALUE_PAIR **, *);

438 
rc_auth_¥oxy
(
rc_h™dÀ
 *, 
VALUE_PAIR
 *, VALUE_PAIR **, *);

439 
rc_ac˘
(
rc_h™dÀ
 *, 
uöt32_t
, 
VALUE_PAIR
 *);

440 
rc_ac˘_¥oxy
(
rc_h™dÀ
 *, 
VALUE_PAIR
 *);

441 
rc_check
(
rc_h™dÀ
 *, *, *, , *);

445 
rc_ªad_m≠fûe
(
rc_h™dÀ
 *, *);

446 
uöt32_t
 
rc_m≠2id
(
rc_h™dÀ
 *, *);

447 
rc_m≠2id_‰ì
(
rc_h™dÀ
 *);

451 
rc_h™dÀ
 *
rc_ªad_c⁄fig
(*);

452 *
rc_c⁄f_°r
(
rc_h™dÀ
 *, *);

453 
rc_c⁄f_öt
(
rc_h™dÀ
 *, *);

454 
SERVER
 *
rc_c⁄f_§v
(
rc_h™dÀ
 *, *);

455 
rc_föd_£rvî
(
rc_h™dÀ
 *, *, 
uöt32_t
 *, *);

456 
rc_c⁄fig_‰ì
(
rc_h™dÀ
 *);

457 
rc_add_c⁄fig
(
rc_h™dÀ
 *, const *, const *, const *, const );

458 
rc_h™dÀ
 *
rc_c⁄fig_öô
(rc_handle *);

459 
ã°_c⁄fig
(
rc_h™dÀ
 *, *);

463 
rc_ªad_di˘i⁄¨y
(
rc_h™dÀ
 *, const *);

464 
DICT_ATTR
 *
rc_di˘_gë©å
(c⁄° 
rc_h™dÀ
 *, );

465 
DICT_ATTR
 *
rc_di˘_föd©å
(c⁄° 
rc_h™dÀ
 *, const *);

466 
DICT_VALUE
 *
rc_di˘_födvÆ
(c⁄° 
rc_h™dÀ
 *, const *);

467 
DICT_VENDOR
 *
rc_di˘_födvíd
(c⁄° 
rc_h™dÀ
 *, const *);

468 
DICT_VENDOR
 *
rc_di˘_gëvíd
(c⁄° 
rc_h™dÀ
 *, );

469 
DICT_VALUE
 * 
rc_di˘_gëvÆ
(c⁄° 
rc_h™dÀ
 *, 
uöt32_t
, const *);

470 
rc_di˘_‰ì
(
rc_h™dÀ
 *);

474 
ho°ít
 *
rc_gëho°by«me
(const *);

475 
ho°ít
 *
rc_gëho°byaddr
(c⁄° *, 
size_t
, );

476 
uöt32_t
 
rc_gë_ùaddr
(*);

477 
rc_good_ùaddr
(*);

478 c⁄° *
rc_ù_ho°«me
(
uöt32_t
);

479 
rc_gëp‹t
();

480 
rc_own_ho°«me
(*, );

481 
uöt32_t
 
rc_own_ùaddªss
(
rc_h™dÀ
 *);

482 
uöt32_t
 
rc_own_böd_ùaddªss
(
rc_h™dÀ
 *);

483 
rc_gë_§ˇddr
(
sockaddr
 *, sockaddr *);

488 
rc_›ílog
(*);

489 
rc_log
(, const *, ...);

493 
rc_£nd_£rvî
(
rc_h™dÀ
 *, 
SEND_DATA
 *, *);

497 
rc_°r2tm
(*, 
tm
 *);

498 *
rc_gëi‚ame
(
rc_h™dÀ
 *, *);

499 *
rc_gë°r
(
rc_h™dÀ
 *, *, );

500 
rc_mdñay
();

501 *
rc_mksid
(
rc_h™dÀ
 *);

502 
rc_h™dÀ
 *
rc_√w
();

503 
rc_de°roy
(
rc_h™dÀ
 *);

504 *
rc_fgë 
(
FILE
 *, 
size_t
 *);

505 
rc_gë˘ime
();

509 
ív
 *
rc_√w_ív
();

510 
rc_‰ì_ív
(
ív
 *);

511 
rc_add_ív
(
ív
 *, *, *);

512 
rc_imp‹t_ív
(
ív
 *, **);

516 
rc_md5_ˇlc
(*, *, );

518 
rc_check_ª∂y
 (
AUTH_HDR
 *, , *, *, );

519 
rc_øndom_ve˘‹
(*);

520 
rc_∑ck_li°
 (
VALUE_PAIR
 *
vp
, c⁄° *
£¸ë
, 
AUTH_HDR
 *
auth
);

521 
rc_hmac_md5_ˇlc
(*, 
size_t
, *, size_t, *);

523 
	g__END_DECLS


	@radius/src/includes.h

17 
	~"r_c⁄fig.h
"

20 #i‚de‡
__GNUC__


21 #i‡
HAVE_ALLOCA_H


22 
	~<Æloˇ.h
>

24 #ifde‡
_AIX


25 #¥agm®
Æloˇ


27 #i‚de‡
Æloˇ


28 *
Æloˇ
 ();

34 
	~<sys/ty≥s.h
>

36 
	~<˘y≥.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

40 #ifde‡
HAVE_NETDB_H


41 
	~<√tdb.h
>

44 #ifde‡
HAVE_SYSLOG_H


45 
	~<sy¶og.h
>

48 #ifde‡
STDC_HEADERS


49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 
	~<°d¨g.h
>

53 
	~<°d¨g.h
>

54 #i‚de‡
HAVE_STRCHR


55 
	#°rchr
 
ödex


	)

56 
	#°ºchr
 
rödex


	)

61 #i‚de‡
HAVE_SNPRINTF


62 
	#¢¥ötf
(
buf
, 
Àn
, 
f‹m©
, ...Ë
	`•rötf
(buf, f‹m©, 
__VA_ARGS__
)

	)

64 #i‚de‡
HAVE_VSNPRINTF


65 
	#v¢¥ötf
(
buf
, 
Àn
, 
f‹m©
, 
≠
Ë
	`v•rötf
(buf, f‹m©,áp)

	)

68 #ifde‡
HAVE_UNISTD_H


69 
	~<uni°d.h
>

72 #ifde‡
HAVE_FCNTL_H


73 
	~<f˙é.h
>

76 #ifde‡
HAVE_SYS_FCNTL_H


77 
	~<sys/f˙é.h
>

80 #ifde‡
HAVE_SYS_FILE_H


81 
	~<sys/fûe.h
>

84 #ifde‡
HAVE_SYS_STAT_H


85 
	~<sys/°©.h
>

88 #ifde‡
HAVE_SYS_UTSNAME_H


89 
	~<sys/ut¢ame.h
>

92 #ifde‡
HAVE_SYS_IOCTL_H


93 
	~<sys/io˘l.h
>

96 #ifde‡
HAVE_CRYPT_H


97 
	~<¸y±.h
>

100 #ifde‡
HAVE_LIMITS_H


101 
	~<limôs.h
>

104 #ifde‡
HAVE_TERMIOS_H


105 
	~<ãrmios.h
>

108 #i‚de‡
PATH_MAX


109 
	#PATH_MAX
 1024

	)

112 #i‚de‡
UCHAR_MAX


113 #ifde‡ 
__STDC__


114 
	#UCHAR_MAX
 255U

	)

116 
	#UCHAR_MAX
 255

	)

120 #ifde‡
HAVE_PWD_H


121 
	~<pwd.h
>

124 #ifde‡
HAVE_SYS_SOCKET_H


125 
	~<sys/sockë.h
>

128 #ifde‡
HAVE_NETINET_IN_H


129 
	~<√töë/ö.h
>

132 #ifde‡
HAVE_ARPA_INET_H


133 
	~<¨∑/öë.h
>

136 #i‡
deföed
(
HAVE_SIGNAL_H
)

137 
	~<sig«l.h
>

139 #i‡
deföed
(
HAVE_SYS_SIGNAL_H
)

140 
	~<sys/sig«l.h
>

143 #ifde‡
NEED_SIG_PROTOTYPES


144 
sigem±y£t
(
sig£t_t
 *);

145 
sigadd£t
(
sig£t_t
 *, );

146 
sig¥ocmask
 (, 
sig£t_t
 *, sigset_t *);

149 #i‡
HAVE_GETOPT_H


150 
	~<gë›t.h
>

153 #i‡
deföed
(
HAVE_SHADOW_H
Ë&& deföed(
HAVE_SHADOW_PASSWORDS
)

154 
	~<shadow.h
>

157 #i‡
TIME_WITH_SYS_TIME


158 
	~<sys/time.h
>

159 
	~<time.h
>

161 #i‡
HAVE_SYS_TIME_H


162 
	~<sys/time.h
>

164 
	~<time.h
>

173 #i‚de‡
HAVE_RANDOM


174 #ifde‡
HAVE_RAND


175 
	#§™dom
 
§™d


	)

176 
	#øndom
 
ønd


	)

180 
	#RC_CONFIG_FILE
 "./c⁄f/ødius˛õ¡.c⁄f"

	)

183 
do_lock_ex˛usive
(
FILE
 *);

184 
do_u∆ock
(
FILE
 *);

	@radius/src/ip_util.c

17 
	~<r_c⁄fig.h
>

18 
	~<ö˛udes.h
>

19 
	~<‰ìødius-˛õ¡.h
>

21 #i‡!
deföed
(
SA_LEN
)

22 
	#SA_LEN
(
ß
) \

23 (((
ß
)->
ß_Ámûy
 =
AF_INET
) ? \

24 (
sockaddr_ö
Ë: (
sockaddr_ö6
))

	)

35 
ho°ít
 *
	$rc_gëho°by«me
(c⁄° *
ho°«me
)

37 
ho°ít
 *
hp
;

38 #ifde‡
GETHOSTBYNAME_R


39 #i‡
	`deföed
 (
GETHOSTBYNAMERSTYLE_SYSV
Ë|| deföed (
GETHOSTBYNAMERSTYLE_GNU
)

40 
ho°ít
 
ho°buf
;

41 
size_t
 
ho°buÊí
;

42 *
tmpho°buf
;

43 
ªs
;

44 
hîr
;

46 
ho°buÊí
 = 1024;

47 
tmpho°buf
 = 
	`mÆloc
(
ho°buÊí
);

51 #ifde‡
GETHOSTBYNAME_R


52 #i‡
	`deföed
 (
GETHOSTBYNAMERSTYLE_GNU
)

53 (
ªs
 = 
	`gëho°by«me_r
(
ho°«me
, &
ho°buf
, 
tmpho°buf
, 
ho°buÊí
, &
hp
, &
hîr
)Ë=
ERANGE
)

56 
ho°buÊí
 *= 2;

57 
tmpho°buf
 = 
	`ªÆloc
—mpho°buf, 
ho°buÊí
);

59 
	`‰ì
(
tmpho°buf
);

60 #ñi‡
	`deföed
 (
GETHOSTBYNAMERSTYLE_SYSV
)

61 
hp
 = 
	`gëho°by«me_r
(
ho°«me
, &
ho°buf
, 
tmpho°buf
, 
ho°buÊí
, &
hîr
);

62 
	`‰ì
(
tmpho°buf
);

64 
hp
 = 
	`gëho°by«me
(
ho°«me
);

67 
hp
 = 
	`gëho°by«me
(
ho°«me
);

70 i‡(
hp
 =
NULL
) {

71  
NULL
;

73  
hp
;

74 
	}
}

84 
ho°ít
 *
	$rc_gëho°byaddr
(c⁄° *
addr
, 
size_t
 
Àngth
, 
f‹m©
)

86 
ho°ít
 *
hp
;

87 #ifde‡
GETHOSTBYADDR_R


88 #i‡
	`deföed
 (
GETHOSTBYADDRRSTYLE_SYSV
Ë|| deföed (
GETHOSTBYADDRRSTYLE_GNU
)

89 
ho°ít
 
ho°buf
;

90 
size_t
 
ho°buÊí
;

91 *
tmpho°buf
;

92 
ªs
;

93 
hîr
;

95 
ho°buÊí
 = 1024;

96 
tmpho°buf
 = 
	`mÆloc
(
ho°buÊí
);

100 #ifde‡
GETHOSTBYADDR_R


101 #i‡
	`deföed
 (
GETHOSTBYADDRRSTYLE_GNU
)

102 (
ªs
 = 
	`gëho°byaddr_r
(
addr
, 
Àngth
, 
f‹m©
, &
ho°buf
, 
tmpho°buf
, 
ho°buÊí
,

103 &
hp
, &
hîr
)Ë=
ERANGE
)

106 
ho°buÊí
 *= 2;

107 
tmpho°buf
 = 
	`ªÆloc
—mpho°buf, 
ho°buÊí
);

109 
	`‰ì
(
tmpho°buf
);

110 #ñi‡
GETHOSTBYADDRSTYLE_SYSV


111 
hp
 = 
	`gëho°byaddr_r
(
addr
, 
Àngth
, 
f‹m©
, &
ho°buf
, 
tmpho°buf
, 
ho°buÊí
, &
hîr
);

112 
	`‰ì
(
tmpho°buf
);

114 
hp
 = 
	`gëho°byaddr
((*)&
addr
, (
ö_addr
), 
AF_INET
);

117 
hp
 = 
	`gëho°byaddr
((*)&
addr
, (
ö_addr
), 
AF_INET
);

120 i‡(
hp
 =
NULL
) {

121  
NULL
;

123  
hp
;

124 
	}
}

135 
uöt32_t
 
	$rc_gë_ùaddr
 (*
ho°
)

137 
ho°ít
 *
hp
;

139 i‡(
	`rc_good_ùaddr
 (
ho°
) == 0)

141  
	`¡ohl
(
	`öë_addr
 (
ho°
));

143 i‡((
hp
 = 
	`rc_gëho°by«me
(
ho°
)Ë=
NULL
)

145 
	`rc_log
(
LOG_ERR
,"rc_gë_ùaddr: couldn'àªsﬁvêho°«me: %s", 
ho°
);

146  (
uöt32_t
)0;

148  
	`¡ohl
((*(
uöt32_t
 *Ë
hp
->
h_addr
));

149 
	}
}

160 
	$rc_good_ùaddr
 (*
addr
)

162 
dŸ_cou¡
;

163 
digô_cou¡
;

165 i‡(
addr
 =
NULL
)

168 
dŸ_cou¡
 = 0;

169 
digô_cou¡
 = 0;

170 *
addr
 != '\0' && *addr != ' ')

172 i‡(*
addr
 == '.')

174 
dŸ_cou¡
++;

175 
digô_cou¡
 = 0;

177 i‡(!
	`isdigô
 (*
addr
))

179 
dŸ_cou¡
 = 5;

183 
digô_cou¡
++;

184 i‡(
digô_cou¡
 > 3)

186 
dŸ_cou¡
 = 5;

189 
addr
++;

191 i‡(
dŸ_cou¡
 != 3)

199 
	}
}

209 c⁄° *
	$rc_ù_ho°«me
 (
uöt32_t
 
h_ùaddr
)

211 
ho°ít
 *
hp
;

212 
uöt32_t
 
n_ùaddr
 = 
	`ht⁄l
 (
h_ùaddr
);

214 i‡((
hp
 = 
	`rc_gëho°byaddr
 ((*Ë&
n_ùaddr
,  (
ö_addr
),

215 
AF_INET
)Ë=
NULL
) {

216 
	`rc_log
(
LOG_ERR
,"rc_ù_ho°«me: couldn'àlook u∞ho° byáddr: %08lX", 
h_ùaddr
);

219  (
hp
 =
NULL
Ë? "unknown" : hp->
h_«me
;

220 
	}
}

229 
	$rc_gëp‹t
(
ty≥
)

231 
£rvít
 *
svp
;

233 i‡((
svp
 = 
	`gë£rvby«me
 ((
ty≥
==
AUTH
)?"ødius":"ødac˘", "udp")Ë=
NULL
)

235  (
ty≥
==
AUTH
Ë? 
PW_AUTH_UDP_PORT
 : 
PW_ACCT_UDP_PORT
;

237  
	`¡ohs
 ((Ë
svp
->
s_p‹t
);

239 
	}
}

251 
	$rc_own_ho°«me
(*
ho°«me
, 
Àn
)

253 #ifde‡
HAVE_UNAME


254 
ut¢ame
 
uts
;

257 #i‡
	`deföed
(
HAVE_UNAME
)

258 i‡(
	`u«me
(&
uts
) < 0)

260 
	`rc_log
(
LOG_ERR
,"rc_own_hostname: couldn't get own hostname");

263 
	`°∫˝y
(
ho°«me
, 
uts
.
nodíame
, 
Àn
);

264 #ñi‡
	`deföed
(
HAVE_GETHOSTNAME
)

265 i‡(
	`gëho°«me
(
ho°«me
, 
Àn
) < 0)

267 
	`rc_log
(
LOG_ERR
,"rc_own_hostname: couldn't get own hostname");

270 #ñi‡
	`deföed
(
HAVE_SYSINFO
)

271 i‡(
	`sysöfo
(
SI_HOSTNAME
, 
ho°«me
, 
Àn
) < 0)

273 
	`rc_log
(
LOG_ERR
,"rc_own_hostname: couldn't get own hostname");

281 
	}
}

292 
uöt32_t
 
	$rc_own_ùaddªss
(
rc_h™dÀ
 *
rh
)

294 
ho°«me
[256];

296 i‡(!
rh
->
this_ho°_ùaddr
) {

297 i‡(
	`rc_c⁄f_°r
(
rh
, "bödaddr"Ë=
NULL
 ||

298 
	`°rcmp
(
	`rc_c⁄f_°r
(
rh
, "bindaddr"), "*") == 0) {

299 i‡(
	`rc_own_ho°«me
(
ho°«me
, (hostname)) < 0)

302 
	`°∫˝y
(
ho°«me
, 
	`rc_c⁄f_°r
(
rh
, "bindaddr"), (hostname));

303 
ho°«me
[(hostname) - 1] = '\0';

305 i‡((
rh
->
this_ho°_ùaddr
 = 
	`rc_gë_ùaddr
 (
ho°«me
)) == 0) {

306 
	`rc_log
(
LOG_ERR
, "rc_own_ipaddress: couldn't get own IPáddress");

311  
rh
->
this_ho°_ùaddr
;

312 
	}
}

324 
uöt32_t
 
	$rc_own_böd_ùaddªss
(
rc_h™dÀ
 *
rh
)

326 
ho°«me
[256];

327 
uöt32_t
 
rvÆ
;

329 i‡(
rh
->
this_ho°_böd_ùaddr
 !
NULL
)

330  *
rh
->
this_ho°_böd_ùaddr
;

332 
rh
->
this_ho°_böd_ùaddr
 = 
	`mÆloc
((*rh->this_host_bind_ipaddr));

333 i‡(
rh
->
this_ho°_böd_ùaddr
 =
NULL
)

334 
	`rc_log
(
LOG_CRIT
, "rc_own_bind_ipaddress: out of memory");

335 i‡(
	`rc_c⁄f_°r
(
rh
, "bödaddr"Ë=
NULL
 ||

336 
	`°rcmp
(
	`rc_c⁄f_°r
(
rh
, "bindaddr"), "*") == 0) {

337 
rvÆ
 = 
INADDR_ANY
;

339 
	`°∫˝y
(
ho°«me
, 
	`rc_c⁄f_°r
(
rh
, "bindaddr"), (hostname));

340 
ho°«me
[(hostname) - 1] = '\0';

341 i‡((
rvÆ
 = 
	`rc_gë_ùaddr
 (
ho°«me
)) == 0) {

342 
	`rc_log
(
LOG_ERR
, "rc_own_ipaddress: couldn't get IPáddress from bindaddr");

343 
rvÆ
 = 
INADDR_ANY
;

346 i‡(
rh
->
this_ho°_böd_ùaddr
 !
NULL
)

347 *
rh
->
this_ho°_böd_ùaddr
 = 
rvÆ
;

349  
rvÆ
;

350 
	}
}

364 
	$rc_gë_§ˇddr
(
sockaddr
 *
lü
, sockadd∏*
rü
)

366 
ãmp_sock
;

367 
sockÀn_t
 
«mñí
;

369 
ãmp_sock
 = 
	`sockë
(
rü
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

370 i‡(
ãmp_sock
 == -1) {

371 
	`rc_log
(
LOG_ERR
, "rc_gë_§ˇddr: sockë: %s", 
	`°ªº‹
(
î∫o
));

375 i‡(
	`c⁄√˘
(
ãmp_sock
, 
rü
, 
	`SA_LEN
(ria)) != 0) {

376 
	`rc_log
(
LOG_ERR
, "rc_get_srcaddr: connect: %s",

377 
	`°ªº‹
(
î∫o
));

378 
	`˛o£
(
ãmp_sock
);

382 
«mñí
 = 
	`SA_LEN
(
rü
);

383 i‡(
	`gësock«me
(
ãmp_sock
, 
lü
, &
«mñí
) != 0) {

384 
	`rc_log
(
LOG_ERR
, "rc_get_srcaddr: getsockname: %s",

385 
	`°ªº‹
(
î∫o
));

386 
	`˛o£
(
ãmp_sock
);

390 
	`˛o£
(
ãmp_sock
);

392 
	}
}

	@radius/src/lock.c

12 
	~"r_c⁄fig.h
"

13 
	~"ö˛udes.h
"

15 #i‡
deföed
(
HAVE_FLOCK
)

17 
	$do_lock_ex˛usive
(
FILE
 * 
fd
)

19  
	`Êock
(
	`fûío
(
fd
), 
LOCK_EX
|
LOCK_NB
);

20 
	}
}

22 
	$do_u∆ock
(
FILE
 * 
fd
)

24  
	`Êock
(
	`fûío
(
fd
), 
LOCK_UN
);

25 
	}
}

27 #ñi‡
deföed
(
WIN32
)

29 
	$do_lock_ex˛usive
(
FILE
 * 
fd
)

31 
	`_lock_fûe
(
fd
);

33 
	}
}

35 
	$do_u∆ock
(
FILE
 * 
fd
)

37 
	`_u∆ock_fûe
(
fd
);

39 
	}
}

41 #ñi‡
deföed
(
HAVE_FCNTL
)

43 
	$do_lock_ex˛usive
(
FILE
 * 
fd
)

45 
Êock_t
 
Ê
;

46 
ªs
;

48 
	`mem£t
((*)&
Ê
, 0, (fl));

50 
Ê
.
l_ty≥
 = 
F_WRLCK
;

51 
Ê
.
l_whí˚
 = fl.
l_°¨t
 = 0;

52 
Ê
.
l_Àn
 = 0;

54 
ªs
 = 
	`f˙é
(
	`fûío
(
fd
), 
F_SETLK
, &
Ê
);

56 i‡((
ªs
 =-1Ë&& (
î∫o
 =
EAGAIN
))

57 
î∫o
 = 
EWOULDBLOCK
;

59  
ªs
;

60 
	}
}

62 
	$do_u∆ock
(
FILE
 * 
fd
)

64 
Êock_t
 
Ê
;

66 
	`mem£t
((*)&
Ê
, 0, (fl));

68 
Ê
.
l_ty≥
 = 
F_UNLCK
;

69 
Ê
.
l_whí˚
 = fl.
l_°¨t
 = 0;

70 
Ê
.
l_Àn
 = 0;

72  
	`f˙é
(
	`fûío
(
fd
), 
F_SETLK
, &
Ê
);

73 
	}
}

76 #îr‹ 
YOU_LOSE
 "needÉither flock(2) or fcntl(2)"

	@radius/src/log.c

12 
	~<r_c⁄fig.h
>

13 
	~<ö˛udes.h
>

14 
	~<‰ìødius-˛õ¡.h
>

27 
	$rc_›ílog
(*
idít
)

29 #i‚de‡
_MSC_VER


30 
	`›ílog
(
idít
, 
LOG_PID
, 
LOG_DAEMON
);

32 
	}
}

45 
	$rc_log
(
¥io
, c⁄° *
f‹m©
, ...)

47 
buff
[1024];

48 
va_li°
 
≠
;

50 
	`va_°¨t
(
≠
,
f‹m©
);

51 
	`v¢¥ötf
(
buff
, (buff), 
f‹m©
, 
≠
);

52 
	`va_íd
(
≠
);

55 #i‚de‡
_MSC_VER


56 
	`sy¶og
(
¥io
, "%s", 
buff
);

59 
	`Ârötf
(
°dout
, "%s\n", 
buff
);

61 
	}
}

	@radius/src/md5.c

13 
	~"md5.h
"

15 
rc_md5_ˇlc
(*
ouçut
, *
öput
,

16 
size_t
 
öpuéí
);

18 
	$rc_md5_ˇlc
(*
ouçut
, *
öput
,

19 
size_t
 
öÀn
)

21 
MD5_CTX
 
c⁄ãxt
;

23 
	`MD5Inô
(&
c⁄ãxt
);

24 
	`MD5Upd©e
(&
c⁄ãxt
, 
öput
, 
öÀn
);

25 
	`MD5FöÆ
(
ouçut
, &
c⁄ãxt
);

26 
	}
}

34 
	$rc_hmac_md5_ˇlc
(*
öput
, 
size_t
 
öput_Àn
,

35 *
key
, 
size_t
 
key_Àn
,

36 *
ouçut
)

38 
MD5_CTX
 
˘x
;

39 
k_ùad
[65];

40 
k_›ad
[65];

41 
tk
[16];

42 
i
;

45 i‡(
key_Àn
 > 64) {

46 
	`rc_md5_ˇlc
(
tk
, 
key
, 
key_Àn
);

47 
key
 = 
tk
;

48 
key_Àn
 = 16;

52 
	`mem£t
(
k_ùad
, 0, (k_ipad));

53 
	`mem£t
(
k_›ad
, 0, (k_opad));

54 
	`mem˝y
(
k_ùad
, 
key
, 
key_Àn
);

55 
	`mem˝y
(
k_›ad
, 
key
, 
key_Àn
);

58 
i
=0; i<64; i++) {

59 
k_ùad
[
i
] ^= 0x36;

60 
k_›ad
[
i
] ^= 0x5c;

66 
	`MD5Inô
(&
˘x
);

67 
	`MD5Upd©e
(&
˘x
, 
k_ùad
, 64);

68 
	`MD5Upd©e
(&
˘x
, 
öput
, 
öput_Àn
);

69 
	`MD5FöÆ
(
ouçut
, &
˘x
);

72 
	`MD5Inô
(&
˘x
);

73 
	`MD5Upd©e
(&
˘x
, 
k_›ad
, 64);

74 
	`MD5Upd©e
(&
˘x
, 
ouçut
, 16);

75 
	`MD5FöÆ
(
ouçut
, &
˘x
);

76 
	}
}

108 
	#PUT_64BIT_LE
(
˝
, 
vÆue
) do { \

109 (
˝
)[7] = (
vÆue
)[1] >> 24; \

110 (
˝
)[6] = (
vÆue
)[1] >> 16; \

111 (
˝
)[5] = (
vÆue
)[1] >> 8; \

112 (
˝
)[4] = (
vÆue
)[1]; \

113 (
˝
)[3] = (
vÆue
)[0] >> 24; \

114 (
˝
)[2] = (
vÆue
)[0] >> 16; \

115 (
˝
)[1] = (
vÆue
)[0] >> 8; \

116 (
˝
)[0] = (
vÆue
)[0]; } 0)

	)

118 
	#PUT_32BIT_LE
(
˝
, 
vÆue
) do { \

119 (
˝
)[3] = (
vÆue
) >> 24; \

120 (
˝
)[2] = (
vÆue
) >> 16; \

121 (
˝
)[1] = (
vÆue
) >> 8; \

122 (
˝
)[0] = (
vÆue
); } 0)

	)

124 
uöt8_t
 
	gPADDING
[
MD5_BLOCK_LENGTH
] = {

135 
	$MD5Inô
(
MD5_CTX
 *
˘x
)

137 
˘x
->
cou¡
[0] = 0;

138 
˘x
->
cou¡
[1] = 0;

139 
˘x
->
°©e
[0] = 0x67452301;

140 
˘x
->
°©e
[1] = 0xefcdab89;

141 
˘x
->
°©e
[2] = 0x98badcfe;

142 
˘x
->
°©e
[3] = 0x10325476;

143 
	}
}

150 
	$MD5Upd©e
(
MD5_CTX
 *
˘x
, c⁄° *
öput
, 
size_t
 
Àn
)

152 
size_t
 
have
, 
√ed
;

155 
have
 = (
size_t
)((
˘x
->
cou¡
[0] >> 3Ë& (
MD5_BLOCK_LENGTH
 - 1));

156 
√ed
 = 
MD5_BLOCK_LENGTH
 - 
have
;

160 i‡((
˘x
->
cou¡
[0] +((
uöt32_t
)
Àn
 << 3)) < (uint32_t)len) {

162 
˘x
->
cou¡
[1]++;

164 
˘x
->
cou¡
[1] +((
uöt32_t
)
Àn
 >> 29);

168 i‡(
Àn
 >
√ed
) {

169 i‡(
have
 != 0) {

170 
	`mem˝y
(
˘x
->
buf„r
 + 
have
, 
öput
, 
√ed
);

171 
	`MD5Tønsf‹m
(
˘x
->
°©e
, ctx->
buf„r
);

172 
öput
 +
√ed
;

173 
Àn
 -
√ed
;

174 
have
 = 0;

178 
Àn
 >
MD5_BLOCK_LENGTH
) {

179 
	`MD5Tønsf‹m
(
˘x
->
°©e
, 
öput
);

180 
öput
 +
MD5_BLOCK_LENGTH
;

181 
Àn
 -
MD5_BLOCK_LENGTH
;

186 i‡(
Àn
 != 0)

187 
	`mem˝y
(
˘x
->
buf„r
 + 
have
, 
öput
, 
Àn
);

188 
	}
}

195 
	$MD5FöÆ
(
dige°
[
MD5_DIGEST_LENGTH
], 
MD5_CTX
 *
˘x
)

197 
uöt8_t
 
cou¡
[8];

198 
size_t
 
∑dÀn
;

199 
i
;

202 
	`PUT_64BIT_LE
(
cou¡
, 
˘x
->count);

205 
∑dÀn
 = 
MD5_BLOCK_LENGTH
 -

206 ((
˘x
->
cou¡
[0] >> 3Ë& (
MD5_BLOCK_LENGTH
 - 1));

207 i‡(
∑dÀn
 < 1 + 8)

208 
∑dÀn
 +
MD5_BLOCK_LENGTH
;

209 
	`MD5Upd©e
(
˘x
, 
PADDING
, 
∑dÀn
 - 8);

210 
	`MD5Upd©e
(
˘x
, 
cou¡
, 8);

212 i‡(
dige°
 !
NULL
) {

213 
i
 = 0; i < 4; i++)

214 
	`PUT_32BIT_LE
(
dige°
 + 
i
 * 4, 
˘x
->
°©e
[i]);

216 
	`mem£t
(
˘x
, 0, (*ctx));

217 
	}
}

223 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

224 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

225 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

226 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

229 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

230 –
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w<<
s
 | w>>(32-s), w +x )

	)

238 
	$MD5Tønsf‹m
(
uöt32_t
 
°©e
[4], c⁄° 
uöt8_t
 
block
[
MD5_BLOCK_LENGTH
])

240 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
ö
[
MD5_BLOCK_LENGTH
 / 4];

242 
a
 = 0;á < 
MD5_BLOCK_LENGTH
 / 4;á++) {

243 
ö
[
a
] = (
uöt32_t
)(

244 (
uöt32_t
)(
block
[
a
 * 4 + 0]) |

245 (
uöt32_t
)(
block
[
a
 * 4 + 1]) << 8 |

246 (
uöt32_t
)(
block
[
a
 * 4 + 2]) << 16 |

247 (
uöt32_t
)(
block
[
a
 * 4 + 3]) << 24);

250 
a
 = 
°©e
[0];

251 
b
 = 
°©e
[1];

252 
c
 = 
°©e
[2];

253 
d
 = 
°©e
[3];

255 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0] + 0xd76aa478, 7);

256 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 1] + 0xe8c7b756, 12);

257 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2] + 0x242070db, 17);

258 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 3] + 0xc1bdceee, 22);

259 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4] + 0xf57c0faf, 7);

260 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 5] + 0x4787c62a, 12);

261 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6] + 0xa8304613, 17);

262 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 7] + 0xfd469501, 22);

263 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8] + 0x698098d8, 7);

264 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 9] + 0x8b44f7af, 12);

265 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

266 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

267 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

268 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

269 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

270 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

272 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1] + 0xf61e2562, 5);

273 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 6] + 0xc040b340, 9);

274 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

275 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 0] + 0xe9b6c7aa, 20);

276 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5] + 0xd62f105d, 5);

277 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

278 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

279 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 4] + 0xe7d3fbc8, 20);

280 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9] + 0x21e1cde6, 5);

281 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

282 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3] + 0xf4d50d87, 14);

283 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 8] + 0x455a14ed, 20);

284 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

285 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 2] + 0xfcefa3f8, 9);

286 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7] + 0x676f02d9, 14);

287 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

289 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5] + 0xfffa3942, 4);

290 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 8] + 0x8771f681, 11);

291 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

292 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

293 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1] + 0xa4beea44, 4);

294 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 4] + 0x4bdecfa9, 11);

295 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7] + 0xf6bb4b60, 16);

296 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

297 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

298 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 0] + 0xeaa127fa, 11);

299 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3] + 0xd4ef3085, 16);

300 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 6] + 0x04881d05, 23);

301 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9] + 0xd9d4d039, 4);

302 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

303 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

304 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2 ] + 0xc4ac5665, 23);

306 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0] + 0xf4292244, 6);

307 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7 ] + 0x432aff97, 10);

308 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

309 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5 ] + 0xfc93a039, 21);

310 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

311 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3 ] + 0x8f0ccc92, 10);

312 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

313 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1 ] + 0x85845dd1, 21);

314 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8 ] + 0x6fa87e4f, 6);

315 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

316 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6 ] + 0xa3014314, 15);

317 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

318 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4 ] + 0xf7537e82, 6);

319 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

320 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2 ] + 0x2ad7d2bb, 15);

321 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9 ] + 0xeb86d391, 21);

323 
°©e
[0] +
a
;

324 
°©e
[1] +
b
;

325 
°©e
[2] +
c
;

326 
°©e
[3] +
d
;

327 
	}
}

	@radius/src/md5.h

9 #i‚de‡
_RCRAD_MD5_H


10 
	#_RCRAD_MD5_H


	)

12 
	~"r_c⁄fig.h
"

14 #ifde‡
HAVE_INTTYPES_H


15 
	~<öây≥s.h
>

18 #ifde‡
HAVE_SYS_TYPES_H


19 
	~<sys/ty≥s.h
>

22 #ifde‡
HAVE_STDINT_H


23 
	~<°döt.h
>

26 
	~<°rög.h
>

31 
	#MD5_CTX
 
libød_MD5_CTX


	)

32 
	#MD5Inô
 
libød_MD5Inô


	)

33 
	#MD5Upd©e
 
libød_MD5Upd©e


	)

34 
	#MD5FöÆ
 
libød_MD5FöÆ


	)

35 
	#MD5Tønsf‹m
 
libød_MD5Tønsf‹m


	)

56 
	#MD5_BLOCK_LENGTH
 64

	)

57 
	#MD5_DIGEST_LENGTH
 16

	)

59 
	sMD5C⁄ãxt
 {

60 
uöt32_t
 
	m°©e
[4];

61 
uöt32_t
 
	mcou¡
[2];

62 
uöt8_t
 
	mbuf„r
[
MD5_BLOCK_LENGTH
];

63 } 
	tMD5_CTX
;

68 
MD5Inô
(
MD5_CTX
 *);

69 
MD5Upd©e
(
MD5_CTX
 *, c⁄° 
uöt8_t
 *, 
size_t
)

71 
MD5FöÆ
(
uöt8_t
 [
MD5_DIGEST_LENGTH
], 
MD5_CTX
 *)

73 
MD5Tønsf‹m
(
uöt32_t
 [4], c⁄° 
uöt8_t
 [
MD5_BLOCK_LENGTH
])

	@radius/src/messages.h

22 #i‚de‡
MESSAGES_H


23 
	#MESSAGES_H


	)

27 
	#SC_LOGIN
 "logö: "

	)

28 
	#SC_PASSWORD
 "Passw‹d: "

	)

30 
	#SC_TIMEOUT
 "\r\∆ogöÅimed ouàa·î %d sec⁄ds. Bye.\r\n"

	)

31 
	#SC_EXCEEDED
 "MaximumÜogöÅrõ†ex˚eded. Gÿaway!\r\n"

	)

33 
	#SC_RADIUS_OK
 "RADIUS: Authítiˇti⁄ OK\r\n"

	)

34 
	#SC_RADIUS_FAILED
 "RADIUS: Authítiˇti⁄ faûuª\r\n"

	)

36 
	#SC_LOCAL_OK
 "loˇl: Authítiˇti⁄ OK\r\n"

	)

37 
	#SC_LOCAL_FAILED
 "loˇl: Authítiˇti⁄ faûuª\r\n"

	)

38 
	#SC_NOLOGIN
 "\r\nSy°em clo£d f‹ maöã«n˚. TryágaöÜ©î...\r\n"

	)

40 
	#SC_SERVER_REPLY
 "RADIUS: %s"

	)

42 
	#SC_DEFAULT_ISSUE
 "(\\I)\r\n\r\n\\S \\R (\\NË’‹à\\L)\r\n\r\n"

	)

46 
	#SC_ACCT_OK
 "RADIUSáccou¡ög OK\r\n"

	)

47 
	#SC_ACCT_FAILED
 "RADIUSáccou¡ög faûed (RC=%i)\r\n"

	)

51 
	#SC_STATUS_FAILED
 "RADIUS: Sètu†Áûuª\r\n"

	)

	@radius/src/options.h

12 
	#OPTION_LEN
 64

	)

15 
	#OT_STR
 (1<<0Ë

	)

16 
	#OT_INT
 (1<<1Ë

	)

17 
	#OT_SRV
 (1<<2Ë

	)

18 
	#OT_AUO
 (1<<3Ë

	)

20 
	#OT_ANY
 (()~0Ë

	)

23 
	#ST_UNDEF
 (1<<0Ë

	)

25 
	s_›ti⁄
 {

26 
	m«me
[
OPTION_LEN
];

27 
	mty≥
, 
	m°©us
;

28 *
	mvÆ
;

29 } 
	tOPTION
;

31 
OPTION
 
	gc⁄fig_›ti⁄s_deÁu…
[] = {

33 {"c⁄fig_fûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

35 {"auth_‹dî", 
OT_AUO
, 
ST_UNDEF
, 
NULL
},

36 {"logö_åõs", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

37 {"logö_timeout", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

38 {"nﬁogö", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

39 {"issue", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

41 {"auth£rvî", 
OT_SRV
, 
ST_UNDEF
, 
NULL
},

42 {"ac˘£rvî", 
OT_SRV
, 
ST_UNDEF
, 
NULL
},

43 {"£rvîs", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

44 {"di˘i⁄¨y", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

45 {"logö_ødius", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

46 {"£qfûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

47 {"m≠fûe", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

48 {"deÁu…_ªÆm", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

49 {"ødius_timeout", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

50 {"ødius_ªåõs", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

51 {"ødius_dódtime", 
OT_INT
, 
ST_UNDEF
, 
NULL
},

52 {"bödaddr", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

54 {"logö_loˇl", 
OT_STR
, 
ST_UNDEF
, 
NULL
},

57 
	#NUM_OPTIONS
 (((
c⁄fig_›ti⁄s_deÁu…
))/((c⁄fig_›ti⁄s_deÁu…[0])))

	)

	@radius/src/pathnames.h

17 #i‚de‡
PATHNAMES_H


18 
	#PATHNAMES_H


	)

20 
	#_PATH_DEV_URANDOM
 "/dev/uøndom"

	)

21 
	#_PATH_ETC_ISSUE
 "/ëc/issue"

	)

24 #i‚de‡
_PATH_ETC_RADIUSCLIENT_CONF


25 
	#_PATH_ETC_RADIUSCLIENT_CONF
 "/ëc/ødius˛õ¡.c⁄f"

	)

	@radius/src/r_config.h

1 
	#GETHOSTBYADDRRSTYLE_GNU


	)

2 
	#GETHOSTBYADDR_R
 1

	)

3 
	#GETHOSTBYNAMERSTYLE_GNU


	)

4 
	#GETHOSTBYNAME_R


	)

5 
	#HAVE_ALLOCA
 1

	)

6 
	#HAVE_ALLOCA_H
 1

	)

7 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_CRYPT_H
 1

	)

9 
	#HAVE_DEV_URANDOM
 1

	)

10 
	#HAVE_DIRENT_H
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

12 
	#HAVE_FCNTL
 1

	)

13 
	#HAVE_FCNTL_H
 1

	)

14 
	#HAVE_FLOCK
 1

	)

15 
	#HAVE_GETDOMAINNAME
 1

	)

16 
	#HAVE_GETHOSTNAME
 1

	)

17 
	#HAVE_GETOPT_H
 1

	)

18 
	#HAVE_INTTYPES_H
 1

	)

19 
	#HAVE_LIBCRYPT
 1

	)

20 
	#HAVE_LIBNSL
 1

	)

21 
	#HAVE_MEMORY_H
 1

	)

22 
	#HAVE_NETDB_H
 1

	)

23 
	#HAVE_NETINET_IN_H
 1

	)

24 
	#HAVE_PWD_H
 1

	)

25 
	#HAVE_RAND
 1

	)

26 
	#HAVE_RANDOM
 1

	)

27 
	#HAVE_SIGNAL_H
 1

	)

28 
	#HAVE_SNPRINTF
 1

	)

29 
	#HAVE_STDINT_H
 1

	)

30 
	#HAVE_STDLIB_H
 1

	)

31 
	#HAVE_STRCASECMP
 1

	)

32 
	#HAVE_STRDUP
 1

	)

33 
	#HAVE_STRERROR
 1

	)

34 
	#HAVE_STRFTIME
 1

	)

35 
	#HAVE_STRINGS_H
 1

	)

36 
	#HAVE_STRING_H
 1

	)

37 
	#HAVE_SYSINFO
 1

	)

38 
	#HAVE_SYSLOG_H
 1

	)

39 
	#HAVE_SYS_FCNTL_H
 1

	)

40 
	#HAVE_SYS_FILE_H
 1

	)

41 
	#HAVE_SYS_IOCTL_H
 1

	)

42 
	#HAVE_SYS_SIGNAL_H
 1

	)

43 
	#HAVE_SYS_SOCKET_H
 1

	)

44 
	#HAVE_SYS_STAT_H
 1

	)

45 
	#HAVE_SYS_TYPES_H
 1

	)

46 
	#HAVE_SYS_UTSNAME_H
 1

	)

47 
	#HAVE_TERMIOS_H
 1

	)

48 
	#HAVE_UNAME
 1

	)

49 
	#HAVE_UNISTD_H
 1

	)

50 
	#HAVE_VSNPRINTF
 1

	)

52 
	#PACKAGE
 "ødius˛õ¡"

	)

53 
	#PACKAGE_BUGREPORT
 ""

	)

54 
	#PACKAGE_NAME
 ""

	)

55 
	#PACKAGE_STRING
 ""

	)

56 
	#PACKAGE_TARNAME
 ""

	)

57 
	#PACKAGE_VERSION
 ""

	)

58 
	#PROTOTYPES
 1

	)

59 
	#RETSIGTYPE
 

	)

60 
	#STDC_HEADERS
 1

	)

61 
	#TIME_WITH_SYS_TIME
 1

	)

62 
	#VERSION
 "1.1.6"

	)

63 
	#__PROTOTYPES
 1

	)

	@radius/src/sendserver.c

17 
	~<r_c⁄fig.h
>

18 
	~<ö˛udes.h
>

19 
	~<‰ìødius-˛õ¡.h
>

20 
	~<∑th«mes.h
>

22 
	#SA
(
p
Ë((
sockaddr
 *)’))

	)

24 
rc_øndom_ve˘‹
 (*);

25 
rc_check_ª∂y
 (
AUTH_HDR
 *, , *, *, );

36 
	$rc_∑ck_li°
 (
VALUE_PAIR
 *
vp
, c⁄° *
£¸ë
, 
AUTH_HDR
 *
auth
)

38 
Àngth
, 
i
, 
pc
, 
∑dded_Àngth
;

39 
tŸÆ_Àngth
 = 0;

40 
size_t
 
£¸ëÀn
;

41 
uöt32_t
 
lvÆue
, 
víd‹
;

42 
∑ssbuf
[
	`MAX
(
AUTH_PASS_LEN
, 
CHAP_VALUE_LENGTH
)];

43 
md5buf
[256];

44 *
buf
, *
ve˘‹
, *
vß_Àngth_±r
;

46 
buf
 = 
auth
->
d©a
;

48 
vp
 !
NULL
)

50 
vß_Àngth_±r
 = 
NULL
;

51 i‡(
	`VENDOR
(
vp
->
©åibuã
) != 0) {

52 *
buf
++ = 
PW_VENDOR_SPECIFIC
;

53 
vß_Àngth_±r
 = 
buf
;

54 *
buf
++ = 6;

55 
víd‹
 = 
	`ht⁄l
(
	`VENDOR
(
vp
->
©åibuã
));

56 
	`mem˝y
(
buf
, &
víd‹
, (
uöt32_t
));

57 
buf
 += 4;

58 
tŸÆ_Àngth
 += 6;

60 *
buf
++ = (
vp
->
©åibuã
 & 0xff);

62 
vp
->
©åibuã
)

64 
PW_USER_PASSWORD
:

69 
Àngth
 = 
vp
->
lvÆue
;

70 i‡(
Àngth
 > 
AUTH_PASS_LEN
)

71 
Àngth
 = 
AUTH_PASS_LEN
;

74 
∑dded_Àngth
 = (
Àngth
+(
AUTH_VECTOR_LEN
-1)) & ~(AUTH_VECTOR_LEN-1);

77 *
buf
++ = 
∑dded_Àngth
 + 2;

78 i‡(
vß_Àngth_±r
 !
NULL
Ë*vß_Àngth_±∏+
∑dded_Àngth
 + 2;

81 
	`mem£t
 ((*Ë
∑ssbuf
, '\0', 
AUTH_PASS_LEN
);

82 
	`mem˝y
 ((*Ë
∑ssbuf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

84 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

85 
ve˘‹
 = (*)
auth
->vector;

86 
i
 = 0; i < 
∑dded_Àngth
; i +
AUTH_VECTOR_LEN
)

89 
	`°r˝y
 ((*Ë
md5buf
, 
£¸ë
);

90 
	`mem˝y
 ((*Ë
md5buf
 + 
£¸ëÀn
, 
ve˘‹
,

91 
AUTH_VECTOR_LEN
);

92 
	`rc_md5_ˇlc
 (
buf
, 
md5buf
, 
£¸ëÀn
 + 
AUTH_VECTOR_LEN
);

95 
ve˘‹
 = 
buf
;

98 
pc
 = 
i
;Ö¯< (ò+ 
AUTH_VECTOR_LEN
);Öc++)

100 *
buf
++ ^
∑ssbuf
[
pc
];

104 
tŸÆ_Àngth
 +
∑dded_Àngth
 + 2;

108 
PW_CHAP_PASSWORD
:

110 *
buf
++ = 
CHAP_VALUE_LENGTH
 + 2;

111 i‡(
vß_Àngth_±r
 !
NULL
Ë*vß_Àngth_±∏+
CHAP_VALUE_LENGTH
 + 2;

114 
Àngth
 = 
vp
->
lvÆue
;

115 i‡(
Àngth
 > 
CHAP_VALUE_LENGTH
)

117 
Àngth
 = 
CHAP_VALUE_LENGTH
;

119 
	`mem£t
 ((*Ë
∑ssbuf
, '\0', 
CHAP_VALUE_LENGTH
);

120 
	`mem˝y
 ((*Ë
∑ssbuf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

123 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

124 
	`°r˝y
 ((*Ë
md5buf
, 
£¸ë
);

125 
	`mem˝y
 ((*Ë
md5buf
 + 
£¸ëÀn
, (*Ë
auth
->
ve˘‹
,

126 
AUTH_VECTOR_LEN
);

127 
	`rc_md5_ˇlc
 (
buf
, 
md5buf
, 
£¸ëÀn
 + 
AUTH_VECTOR_LEN
);

130 
i
 = 0; i < 
CHAP_VALUE_LENGTH
; i++)

132 *
buf
++ ^
∑ssbuf
[
i
];

134 
tŸÆ_Àngth
 +
CHAP_VALUE_LENGTH
 + 2;

139 
vp
->
ty≥
)

141 
PW_TYPE_STRING
:

142 
Àngth
 = 
vp
->
lvÆue
;

143 *
buf
++ = 
Àngth
 + 2;

144 i‡(
vß_Àngth_±r
 !
NULL
Ë*vß_Àngth_±∏+
Àngth
 + 2;

145 
	`mem˝y
 (
buf
, 
vp
->
°rvÆue
, (
size_t
Ë
Àngth
);

146 
buf
 +
Àngth
;

147 
tŸÆ_Àngth
 +
Àngth
 + 2;

150 
PW_TYPE_INTEGER
:

151 
PW_TYPE_IPADDR
:

152 *
buf
++ =  (
uöt32_t
) + 2;

153 i‡(
vß_Àngth_±r
 !
NULL
Ë*vß_Àngth_±∏+(
uöt32_t
) + 2;

154 
lvÆue
 = 
	`ht⁄l
 (
vp
->lvalue);

155 
	`mem˝y
 (
buf
, (*Ë&
lvÆue
,  (
uöt32_t
));

156 
buf
 + (
uöt32_t
);

157 
tŸÆ_Àngth
 + (
uöt32_t
) + 2;

165 
vp
 = vp->
√xt
;

167  
tŸÆ_Àngth
;

168 
	}
}

177 
	$rc_£nd_£rvî
 (
rc_h™dÀ
 *
rh
, 
SEND_DATA
 *
d©a
, *
msg
)

179 
sockfd
;

180 
sockaddr_ö
 
söloˇl
;

181 
sockaddr_ö
 
söªmŸe
;

182 
timevÆ
 
authtime
;

183 
fd_£t
 
ªadfds
;

184 
AUTH_HDR
 *
auth
, *
ªcv_auth
;

185 
uöt32_t
 
auth_ùaddr
, 
«s_ùaddr
;

186 *
£rvî_«me
;

187 
sockÀn_t
 
ßÀn
;

188 
ªsu…
;

189 
tŸÆ_Àngth
;

190 
Àngth
;

191 
ªåy_max
;

192 
size_t
 
£¸ëÀn
;

193 
£¸ë
[
MAX_SECRET_LENGTH
 + 1];

194 
ve˘‹
[
AUTH_VECTOR_LEN
];

195 
ªcv_buf„r
[
BUFFER_LEN
];

196 
£nd_buf„r
[
BUFFER_LEN
];

197 
ªåõs
;

198 
VALUE_PAIR
 *
vp
;

200 
£rvî_«me
 = 
d©a
->
£rvî
;

201 i‡(
£rvî_«me
 =
NULL
 || server_name[0] == '\0')

202  
ERROR_RC
;

204 i‡((
vp
 = 
	`rc_av∑ú_gë
(
d©a
->
£nd_∑ús
, 
PW_SERVICE_TYPE
, 0)) && \

205 (
vp
->
lvÆue
 =
PW_ADMINISTRATIVE
))

207 
	`°r˝y
(
£¸ë
, 
MGMT_POLL_SECRET
);

208 i‡((
auth_ùaddr
 = 
	`rc_gë_ùaddr
(
£rvî_«me
)) == 0)

209  
ERROR_RC
;

213 if(
d©a
->
£¸ë
 !
NULL
)

215 
	`°∫˝y
(
£¸ë
, 
d©a
->£¸ë, 
MAX_SECRET_LENGTH
);

221 i‡(
	`rc_föd_£rvî
 (
rh
, 
£rvî_«me
, &
auth_ùaddr
, 
£¸ë
) != 0)

223 
	`rc_log
(
LOG_ERR
, "rc_£nd_£rvî: u«bÀÅÿföd sîvî: %s", 
£rvî_«me
);

224  
ERROR_RC
;

229 
	`rc_log
(
LOG_ERR
, "DEBUG:Ñc_£nd_£rvî: cª©ög sockëÅo: %s", 
£rvî_«me
);

231 
sockfd
 = 
	`sockë
 (
AF_INET
, 
SOCK_DGRAM
, 0);

232 i‡(
sockfd
 < 0)

234 
	`mem£t
 (
£¸ë
, '\0',  (secret));

235 
	`rc_log
(
LOG_ERR
, "rc_£nd_£rvî: sockë: %s", 
	`°ªº‹
(
î∫o
));

236  
ERROR_RC
;

239 
	`mem£t
((*)&
söloˇl
, '\0', (sinlocal));

240 
söloˇl
.
sö_Ámûy
 = 
AF_INET
;

241 
söloˇl
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
	`rc_own_böd_ùaddªss
(
rh
));

242 
söloˇl
.
sö_p‹t
 = 
	`ht⁄s
(() 0);

243 i‡(
	`böd
(
sockfd
, 
	`SA
(&
söloˇl
), (sinlocal)) < 0)

245 
	`˛o£
 (
sockfd
);

246 
	`mem£t
 (
£¸ë
, '\0',  (secret));

247 
	`rc_log
(
LOG_ERR
, "rc_£nd_£rvî: böd: %s: %s", 
£rvî_«me
, 
	`°ªº‹
(
î∫o
));

248  
ERROR_RC
;

251 
ªåy_max
 = 
d©a
->
ªåõs
;

252 
ªåõs
 = 0;

254 
	`mem£t
 ((*)&
söªmŸe
, '\0', (sinremote));

255 
söªmŸe
.
sö_Ámûy
 = 
AF_INET
;

256 
söªmŸe
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
auth_ùaddr
);

257 
söªmŸe
.
sö_p‹t
 = 
	`ht⁄s
 ((Ë
d©a
->
svc_p‹t
);

262 i‡(
söloˇl
.
sö_addr
.
s_addr
 =
	`ht⁄l
(
INADDR_ANY
)) {

263 i‡(
	`rc_gë_§ˇddr
(
	`SA
(&
söloˇl
), SA(&
söªmŸe
)) != 0) {

264 
	`˛o£
 (
sockfd
);

265 
	`mem£t
 (
£¸ë
, '\0',  (secret));

266  
ERROR_RC
;

269 
«s_ùaddr
 = 
	`¡ohl
(
söloˇl
.
sö_addr
.
s_addr
);

270 
	`rc_av∑ú_add
(
rh
, &(
d©a
->
£nd_∑ús
), 
PW_NAS_IP_ADDRESS
,

271 &
«s_ùaddr
, 0, 0);

274 
auth
 = (
AUTH_HDR
 *Ë
£nd_buf„r
;

275 
auth
->
code
 = 
d©a
->code;

276 
auth
->
id
 = 
d©a
->
£q_nbr
;

278 i‡(
d©a
->
code
 =
PW_ACCOUNTING_REQUEST
)

280 
tŸÆ_Àngth
 = 
	`rc_∑ck_li°
(
d©a
->
£nd_∑ús
, 
£¸ë
, 
auth
Ë+ 
AUTH_HDR_LEN
;

282 
auth
->
Àngth
 = 
	`ht⁄s
 ((Ë
tŸÆ_Àngth
);

284 
	`mem£t
((*Ë
auth
->
ve˘‹
, 0, 
AUTH_VECTOR_LEN
);

285 
£¸ëÀn
 = 
	`°æí
 (
£¸ë
);

286 
	`mem˝y
 ((*Ë
auth
 + 
tŸÆ_Àngth
, 
£¸ë
, 
£¸ëÀn
);

287 
	`rc_md5_ˇlc
 (
ve˘‹
, (*Ë
auth
, 
tŸÆ_Àngth
 + 
£¸ëÀn
);

288 
	`mem˝y
 ((*Ë
auth
->
ve˘‹
, (*Ëve˘‹, 
AUTH_VECTOR_LEN
);

292 
	`rc_øndom_ve˘‹
 (
ve˘‹
);

293 
	`mem˝y
 ((*Ë
auth
->
ve˘‹
, (*Ëve˘‹, 
AUTH_VECTOR_LEN
);

295 
tŸÆ_Àngth
 = 
	`rc_∑ck_li°
(
d©a
->
£nd_∑ús
, 
£¸ë
, 
auth
Ë+ 
AUTH_HDR_LEN
;

297 
auth
->
Àngth
 = 
	`ht⁄s
 ((Ë
tŸÆ_Àngth
);

300 
	`rc_log
(
LOG_ERR
, "DEBUG:Üocal %s : 0,Ñemote %s : %u\n",

301 
	`öë_¡ﬂ
(
söloˇl
.
sö_addr
),

302 
	`öë_¡ﬂ
(
söªmŸe
.
sö_addr
), 
d©a
->
svc_p‹t
);

306 
	`£ndto
 (
sockfd
, (*Ë
auth
, (Ë
tŸÆ_Àngth
, () 0,

307 
	`SA
(&
söªmŸe
),  (
sockaddr_ö
));

309 
authtime
.
tv_u£c
 = 0L;

310 
authtime
.
tv_£c
 = (Ë
d©a
->
timeout
;

311 
	`FD_ZERO
 (&
ªadfds
);

312 
	`FD_SET
 (
sockfd
, &
ªadfds
);

313 i‡(
	`£À˘
 (
sockfd
 + 1, &
ªadfds
, 
NULL
, NULL, &
authtime
) < 0)

315 i‡(
î∫o
 =
EINTR
)

317 
	`rc_log
(
LOG_ERR
, "rc_£nd_£rvî: sñe˘: %s", 
	`°ªº‹
(
î∫o
));

318 
	`mem£t
 (
£¸ë
, '\0',  (secret));

319 
	`˛o£
 (
sockfd
);

320  
ERROR_RC
;

322 i‡(
	`FD_ISSET
 (
sockfd
, &
ªadfds
))

329 i‡(++
ªåõs
 >
ªåy_max
)

331 
	`rc_log
(
LOG_ERR
,

333 
	`rc_ù_ho°«me
 (
auth_ùaddr
), 
d©a
->
svc_p‹t
, 
	`öë_¡ﬂ
(
söªmŸe
.
sö_addr
));

334 
	`˛o£
 (
sockfd
);

335 
	`mem£t
 (
£¸ë
, '\0',  (secret));

336  
TIMEOUT_RC
;

339 
ßÀn
 = (
söªmŸe
);

340 
Àngth
 = 
	`ªcv‰om
 (
sockfd
, (*Ë
ªcv_buf„r
,

341 (Ë (
ªcv_buf„r
),

342 (Ë0, 
	`SA
(&
söªmŸe
), &
ßÀn
);

344 i‡(
Àngth
 <= 0)

346 
	`rc_log
(
LOG_ERR
, "rc_£nd_£rvî:Ñecv‰om: %s:%d: %s", 
£rvî_«me
,\

347 
d©a
->
svc_p‹t
, 
	`°ªº‹
(
î∫o
));

348 
	`˛o£
 (
sockfd
);

349 
	`mem£t
 (
£¸ë
, '\0',  (secret));

350  
ERROR_RC
;

353 
ªcv_auth
 = (
AUTH_HDR
 *)
ªcv_buf„r
;

355 i‡(
Àngth
 < 
AUTH_HDR_LEN
 ||Üígth < 
	`¡ohs
(
ªcv_auth
->length)) {

356 
	`rc_log
(
LOG_ERR
, "rc_send_server:Ñecvfrom: %s:%d:Ñeply isÅoo short",

357 
£rvî_«me
, 
d©a
->
svc_p‹t
);

358 
	`˛o£
(
sockfd
);

359 
	`mem£t
(
£¸ë
, '\0', (secret));

360  
ERROR_RC
;

363 
ªsu…
 = 
	`rc_check_ª∂y
 (
ªcv_auth
, 
BUFFER_LEN
, 
£¸ë
, 
ve˘‹
, 
d©a
->
£q_nbr
);

365 
Àngth
 = 
	`¡ohs
(
ªcv_auth
->ÀngthË- 
AUTH_HDR_LEN
;

366 i‡(
Àngth
 > 0) {

367 
d©a
->
ª˚ive_∑ús
 = 
	`rc_av∑ú_gí
(
rh
, 
NULL
, 
ªcv_auth
->data,

368 
Àngth
, 0);

370 
d©a
->
ª˚ive_∑ús
 = 
NULL
;

373 
	`˛o£
 (
sockfd
);

374 
	`mem£t
 (
£¸ë
, '\0',  (secret));

376 i‡(
ªsu…
 !
OK_RC
) Ñesult;

378 *
msg
 = '\0';

379 
vp
 = 
d©a
->
ª˚ive_∑ús
;

380 
vp
)

382 i‡((
vp
 = 
	`rc_av∑ú_gë
(vp, 
PW_REPLY_MESSAGE
, 0)))

384 
	`°rˇt
(
msg
, 
vp
->
°rvÆue
);

385 
	`°rˇt
(
msg
, "\n");

386 
vp
 = vp->
√xt
;

390 i‡((
ªcv_auth
->
code
 =
PW_ACCESS_ACCEPT
) ||

391 (
ªcv_auth
->
code
 =
PW_PASSWORD_ACK
) ||

392 (
ªcv_auth
->
code
 =
PW_ACCOUNTING_RESPONSE
))

394 
ªsu…
 = 
OK_RC
;

396 i‡((
ªcv_auth
->
code
 =
PW_ACCESS_REJECT
) ||

397 (
ªcv_auth
->
code
 =
PW_PASSWORD_REJECT
))

399 
ªsu…
 = 
REJECT_RC
;

403 
ªsu…
 = 
BADRESP_RC
;

406  
ªsu…
;

407 
	}
}

419 
	$rc_check_ª∂y
 (
AUTH_HDR
 *
auth
, 
buf„æí
, *
£¸ë
, *
ve˘‹
, 
uöt8_t
 
£q_nbr
)

421 
£¸ëÀn
;

422 
tŸÆÀn
;

423 
ˇlc_dige°
[
AUTH_VECTOR_LEN
];

424 
ª∂y_dige°
[
AUTH_VECTOR_LEN
];

425 #ifde‡
DEBUG


426 
uöt8_t
 *
±r
;

429 
tŸÆÀn
 = 
	`¡ohs
 (
auth
->
Àngth
);

430 
£¸ëÀn
 = ()
	`°æí
 (
£¸ë
);

433 i‡((
tŸÆÀn
 < 20) || (totallen > 4096))

435 
	`rc_log
(
LOG_ERR
, "rc_check_reply:Ñeceived RADIUS serverÑesponse with invalidÜength");

436  
BADRESP_RC
;

440 i‡((
tŸÆÀn
 + 
£¸ëÀn
Ë> 
buf„æí
)

442 
	`rc_log
(
LOG_ERR
, "rc_check_reply:ÇotÉnough buffer spaceÅo verify RADIUS serverÑesponse");

443  
BADRESP_RC
;

447 i‡(
auth
->
id
 !
£q_nbr
)

449 
	`rc_log
(
LOG_ERR
, "rc_check_reply:ÑeceivedÇon-matching id in RADIUS serverÑesponse");

450  
BADRESP_RC
;

454 
	`mem˝y
 ((*Ë
ª∂y_dige°
, (*Ë
auth
->
ve˘‹
, 
AUTH_VECTOR_LEN
);

455 
	`mem˝y
 ((*Ë
auth
->
ve˘‹
, (*Ëve˘‹, 
AUTH_VECTOR_LEN
);

456 
	`mem˝y
 ((*Ë
auth
 + 
tŸÆÀn
, 
£¸ë
, 
£¸ëÀn
);

457 #ifde‡
DEBUG


458 
	`rc_log
(
LOG_ERR
, "Calculating digest on:");

459 
±r
 = (
u_ch¨
 *)
auth
;Öå < ((u_ch¨ *ÔuthË+ 
tŸÆÀn
 + 
£¸ëÀn
;Ötr += 32) {

460 
buf
[65];

461 
i
;

463 
buf
[0] = '\0';

464 
i
 = 0; i < 32; i++) {

465 i‡(
±r
 + 
i
 >((
u_ch¨
 *)
auth
Ë+ 
tŸÆÀn
 + 
£¸ëÀn
)

467 
	`•rötf
(
buf
 + 
i
 * 2, "%.2X", 
±r
[i]);

469 
	`rc_log
(
LOG_ERR
, " %s", 
buf
);

472 
	`rc_md5_ˇlc
 (
ˇlc_dige°
, (*Ë
auth
, 
tŸÆÀn
 + 
£¸ëÀn
);

473 #ifde‡
DEBUG


474 
	`rc_log
(
LOG_ERR
, "Calculated digest is:");

475 
±r
 = (
u_ch¨
 *)
ˇlc_dige°
;Ötr < ((u_char *)calc_digest) + 16;Ötr += 32) {

476 
buf
[65];

477 
i
;

479 
buf
[0] = '\0';

480 
i
 = 0; i < 32; i++) {

481 i‡(
±r
 + 
i
 >((
u_ch¨
 *)
ˇlc_dige°
) + 16)

483 
	`•rötf
(
buf
 + 
i
 * 2, "%.2X", 
±r
[i]);

485 
	`rc_log
(
LOG_ERR
, " %s", 
buf
);

487 
	`rc_log
(
LOG_ERR
, "Reply digest is:");

488 
±r
 = (
u_ch¨
 *)
ª∂y_dige°
;Ötr < ((u_char *)reply_digest) + 16;Ötr += 32) {

489 
buf
[65];

490 
i
;

492 
buf
[0] = '\0';

493 
i
 = 0; i < 32; i++) {

494 i‡(
±r
 + 
i
 >((
u_ch¨
 *)
ª∂y_dige°
) + 16)

496 
	`•rötf
(
buf
 + 
i
 * 2, "%.2X", 
±r
[i]);

498 
	`rc_log
(
LOG_ERR
, " %s", 
buf
);

502 i‡(
	`memcmp
 ((*Ë
ª∂y_dige°
, (*Ë
ˇlc_dige°
,

503 
AUTH_VECTOR_LEN
) != 0)

505 #ifde‡
RADIUS_116


514 i‡(
auth
->
code
 =
PW_ACCOUNTING_RESPONSE
)

515  
OK_RC
;

517 
	`rc_log
(
LOG_ERR
, "rc_check_reply:Ñeceived invalidÑeply digest from RADIUS server");

518  
BADRESP_RC
;

521  
OK_RC
;

523 
	}
}

534 
	$rc_øndom_ve˘‹
 (*
ve˘‹
)

536 
øndno
;

537 
i
;

538 #i‡
	`deföed
(
HAVE_DEV_URANDOM
)

539 
fd
;

545 i‡((
fd
 = 
	`›í
(
_PATH_DEV_URANDOM
, 
O_RDONLY
)) >= 0)

547 *
pos
;

548 
ªadcou¡
;

550 
i
 = 
AUTH_VECTOR_LEN
;

551 
pos
 = 
ve˘‹
;

552 
i
 > 0)

554 
ªadcou¡
 = 
	`ªad
(
fd
, (*)
pos
, 
i
);

555 
pos
 +
ªadcou¡
;

556 
i
 -
ªadcou¡
;

559 
	`˛o£
(
fd
);

563 
	`§™d
 (()
	`time
 (0Ë+ 
	`gëµid
(Ë+ 
	`gëpid
());

564 
i
 = 0; i < 
AUTH_VECTOR_LEN
;)

566 
øndno
 = 
	`ønd
 ();

567 
	`mem˝y
 ((*Ë
ve˘‹
, (*Ë&
øndno
,  ());

568 
ve˘‹
 +=  ();

569 
i
 +=  ();

573 
	}
}

	@radius/src/util.c

19 
	~<sys/time.h
>

21 
	~<r_c⁄fig.h
>

22 
	~<ö˛udes.h
>

23 
	~<‰ìødius-˛õ¡.h
>

25 
	#RC_BUFSIZ
 1024

	)

34 c⁄° * 
	gm⁄ths
[] =

40 
	$rc_°r2tm
 (*
vÆ°r
, 
tm
 *tm)

42 
i
;

45 
i
 = 0; i < 12; i++)

47 i‡(
	`°∫cmp
 (
m⁄ths
[
i
], 
vÆ°r
, 3) == 0)

49 
tm
->
tm_m⁄
 = 
i
;

50 
i
 = 13;

55 
tm
->
tm_mday
 = 
	`©oi
 (&
vÆ°r
[4]);

58 
tm
->
tm_yór
 = 
	`©oi
 (&
vÆ°r
[7]) - 1900;

59 
	}
}

68 *
	$rc_gëi‚ame
(
rc_h™dÀ
 *
rh
, *
ây
)

70 #i‡
	`deföed
(
BSD4_4
Ë|| deföed(
löux
)

71 
fd
;

73 i‡((
fd
 = 
	`›í
(
ây
, 
O_RDWR
|
O_NDELAY
)) < 0) {

74 
	`rc_log
(
LOG_ERR
, "rc_gëi‚ame: c™'à›í %s: %s", 
ây
, 
	`°ªº‹
(
î∫o
));

75  
NULL
;

79 #ifde‡
BSD4_4


80 
	`°r˝y
(
rh
->
i‚ame
,
	`ây«me
(
fd
));

81 i‡(
	`°æí
(
rh
->
i‚ame
) < 1) {

82 
	`rc_log
(
LOG_ERR
, "rc_gëi‚ame: c™'àgëáâached i¡îÁ˚ o‡%s: %s", 
ây
, 
	`°ªº‹
(
î∫o
));

83 
	`˛o£
(
fd
);

84  
NULL
;

86 #ñi‡
löux


87 i‡(
	`io˘l
(
fd
, 
SIOCGIFNAME
, 
rh
->
i‚ame
) < 0) {

88 
	`rc_log
(
LOG_ERR
, "rc_gëi‚ame: c™'àio˘»%s: %s", 
ây
, 
	`°ªº‹
(
î∫o
));

89 
	`˛o£
(
fd
);

90  
NULL
;

93  
NULL
;

96 #i‡
	`deföed
(
BSD4_4
Ë|| deföed(
löux
)

97 
	`˛o£
(
fd
);

98  
rh
->
i‚ame
;

100 
	}
}

108 #i‚de‡
_MSC_VER


109 *
	$rc_gë°r
 (
rc_h™dÀ
 *
rh
, *
¥om±
, 
do_echo
)

111 
ö
, 
out
;

112 *
p
;

113 
ãrmios
 
ãrm_ﬁd
, 
ãrm_√w
;

114 
is_ãrm
, 
Êags
, 
ﬁd_Êags
;

115 
c
;

116 
Êushed
 = 0;

117 
sig£t_t
 
√w£t
;

118 
sig£t_t
 
ﬁd£t
;

120 
ö
 = 
	`fûío
(
°dö
);

121 
out
 = 
	`fûío
(
°dout
);

123 (Ë
	`sigem±y£t
 (&
√w£t
);

124 (Ë
	`sigadd£t
 (&
√w£t
, 
SIGINT
);

125 (Ë
	`sigadd£t
 (&
√w£t
, 
SIGTSTP
);

126 (Ë
	`sigadd£t
 (&
√w£t
, 
SIGQUIT
);

128 (Ë
	`sig¥ocmask
 (
SIG_BLOCK
, &
√w£t
, &
ﬁd£t
);

130 i‡((
is_ãrm
 = 
	`ißây
(
ö
)))

133 (Ë
	`tcgë©å
 (
ö
, &
ãrm_ﬁd
);

134 
ãrm_√w
 = 
ãrm_ﬁd
;

135 i‡(
do_echo
)

136 
ãrm_√w
.
c_lÊag
 |
ECHO
;

138 
ãrm_√w
.
c_lÊag
 &~
ECHO
;

140 i‡(
	`tc£èâr
 (
ö
, 
TCSAFLUSH
, &
ãrm_√w
) == 0)

141 
Êushed
 = 1;

146 
is_ãrm
 = 0;

147 i‡((
Êags
 = 
	`f˙é
(
ö
, 
F_GETFL
, 0)) >= 0) {

148 
ﬁd_Êags
 = 
Êags
;

149 
Êags
 |
O_NONBLOCK
;

151 
	`f˙é
(
ö
, 
F_SETFL
, 
Êags
);

153 
	`ªad
(
ö
, &
c
, 1) > 0)

156 
	`f˙é
(
ö
, 
F_SETFL
, 
ﬁd_Êags
);

158 
Êushed
 = 1;

162 
	`wrôe
(
out
, 
¥om±
, 
	`°æí
(prompt));

167 
p
 = 
rh
->
buf
;

170 i‡(
	`ªad
(
ö
, &
c
, 1) <= 0)

171  
NULL
;

173 i‡(!
Êushed
 && ((
c
 == '\0') || (c == '\r') || (c == '\n'))) {

174 
Êushed
 = 1;

178 i‡((
c
 == '\r') || (c == '\n'))

181 
Êushed
 = 1;

183 i‡(
p
 < 
rh
->
buf
 + 
GETSTR_LENGTH
)

185 i‡(
do_echo
 && !
is_ãrm
)

186 
	`wrôe
(
out
, &
c
, 1);

187 *
p
++ = 
c
;

191 *
p
 = '\0';

193 i‡(!
do_echo
 || !
is_ãrm
Ë
	`wrôe
(
out
, "\r\n", 2);

195 i‡(
is_ãrm
)

196 
	`tc£èâr
 (
ö
, 
TCSAFLUSH
, &
ãrm_ﬁd
);

198 i‡((
Êags
 = 
	`f˙é
(
ö
, 
F_GETFL
, 0)) >= 0) {

199 
ﬁd_Êags
 = 
Êags
;

200 
Êags
 |
O_NONBLOCK
;

202 
	`f˙é
(
ö
, 
F_SETFL
, 
Êags
);

204 
	`ªad
(
ö
, &
c
, 1) > 0)

207 
	`f˙é
(
ö
, 
F_SETFL
, 
ﬁd_Êags
);

211 (Ë
	`sig¥ocmask
 (
SIG_SETMASK
, &
ﬁd£t
, 
NULL
);

213  
rh
->
buf
;

214 
	}
}

216 
	$rc_mdñay
(
m£cs
)

218 
timevÆ
 
tv
;

220 
tv
.
tv_£c
 = (Ë
m£cs
 / 1000;

221 
tv
.
tv_u£c
 = (
m£cs
 % 1000) * 1000;

223 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tv
);

224 
	}
}

236 
	$rc_mksid
 (
rc_h™dÀ
 *
rh
)

238 
	`•rötf
 (
rh
->
buf1
, "%08lX%04X", (Ë
	`time
 (
NULL
), (Ë
	`gëpid
 ());

239  
rh
->
buf1
;

240 
	}
}

249 
rc_h™dÀ
 *

250 
	$rc_√w
()

252 
rc_h™dÀ
 *
rh
;

254 
rh
 = 
	`mÆloc
((*rh));

255 i‡(
rh
 =
NULL
) {

256 
	`rc_log
(
LOG_CRIT
, "rc_new: out of memory");

257  
NULL
;

259 
	`mem£t
(
rh
, 0, (*rh));

260  
rh
;

261 
	}
}

271 
	$rc_de°roy
(
rc_h™dÀ
 *
rh
)

274 
	`rc_m≠2id_‰ì
(
rh
);

275 
	`rc_di˘_‰ì
(
rh
);

276 
	`rc_c⁄fig_‰ì
(
rh
);

277 i‡(
rh
->
this_ho°_böd_ùaddr
 !
NULL
)

278 
	`‰ì
(
rh
->
this_ho°_böd_ùaddr
);

279 i‡(
rh
->
µbuf
 !
NULL
)

280 
	`‰ì
(
rh
->
µbuf
);

281 
	`‰ì
(
rh
);

282 
	}
}

292 
	$rc_fgë 
(
FILE
 *
Â
, 
size_t
 *
Àn
)

294 *
buf
 = 
NULL
;

295 
size_t
 
bufsiz
 = 0;

296 *
±r
;

298 i‡(
buf
 =
NULL
) {

299 
bufsiz
 = 
RC_BUFSIZ
;

300 i‡((
buf
 = 
	`mÆloc
(
bufsiz
)Ë=
NULL
)

301  
NULL
;

304 i‡(
	`fgës
(
buf
, ()
bufsiz
, 
Â
Ë=
NULL
)

305  
NULL
;

306 *
Àn
 = 0;

308 (
±r
 = 
	`°rchr
(&
buf
[*
Àn
], '\n')Ë=
NULL
) {

309 
size_t
 
nbufsiz
 = 
bufsiz
 + 
RC_BUFSIZ
;

310 *
nbuf
 = 
	`ªÆloc
(
buf
, 
nbufsiz
);

312 i‡(
nbuf
 =
NULL
) {

313 
€ºno
 = 
î∫o
;

314 
	`‰ì
(
buf
);

315 
î∫o
 = 
€ºno
;

316 
buf
 = 
NULL
;

317  
NULL
;

319 
buf
 = 
nbuf
;

321 *
Àn
 = 
bufsiz
;

322 i‡(
	`fgës
(&
buf
[
bufsiz
], 
RC_BUFSIZ
, 
Â
Ë=
NULL
)

323  
buf
;

325 
bufsiz
 = 
nbufsiz
;

328 *
Àn
 = (
±r
 - 
buf
) + 1;

329  
buf
;

330 
	}
}

341 
	$rc_gë˘ime
()

343 
timevÆ
 
timev
;

345 i‡(
	`gëtimeofday
(&
timev
, 
NULL
) == -1)

348  
timev
.
tv_£c
 + ((Èimev.
tv_u£c
) / 1000000.0;

349 
	}
}

	@src/core/app.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

7 
≠p_moduÀ
 
≠p_p‹èl
;

8 
≠p_moduÀ
 
≠p_ødius
;

9 
≠p_moduÀ
 
≠p_bwli°
;

10 
≠p_moduÀ
 
≠p_dow∆ök
;

11 
≠p_moduÀ
 
≠p_fw
;

12 
≠p_moduÀ
 
≠p_˘æ
;

13 
≠p_moduÀ
 
≠p_bridge
;

14 
≠p_moduÀ
 
≠p_√t
;

15 
≠p_moduÀ
 
≠p_˛õ¡
;

17 
≠p_moduÀ
 *
	g≠ps
[] = {

18 [
ty_fw
] = &
≠p_fw
,

19 [
ty_p‹èl
] = &
≠p_p‹èl
,

20 [
ty_ødius
] = &
≠p_ødius
,

21 [
ty_bwli°
] = &
≠p_bwli°
,

22 [
ty_dow∆ök
] = &
≠p_dow∆ök
,

23 [
ty_bridge
] = &
≠p_bridge
,

24 [
ty_˘æ
] = &
≠p_˘æ
,

25 [
ty_√t
] = &
≠p_√t
,

26 [
ty_˛õ¡
] = &
≠p_˛õ¡
,

27 
	gNULL


30 
ems_≠p
 *
	$ems_≠p_√w
()

32 
ems_≠p
 *
≠p
 = 
NULL
;

35 
≠p
 = (
ems_≠p
 *)
	`ems_mÆloc
((ems_app));

36 i‡(
≠p
) {

37 
	`mem£t
(
≠p
, 0, (
ems_≠p
));

39 
≠p
->
obj
 = 
NULL
;

40 
	`°r_öô
(&
≠p
->
nick
);

41 
	`°r_öô
(&
≠p
->
r§v
);

42 
	`ems_queue_öô
(&
≠p
->
íåy
);

45  
≠p
;

46 
	}
}

48 
ems_void
 
	$ems_≠p_de°roy
(
ems_≠p
 *
≠p
)

50 i‡(
≠p
) {

51 i‡(
≠p
->
obj
) {

52 
	`js⁄_obje˘_put
(
≠p
->
obj
);

53 
≠p
->
obj
 = 
NULL
;

55 
	`°r_unöô
(&
≠p
->
nick
);

56 
	`°r_unöô
(&
≠p
->
r§v
);

57 
	`ems_‰ì
(
≠p
);

59 
	}
}

61 
ems_öt
 
	$ems_≠p_©èch
(
ems_≠p
 *
≠p
)

63 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

64 
	`ems_as£π
(
≠p
);

65 
	`ems_queue_ö£π_èû
(&
c‹e
->
≠p_íåy
, &
≠p
->
íåy
);

66  
EMS_OK
;

67 
	}
}

69 
ems_öt
 
	$ems_≠p_dëach
(
ems_≠p
 *
≠p
)

71 
	`ems_as£π
(
≠p
);

72 
	`ems_queue_ªmove
(&
≠p
->
íåy
);

73  
EMS_OK
;

74 
	}
}

76 
ems_≠p
 *
	$ems_≠p_föd
(
ems_cch¨
 *
key
)

78 
ems_queue
 *
p
;

79 
ems_≠p
 *
≠p
;

80 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

82 
	`ems_as£π
(
key
 !
NULL
);

83 i‡(!
key
)

84  
NULL
;

86 
	`ems_queue_f‹óch
(&
c‹e
->
≠p_íåy
, 
p
) {

87 
≠p
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_≠p
, 
íåy
);

89 i‡(!
	`°rcmp
(
key
, 
	`°r_ãxt
(&
≠p
->
nick
)))

91  
≠p
;

95  
NULL
;

96 
	}
}

99 
≠p_moduÀ
 *
	$≠p_moduÀ_lﬂd
(
ems_cch¨
 *
key
)

101 
ems_öt
 
i
;

102 
≠p_moduÀ
 *
mod
 = 
NULL
;

104 
	`ems_as£π
(
key
 !
NULL
);

105 i‡(!
key
)

106  
NULL
;

108 
i
 = 0; ; i++) {

109 
mod
 = 
≠ps
[
i
];

110 i‡(!
mod
)

113 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
mod
->
desc
), 
key
))

114  
mod
;

117  
NULL
;

118 
	}
}

120 
≠p_moduÀ
 *
	$≠p_moduÀ_föd
(
ems_uöt
 
id
)

122 
ems_≠p_ty≥
 
ty
 = (ems_≠p_ty≥)
id
;

124 
≠p_moduÀ
 *
mod
 = 
NULL
;

125 
ems_öt
 
i
;

127 
i
 = 0; ; i++) {

128 
mod
 = 
≠ps
[
i
];

129 i‡(!
mod
)

132 i‡(
mod
->
ty
 =
id
)

133  
mod
;

136 i‡((
ty
 > 
ty_mö
Ë&& (ty < 
ty_max
)) {

137  
≠ps
[
ty
];

141  
NULL
;

142 
	}
}

144 
ems_öt
 
	$ems_≠p_moduÀs_öô
()

146 
ems_öt
 
i
, 
πn
;

147 
≠p_moduÀ
 *
mod
 = 
NULL
;

149 
πn
 = 
EMS_OK
;

150 
i
 = 0; ; i++) {

151 
mod
 = 
≠ps
[
i
];

152 i‡(!
mod
)

155 
	`ems_as£π
(
mod
->
öô
);

156 i‡(
mod
->
öô
) {

157 
	`ems_l_åa˚
("moduÀ:(%d, %sËINIT", 
mod
->
ty
, 
	`°r_ãxt
(&mod->
desc
));

158 
πn
 = 
mod
->
	`öô
(mod);

159 i‡(
πn
 !
EMS_OK
)

164 
	`cfg_wrôe
(
	`emscfg
());

166  
πn
;

167 
	}
}

169 
ems_öt
 
	$ems_≠p_moduÀs_unöô
()

171 
ems_öt
 
i
, 
πn
;

172 
≠p_moduÀ
 *
mod
 = 
NULL
;

174 
πn
 = 
EMS_OK
;

175 
i
 = 0; ; i++) {

176 
mod
 = 
≠ps
[
i
];

177 i‡(!
mod
)

180 
	`ems_as£π
(
mod
->
unöô
);

181 i‡(
mod
->
unöô
) {

182 
	`ems_l_åa˚
("moduÀ:(%d, %sËUNINIT", 
mod
->
ty
, 
	`°r_ãxt
(&mod->
desc
));

183 
πn
 = 
mod
->
	`unöô
(mod);

184 i‡(
πn
 !
EMS_OK
)

189  
πn
;

190 
	}
}

192 
ems_öt
 
	$ems_≠p_moduÀs_run
(
ems_öt
 
run
)

194 
ems_öt
 
i
, 
πn
;

195 
≠p_moduÀ
 *
mod
 = 
NULL
;

197 
πn
 = 
EMS_OK
;

198 
i
 = 0; ; i++) {

199 
mod
 = 
≠ps
[
i
];

200 i‡(!
mod
)

203 
	`ems_as£π
(
mod
->
run
);

204 i‡(
mod
->
run
) {

205 
πn
 = 
mod
->
	`run
(mod, 
run
);

206 i‡(
πn
 !
EMS_OK
)

211  
πn
;

212 
	}
}

214 
ems_öt
 
	$ems_≠∂i°_¥o˚ss_evt
(
ems_uöt
 
evt
, 
js⁄_obje˘
 *
roŸ
)

216 
ems_öt
 
i
, 
πn
;

217 
≠p_moduÀ
 *
mod
 = 
NULL
;

219 
πn
 = 
EMS_OK
;

220 
i
 = 0; ; i++) {

221 
mod
 = 
≠ps
[
i
];

222 i‡(!
mod
)

225 i‡(
mod
->
¥o˚ss
) {

226 
πn
 = 
mod
->
	`¥o˚ss
(mod, 0, mod->
ty
, 
evt
, 
roŸ
);

227 i‡(
πn
 !
EMS_OK
)

232  
πn
;

233 
	}
}

236 
ems_öt
 
	$ems_≠∂i°_¥o˚ss
(
js⁄_obje˘
 *
roŸ
)

238 
ems_öt
 
i
, 
πn
;

239 
≠p_moduÀ
 *
mod
 = 
NULL
;

240 
js⁄_obje˘
 *
obj
 = 
NULL
;

242 
πn
 = 
EMS_OK
;

243 
i
 = 0; ; i++) {

244 
mod
 = 
≠ps
[
i
];

245 i‡(!
mod
)

248 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
	`°r_ãxt
(&
mod
->
desc
));

250 i‡(
obj
 && 
mod
->
¥o˚ss_ruÀ
) {

251 
πn
 = 
mod
->
	`¥o˚ss_ruÀ
(mod, 
obj
);

252 i‡(
πn
 !
EMS_OK
)

257 
	`cfg_wrôe
(
	`emscfg
());

259  
πn
;

260 
	}
}

262 #ifde‡
DEBUG


264 
ems_cch¨
 *
	$ems_≠p_desc
(
ems_uöt
 
ty
)

266 
≠p_moduÀ
 *
mod
;

268 
mod
 = 
	`≠p_moduÀ_föd
(
ty
);

269 i‡(
mod
)

270  
	`°r_ãxt
(&
mod
->
desc
);

272 
	`ems_as£π
(0 && "never be here");

274 
	}
}

276 
ems_cch¨
 *
	$ems_evt_desc
(
ems_uöt
 
evt
)

278 
evt
) {

279 
EMS_APP_CMD_RADIUS_AUTH
:

281 
EMS_APP_CMD_RADIUS_AUTH_RSP
:

283 
EMS_APP_CMD_RADIUS_LOGOUT
:

285 
EMS_APP_CMD_PORTAL_LOGOUT
:

287 
EMS_APP_EVT_FW_RELOAD
:

289 
EMS_APP_RULES_UPDATE
:

291 
EMS_APP_SERVER_RULES_UPDATE
:

293 
EMS_EVT_DOWNLINK_NUM
:

295 
EMS_EVT_DOWNLINK_IN
:

297 
EMS_APP_STOP
:

299 
EMS_APP_START
:

301 
EMS_APP_PORTAL_ADDRESS
:

303 
EMS_APP_FW_ADDRESS_ADD
:

305 
EMS_APP_FW_ADDRESS_DEL
:

307 
EMS_APP_FW_RADIUS_DEVICE_FREE
:

309 
EMS_APP_CHECK_SUBDOMAIN
:

311 
EMS_APP_CHECK_PARAM_APPLE_COM
:

313 
EMS_APP_DNS_INTERCEPT_START
:

315 
EMS_APP_DNS_INTERCEPT_STOP
:

317 
EMS_APP_EMS_STATUS
:

319 
EMS_APP_FW_CLEAR
:

321 
EMS_APP_SERVER_BWLIST
:

328 
	}
}

332 
ems_öt
 
	$ems_≠p_¥o˚ss
(
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

334 
≠p_moduÀ
 *
mod
;

336 
	`ems_l_åa˚
("\033[01;33m[PROCESS EVT (%s --> %s: %s)]\033[00márgs: %s",

337 
	`ems_≠p_desc
(
s
),

338 
	`ems_≠p_desc
(
d
),

339 
	`ems_evt_desc
(
evt
),

340 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

342 
mod
 = 
	`≠p_moduÀ_föd
(
d
);

344 i‡(
mod
 && mod->
¥o˚ss
)

345  
mod
->
	`¥o˚ss
(mod, 
s
, 
d
, 
evt
, 
roŸ
);

347  
EMS_OK
;

348 
	}
}

350 
ems_öt
 
	$ems_≠p_run
(
ems_uöt
 
id
)

352 
≠p_moduÀ
 *
mod
;

354 
mod
 = 
	`≠p_moduÀ_föd
(
id
);

356 i‡(
mod
 && 
	`ems_Êag_like
(mod->
Êg
, 
FLG_RUN
))

357  
EMS_YES
;

359  
EMS_NO
;

360 
	}
}

362 
ems_cch¨
 *
	$ems_≠p_ødius_u£∫ame
(
ems_cch¨
 *
ù
)

364 
ems_cch¨
 *
	`ødius_u£∫ame
(
≠p_moduÀ
 *
mod
,Éms_cch¨ *
ù
);

365  
	`ødius_u£∫ame
(
	`≠p_moduÀ_föd
(
ty_ødius
), 
ù
);

366 
	}
}

368 
ems_öt
 
	$ems_≠p_ødius_u£r_numbî
()

370 
ems_öt
 
	`ødius_⁄löe_u£r_numbî
(
≠p_moduÀ
 *
mod
);

371  
	`ødius_⁄löe_u£r_numbî
(
	`≠p_moduÀ_föd
(
ty_ødius
));

372 
	}
}

374 
js⁄_obje˘
 *
	$ems_≠p_ødius_u£æi°
()

376 
js⁄_obje˘
 *
	`ødius_u£æi°
(
≠p_moduÀ
 *
mod
);

377  
	`ødius_u£æi°
(
	`≠p_moduÀ_föd
(
ty_ødius
));

378 
	}
}

	@src/core/app.h

2 #i‚de‡
EMS_APP_HEADER_ALL


3 
	#EMS_APP_HEADER_ALL


	)

7 
_≠p_moduÀ_s
 
	t≠p_moduÀ
;

8 
_ems_≠p_s
 
	tems_≠p
;

11 
	s_ems_≠p_s


13 
ems_uöt
 
	mÊg
;

14 
ems_uöt
 
	mty
;

15 
ems_°r
 
	mnick
;

16 
ems_°r
 
	mr§v
;

17 
js⁄_obje˘
 *
	mobj
;

19 
ems_queue
 
	míåy
;

22 
	$ems_öt
 (*
	tfunc_£nd_msg
)(
	tems_uöt
 
	ts
,Éms_uöà
	td
,Éms_uöà
	tevt
, 
	tjs⁄_obje˘
 *
	troŸ
);

25 
	s_≠p_moduÀ_s
 {

26 
ems_uöt
 
ty
;

27 
ems_°r
 
desc
;

28 
ems_void
 *
˘x
;

29 
ems_uöt
 
Êg
;

31 
	`ems_öt
 (*
öô
)(
≠p_moduÀ
 *
mod
);

32 
	`ems_öt
 (*
unöô
)(
≠p_moduÀ
 *
mod
);

34 
	`ems_öt
 (*
¥o˚ss
)(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s_mod
,Éms_uöà
d_mod
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
);

35 
	`ems_öt
 (*
run
)(
≠p_moduÀ
 *
mod
, 
ems_öt
Ñun);

36 
	`ems_öt
 (*
¥o˚ss_ruÀ
)(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
ruÀ
);

37 
	`ems_öt
 (*
vîsi⁄_m©ch
)(
≠p_moduÀ
 *
mod
);

38 
	`ems_öt
 (*
ö°Æl
)(
≠p_moduÀ
 *
mod
);

42 
ems_≠p
 *
	`ems_≠p_√w
();

43 
ems_void
 
	`ems_≠p_de°roy
(
ems_≠p
 *
≠p
);

44 
ems_≠p
 *
	`ems_≠p_föd
(
ems_cch¨
 *
key
);

46 
ems_öt
 
	`ems_≠p_moduÀs_öô
();

47 
ems_öt
 
	`ems_≠p_moduÀs_unöô
();

48 
ems_öt
 
	`ems_≠p_moduÀs_run
”ms_öà
run
);

49 
ems_öt
 
	`ems_≠∂i°_¥o˚ss
(
js⁄_obje˘
 *
roŸ
);

50 
ems_öt
 
	`ems_≠∂i°_¥o˚ss_evt
(
ems_uöt
 
evt
, 
js⁄_obje˘
 *
roŸ
);

52 
ems_öt
 
	`ems_≠p_©èch
(
ems_≠p
 *
≠p
);

53 
ems_öt
 
	`ems_≠p_dëach
(
ems_≠p
 *
≠p
);

54 
ems_öt
 
	`ems_≠p_¥o˚ss
(
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
);

56 
ems_cch¨
 *
	`ems_≠p_ødius_u£∫ame
”ms_cch¨ *
ù
);

57 
ems_öt
 
	`ems_≠p_ødius_u£r_numbî
();

58 
js⁄_obje˘
 *
	`ems_≠p_ødius_u£æi°
();

60 
ems_öt
 
	`ems_≠p_run
(
ems_uöt
 
id
);

63 
	#EMS_APP_CMD_RADIUS_AUTH
 0x0001

	)

64 
	#EMS_APP_CMD_RADIUS_AUTH_RSP
 0x8001

	)

65 
	#EMS_APP_CMD_RADIUS_LOGOUT
 0x0002

	)

66 
	#EMS_APP_CMD_PORTAL_LOGOUT
 0x0003

	)

68 
	#EMS_APP_EVT_FW_RELOAD
 0x0004

	)

69 
	#EMS_APP_RULES_UPDATE
 0x0005

	)

70 
	#EMS_APP_SERVER_RULES_UPDATE
 0x0006

	)

71 
	#EMS_APP_EVT_STATUS
 0x0007

	)

77 
	#EMS_EVT_DOWNLINK_IN
 0x0008

	)

78 
	#EMS_EVT_DOWNLINK_NUM
 0x0009

	)

80 
	#EMS_APP_RADIUS_STOP
 0x000a

	)

81 
	#EMS_APP_RADIUS_START
 0x000b

	)

82 
	#EMS_APP_PORTAL_ADDRESS
 0x000c

	)

84 
	#EMS_APP_SERVER_BWLIST
 0x000d

	)

86 
	#EMS_APP_FW_ADDRESS_ADD
 0x000e

	)

87 
	#EMS_APP_FW_ADDRESS_DEL
 0x000f

	)

88 
	#EMS_APP_FW_RADIUS_DEVICE_FREE
 0x0010

	)

89 
	#EMS_APP_CHECK_SUBDOMAIN
 0x0011

	)

90 
	#EMS_APP_CHECK_PARAM_APPLE_COM
 0x0012

	)

92 
	#EMS_APP_START
 
EMS_APP_RADIUS_START


	)

93 
	#EMS_APP_STOP
 
EMS_APP_RADIUS_STOP


	)

95 
	#EMS_APP_DNS_INTERCEPT_START
 0x0013

	)

96 
	#EMS_APP_DNS_INTERCEPT_STOP
 0x0014

	)

97 
	#EMS_APP_EMS_STATUS
 0x0015

	)

98 
	#EMS_APP_FW_CLEAR
 0x0016

	)

	@src/core/app_bridge.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_fw.h
"

6 
	~"ems_dns.h
"

7 
	~"ems_bridge.h
"

9 
ems_öt
 
	$br_öô
(
≠p_moduÀ
 *
mod
)

11 
ems_bridge
 *
br
 = 
NULL
;

13 
br
 = (
ems_bridge
 *)
	`ems_mÆloc
((ems_bridge));

15 i‡(
br
) {

16 
	`mem£t
(
br
, 0, (
ems_bridge
));

18 
br
->
°
 = 
°_°›≥d
;

19 
br
->
£ss
 = 
NULL
;

21 
mod
->
˘x
 = (
ems_void
 *)
br
;

24  
EMS_OK
;

25 
	}
}

27 
ems_öt
 
	$br_unöô
(
≠p_moduÀ
 *
mod
)

29 
ems_bridge
 *
br
 = (ems_bridgê*)
mod
->
˘x
;

31 i‡(!
br
)

32  
EMS_OK
;

34 
mod
->
˘x
 = 
NULL
;

36 
	`ems_as£π
(
br
->
°
 =
°_°›≥d
);

37 
	`ems_as£π
(
br
->
£ss
 =
NULL
);

39 i‡(
br
->
°
 !
°_°›≥d
)

40 
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

42 i‡(
br
->
£ss
) {

43 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
br
->
£ss
);

44 
br
->
£ss
 = 
NULL
;

47 
br
->
°
 = 
°_max
;

48 
	`ems_‰ì
(
br
);

50  
EMS_OK
;

51 
	}
}

53 
ems_öt
 
	$br_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

55 
ems_bridge
 *
br
 = (ems_bridgê*)
mod
->
˘x
;

57 i‡(
run
) {

58 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

59  
EMS_OK
;

61 
	`ems_l_åa˚
("bridge starting...");

62 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

63 
	`ems_Êag_un£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
);

64  
	`br_ch™ge_°©us
(
br
, 
°_°¨t
);

66 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

67  
EMS_OK
;

69 
	`ems_l_åa˚
("bridge stopping...");

70 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

71  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

74  
EMS_OK
;

75 
	}
}

77 
ems_öt


78 
	$br_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

80 
	`ems_l_åa˚
("brÉvt: 0x%x, from: 0x%x,árgs: %s",

81 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

83 
evt
) {

84 
EMS_APP_START
:

85  
	`br_run
(
mod
, 
EMS_YES
);

87 
EMS_APP_STOP
:

88  
	`br_run
(
mod
, 
EMS_NO
);

94  
EMS_OK
;

95 
	}
}

97 
≠p_moduÀ
 
	g≠p_bridge
 =

99 .
ty
 = 
ty_bridge
,

100 .
	gdesc
 = 
ems_°rög
("bridge"),

101 .
	g˘x
 = 
NULL
,

102 .
	gÊg
 = 0,

104 .
	göô
 = 
br_öô
,

105 .
	gunöô
 = 
br_unöô
,

106 .
	grun
 = 
br_run
,

107 .
	g¥o˚ss
 = 
br_¥o˚ss
,

108 .
	g¥o˚ss_ruÀ
 = 
NULL
,

109 .
	gvîsi⁄_m©ch
 = 
NULL
,

110 .
	gö°Æl
 = 
NULL


	@src/core/app_bwlist.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_fw.h
"

6 
	~"ems_dns.h
"

8 
ems_öt
 
	$bwli°_öô
(
≠p_moduÀ
 *
mod
)

10 
ems_≠p
 *
≠p
 = 
NULL
;

11 
	`ems_as£π
(
mod
);

13 
≠p
 = 
	`ems_≠p_√w
();

14 i‡(!
≠p
)

15  
EMS_ERR
;

17 
≠p
->
ty
 = 
mod
->ty;

18 
	`°r_£t
(&
≠p
->
nick
, 
	`°r_ãxt
(&
mod
->
desc
));

19 
≠p
->
Êg
 = 0;

21 
	`ems_≠p_©èch
(
≠p
);

23 
mod
->
˘x
 = (
ems_void
 *)
≠p
;

25  
EMS_OK
;

26 
	}
}

28 
ems_öt
 
	$bwli°_unöô
(
≠p_moduÀ
 *
mod
)

30 
mod
->
˘x
 = 
NULL
;

31  
EMS_OK
;

32 
	}
}

34 
ems_öt
 
	$bwli°_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

36 
ems_≠p
 *
≠p
 = (ems_≠∞*)
mod
->
˘x
;

37 
	`ems_as£π
(
mod
 && 
≠p
);

39 i‡(
run
) {

40 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

41  
EMS_OK
;

43 
	`ems_l_åa˚
("bwlistÑunning here");

44 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

47 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

48  
EMS_OK
;

50 
	`ems_l_åa˚
("bwlist stopped");

52 i‡(
≠p
->
obj
) {

53 
	`js⁄_obje˘_put
(
≠p
->
obj
);

54 
≠p
->
obj
 = 
NULL
;

57 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

60  
EMS_OK
;

61 
	}
}

63 
ems_öt
 
	$bwli°_¥o˚ss_ruÀ
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

65 
	`ems_l_åa˚
("doÇot useÅhisány more, obsoluted");

66  
EMS_OK
;

67 
	}
}

70 
ems_öt


71 
	$bwli°_£rvî_ruÀs_upd©e
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

73 
ems_≠p
 *
≠p
 = (ems_≠∞*)
mod
->
˘x
;

75 i‡(!
roŸ
)

76  
EMS_OK
;

78 i‡(
≠p
->
obj
) {

79 
	`js⁄_obje˘_put
(
≠p
->
obj
);

80 
≠p
->
obj
 = 
NULL
;

83 
≠p
->
obj
 = 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

85 
	`ems_as£π
(
≠p
->
obj
 && "never show upÅhisÜine");

87  
	`ems_≠p_¥o˚ss
(
ty_bwli°
, 
ty_fw
, 
EMS_APP_SERVER_RULES_UPDATE
, 
NULL
);

88 
	}
}

90 
ems_öt


91 
	$bwli°_fw_ªlﬂd
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
ªq
)

93  
EMS_OK
;

94 
	}
}

96 
ems_öt


97 
	$bwli°_£rvî_ruÀs
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

99 
js⁄_obje˘
 *
jobj
, *
¨y
;

100 
ems_≠p
 *
≠p
 = (ems_≠∞*)
mod
->
˘x
;

102 i‡(
≠p
->
obj
) {

103 
¨y
 = 
	`js⁄_obje˘_obje˘_gë
(
≠p
->
obj
, "white");

104 i‡(
¨y
) {

105 
jobj
 = 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(
¨y
));

107 i‡(!
jobj
)

108  
EMS_ERR
;

110 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "whôe", 
jobj
);

114  
EMS_OK
;

115 
	}
}

117 
ems_öt


118 
	$bwli°_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

120 
	`ems_l_åa˚
("bwlistÉvt: 0x%x, from: 0x%x,árgs: %s",

121 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

122 
evt
) {

123 
EMS_APP_SERVER_RULES_UPDATE
:

124  
	`bwli°_£rvî_ruÀs_upd©e
(
mod
, 
roŸ
);

126 
EMS_APP_EVT_FW_RELOAD
:

127  
	`bwli°_fw_ªlﬂd
(
mod
, 
roŸ
);

129 
EMS_APP_SERVER_BWLIST
:

130  
	`bwli°_£rvî_ruÀs
(
mod
, 
roŸ
);

132 
EMS_APP_START
:

133  
	`bwli°_run
(
mod
, 
EMS_YES
);

135 
EMS_APP_STOP
:

136  
	`bwli°_run
(
mod
, 
EMS_NO
);

142  
EMS_OK
;

143 
	}
}

146 
≠p_moduÀ
 
	g≠p_bwli°
 =

148 .
ty
 = 
ty_bwli°
,

149 .
	gdesc
 = 
ems_°rög
("bwlist"),

150 .
	g˘x
 = 
NULL
,

151 .
	gÊg
 = 0,

153 .
	göô
 = 
bwli°_öô
,

154 .
	gunöô
 = 
bwli°_unöô
,

155 .
	grun
 = 
bwli°_run
,

156 .
	g¥o˚ss
 = 
bwli°_¥o˚ss
,

157 .
	g¥o˚ss_ruÀ
 = 
bwli°_¥o˚ss_ruÀ
,

158 .
	gvîsi⁄_m©ch
 = 
NULL
,

159 .
	gö°Æl
 = 
NULL


	@src/core/app_client.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_fw.h
"

6 
	~"ems_dns.h
"

8 
ems_öt
 
	$˛¡_öô
(
≠p_moduÀ
 *
mod
)

10 
ems_˛õ¡
 *
˛
 = 
NULL
;

12 
˛
 = (
ems_˛õ¡
 *)
	`ems_mÆloc
((ems_client));

13 i‡(
˛
) {

14 
	`mem£t
(
˛
, 0, (
ems_˛õ¡
));

16 
˛
->
°
 = 
°_°›≥d
;

17 
˛
->
√xt
 = 
°_°›≥d
;

18 
˛
->
£ss
 = 
NULL
;

20 
˛
->
u±
 = -1;

21 
˛
->
ªåy
 = 0;

22 
˛
->
Êg
 = 0;

23 
˛
->
u£_s¶
 = 
EMS_NO
;

24 
	`°r_öô
(&
˛
->
nm_addr
);

25 
˛
->
nm_p‹t
 = 0;

26 
˛
->
œ°îr
 = 0;

27 
˛
->
pid
 = 0;

29 
˛
->
n_c⁄f
 = -1;

30 
˛
->
n_u±
 = -1;

31 
˛
->
gëc⁄f
 = 2;

33 
˛
->
u±_≥riod
 = 0;

34 
˛
->
gëc⁄f_≥riod
 = 0;

35 
˛
->
ªåy_≥riod
 = 0;

37 
mod
->
˘x
 = (
ems_void
 *)
˛
;

40  
EMS_OK
;

41 
	}
}

43 
ems_öt
 
	$˛¡_unöô
(
≠p_moduÀ
 *
mod
)

45 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
mod
->
˘x
;

47 i‡(!
˛
)

48  
EMS_OK
;

50 
mod
->
˘x
 = 
NULL
;

52 
	`ems_as£π
(
˛
->
°
 =
°_°›≥d
);

53 
	`ems_as£π
(
˛
->
£ss
 =
NULL
);

54 
	`ems_as£π
(
˛
->
pid
 == 0);

56 i‡(
˛
->
£ss
) {

57 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˛
->
£ss
);

58 
˛
->
£ss
 = 
NULL
;

61 
˛
->
°
 = 
°_°›≥d
;

62 
˛
->
√xt
 = 
°_°›≥d
;

63 
˛
->
gëc⁄f
 = 0;

64 
	`°r_unöô
(&
˛
->
nm_addr
);

66 i‡(
˛
->
pid
) {

67 
	`waôpid
(
˛
->
pid
, 
NULL
, 
WNOHANG
);

68 
˛
->
pid
 = 0;

71 
	`ems_‰ì
(
˛
);

73  
EMS_OK
;

74 
	}
}

76 
ems_öt
 
	$˛¡_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

78 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
mod
->
˘x
;

80 i‡(
run
) {

81 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

82  
EMS_OK
;

84 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

85 
˛
->
Êg
 = 0;

86  
	`˛_ch™ge_°©us
(
˛
, 
°_öô
);

89 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

90  
EMS_OK
;

92 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

93  
	`˛_ch™ge_°©us
(
˛
, 
°_°›≥d
);

96  
EMS_OK
;

97 
	}
}

99 
ems_öt
 
	$˛¡_ems_°©us
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

101 
ems_öt
 
°
, 
îr
=0;

102 
js⁄_obje˘
 *
r•
 = 
NULL
;

103 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
mod
->
˘x
;

105 
	`ems_as£π
(
˛
 !
NULL
);

106 i‡(!
˛
)

107  
EMS_ERR
;

109 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

111 i‡(
îr
 == 0) {

112 
˛
->
°
) {

113 
°_°›≥d
:

114 
°
 = 0;

117 
°_°¨t
:

118 
°_gëdc
:

119 
°
 = 1;

122 
°_gëc⁄fig
:

123 
°_gëupd©efûe
:

124 
°
 = 3;

127 
°_n‹mÆ
:

128 
°_upd©e°©us
:

129 
°_dow∆ﬂd
:

130 
°_≠∂y
:

131 
°
 = 2;

134 
°_c⁄√˘
:

136 
˛
->
√xt
) {

137 
°_gëdc
:

138 
°
 = 1;

141 
°_gëc⁄fig
:

142 
°_gëupd©efûe
:

143 
°
 = 3;

146 
°_upd©e°©us
:

147 
°_dow∆ﬂd
:

148 
°
 = 2;

152 
	`ems_as£π
(0 && "shouldÇever be here");

153 
°
 = 4;

160 
°
 = 4;

166 i‡(
°
 == 4) ;

168 
îr
 = 
	`ems_≠p_¥o˚ss
(0, 
ty_p‹èl
, 
EMS_APP_EVT_STATUS
, 
NULL
);

169 i‡(
îr
 != 0) {

170 
°
 = 4;

174 
îr
 = 
	`ems_≠p_¥o˚ss
(0, 
ty_ødius
, 
EMS_APP_EVT_STATUS
, 
NULL
);

175 i‡(
îr
 != 0) {

176 
°
 = 4;

181 
	`js⁄_obje˘_obje˘_add
(
r•
, "°©us", 
	`js⁄_obje˘_√w_öt
(
°
));

183 i‡(
°
 == 4)

185 
js⁄_obje˘
 *
obj
;

186 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

188 i‡(
îr
 =0Ëî∏
˛
->
œ°îr
;

190 
	`js⁄_obje˘_obje˘_add
(
obj
, "code", 
	`js⁄_obje˘_√w_öt
(
îr
));

191 
	`js⁄_obje˘_obje˘_add
(
r•
, "îr", 
obj
);

194 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "ems_c", 
r•
);

196  
EMS_OK
;

197 
	}
}

199 
ems_öt


200 
	$˛¡_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

202 
	`ems_l_åa˚
("clntÉvt: 0x%x, from: 0x%x,árgs: %s",

203 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

205 
evt
) {

206 
EMS_APP_START
:

207  
	`˛¡_run
(
mod
, 
EMS_YES
);

209 
EMS_APP_STOP
:

210  
	`˛¡_run
(
mod
, 
EMS_NO
);

212 
EMS_APP_EMS_STATUS
:

213  
	`˛¡_ems_°©us
(
mod
, 
roŸ
);

219  
EMS_OK
;

220 
	}
}

222 
≠p_moduÀ
 
	g≠p_˛õ¡
 =

224 .
ty
 = 
ty_˛õ¡
,

225 .
	gdesc
 = 
ems_°rög
("clnt"),

226 .
	g˘x
 = 
NULL
,

227 .
	gÊg
 = 0,

229 .
	göô
 = 
˛¡_öô
,

230 .
	gunöô
 = 
˛¡_unöô
,

231 .
	grun
 = 
˛¡_run
,

232 .
	g¥o˚ss
 = 
˛¡_¥o˚ss
,

233 .
	g¥o˚ss_ruÀ
 = 
NULL
,

234 .
	gvîsi⁄_m©ch
 = 
NULL
,

235 .
	gö°Æl
 = 
NULL


	@src/core/app_ctrl.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_cmd.h
"

5 
	~"ems_ødius.h
"

6 
	~"≠p.h
"

7 
	~"ems_˘æ.h
"

9 
ems_˘æ
 *
	$˘æ_√w
()

11  (
ems_˘æ
 *)
	`ems_mÆloc
((ems_ctrl));

12 
	}
}

14 
ems_void
 
	$˘æ_de°roy
(
ems_˘æ
 *
˘æ
)

16 i‡(
˘æ
)

17 
	`ems_‰ì
(
˘æ
);

18 
	}
}

20 
ems_öt
 
	$˘æ_öô
(
≠p_moduÀ
 *
mod
)

22 
ems_˘æ
 *
˘æ
 = 
NULL
;

24 
˘æ
 = 
	`˘æ_√w
();

25 i‡(
˘æ
) {

26 
	`mem£t
(
˘æ
, 0, (
ems_˘æ
));

28 
˘æ
->
£ss
 = 
NULL
;

29 
˘æ
->
°
 = 
°_°›≥d
;

30 
	`ems_queue_öô
(&
˘æ
->
cmd
);

32 
mod
->
˘x
 = (
ems_void
 *)
˘æ
;

35  
EMS_OK
;

36 
	}
}

38 
ems_öt
 
	$˘æ_unöô
(
≠p_moduÀ
 *
mod
)

40 
ems_˘æ
 *
˘æ
 = (ems_˘æ *)
mod
->
˘x
;

42 i‡(!
˘æ
)

43  
EMS_OK
;

45 
mod
->
˘x
 = 
NULL
;

47 
	`ems_as£π
(
˘æ
 && cål->
°
 =
°_°›≥d
);

48 
	`ems_as£π
(
˘æ
->
£ss
 =
NULL
);

49 
	`ems_as£π
(
	`ems_queue_em±y
(&
˘æ
->
cmd
));

51 i‡(
˘æ
->
£ss
) {

52 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˘æ
->
£ss
);

53 
˘æ
->
£ss
 = 
NULL
;

56 
	`ems_queue_˛ór
(&
˘æ
->
cmd
, 
ems_£ssi⁄
, 
íåy
, 
ems_£ssi⁄_shutdown_™d_de°roy
);

57 
˘æ
->
°
 = 
°_max
;

59 
	`˘æ_de°roy
(
˘æ
);

61  
EMS_OK
;

62 
	}
}

64 
ems_öt
 
	$˘æ_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

66 
ems_˘æ
 *
˘æ
 = (ems_˘æ *)
mod
->
˘x
;

68 
	`ems_as£π
(
˘æ
 !
NULL
);

70 i‡(
run
) {

71 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

72  
EMS_OK
;

74 
	`ems_l_åa˚
("ctrlÑunning");

75 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

76 
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°¨t
);

78 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

79  
EMS_OK
;

81 
	`ems_l_åa˚
("ctrl stopping");

82 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

83 
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°›≥d
);

86  
EMS_OK
;

87 
	}
}

89 
ems_öt


90 
	$˘æ_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

92 
	`ems_l_åa˚
("ctrlÉvt: 0x%x, from: 0x%x,árgs: %s",

93 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

95 
evt
) {

96 
EMS_APP_START
:

97  
	`˘æ_run
(
mod
, 
EMS_YES
);

99 
EMS_APP_STOP
:

100  
	`˘æ_run
(
mod
, 
EMS_NO
);

106  
EMS_OK
;

107 
	}
}

109 
≠p_moduÀ
 
	g≠p_˘æ
 =

111 .
ty
 = 
ty_˘æ
,

112 .
	gdesc
 = 
ems_°rög
("ctrl"),

113 .
	g˘x
 = 
NULL
,

114 .
	gÊg
 = 0,

116 .
	göô
 = 
˘æ_öô
,

117 .
	gunöô
 = 
˘æ_unöô
,

118 .
	grun
 = 
˘æ_run
,

119 .
	g¥o˚ss
 = 
˘æ_¥o˚ss
,

120 .
	g¥o˚ss_ruÀ
 = 
NULL
,

121 .
	gvîsi⁄_m©ch
 = 
NULL
,

122 .
	gö°Æl
 = 
NULL


	@src/core/app_downlink.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

7 #ifde‡
DLINK_USE_PING


8 
	~<√töë/ö_sy°m.h
>

9 
	~<√töë/ö.h
>

10 
	~<√töë/ù.h
>

11 
	~<√töë/ù_icmp.h
>

12 
	~<√tdb.h
>

15 
	#DLINK_PING_TIMEOUT
 2000

	)

16 #ifde‡
DEBUG


17 
	#DLINK_TIMEOUT
 61000

	)

19 
	#DLINK_TIMEOUT
 300000

	)

23 
	s_ems_dow∆ök_⁄e_s
 {

24 
ems_£ssi⁄
 *
	m£ss
;

25 
ems_°r
 
	mù
;

26 
ems_°r
 
	mmac
;

27 
ems_queue
 
	míåy
;

29 #ifde‡
DLINK_USE_PING


30 
ems_öt
 
	midít
;

31 
ems_öt
 
	m¡øns
;

32 
ems_öt
 
	mªåy
;

35 
ems_°©us
 
	m°
;

36 } 
	tems_dow∆ök
;

38 
ems_void
 
dlök_de°roy
(
ems_dow∆ök
 *
dlök
);

39 
ems_void
 
dlök_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

41 #ifde‡
DLINK_USE_PING


42 
ems_void
 
dlök_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
);

43 
ems_öt
 
dlök_pög
(
ems_dow∆ök
 *
dlök
);

45 
ems_öt


46 
	$dlök_£nd_msg
(
ems_dow∆ök
 *
dlök
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

48 
ems_öt
 
ªt
;

50 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

52 
	`ems_l_åa˚
("[dlink] send(%d): (%s,Üength: %d)",

53 
	`ems_sock_fd
(&
£ss
->
sock
),

54 
	`ems_sock_addr
(&
£ss
->
sock
),

55 
	`buf_Àn
(&
£ss
->
buf
));

57 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

58 i‡(
ªt
 <= 0) {

59 
ªt
) {

60 -
EAGAIN
:

64  
EMS_ERR
;

68 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0)

69 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
dlök_evt_cb
);

71  
EMS_OK
;

72 
	}
}

74 
ems_öt
 
	$dlök_¥o˚ss_icmp
(
ems_dow∆ök
 *
dlök
, 
ems_£ssi⁄
 *
£ss
)

76 
ù
 *ip;

77 
icmp
 *
i˝
;

78 
hÀn
, 
cc
 = 
	`buf_Àn
(&
£ss
->
buf_ö
);

79 
ems_ch¨
 
mac
[32];

81 
ù
 = (ù *Ë
	`buf_rd
(&
£ss
->
buf_ö
);

82 
hÀn
 = 
ù
->
ù_hl
 << 2;

84 i‡(
cc
 < 
hÀn
 + 
ICMP_MINLEN
)

85  
EMS_OK
;

87 
cc
 -
hÀn
;

88 
i˝
 = (
icmp
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
hÀn
);

90 if(
i˝
->
icmp_ty≥
 !
ICMP_ECHOREPLY
) {

91 
	`ems_l_åa˚
("[dlink] %d bytes from: %s icmpÇotÑeply(%d)",

92 
cc
, 
	`ems_sock_addr
(&
£ss
->
sock
), 
i˝
->
icmp_ty≥
);

93  
EMS_CONTINUE
;

96 if–
i˝
->
icmp_id
 !
dlök
->
idít
) {

97 
	`ems_l_åa˚
("[dlök] %d byã†icm∞idít: %dÉº‹,ÇŸ : %d", 
cc
, 
i˝
->
icmp_id
, 
dlök
->
idít
);

98  
EMS_CONTINUE
;

101 
	`ems_l_åa˚
("icm∞ª∂õd by (%s),Üígth: %d", 
	`ems_sock_addr
(&
£ss
->
sock
), 
cc
);

103 
	`¢¥ötf
(
mac
, (mac), "%s", 
	`ems_u£rmac
(
	`ems_sock_addr
(&
£ss
->
sock
)));

104 i‡(
	`°rcmp
(
mac
, 
	`°r_ãxt
(&
dlök
->mac))) {

105 
	`ems_l_åa˚
("dow∆ök ch™gê‰om: %†öto: %s", 
	`°r_ãxt
(&
dlök
->
mac
), mac);

106 
dlök
->
°
 = 
°_îr
;

107  
EMS_ERR
;

110 
dlök
->
°
 = 
°_n‹mÆ
;

111 
	`£ss_evít_ˇn˚l
(
£ss
);

112 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
DLINK_TIMEOUT
, 
dlök_timeout_cb
);

114  
EMS_OK
;

115 
	}
}

117 
ems_öt


118 
	$dlök_ªcv_msg
(
ems_dow∆ök
 *
dlök
, 
ems_£ssi⁄
 *
£ss
)

120 
ems_öt
 
ªt
;

121 
ems_ch¨
 *
wr
 = 
	`buf_wr
(&
£ss
->
buf_ö
);

122 
ems_öt
 
Àn
 = 
	`buf_À·
(&
£ss
->
buf_ö
);

124 
agaö
:

125 
ªt
 = 
	`ªcv
(
	`ems_sock_fd
(&
£ss
->
sock
), 
wr
, 
Àn
, 0);

127 i‡(
ªt
 <= 0) {

128 
î∫o
) {

130 
EAGAIN
:

131 
EINTR
:

132  
EMS_OK
;

135 
	`ems_l_åa˚
("[dlök]ÖögÉº‹: %s", 
	`ems_œ°îrmsg
());

136  
EMS_ERR
;

140 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_ö
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

142 
ªt
 = 
	`dlök_¥o˚ss_icmp
(
dlök
, 
£ss
);

143 i‡(
ªt
 =
EMS_ERR
)

144  
EMS_ERR
;

146 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

148 
agaö
;

150  
EMS_OK
;

151 
	}
}

154 
ems_void
 
	$dlök_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

156 
ems_dow∆ök
 *
dlök
 = (ems_dow∆ök *)
	`£ss_cb¨g
(
£ss
);

158 i‡(
îr
)

159 
îr_out
;

161 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

162 i‡(
	`dlök_£nd_msg
(
dlök
, 
£ss
, 
Êg
Ë!
EMS_OK
)

163 
îr_out
;

166 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

167 i‡(
	`dlök_ªcv_msg
(
dlök
, 
£ss
Ë!
EMS_OK
)

168 
îr_out
;

172 
îr_out
:

173 
	`ems_l_åa˚
("[dlink] shutdown: %d (%s: %s)",

174 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`°r_ãxt
(&
dlök
->
ù
), så_ãxt(&dlök->
mac
));

176 
	`ems_queue_ªmove
(&
dlök
->
íåy
);

177 
	`dlök_de°roy
(
dlök
);

178 
	}
}

181 
u_sh‹t
 
	$dlök_icmp_checksum
(
u_sh‹t
 *
addr
, 
ems_öt
 
Àn
)

183 
u_sh‹t
 
™swî
, *
w
 = 
addr
;

184 
ems_öt
 
sum
 = 0, 
∆e·
 = 
Àn
;

192  
∆e·
 > 1 ) {

193 
sum
 +*
w
++;

194 
∆e·
 -= 2;

198 if–
∆e·
 == 1 ) {

199 
u_sh‹t
 
u
 = 0;

201 *(
u_ch¨
 *)(&
u
Ë*(u_ch¨ *)
w
 ;

202 
sum
 +
u
;

208 
sum
 = (sum >> 16) + (sum & 0xffff);

209 
sum
 += (sum >> 16);

210 
™swî
 = ~
sum
;

212  
™swî
;

213 
	}
}

215 
ems_öt
 
	$dlök_pög
(
ems_dow∆ök
 *
dlök
)

217 
i
, 
cc
, 
Àn
;;

218 
icmp
 *
i˝
;

219 
timevÆ
 *
ç
;

220 
ems_ch¨
 *
wr
;

221 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

223 
£ss
 = 
dlök
->sess;

224 
	`ems_as£π
(
£ss
 !
NULL
);

226 
	`ems_buf„r_ª£t
(&
£ss
->
buf
);

228 
i˝
 = (
icmp
 *Ë(
	`buf_wr
(&
£ss
->
buf
));

229 
ç
 = (
timevÆ
 *Ë(
	`buf_wr
(&
£ss
->
buf
) + 8);

230 
wr
 = (
ems_ch¨
 *Ë(
	`buf_wr
(&
£ss
->
buf
Ë+ 8 + (
timevÆ
));

232 
i˝
->
icmp_ty≥
 = 
ICMP_ECHO
;

233 
i˝
->
icmp_code
 = 0;

234 
i˝
->
icmp_cksum
 = 0;

235 
i˝
->
icmp_£q
 = 
	`ht⁄s
(
dlök
->
¡øns
++);

236 
i˝
->
icmp_id
 = 
dlök
->
idít
;

238 
Àn
 = 56;

239 
cc
 = 
Àn
 + 8;

240 
	`gëtimeofday
(
ç
, 
NULL
);

242 
i
 = 8; i < 
Àn
; i++)

243 *
wr
++ = 
i
;

245 
i˝
->
icmp_cksum
 = 
	`dlök_icmp_checksum
((
u_sh‹t
 *)i˝, 
cc
);

246 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf
, 
cc
, 
EMS_BUFFER_SEEK_CUR
);

248 
dlök
->
ªåy
 = 3;

250 
dlök
->
°
 = 
°_hb
;

252 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dlök_evt_cb
);

253 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
DLINK_PING_TIMEOUT
, 
dlök_timeout_cb
);

255  
EMS_OK
;

257 
	}
}

259 
ems_öt
 
	$dlök_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

261 
¥Ÿ€¡
 *
¥Ÿo
;

262 
ems_sock
 *
sock
 = &
£ss
->sock;

263 
sockÀn_t
 
Àn
;

264 
sockaddr_ö
 
addr
;

265 
ems_öt
 
fd
;

267 
	`mem£t
(&
addr
, 0, (addr));

269 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

270 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

271 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

272  
EMS_ERR
;

275 i‡((
¥Ÿo
 = 
	`gë¥Ÿoby«me
("icmp")Ë=
NULL
) {

276  
EMS_ERR
;

279 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
¥Ÿo
->
p_¥Ÿo
)) < 0) {

280 
	`ems_l_åa˚
("sockëÉº‹: %s", 
	`ems_œ°îrmsg
());

281  
EMS_ERR
;

284 
addr
.
sö_Ámûy
 = 
AF_INET
;

285 
Àn
 = (
sockaddr_ö
);

287 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

288 
	`˛o£
(
fd
);

289 
	`ems_l_åa˚
("c⁄√˘Éº‹: %s", 
	`ems_œ°îrmsg
());

290  
EMS_ERR
;

293 
	`ems_sock_£tfd
(&
£ss
->
sock
, 
fd
);

295 
	`ems_l_åa˚
("[dlink] sess: %d hostáddr: %s",

296 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

298  
EMS_OK
;

299 
	}
}

302 
ems_void
 
	$dlök_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

304 
ems_dow∆ök
 *
dlök
 = (ems_dow∆ök *)
	`£ss_cb¨g
(
£ss
);

306 
dlök
->
°
) {

307 #ifde‡
DLINK_USE_PING


309 
°_hb
:

311 
dlök
->
ªåy
--;

312 
	`£ss_evít_ˇn˚l
(
£ss
);

313 i‡(
dlök
->
ªåy
 > 0) {

314 
	`ems_l_åa˚
("[dlök]Ñëry sídÖög: %d", 
dlök
->
ªåy
);

315 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf
, 0, 
EMS_BUFFER_SEEK_SET
);

316 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dlök_evt_cb
);

317 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
DLINK_PING_TIMEOUT
, 
dlök_timeout_cb
);

321 
dlök
->
°
 = 
°_îr
;

322 
	`ems_l_åa˚
("[dlök]Üo° dow∆ök: %s: %s", 
	`°r_ãxt
(&
dlök
->
ù
), så_ãxt(&dlök->
mac
));

323 
	`ems_queue_ªmove
(&
dlök
->
íåy
);

324 
	`dlök_de°roy
(
dlök
);

328 
°_n‹mÆ
:

329 
	`dlök_pög
(
dlök
);

332 
°_°¨t
:

333 
	`ems_l_åa˚
("[dlök] dow∆ökÅimeouà%s: %s", 
	`°r_ãxt
(&
dlök
->
ù
), så_ãxt(&dlök->
mac
));

334 
	`ems_queue_ªmove
(&
dlök
->
íåy
);

335 
	`dlök_de°roy
(
dlök
);

342 
	}
}

346 
ems_öt
 
	$dlök_°¨t
(
ems_dow∆ök
 *
dlök
)

348 
ems_£ssi⁄
 *
£ss
;

350 i‡(
dlök
->
£ss
) {

351 #ifde‡
DLINK_USE_PING


352 
£ss
 = 
dlök
->sess;

353 
	`£ss_evít_ˇn˚l
(
£ss
);

354 
	`ems_sock_˛o£
(&
£ss
->
sock
);

357 
dlök
->
£ss
 = 
	`ems_£ssi⁄_√w
();

358 i‡(!
dlök
->
£ss
)

359  
EMS_ERR
;

361 #i‚de‡
DLINK_USE_PING


362 
	`ems_buf„r_unöô
(&
dlök
->
£ss
->
buf_ö
);

363 
	`ems_buf„r_unöô
(&
dlök
->
£ss
->
buf_out
);

365 
	`£ss_cb¨g_£t
(
dlök
->
£ss
, dlink);

368 
dlök
->
°
 = 
°_°¨t
;

370 
£ss
 = 
dlök
->sess;

372 #ifde‡
DLINK_USE_PING


373 
dlök
->
idít
 = 
	`øndom
() & 0xffff;

374 
dlök
->
¡øns
 = 0;

376 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
dlök
->
ù
));

378 i‡(
	`dlök_c⁄√˘
(
dlök
->
£ss
Ë!
EMS_OK
)

379  
EMS_ERR
;

381  
	`dlök_pög
(
dlök
);

383 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
DLINK_TIMEOUT
, 
dlök_timeout_cb
);

385  
EMS_OK
;

386 
	}
}

389 
	$dlök_de°roy
(
ems_dow∆ök
 *
dlök
)

391 i‡(
dlök
) {

392 i‡(
dlök
->
£ss
) {

393 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
dlök
->
£ss
);

394 
dlök
->
£ss
 = 
NULL
;

397 
	`°r_unöô
(&
dlök
->
ù
);

398 
	`°r_unöô
(&
dlök
->
mac
);

400 
	`ems_‰ì
(
dlök
);

402 
	}
}

404 
ems_dow∆ök
 *
	$dlök_föd
(
ems_queue
 *
li°
, 
ems_cch¨
 *
ù
)

406 
ems_queue
 *
p
;

407 
ems_dow∆ök
 *
dlök
;

409 
	`ems_as£π
(
li°
 && 
ù
);

411 i‡(!
ù
)

412  
NULL
;

414 
	`ems_queue_f‹óch
(
li°
, 
p
) {

415 
dlök
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_dow∆ök
, 
íåy
);

417 
	`ems_as£π
(
	`°r_ãxt
(&
dlök
->
ù
) && ip);

419 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
dlök
->
ù
), ip))

420  
dlök
;

423  
NULL
;

424 
	}
}

426 
ems_öt
 
	$dlök_öô
(
≠p_moduÀ
 *
mod
)

428 
ems_queue
 *
li°
;

429 
li°
 = (
ems_queue
 *)
	`ems_mÆloc
((ems_queue));

431 i‡(!
li°
)

432  
EMS_ERR
;

434 
	`ems_queue_öô
(
li°
);

436 
mod
->
˘x
 = (
ems_void
 *)
li°
;

438  
EMS_OK
;

439 
	}
}

441 
ems_öt
 
	$dlök_unöô
(
≠p_moduÀ
 *
mod
)

443 
ems_queue
 *
li°
 = 
mod
->
˘x
;

445 i‡(
li°
) {

446 
	`ems_queue_˛ór
(
li°
, 
ems_dow∆ök
, 
íåy
, 
dlök_de°roy
);

447 
	`ems_‰ì
(
li°
);

450 
mod
->
˘x
 = 
NULL
;

451  
EMS_OK
;

452 
	}
}

454 
ems_öt
 
	$dlök_ems_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

456 
ems_öt
 
evt
 = 
EMS_APP_START
;

458 i‡(!
run
) {

459 
evt
 = 
EMS_APP_STOP
;

461 
	`ems_£nd_mesßge
(
ty_dow∆ök
, 
ty_ødius
, 
evt
, 
NULL
);

464 
	`ems_£nd_mesßge
(
ty_dow∆ök
, 
ty_fw
, 
evt
, 
NULL
);

465 
	`ems_£nd_mesßge
(
ty_dow∆ök
, 
ty_bwli°
, 
evt
, 
NULL
);

466 
	`ems_£nd_mesßge
(
ty_dow∆ök
, 
ty_p‹èl
, 
evt
, 
NULL
);

467 
	`ems_£nd_mesßge
(
ty_dow∆ök
, 
ty_˛õ¡
, 
evt
, 
NULL
);

469  
EMS_OK
;

470 
	}
}

472 
ems_öt
 
	$dlök_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

474 i‡(
run
) {

475 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

476  
EMS_OK
;

478 
	`ems_l_åa˚
("downlinkÑunning here");

479 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

481 
	`dlök_ems_run
(
mod
, 
EMS_YES
);

483 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

484  
EMS_OK
;

486 
	`ems_l_åa˚
("downlink stopped");

487 
	`ems_queue_˛ór
((
ems_queue
 *)
mod
->
˘x
, 
ems_dow∆ök
, 
íåy
, 
dlök_de°roy
);

488 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

490 
	`dlök_ems_run
(
mod
, 
EMS_NO
);

493  
EMS_OK
;

494 
	}
}

496 
ems_öt
 
	$dlök_evt_u£r_ö
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

498 
ems_°r
 
ù
, 
mac
;

499 
ems_dow∆ök
 *
dlök
 = 
NULL
;

500 
ems_queue
 *
li°
 = (ems_queuê*)
mod
->
˘x
;

502 
	`°r_öô
(&
ù
);

503 
	`°r_öô
(&
mac
);

506 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "ù", &
ù
, 
NULL
);

507 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "mac", &
mac
, 
NULL
);

509 i‡(
	`°r_ãxt
(&
ù
Ë&& så_ãxt(&
mac
)) {

510 
dlök
 = 
	`dlök_föd
(
li°
, 
	`°r_ãxt
(&
ù
));

512 i‡(!
dlök
) {

513 
dlök
 = (
ems_dow∆ök
 *Ë
	`ems_mÆloc
((ems_downlink));

514 i‡(!
dlök
) ;

516 
dlök
->
£ss
 = 
NULL
;

518 
	`°r_öô
(&
dlök
->
ù
);

519 
	`°r_öô
(&
dlök
->
mac
);

520 
	`ems_queue_öô
(&
dlök
->
íåy
);

522 
	`°r_£t
(&
dlök
->
ù
, 
	`°r_ãxt
(&ip));

523 
	`°r_£t
(&
dlök
->
mac
, 
	`°r_ãxt
(&mac));

525 
	`ems_queue_ö£π_èû
(
li°
, &
dlök
->
íåy
);

527 i‡(
	`dlök_°¨t
(
dlök
Ë!
EMS_OK
) {

528 
	`ems_queue_ªmove
(&
dlök
->
íåy
);

529 
	`dlök_de°roy
(
dlök
);

534 i‡(
	`°rcmp
(
	`°r_ãxt
(&
mac
), så_ãxt(&
dlök
->mac)))

536 
	`°r_£t
(&
dlök
->
mac
, 
	`°r_ãxt
(&mac));

537 i‡(
	`dlök_°¨t
(
dlök
Ë!
EMS_OK
) {

538 
	`ems_queue_ªmove
(&
dlök
->
íåy
);

539 
	`dlök_de°roy
(
dlök
);

546 
	`°r_unöô
(&
ù
);

547 
	`°r_unöô
(&
mac
);

549  
EMS_OK
;

550 
	}
}

552 
ems_öt
 
	$dlök_num
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

554 
ems_öt
 
Àn
 = 0;

555 
ems_queue
 *
li°
 = (ems_queuê*)
mod
->
˘x
;

557 
	`ems_queue_Àn
(
li°
, 
Àn
);

558  
Àn
;

559 
	}
}

561 
ems_öt


562 
	$dlök_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

564 
	`ems_l_åa˚
("downlinkÉvt: 0x%x, from: 0x%x,árgs: %s",

565 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

567 
evt
) {

568 
EMS_APP_START
:

569  
	`dlök_run
(
mod
, 
EMS_YES
);

571 
EMS_APP_STOP
:

572  
	`dlök_run
(
mod
, 
EMS_NO
);

578 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
)) {

579 
	`ems_l_åa˚
("downloadÜinkÇotÑunning");

580  
EMS_OK
;

583 
evt
) {

585 
EMS_APP_EVT_FW_RELOAD
:

586  
	`dlök_fw_ªlﬂd
(
mod
, 
roŸ
);

589 
EMS_EVT_DOWNLINK_IN
:

590  
	`dlök_evt_u£r_ö
(
mod
, 
roŸ
);

592 
EMS_EVT_DOWNLINK_NUM
:

593  
	`dlök_num
(
mod
, 
roŸ
);

599  
EMS_OK
;

600 
	}
}

603 
≠p_moduÀ
 
	g≠p_dow∆ök
 =

605 .
ty
 = 
ty_dow∆ök
,

606 .
	gdesc
 = 
ems_°rög
("downlink"),

607 .
	g˘x
 = 
NULL
,

608 .
	gÊg
 = 0,

610 .
	göô
 = 
dlök_öô
,

611 .
	gunöô
 = 
dlök_unöô
,

612 .
	grun
 = 
dlök_run
,

613 .
	g¥o˚ss
 = 
dlök_¥o˚ss
,

614 .
	g¥o˚ss_ruÀ
 = 
NULL
,

615 .
	gvîsi⁄_m©ch
 = 
NULL
,

616 .
	gö°Æl
 = 
NULL


	@src/core/app_fw.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_fw.h
"

5 
	~"ems_dns.h
"

6 
	~"≠p.h
"

8 
ems_fw
 *
	$fw_√w
()

10  (
ems_fw
 *)
	`ems_mÆloc
((ems_fw));

11 
	}
}

13 
ems_void
 
	$fw_de°roy
(
ems_fw
 *
fw
)

15 i‡(
fw
)

16 
	`ems_‰ì
(
fw
);

17 
	}
}

19 
dns_uæ
 *
	$dns_uæ_√w
()

21 
dns_uæ
 *
uæ
 = 
NULL
;

23 
uæ
 = (
dns_uæ
 *)
	`ems_mÆloc
((dns_url));

24 i‡(
uæ
) {

25 
	`mem£t
(
uæ
, 0, (
dns_uæ
));

26 
	`ems_hash_fd_öô
(&
uæ
->
h_uæ
);

27 
	`°r_öô
(&
uæ
->url);

28 
uæ
->
Êg
 = 0;

29 
uæ
->
n_addr
 = 0;

30 
uæ
->
addr
 = 
NULL
;

31 
uæ
->
mask
 = 32;

32 
	`ems_queue_öô
(&
uæ
->
íåy
);

35  
uæ
;

36 
	}
}

38 
ems_void
 
	$dns_uæ_‰ì
(
dns_uæ
 *
uæ
)

40 
	`ems_as£π
(
uæ
 && "never show upÅhisÜine");

42 i‡(
uæ
) {

43 i‡(
uæ
->
addr
)

44 
	`ems_‰ì
(
uæ
->
addr
);

46 
	`°r_unöô
(&
uæ
->url);

47 
	`ems_hash_fd_unöô
(&
uæ
->
h_uæ
);

48 
	`ems_‰ì
(
uæ
);

50 
	}
}

52 
dns_u£r
 *
	$dns_u£r_√w
()

54 
dns_u£r
 *
u£r
 = 
NULL
;

56 
u£r
 = (
dns_u£r
 *)
	`ems_mÆloc
((dns_user));

58 i‡(
u£r
) {

59 
	`mem£t
(
u£r
, 0, (
dns_u£r
));

60 
	`ems_hash_fd_öô
(&
u£r
->
h_msg
);

61 
	`ems_timeout_öô
(&
u£r
->
to
);

62 
u£r
->
Êg
 = 0;

63 
u£r
->
p‹t
 = 0;

64 
u£r
->
˘x
 = 
NULL
;

65 
	`ems_buf„r_öô
(&
u£r
->
buf
, 
EMS_BUFFER_1K
);

66 
	`ems_queue_öô
(&
u£r
->
íåy
);

69  
u£r
;

70 
	}
}

72 
ems_void
 
	$dns_u£r_‰ì
(
dns_u£r
 *
u£r
)

74 
	`ems_as£π
(
u£r
 && "never show upÅhisÜine");

76 i‡(
u£r
) {

77 
	`ems_hash_fd_unöô
(&
u£r
->
h_msg
);

78 
	`ems_buf„r_unöô
(&
u£r
->
buf
);

80 
	`ems_‰ì
(
u£r
);

82 
	}
}

84 
dns_u£r
 *
	$dns_föd_u£r
(
ems_fw
 *
fw
, 
ems_sh‹t
 
key
)

86 
ems_hash_fd
 *
h
;

87 
dns_u£r
 *
u£r
 = 
NULL
;

89 
h
 = 
	`ems_hash_föd
(&
fw
->
hash_msg
, 
	`ems_hash_key
(0xfff‡& 
key
));

90 i‡(
h
) {

91 
u£r
 = 
	`ems_c⁄èöî_of
(
h
, 
dns_u£r
, 
h_msg
);

94  
u£r
;

95 
	}
}

97 
dns_uæ
 *
	$dns_föd_uæ
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
)

99 
ems_hash_fd
 *
h
;

100 
dns_uæ
 *
uæ
 = 
NULL
;

102 
h
 = 
	`ems_hash_föd
(&
fw
->
hash_uæ
, 
key
);

103 i‡(
h
) {

104 
uæ
 = 
	`ems_c⁄èöî_of
(
h
, 
dns_uæ
, 
h_uæ
);

107  
uæ
;

108 
	}
}

110 
ems_öt
 
	$fw_öô
(
≠p_moduÀ
 *
mod
)

112 
ems_fw
 *
fw
 = 
NULL
;

114 
fw
 = 
	`fw_√w
();

116 i‡(
fw
) {

117 
	`mem£t
(
fw
, 0, (
ems_fw
));

119 
	`ems_queue_öô
(&
fw
->
whôñi°
);

120 
	`ems_queue_öô
(&
fw
->
subdomaö
);

121 
	`ems_queue_öô
(&
fw
->
fwd
);

122 
	`ems_queue_öô
(&
fw
->
waô
);

123 
	`ems_queue_öô
(&
fw
->
out
);

125 
fw
->
n_subdomaö
 = 0;

127 
fw
->
£ss_böd
 = 
NULL
;

128 
fw
->
£ss_dns
 = 
NULL
;

130 
	`ems_hash_öô
(&
fw
->
hash_msg
, 128);

131 
	`ems_hash_öô
(&
fw
->
hash_uæ
, 128);

133 
mod
->
˘x
 = (
ems_void
 *)
fw
;

136  
EMS_OK
;

137 
	}
}

139 
ems_öt
 
	$fw_whôñi°_˛ór
(
ems_fw
 *
fw
)

141 
	`ems_hash_˛ón
(&
fw
->
hash_uæ
);

142 
	`ems_queue_˛ór
(&
fw
->
whôñi°
, 
dns_uæ
, 
íåy
, 
dns_uæ_‰ì
);

143 
	`ems_queue_˛ór
(&
fw
->
subdomaö
, 
dns_uæ
, 
íåy
, 
dns_uæ_‰ì
);

144 
fw
->
n_subdomaö
 = 0;

146  
EMS_OK
;

147 
	}
}

149 
ems_öt
 
	$fw_unöô
(
≠p_moduÀ
 *
mod
)

151 
ems_fw
 *
fw
 = (ems_fw *)
mod
->
˘x
;

153 i‡(
fw
) {

154 
	`fw_whôñi°_˛ór
(
fw
);

156 
	`ems_queue_˛ór
(&
fw
->
fwd
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

157 
	`ems_queue_˛ór
(&
fw
->
waô
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

158 
	`ems_queue_˛ór
(&
fw
->
out
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

160 i‡(
fw
->
£ss_böd
) {

161 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
fw
->
£ss_böd
);

162 
fw
->
£ss_böd
 = 
NULL
;

165 i‡(
fw
->
£ss_dns
) {

166 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
fw
->
£ss_dns
);

167 
fw
->
£ss_dns
 = 
NULL
;

170 
	`ems_hash_unöô
(&
fw
->
hash_msg
);

171 
	`ems_hash_unöô
(&
fw
->
hash_uæ
);

173 
	`fw_de°roy
(
fw
);

176 
mod
->
˘x
 = 
NULL
;

178  
EMS_OK
;

179 
	}
}

181 
ems_öt
 
	$fw_dns_°¨t
(
ems_fw
 *
fw
)

183 
	`fw_dns_be_£rvî
(
fw
);

184 
	`fw_dns_be_˛õ¡
(
fw
);

185  
EMS_OK
;

186 
	}
}

189 
ems_öt
 
	$fw_dns_°›
(
ems_fw
 *
fw
)

191 
	`fw_dns_£rvî_°›
(
fw
);

192 
	`fw_dns_˛õ¡_°›
(
fw
);

194  
EMS_OK
;

195 
	}
}

197 
ems_öt
 
	$fw_°¨t
(
ems_fw
 *
fw
)

199 
	`fw_dns_°¨t
(
fw
);

201 
	`ems_£nd_mesßge
(
ty_fw
,Åy_fw, 
EMS_APP_EVT_FW_RELOAD
, 
NULL
);

203  
EMS_OK
;

204 
	}
}

206 
ems_öt
 
	$fw_°›
(
ems_fw
 *
fw
)

208 
	`fw_dns_°›
(
fw
);

210 
	`fw_whôñi°_˛ór
(
fw
);

211 
	`ems_hash_˛ón
(&
fw
->
hash_msg
);

212 
	`ems_queue_˛ór
(&
fw
->
fwd
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

213 
	`ems_queue_˛ór
(&
fw
->
waô
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

214 
	`ems_queue_˛ór
(&
fw
->
out
, 
dns_u£r
, 
íåy
, 
dns_u£r_‰ì
);

216 
	`fw_unöô_chaös
(
fw
);

218  
EMS_OK
;

219 
	}
}

222 
ems_öt
 
	$fw_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

224 
ems_fw
 *
fw
 = (ems_fw *)
mod
->
˘x
;

226 
	`ems_as£π
(
fw
);

228 i‡(
run
) {

229 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

230  
EMS_OK
;

232 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

233 
	`ems_l_åa˚
("firewall starting...");

235 
	`fw_°¨t
(
fw
);

237 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

238  
EMS_OK
;

240 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

241 
	`ems_l_åa˚
("firewall stopping...");

243 
	`fw_°›
(
fw
);

246  
EMS_OK
;

247 
	}
}

249 
ems_öt
 
	$fw_ruÀs_ªlﬂd
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

251 
ems_öt
 
ªåy
 = 3;

254 
	`ems_l_åa˚
("dÿöô fw,ÑëryÅimes: %d", 
ªåy
);

255 i‡(
	`fw_öô_chaös
(
fw
Ë=
EMS_OK
) ;

257 
	`fw_unöô_chaös
(
fw
);

258 
	`ems_¶ìp
(1);

259 } --
ªåy
 > 0);

261 i‡(
ªåy
 <= 0) {

262 
	`ems_l_åa˚
("doÇetworkÑestarting..");

263 
	`ems_sy°emcmd
("/etc/init.d/networkÑestart");

264 
	`exô
(1);

267 
	`fw_upd©e_Æl_ruÀs
(
fw
);

269  
EMS_OK
;

270 
	}
}

272 
ems_öt


273 
	$fw_≠p_ruÀs_upd©e
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

275 
	`fw_upd©e_Æl_ruÀs
(
fw
);

276  
EMS_OK
;

277 
	}
}

279 
ems_öt
 
	$fw_ruÀs_addªss_add
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

281 
	`ems_as£π
(
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_¨øy
));

283 i‡(!
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_¨øy
))

284  
EMS_ERR
;

286  
	`fw_≠≥nd_uæs
(
fw
, &fw->
whôñi°
, 
roŸ
);

287 
	}
}

289 
ems_öt
 
	$fw_ruÀs_addªss_dñ
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

291 
	`ems_as£π
(
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_¨øy
));

293 i‡(!
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_¨øy
))

294  
EMS_ERR
;

296  
	`fw_ªmove_uæs
(
fw
, &fw->
whôñi°
, 
roŸ
);

297 
	}
}

299 
ems_öt
 
	$fw_ruÀs_ødius_devi˚_‰ì
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

301 
ems_°r
 
ù
;

302 
ems_°r
 
mac
;

303 
ems_öt
 
add
;

305 
	`ems_as£π
(
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_obje˘
));

307 
	`°r_öô
(&
ù
);

308 
	`°r_öô
(&
mac
);

310 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rù", &
ù
, 
NULL
);

311 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rmac", &
mac
, 
NULL
);

312 
	`ems_js⁄_gë_öt_def
(
roŸ
, "add", 
add
, 0);

314 i‡(
	`°r_Àn
(&
ù
Ë> 0 && så_Àn(&
mac
) > 0) {

315 
	`fw_devi˚_‰ì
(
	`°r_ãxt
(&
ù
), så_ãxt(&
mac
), 
add
);

318 
	`°r_unöô
(&
ù
);

319 
	`°r_unöô
(&
mac
);

321  
EMS_OK
;

322 
	}
}

324 
ems_öt
 
	$fw_£rvî_ruÀs_upd©e
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

326  
	`fw_Êush_whûãli°
(
fw
);

327 
	}
}

329 
ems_öt
 
	$fw_uæ_is_subdomaö
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

331 
ems_öt
 
πn
;

332 
ems_°r
 
uæ
;

334 
	`°r_öô
(&
uæ
);

336 
πn
 = 
EMS_NO
;

337 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "uæ", &
uæ
, 
NULL
);

339 i‡(
	`°r_Àn
(&
uæ
) > 0)

340 
πn
 = 
	`fw_uæ_ö_whôñi°
(
fw
, 
	`°r_ãxt
(&
uæ
));

342 
	`°r_unöô
(&
uæ
);

344  
πn
;

345 
	}
}

347 
ems_öt
 
	$fw_∑øm_is_≠∂e_com
(
ems_fw
 *
fw
, 
js⁄_obje˘
 *
roŸ
)

349 
ems_öt
 
πn
;

350 
ems_°r
 
¨g
;

351 
ems_°r
 
ù
;

352 
dns_uæ
 *
uæ
;

353 
ö_addr
 
addr
;

355 
	`°r_öô
(&
ù
);

356 
	`°r_öô
(&
¨g
);

358 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "ù", &
ù
, 
NULL
);

359 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "¨g", &
¨g
, 
NULL
);

362 
πn
 = 
EMS_NO
;

363 i‡(! (
	`°r_Àn
(&
ù
Ë> 0 && så_Àn(&
¨g
))) ;

365 
	`mem£t
(&
addr
, 0, (addr));

366 
addr
.
s_addr
 = 
	`öë_addr
(
	`°r_ãxt
(&
ù
));

367 i‡(
addr
.
s_addr
 =
INADDR_NONE
) ;

369 
	#APPLE_COM
 "≠∂e.com"

	)

370 
uæ
 = 
	`dns_föd_uæ
(
fw
, 
APPLE_COM
);

371 i‡(!
uæ
) ;

373 i‡(!
	`°r°r
(
	`°r_ãxt
(&
¨g
), 
APPLE_COM
)) ;

375 
uæ
 = 
	`dns_uæ_√w
();

376 i‡(!
uæ
) ;

378 
	`°r_£t
(&
uæ
->uæ, 
	`°r_ãxt
(&
ù
));

380 
uæ
->
addr
 = (
ö_addr
 *)
	`ems_mÆloc
((addr));

381 i‡(
uæ
->
addr
) {

382 
	`mem˝y
(
uæ
->
addr
, &addr, (addr));

383 
uæ
->
n_addr
 = 1;

384 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
);

385 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_YES
);

386 
	`fw_dns_subdomaö_≠≥nd
(
fw
, 
uæ
);

388 
πn
 = 
EMS_YES
;

393 
	`°r_unöô
(&
¨g
);

394 
	`°r_unöô
(&
ù
);

396  
πn
;

397 
	}
}

399 
ems_öt


400 
	$fw_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

402 
	`ems_l_åa˚
("[fw]Évt: 0x%x, from: 0x%x,árgs: %s",

403 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

404 
evt
) {

406 
EMS_APP_START
:

407  
	`fw_run
(
mod
, 
EMS_YES
);

409 
EMS_APP_STOP
:

410  
	`fw_run
(
mod
, 
EMS_NO
);

412 
EMS_APP_FW_CLEAR
:

413  
	`fw_unöô_chaös
(
NULL
);

419 i‡(!
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

420  
EMS_OK
;

422 
evt
) {

423 
EMS_APP_CHECK_PARAM_APPLE_COM
:

424  
	`fw_∑øm_is_≠∂e_com
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

426 
EMS_APP_CHECK_SUBDOMAIN
:

427  
	`fw_uæ_is_subdomaö
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

429 
EMS_APP_RULES_UPDATE
:

430  
	`fw_≠p_ruÀs_upd©e
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

432 
EMS_APP_SERVER_RULES_UPDATE
:

433  
	`fw_£rvî_ruÀs_upd©e
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

435 
EMS_APP_EVT_FW_RELOAD
:

436  
	`fw_ruÀs_ªlﬂd
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

438 
EMS_APP_FW_ADDRESS_ADD
:

439  
	`fw_ruÀs_addªss_add
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

441 
EMS_APP_FW_ADDRESS_DEL
:

442  
	`fw_ruÀs_addªss_dñ
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

444 
EMS_APP_FW_RADIUS_DEVICE_FREE
:

445  
	`fw_ruÀs_ødius_devi˚_‰ì
((
ems_fw
 *)
mod
->
˘x
, 
roŸ
);

451  
EMS_OK
;

452 
	}
}

455 
≠p_moduÀ
 
	g≠p_fw
 = {

456 .
ty
 = 
ty_fw
,

457 .
	gdesc
 = 
ems_°rög
("firewall"),

458 .
	g˘x
 = 
NULL
,

459 .
	gÊg
 = 0,

461 .
	göô
 = 
fw_öô
,

462 .
	gunöô
 = 
fw_unöô
,

463 .
	grun
 = 
fw_run
,

464 .
	g¥o˚ss
 = 
fw_¥o˚ss
,

465 .
	g¥o˚ss_ruÀ
 = 
NULL
,

466 .
	gvîsi⁄_m©ch
 = 
NULL
,

467 .
	gö°Æl
 = 
NULL


	@src/core/app_net.c

3 
	~"ems_c‹e.h
"

4 
	~"ems_˛õ¡.h
"

5 
	~"≠p.h
"

6 
	~"ems_√tcheck.h
"

8 
ems_öt


9 
	$dns_∑r£_™d_r•
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
sockaddr_ö
 *
‰om
)

11 
ems_öt
 
ªt
;

12 
ems_ch¨
 *
qa
;

13 
ems_ch¨
 *
ø
;

14 
ems_ch¨
 *
n
;

15 
ö_addr_t
 
addr
;

17 
ems_ch¨
 
buf
[] = {

24 
gw
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_œn_addr
);

25 i‡(!
gw
) {

26 
	`ems_as£π
(0 && "shouldÇever be here");

27  
EMS_ERR
;

31 
addr
 = 
	`öë_addr
("192.168.19.87");

32 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, 
	`buf_rd
(&£ss->
buf_ö
), 
	`buf_Àn
(&sess->buf_in));

33 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, buf, (buf));

34 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, (
ems_ch¨
 *)&
addr
, (addr));

36 
qa
 = 
	`buf_rd
(&
£ss
->
buf
) + 2;

37 
ø
 = 
	`buf_rd
(&
£ss
->
buf
) + 3;

38 
n
 = 
	`buf_rd
(&
£ss
->
buf
) + 7;

40 *
qa
 |= 0x84;

41 *
ø
 |= 0x80;

42 *
n
 |= 0x01;

44 
ªt
 = 
	`£ndto
(
	`ems_sock_fd
(&
£ss
->
sock
),

45 
	`buf_rd
(&
£ss
->
buf
),

46 
	`buf_Àn
(&
£ss
->
buf
),

48 (
sockaddr
 *)
‰om
,

49 (
sockaddr_ö
));

51 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

52 i‡–
ªt
 <= 0)

53  
EMS_ERR
;

55  
EMS_OK
;

56 
	}
}

58 
ems_öt
 
	$dns_ªdúe˘
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
)

60 
sockÀn_t
 
Àn
;

61 
sockaddr_ö
 
‰om
;

62 
ªt
;

63 
ems_buf„r
 *
buf
 = &
£ss
->
buf_ö
;

65 
	`ems_as£π
(
pög
->
£ss_dns
 =
£ss
);

67 
Àn
 = (
‰om
);

68 
agaö
:

69 
ªt
 = 
	`ªcv‰om
(
	`ems_sock_fd
(&
£ss
->
sock
), 
	`buf_wr
(
buf
), 
	`buf_À·
(buf), 0,

70 (
sockaddr
 *)&
‰om
, &
Àn
);

72 i‡(
ªt
 <= 0) {

73  
EMS_ERR
;

76 
	`ems_buf„r_£ek_wr
(
buf
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

78 
	`dns_∑r£_™d_r•
(
pög
, 
£ss
, &
‰om
);

80 
	`ems_buf„r_˛ór
(
buf
);

82 
agaö
;

84  
EMS_OK
;

85 
	}
}

87 
ems_void
 
	$dns_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

89 
√tcheck
 *
pög
 = (√tcheck *)
	`£ss_cb¨g
(
£ss
);

91 i‡(
îr
) {

92 
	`ems_l_åa˚
("[pög] dn†î∏£ss: %d", 
	`ems_sock_fd
(&
£ss
->
sock
));

93 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
pög
->
£ss_dns
);

94 
pög
->
£ss_dns
 = 
NULL
;

98 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

99 
	`dns_ªdúe˘
(
pög
, 
£ss
);

102 
	}
}

104 
ems_öt
 
	$dns_böd
(
ems_£ssi⁄
 *
£ss
)

106 
fd
, 
rc
, 
›t
 = 1;

107 
sockaddr_ö
 
addr
;

108 
ems_sock
 *
sock
 = &
£ss
->sock;

110 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) == -1)

112 
	`ems_l_åa˚
("[pög]sockëÉº: %s", 
	`ems_œ°îrmsg
());

113  
EMS_ERR
;

116 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt)) == -1)

118 
	`ems_l_åa˚
("[pög]£tsock›àîr: %s", 
	`ems_œ°îrmsg
());

119 
	`˛o£
(
fd
);

120  
EMS_ERR
;

123 
	`mem£t
(&
addr
, 0, (addr));

124 
addr
.
sö_Ámûy
 = 
AF_INET
;

125 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
DNS_INTERCEPT_PORT
);

126 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0);

128 i‡((
rc
 = 
	`böd
(
fd
, (
sockaddr
 *)&
addr
, (
sockaddr_ö
))) == -1)

130 
	`ems_l_åa˚
("î∏böd: %s", 
	`ems_œ°îrmsg
());

131 
	`˛o£
(
fd
);

132  
EMS_ERR
;

135 
	`ems_sock_£èddr
(
sock
, "0.0.0.0");

136 
	`ems_sock_£tfd
(
sock
, 
fd
);

137  
EMS_OK
;

138 
	}
}

140 
ems_öt
 
	$dns_öãr˚±_°¨t
(
√tcheck
 *
pög
)

142 
ems_£ssi⁄
 *
£ss
;

143 
	`ems_as£π
(
pög
 !
NULL
);

145 
pög
->
£ss_dns
 = 
	`ems_£ssi⁄_√w
();

146 i‡(!
pög
->
£ss_dns
)

147  
EMS_ERR
;

149 i‡(
	`dns_böd
(
pög
->
£ss_dns
Ë!
EMS_OK
) {

150 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
pög
->
£ss_dns
);

151 
pög
->
£ss_dns
 = 
NULL
;

152  
EMS_ERR
;

155 
£ss
 = 
pög
->
£ss_dns
;

156 
	`£ss_cb¨g_£t
(
£ss
, 
pög
);

157 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
dns_evt_cb
);

159 
	`ems_l_åa˚
("[ping] dns server (%d) %s",

160 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

162  
EMS_OK
;

163 
	}
}

165 
ems_öt
 
	$dns_öãr˚±_°›
(
√tcheck
 *
pög
)

167 
	`ems_as£π
(
pög
 !
NULL
);

169 i‡(
pög
->
£ss_dns
) {

170 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
pög
->
£ss_dns
);

171 
pög
->
£ss_dns
 = 
NULL
;

174  
EMS_OK
;

175 
	}
}

177 
√tcheck
 *
	$√t_check_√w
()

179  (
√tcheck
 *)
	`ems_mÆloc
((netcheck));

180 
	}
}

182 
ems_void
 
	$√t_check_de°roy
(
√tcheck
 *
pög
)

184 i‡(
pög
)

185 
	`ems_‰ì
(
pög
);

186 
	}
}

188 
ems_öt
 
	$√t_öô
(
≠p_moduÀ
 *
mod
)

190 
√tcheck
 *
pög
 = 
NULL
;

192 
pög
 = 
	`√t_check_√w
();

194 i‡(
pög
) {

195 
	`mem£t
(
pög
, 0, (
√tcheck
));

197 
pög
->
°
 = 
°_°›≥d
;

198 
pög
->
£ss
 = 
NULL
;

199 
pög
->
£ss_dns
 = 
NULL
;

201 
mod
->
˘x
 = (
ems_void
 *)
pög
;

204  
EMS_OK
;

205 
	}
}

207 
ems_öt
 
	$√t_unöô
(
≠p_moduÀ
 *
mod
)

209 
√tcheck
 *
pög
 = (√tcheck *)
mod
->
˘x
;

211 i‡(!
pög
)

212  
EMS_OK
;

214 
mod
->
˘x
 = 
NULL
;

216 
	`ems_as£π
(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
));

217 
	`ems_as£π
(
pög
->
°
 =
°_°›≥d
);

218 
	`ems_as£π
(
pög
->
£ss_dns
 =
NULL
);

220 i‡(
pög
->
°
 !
°_°›≥d
) {

221 
	`pög_ch™ge_°©us
(
pög
, 
°_°›≥d
);

222 
pög
->
°
 = 
°_°›≥d
;

225 
	`dns_öãr˚±_°›
(
pög
);

226 
pög
->
£ss
 = 
NULL
;

227 
pög
->
£ss_dns
 = 
NULL
;

229 
	`ems_‰ì
(
pög
);

231  
EMS_OK
;

232 
	}
}

234 
ems_öt
 
	$√t_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

236 
√tcheck
 *
pög
 = (√tcheck *)
mod
->
˘x
;

238 
	`ems_as£π
(
pög
);

240 i‡(
run
) {

241 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

242  
EMS_OK
;

244 
	`ems_l_åa˚
("net detector start");

245 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

246 
	`pög_ch™ge_°©us
(
pög
, 
°_°¨t
);

248 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

249  
EMS_OK
;

251 
	`ems_l_åa˚
("net detector stopping");

252 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

253 
	`pög_ch™ge_°©us
(
pög
, 
°_°›≥d
);

256  
EMS_OK
;

257 
	}
}

260 
ems_öt


261 
	$√t_dns_öãr˚±_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

263 
√tcheck
 *
pög
 = (√tcheck *)
mod
->
˘x
;

265 i‡(
run
) {

266 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_NET_DNS_RUN
))

267  
EMS_OK
;

269 
	`ems_l_åa˚
("net dns intercept start");

270 i‡(
	`dns_öãr˚±_°¨t
(
pög
Ë=
EMS_OK
) {

271 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_NET_DNS_RUN
);

272  
EMS_OK
;

275 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_NET_DNS_RUN
))

276  
EMS_OK
;

278 
	`ems_l_åa˚
("net dns intercept stopped");

279 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_NET_DNS_RUN
);

280  
	`dns_öãr˚±_°›
(
pög
);

283  
EMS_ERR
;

284 
	}
}

286 
ems_öt


287 
	$√t_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

289 
	`ems_l_åa˚
("netÉvt: 0x%x, from: 0x%x,árgs: %s",

290 
evt
, 
s
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"");

292 
evt
) {

293 
EMS_APP_START
:

294  
	`√t_run
(
mod
, 
EMS_YES
);

296 
EMS_APP_STOP
:

297  
	`√t_run
(
mod
, 
EMS_NO
);

299 
EMS_APP_DNS_INTERCEPT_STOP
:

300 
	`√t_dns_öãr˚±_run
(
mod
, 
EMS_NO
);

307 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
)) {

308 
	`ems_l_åa˚
("net, currentÇotÑunning");

309  
EMS_ERR
;

312 
evt
) {

313 
EMS_APP_DNS_INTERCEPT_START
:

314 
	`√t_dns_öãr˚±_run
(
mod
, 
EMS_YES
);

321  
EMS_OK
;

322 
	}
}

325 
≠p_moduÀ
 
	g≠p_√t
 =

327 .
ty
 = 
ty_√t
,

328 .
	gdesc
 = 
ems_°rög
("netdetect"),

329 .
	g˘x
 = 
NULL
,

330 .
	gÊg
 = 0,

332 .
	göô
 = 
√t_öô
,

333 .
	gunöô
 = 
√t_unöô
,

334 .
	grun
 = 
√t_run
,

335 .
	g¥o˚ss
 = 
√t_¥o˚ss
,

336 .
	g¥o˚ss_ruÀ
 = 
NULL
,

337 .
	gvîsi⁄_m©ch
 = 
NULL
,

338 .
	gö°Æl
 = 
NULL


	@src/core/app_portal.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_fw.h
"

6 
	~"ems_p‹èl.h
"

8 
ems_öt
 
±l_°¨t
(
ems_p‹èl
 *
±l
);

9 
ems_öt
 
±l_°›
(
ems_p‹èl
 *
±l
);

11 
ems_öt
 
	$p‹èl_cfg_öô
()

13 
ems_cfg
 *
cfg
 = 
	`emscfg
();

14 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_addr
))

15 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_addr
, "zuhu-pa.lekewifi.com");

17 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_p‹t
))

18 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_p‹t
, 
	`ems_ôﬂ
(2000));

20 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_ªdúe˘
))

21 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_ªdúe˘
, 
	`ems_ôﬂ
(80));

23 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_ªg
))

24 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_ªg
, 
	`ems_ôﬂ
(600));

26 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_hb
))

27 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_hb
, 
	`ems_ôﬂ
(30));

29 i‡(!
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_auto
))

30 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_auto
, 
	`ems_ôﬂ
(1));

32  
EMS_OK
;

33 
	}
}

35 
ems_öt
 
	$p‹èl_öô
(
≠p_moduÀ
 *
mod
)

37 
ems_p‹èl
 *
±l
 = 
NULL
;

38 
	`ems_as£π
(
mod
);

40 
	`p‹èl_cfg_öô
();

42 
±l
 = (
ems_p‹èl
 *)
	`ems_mÆloc
((ems_portal));

43 i‡(!
±l
)

44  
EMS_ERR
;

46 
	`mem£t
(
±l
, 0, (
ems_p‹èl
));

48 
	`ems_queue_öô
(&
±l
->
u£rs
);

49 
±l
->
£ss
 = 
NULL
;

50 
	`°r_öô
(&
±l
->
addr
);

51 
±l
->
°
 = 
°_°›≥d
;

53 
mod
->
˘x
 = (
ems_void
 *)
±l
;

55  
EMS_OK
;

56 
	}
}

59 
ems_öt
 
	$p‹èl_unöô
(
≠p_moduÀ
 *
mod
)

61 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

63 
mod
->
˘x
 = 
NULL
;

65 i‡(
±l
) {

66 
	`ems_queue_˛ór
(&
±l
->
u£rs
, 
p‹èl_u£r
, 
íåy
, 
±l_u£r_de°roy
);

67 
	`°r_unöô
(&
±l
->
addr
);

68 
	`ems_‰ì
(
±l
);

70  
EMS_OK
;

71 
	}
}

73 
ems_öt
 
	$p‹èl_ruÀs_upd©e
(
ems_p‹èl
 *
±l
, 
js⁄_obje˘
 *
ªq
, 
ems_öt
 
run
)

75 
ems_uöt
 
tmp
, 
ª°¨t
;

76 
ems_°r
 
buf
;

77 
ems_cfg
 *
cfg
 = 
	`emscfg
();

79 
ª°¨t
 = 0;

80 
	`°r_öô
(&
buf
);

82 
	`ems_js⁄_gë_°rög_def
(
ªq
, "addr", &
buf
, 
NULL
);

83 i‡(
	`°r_Àn
(&
buf
) > 0) {

84 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_addr
, 
	`°r_ãxt
(&
buf
));

86 i‡(!
ª°¨t
 &&

87 ((
	`°r_Àn
(&
±l
->
addr
Ë!°r_Àn(&
buf
)) ||

88 
	`°rcmp
(
	`°r_ãxt
(&
±l
->
addr
), så_ãxt(&
buf
))))

90 
ª°¨t
 = 1;

94 i‡(
	`°rcmp
("127.0.0.1", 
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_addr
))){

95 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_CONFIG_READY
);

98 
	`ems_js⁄_gë_öt_def
(
ªq
, "p‹t", 
tmp
, 2000);

99 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_p‹t
, 
	`ems_ôﬂ
(
tmp
));

100 i‡(!
ª°¨t
 && 
tmp
 !
±l
->
p‹t
)Ñestart = 1;

102 
	`ems_js⁄_gë_öt_def
(
ªq
, "ªg_≥riod", 
tmp
, 600);

103 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_ªg
, 
	`ems_ôﬂ
(
tmp
));

104 i‡(
tmp
 > 0Ë
±l
->
ªg_≥riod
 =Åmp;

106 
	`ems_js⁄_gë_öt_def
(
ªq
, "hb_≥riod", 
tmp
, 30);

107 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_hb
, 
	`ems_ôﬂ
(
tmp
));

108 i‡(
tmp
 > 0Ë
±l
->
hb_≥riod
 =Åmp;

110 
	`ems_js⁄_gë_öt_def
(
ªq
, "ªdúe˘_p‹t", 
tmp
, 80);

111 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_ªdúe˘
, 
	`ems_ôﬂ
(
tmp
));

113 
	`°r_unöô
(&
buf
);

115 i‡(
run
 && 
ª°¨t
) {

116 
	`ems_l_åa˚
("portalÑestart...");

117 
	`±l_°›
(
±l
);

118 
	`±l_°¨t
(
±l
);

121  
EMS_OK
;

122 
	}
}

124 
ems_öt
 
	$p‹èl_≠p_ruÀs_upd©e
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
ªq
, 
ems_öt
 
run
)

126 
ems_cfg
 *
cfg
 = 
	`emscfg
();

127 
ems_uöt
 
tmp
;

128 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

129 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

131 
	`ems_js⁄_gë_öt_def
(
ªq
, "auto", 
tmp
, 1);

132 
	`cfg_£t
(
cfg
, 
CFG_≠p_p‹èl_auto
, 
	`ems_ôﬂ
(
tmp
));

134 i‡(
tmp
)

135 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_PORTAL_AUTO
);

137 
	`ems_Êag_un£t
(
c‹e
->
Êg
, 
FLG_PORTAL_AUTO
);

139 i‡(
tmp
)

140  
EMS_OK
;

142  
	`p‹èl_ruÀs_upd©e
(
±l
, 
ªq
, 
run
);

143 
	}
}

145 
ems_öt


146 
	$p‹èl_≠p_auth_r•
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

148 
js⁄_obje˘
 *
obj
;

149 
ems_öt
 
îr
;

150 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

152 
	`ems_js⁄_gë_öt_def
(
roŸ
, "îr‹_code", 
îr
, 0);

154 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "userip");

155 
	`ems_as£π
(
obj
 !
NULL
);

157 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

158  
EMS_ERR
;

160  
	`±l_u£r_auth_r•
(
±l
, 
	`±l_u£r_föd
’é, 
	`js⁄_obje˘_gë_°rög
(
obj
)), 
îr
);

161 
	}
}

163 
ems_öt


164 
	$p‹èl_≠p_logout
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

166 
js⁄_obje˘
 *
obj
;

167 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

169 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "userip");

170 
	`ems_as£π
(
obj
 !
NULL
);

172 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

173  
EMS_ERR
;

175  
	`±l_u£r_¡f_logout
(
±l
, 
	`±l_u£r_föd
’é, 
	`js⁄_obje˘_gë_°rög
(
obj
)));

176 
	}
}

178 
ems_öt


179 
	$p‹èl_≠p_£rvî_ruÀs_upd©e
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

181 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

183 i‡(!
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_auto
))) {

184 
	`ems_l_åa˚
("use user defined configs...");

185  
EMS_OK
;

188  
	`p‹èl_ruÀs_upd©e
(
±l
, 
roŸ
, 
EMS_YES
);

189 
	}
}

191 
ems_öt


192 
	$p‹èl_≠p_evt_°©us
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

194 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

195  
±l
->
œ°îr
;

196 
	}
}

198 
ems_öt


199 
	$p‹èl_evt_addªss
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

201 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

202  
	`±l_cuºít_addªss
(
±l
);

203 
	}
}

205 
ems_öt
 
p‹èl_run
(
≠p_moduÀ
 *
mod
,Éms_öà
run
);

207 
ems_öt


208 
	$p‹èl_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

210 
	`ems_l_åa˚
("p‹è»gŸÉvt: 0x%x,árgs: %s", 
evt
, 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

212 
evt
) {

213 
EMS_APP_START
:

214  
	`p‹èl_run
(
mod
, 
EMS_YES
);

216 
EMS_APP_STOP
:

217  
	`p‹èl_run
(
mod
, 
EMS_NO
);

219 
EMS_APP_RULES_UPDATE
:

220  
	`p‹èl_≠p_ruÀs_upd©e
(
mod
, 
roŸ
, 
	`ems_Êag_like
(mod->
Êg
, 
FLG_RUN
));

226 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

227  
EMS_ERR
;

229 
evt
) {

230 
EMS_APP_EVT_FW_RELOAD
:

232 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

233 
js⁄_obje˘
 *
¨y
;

234 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

236 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
±l
->
addr
)));

237 
	`ems_≠p_¥o˚ss
(
ty_p‹èl
, 
ty_fw
, 
EMS_APP_FW_ADDRESS_ADD
, 
¨y
);

239 
	`js⁄_obje˘_put
(
¨y
);

240  
EMS_OK
;

244 
EMS_APP_RULES_UPDATE
:

245  
	`p‹èl_≠p_ruÀs_upd©e
(
mod
, 
roŸ
, 
EMS_YES
);

247 
EMS_APP_CMD_RADIUS_AUTH_RSP
:

248  
	`p‹èl_≠p_auth_r•
(
mod
, 
roŸ
);

250 
EMS_APP_CMD_PORTAL_LOGOUT
:

251  
	`p‹èl_≠p_logout
(
mod
, 
roŸ
);

253 
EMS_APP_SERVER_RULES_UPDATE
:

254  
	`p‹èl_≠p_£rvî_ruÀs_upd©e
(
mod
, 
roŸ
);

256 
EMS_APP_EVT_STATUS
:

257  
	`p‹èl_≠p_evt_°©us
(
mod
, 
roŸ
);

259 
EMS_APP_PORTAL_ADDRESS
:

260  
	`p‹èl_evt_addªss
(
mod
, 
roŸ
);

266  
EMS_OK
;

267 
	}
}

269 
ems_öt
 
	$p‹èl_¥o˚ss_ruÀ
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

271  
EMS_OK
;

272 
	}
}

274 
ems_öt
 
	$±l_°¨t
(
ems_p‹èl
 *
±l
)

276 
ems_cfg
 *
cfg
 = 
	`emscfg
();

278 
	`°r_£t
(&
±l
->
addr
, 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_addr
));

279 
±l
->
p‹t
 = 
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_p‹t
));

280 
±l
->
ªg_≥riod
 = 
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_ªg
));

281 
±l
->
hb_≥riod
 = 
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_hb
));

283 
	`ems_l_åa˚
("portal start: (%s:%d,Ñeg: %d, hb: %d)",

284 
	`°r_ãxt
(&
±l
->
addr
),Öé->
p‹t
,Öé->
ªg_≥riod
,Öé->
hb_≥riod
);

286 
js⁄_obje˘
 *
¨y
;

287 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

289 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
±l
->
addr
)));

290 
	`ems_≠p_¥o˚ss
(
ty_p‹èl
, 
ty_fw
, 
EMS_APP_FW_ADDRESS_ADD
, 
¨y
);

292 
	`js⁄_obje˘_put
(
¨y
);

294  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_°¨t
);

295 
	}
}

297 
ems_öt
 
	$±l_°›
(
ems_p‹èl
 *
±l
)

299 
	`ems_as£π
(
	`°r_Àn
(&
±l
->
addr
Ë> 0 && 
	`°r_ãxt
(&ptl->addr));

301 
js⁄_obje˘
 *
¨y
;

302 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

304 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
±l
->
addr
)));

305 
	`ems_≠p_¥o˚ss
(
ty_p‹èl
, 
ty_fw
, 
EMS_APP_FW_ADDRESS_DEL
, 
¨y
);

307 
	`js⁄_obje˘_put
(
¨y
);

309  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_°›≥d
);

310 
	}
}

312 
ems_öt
 
	$p‹èl_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

314 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
mod
->
˘x
;

315 
	`ems_as£π
(
mod
 && 
±l
);

317 i‡(
run
) {

318 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

319  
EMS_OK
;

321 
	`ems_l_åa˚
("portalÑunning here");

322 i‡(
	`±l_°¨t
(
±l
Ë=
EMS_OK
)

323 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

325 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

326  
EMS_OK
;

328 
	`±l_°›
(
±l
);

329 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

330 
	`ems_l_åa˚
("portal stopped");

333  
EMS_OK
;

334 
	}
}

336 
≠p_moduÀ
 
	g≠p_p‹èl
 = {

338 .
ty
 = 
ty_p‹èl
,

339 .
	gdesc
 = 
ems_°rög
("portal"),

340 .
	g˘x
 = 
NULL
,

341 .
	gÊg
 = 0,

343 .
	göô
 = 
p‹èl_öô
,

344 .
	gunöô
 = 
p‹èl_unöô
,

345 .
	grun
 = 
p‹èl_run
,

346 .
	g¥o˚ss
 = 
p‹èl_¥o˚ss
,

347 .
	g¥o˚ss_ruÀ
 = 
p‹èl_¥o˚ss_ruÀ
,

348 .
	gvîsi⁄_m©ch
 = 
NULL
,

349 .
	gö°Æl
 = 
NULL


	@src/core/app_radius.c

3 
	~"ems_c‹e.h
"

4 
	~"ems_˛õ¡.h
"

5 
	~"≠p.h
"

6 
	~"ems_ødius.h
"

7 
	~"ems_fw.h
"

9 
ems_devi˚
 *
	$ødius_föd_dev
(
ems_ødius
 *
ø
, 
ems_cch¨
 *
ù
)

11 
ems_queue
 *
p
;

12 
ems_devi˚
 *
dev
;

14 
	`ems_queue_f‹óch
(&
ø
->
dev_íåy
, 
p
) {

15 
dev
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_devi˚
, 
íåy
);

17 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
), ip))

18  
dev
;

21  
NULL
;

22 
	}
}

24 
rc_h™dÀ
 *
	$ødius_¸óã_h™dÀ
()

26 
ems_cch¨
 *
Ê
;

27 
rc_h™dÀ
 *
rh
 = 
NULL
;

29 
rh
 = 
	`rc_√w
();

30 i‡(!
rh
)

31  
NULL
;

33 
	`rc_c⁄fig_öô
(
rh
);

35 
Ê
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_ødius_di˘
);

36 i‡(!
Ê
) {

37 
	`cfg_£t
(
	`emscfg
(), 
CFG_ødius_di˘
, "/usr/ems/conf/dictionary");

38 
Ê
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_ødius_di˘
);

41 i‡(
	`rc_ªad_di˘i⁄¨y
(
rh
, 
Ê
) != 0) {

42 
	`rc_de°roy
(
rh
);

43  
NULL
;

46  
rh
;

47 
	}
}

49 
ems_öt
 
	$ødius_°¨t
(
ems_ødius
 *
ø
)

51 
ems_cfg
 *
cfg
 = 
	`emscfg
();

52 
ems_cch¨
 *
vÆ
 = 
NULL
;

54 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_addr
);

56 i‡(
vÆ
) {

57 
	`°r_£t
(&
ø
->
auth_addr
, 
vÆ
);

58 
	`°r_£t
(&
ø
->
ac˘_addr
, 
vÆ
);

60 
	`ems_as£π
(0 && "never be here");

61 
	`ems_l_åa˚
("ødiu†°¨àÁûed, %†missög", 
CFG_≠p_ødius_addr
);

62  
EMS_ERR
;

65 
ø
->
auth_p‹t
 = 
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
));

66 
ø
->
ac˘_p‹t
 = 
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
));

68 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
);

69 i‡(
vÆ
)

70 
	`°r_£t
(&
ø
->
£¸ë
, 
vÆ
);

72 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_times
);

73 i‡(
vÆ
)

74 
ø
->
ªåy_times
 = 
	`ems_©oi
(
vÆ
);

76 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_timeout
);

77 i‡(
vÆ
)

78 
ø
->
ªåy_timeout
 = 
	`ems_©oi
(
vÆ
);

80 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
);

81 i‡(
vÆ
)

82 
ø
->
ªp‹t_≥riod
 = 
	`ems_©oi
(
vÆ
);

84 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
);

85 i‡(
vÆ
)

86 
ø
->
disc⁄√˘
 = 
	`ems_©oi
(
vÆ
);

88 
ø
->
œ°îr
 = 0;

90  
EMS_OK
;

91 
	}
}

93 
ems_öt
 
	$ødius_°›
(
ems_ødius
 *
ø
)

95 
ems_queue
 *
p
;

96 
ems_devi˚
 *
dev
;

98 
ø
->
œ°îr
 = 0;

99 
	`ems_queue_f‹óch
(&
ø
->
dev_íåy
, 
p
) {

100 
dev
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_devi˚
, 
íåy
);

101 
dev
->
îr
 = 7;

102 
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

105  
EMS_OK
;

106 
	}
}

108 
ems_ødius
 *
	$ødius_√w
()

110  (
ems_ødius
 *)
	`ems_mÆloc
((ems_radius));

111 
	}
}

113 
ems_void
 
	$ødius_de°roy
(
ems_ødius
 *
ø
)

115 i‡(
ø
)

116 
	`ems_‰ì
(
ø
);

117 
	}
}

119 
ems_öt
 
	$ødius_öô
(
ems_ødius
 *
ø
)

121 
	`ems_as£π
(
ø
 !
NULL
);

122 
	`mem£t
(
ø
, 0, (
ems_ødius
));

124 
	`ems_queue_öô
(&
ø
->
dev_íåy
);

125 
ø
->
£q_nbr
 = 
	`time
(
NULL
);

126 
	`°r_öô
(&
ø
->
£¸ë
);

127 
	`°r_öô
(&
ø
->
auth_addr
);

128 
	`°r_öô
(&
ø
->
ac˘_addr
);

130 
ø
->
ªåy_times
 = 3;

131 
ø
->
ªåy_timeout
 = 10;

132 
ø
->
ªp‹t_≥riod
 = 300;

133 
ø
->
disc⁄√˘
 = 300;

135 
ø
->
rh
 = 
	`ødius_¸óã_h™dÀ
();

136 i‡(!
ø
->
rh
)

137  
EMS_ERR
;

139  
EMS_OK
;

140 
	}
}

142 
ems_öt
 
	$ødius_unöô
(
ems_ødius
 *
ø
)

144 
ems_queue
 *
p
, *
q
;

145 
ems_devi˚
 *
dev
;

147 i‡(!
ø
)

148  
EMS_OK
;

150 i‡(
ø
->
rh
) {

151 
	`rc_de°roy
(
ø
->
rh
);

152 
ø
->
rh
 = 
NULL
;

155 
	`ems_queue_f‹óch_ß„
(&
ø
->
dev_íåy
, 
p
, 
q
) {

156 
dev
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_devi˚
, 
íåy
);

157 
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

160 
	`°r_unöô
(&
ø
->
£¸ë
);

161 
	`°r_unöô
(&
ø
->
auth_addr
);

162 
	`°r_unöô
(&
ø
->
ac˘_addr
);

164  
EMS_OK
;

165 
	}
}

167 
ems_öt
 
	$ødius_cfg_öô
()

169 
ems_cfg
 *
cfg
 = 
	`emscfg
();

170 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_addr
))

171 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_addr
, "zuhu-pa.lekewifi.com");

173 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
))

174 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
, 
	`ems_ôﬂ
(1812));

176 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
))

177 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
, 
	`ems_ôﬂ
(1813));

179 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
))

180 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
, "admin");

182 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
))

183 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
, 
	`ems_ôﬂ
(300));

185 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
))

186 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
, 
	`ems_ôﬂ
(300));

188 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_auto
))

189 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_auto
, 
	`ems_ôﬂ
(1));

191 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_times
))

192 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªåy_times
, 
	`ems_ôﬂ
(3));

194 i‡(!
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_timeout
))

195 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªåy_timeout
, 
	`ems_ôﬂ
(5));

197  
EMS_OK
;

198 
	}
}

201 
ems_öt
 
	$ø_öô
(
≠p_moduÀ
 *
mod
)

203 
	`ødius_cfg_öô
();

205 
mod
->
˘x
 = (
ems_void
 *)
	`ødius_√w
();

206 i‡(!
mod
->
˘x
)

207  
EMS_ERR
;

209 
	`ødius_öô
((
ems_ødius
 *)
mod
->
˘x
);

211  
EMS_OK
;

212 
	}
}

214 
ems_öt
 
	$ø_unöô
(
≠p_moduÀ
 *
mod
)

216 
ems_ødius
 *
ø
 = (ems_ødiu†*)
mod
->
˘x
;

218 i‡(
ø
) {

219 
mod
->
˘x
 = 
NULL
;

221 
	`ødius_unöô
(
ø
);

222 
	`ødius_de°roy
(
ø
);

223 
ø
 = 
NULL
;

226  
EMS_OK
;

227 
	}
}

229 
ems_öt
 
	$ødius_gë_ruÀs
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

231 
ems_°r
 
buf
;

232 
ems_uöt
 
tmp
;

233 
ems_cfg
 *
cfg
 = 
	`emscfg
();

235 
	`ems_l_åa˚
("ødiu†¥o˚s†ruÀ: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

237 i‡(!
	`js⁄_obje˘_is_ty≥
(
roŸ
, 
js⁄_ty≥_obje˘
))

238  
EMS_OK
;

240 
	`°r_öô
(&
buf
);

242 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "addr", &
buf
, 
NULL
);

243 i‡(
	`°r_Àn
(&
buf
) > 0)

244 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_addr
, 
	`°r_ãxt
(&
buf
));

246 
	`ems_js⁄_gë_öt_def
(
roŸ
, "auth_p‹t", 
tmp
, 0);

247 i‡(
tmp
 > 0)

248 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
, 
	`ems_ôﬂ
(
tmp
));

250 
	`ems_js⁄_gë_öt_def
(
roŸ
, "ac˘_p‹t", 
tmp
, 0);

251 i‡(
tmp
 > 0)

252 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
, 
	`ems_ôﬂ
(
tmp
));

254 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "£¸ë", &
buf
, 
NULL
);

255 i‡(
	`°r_Àn
(&
buf
) > 0)

256 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
, 
	`°r_ãxt
(&
buf
));

258 
	`ems_js⁄_gë_öt_def
(
roŸ
, "ªp‹t_≥riod", 
tmp
, 0);

259 i‡(
tmp
 > 0)

260 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
, 
	`ems_ôﬂ
(
tmp
));

262 
	`ems_js⁄_gë_öt_def
(
roŸ
, "disc⁄√˘", 
tmp
, 0);

263 i‡(
tmp
 > 0)

264 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
, 
	`ems_ôﬂ
(
tmp
));

266 
	`°r_unöô
(&
buf
);

268 
	`ems_l_åa˚
("radiusÑule:áddr: %s:Öortáuth: %s,Öort count: %s shared key: %s,ÑeportÖeriod: %s, disconnect: %s",

269 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_addr
),

270 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
),

271 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
),

272 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
),

273 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
),

274 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
)

276  
EMS_OK
;

277 
	}
}

279 
ems_devi˚
 *
	$ems_devi˚_√w
()

281 
ems_devi˚
 *
dev
 = 
NULL
;

283 
dev
 = (
ems_devi˚
 *)
	`ems_mÆloc
((ems_device));

284 i‡(
dev
) {

285 
	`mem£t
(
dev
, 0, (
ems_devi˚
));

286 
	`ems_queue_öô
(&
dev
->
íåy
);

288 
dev
->
£ss_dev
 = 
NULL
;

289 
dev
->
£ss
 = 
NULL
;

290 
dev
->
˘x
 = 
NULL
;

291 
	`°r_öô
(&
dev
->
u£r
.
«me
);

292 
	`°r_öô
(&
dev
->
u£r
.
∑ss
);

293 
	`°r_öô
(&
dev
->
u£r
.
mac
);

294 
	`°r_öô
(&
dev
->
u£r
.
ù
);

295 
	`°r_öô
(&
dev
->
u£r
.
£ssid
);

297 
dev
->
u£r
.
ö_byãs
 = 0;

298 
dev
->
u£r
.
out_byãs
 = 0;

299 
dev
->
u£r
.
ö_pkgs
 = 0;

300 
dev
->
u£r
.
out_pkgs
 = 0;

302 
dev
->
ªåy_times
 = 0;

303 
dev
->
ªåy_timeout
 = 0;

304 
dev
->
ªas⁄
 = 0;

305 
dev
->
îr
 = 0;

306 
dev
->
vp_out
 = 
NULL
;

307 
dev
->
vp_ö
 = 
NULL
;

308 
dev
->
auth_out
 = 
NULL
;

309 
dev
->
auth_ö
 = 
NULL
;

311 
dev
->
°
 = 
°_°›≥d
;

314  
dev
;

315 
	}
}

317 
ems_void
 
	$ems_devi˚_de°roy
(
ems_devi˚
 *
dev
)

319 i‡(
dev
) {

320 i‡(
dev
->
vp_out
) {

321 
	`rc_av∑ú_‰ì
(
dev
->
vp_out
);

322 
dev
->
vp_out
 = 
NULL
;

325 i‡(
dev
->
vp_ö
) {

326 
	`rc_av∑ú_‰ì
(
dev
->
vp_ö
);

327 
dev
->
vp_ö
 = 
NULL
;

330 
	`°r_unöô
(&
dev
->
u£r
.
«me
);

331 
	`°r_unöô
(&
dev
->
u£r
.
∑ss
);

332 
	`°r_unöô
(&
dev
->
u£r
.
mac
);

333 
	`°r_unöô
(&
dev
->
u£r
.
ù
);

334 
	`°r_unöô
(&
dev
->
u£r
.
£ssid
);

336 i‡(
dev
->
£ss_dev
) {

337 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
dev
->
£ss_dev
);

338 
dev
->
£ss_dev
 = 
NULL
;

341 i‡(
dev
->
£ss
) {

342 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
dev
->
£ss
);

343 
dev
->
£ss
 = 
NULL
;

346 
	`ems_‰ì
(
dev
);

348 
	}
}

350 
ems_öt


351 
	$ødius_u£r_ö
(
ems_ødius
 *
ø
, 
ems_°r
 *
«me
,Éms_°∏*
∑ss
,Éms_°∏*
ù
,Éms_°∏*
mac
)

353 
ems_devi˚
 *
dev
 = 
	`ems_devi˚_√w
();

354 
	`ems_l_åa˚
("user user in : %s, %s, %s, %s",

355 
	`°r_ãxt
(
«me
), så_ãxt(
∑ss
),°r_ãxt(
ù
), så_ãxt(
mac
));

357 i‡(!
dev
)

358  
EMS_ERR
;

360 
	`°r_˝y
(&
dev
->
u£r
.
«me
,Çame);

361 
	`°r_˝y
(&
dev
->
u£r
.
∑ss
,Öass);

362 
	`°r_˝y
(&
dev
->
u£r
.
ù
, ip);

363 
	`°r_˝y
(&
dev
->
u£r
.
mac
, mac);

365 
dev
->
˘x
 = 
ø
;

366 
dev
->
disc⁄√˘
 = 
ø
->disc⁄√˘ / (ø->
ªp‹t_≥riod
 + 6) + 1;

368 
	`ems_queue_ö£π_èû
(&
ø
->
dev_íåy
, &
dev
->
íåy
);

370  
	`dev_ch™ge_°©us
(
dev
, 
°_°¨t
);

371 
	}
}

373 
ems_öt
 
	$ødius_cmd_auth
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
roŸ
)

375 
ems_öt
 
πn
;

376 
ems_°r
 
«me
, 
∑ss
, 
ù
, 
mac
;

377 
ems_devi˚
 *
dev
;

379 
	`°r_öô
(&
«me
);

380 
	`°r_öô
(&
∑ss
);

381 
	`°r_öô
(&
ù
);

382 
	`°r_öô
(&
mac
);

385 
πn
 = 
EMS_ERR
;

387 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£∫ame", &
«me
, 
NULL
);

388 i‡(
	`°r_Àn
(&
«me
) <= 0) ;

390 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£Ωass", &
∑ss
, 
NULL
);

391 i‡(
	`°r_Àn
(&
∑ss
) <= 0) ;

393 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rù", &
ù
, 
NULL
);

394 i‡(
	`°r_Àn
(&
ù
) <= 0) ;

396 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rmac", &
mac
, 
NULL
);

397 i‡(
	`°r_Àn
(&
mac
) <= 0) ;

399 
dev
 = 
	`ødius_föd_dev
(
ø
, 
	`°r_ãxt
(&
ù
));

400 i‡(
dev
) {

402 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
), str_text(&mac))) {

404 
	`°r_£t
(&
dev
->
u£r
.
«me
, 
	`°r_ãxt
(&name));

405 
	`°r_£t
(&
dev
->
u£r
.
∑ss
, 
	`°r_ãxt
(&pass));

406 
πn
 = 
	`dev_ch™ge_°©us
(
dev
, 
°_°¨t
);

410 
	`ems_l_åa˚
("ip(%s) user mac changed: %s --> %s",

411 
	`°r_ãxt
(&
ù
), så_ãxt(&
dev
->
u£r
.
mac
), str_text(&mac));

412 
dev
->
îr
 = 2;

413 
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

416 
πn
 = 
	`ødius_u£r_ö
(
ø
, &
«me
, &
∑ss
, &
ù
, &
mac
);

419 
	`°r_unöô
(&
«me
);

420 
	`°r_unöô
(&
∑ss
);

421 
	`°r_unöô
(&
ù
);

422 
	`°r_unöô
(&
mac
);

424  
πn
;

425 
	}
}

427 
ems_öt
 
	$ødius_cmd_logout
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
roŸ
)

429 
ems_öt
 
πn
;

430 
ems_°r
 
«me
, 
ù
, 
mac
;

431 
ems_devi˚
 *
dev
 = 
NULL
;

433 
	`°r_öô
(&
«me
);

434 
	`°r_öô
(&
ù
);

435 
	`°r_öô
(&
mac
);

438 
πn
 = 
EMS_ERR
;

440 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£∫ame", &
«me
, 
NULL
);

441 i‡(
	`°r_Àn
(&
«me
) <= 0) ;

443 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rù", &
ù
, 
NULL
);

444 i‡(
	`°r_Àn
(&
ù
) <= 0) ;

446 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "u£rmac", &
mac
, 
NULL
);

447 i‡(
	`°r_Àn
(&
mac
) <= 0) ;

449 
dev
 = 
	`ødius_föd_dev
(
ø
, 
	`°r_ãxt
(&
ù
));

450 i‡(
dev
) {

451 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
), str_text(&mac))) {

452 
	`ems_l_åa˚
("ù(%sËu£∏logout", 
	`°r_ãxt
(&
ù
));

453 
dev
->
îr
 = 1;

454 
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

458 
πn
 = 
EMS_OK
;

461 
	`°r_unöô
(&
«me
);

462 
	`°r_unöô
(&
ù
);

463 
	`°r_unöô
(&
mac
);

465  
πn
;

466 
	}
}

468 
ems_öt
 
	$ødius_evt_fw_ªlﬂd
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
roŸ
)

470 
ems_queue
 *
p
;

471 
ems_devi˚
 *
dev
;

472 
js⁄_obje˘
 *
obj
;

473 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

475 
	`ems_queue_f‹óch
(&
ø
->
dev_íåy
, 
p
) {

476 
dev
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_devi˚
, 
íåy
);

478 
	`js⁄_obje˘_obje˘_add
(
obj
, "userip",

479 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

480 
	`js⁄_obje˘_obje˘_add
(
obj
, "usermac",

481 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

482 
	`js⁄_obje˘_obje˘_add
(
obj
, "add",

483 
	`js⁄_obje˘_√w_öt
(1));

485 
	`ems_≠p_¥o˚ss
(
ty_ødius
, 
ty_fw
, 
EMS_APP_FW_RADIUS_DEVICE_FREE
, 
obj
);

488 
	`js⁄_obje˘_put
(
obj
);

490  
EMS_OK
;

491 
	}
}

494 
ems_öt
 
	$ødius_ruÀs_upd©e
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
ªq
, 
ems_öt
 
run
)

496 
ems_uöt
 
tmp
, 
ª°¨t
;

497 
ems_°r
 
buf
;

498 
ems_cfg
 *
cfg
 = 
	`emscfg
();

500 
	`°r_öô
(&
buf
);

502 
ª°¨t
 = 0;

503 
	`ems_js⁄_gë_°rög_def
(
ªq
, "addr", &
buf
, 
NULL
);

504 i‡(
	`°r_Àn
(&
buf
) > 0) {

505 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_addr
, 
	`°r_ãxt
(&
buf
));

507 i‡(!
ª°¨t
 &&

508 (
	`°r_Àn
(&
buf
Ë!°r_Àn(&
ø
->
auth_addr
) ||

509 
	`°rcmp
(
	`°r_ãxt
(&
buf
), så_ãxt(&
ø
->
auth_addr
))

512 
ª°¨t
 = 1;

516 
	`ems_js⁄_gë_°rög_def
(
ªq
, "£¸ë", &
buf
, 
NULL
);

517 i‡(
	`°r_Àn
(&
buf
) > 0) {

518 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
, 
	`°r_ãxt
(&
buf
));

519 i‡(!
ª°¨t
 &&

520 (
	`°r_Àn
(&
buf
)!°r_Àn(&
ø
->
£¸ë
) ||

521 
	`°rcmp
(
	`°r_ãxt
(&
buf
), så_ãxt(&
ø
->
£¸ë
))

524 
ª°¨t
 = 1;

528 
	`ems_js⁄_gë_öt_def
(
ªq
, "authp‹t", 
tmp
, 1812);

529 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
, 
	`ems_ôﬂ
(
tmp
));

530 i‡(!
ª°¨t
 && 
tmp
 !
ø
->
auth_p‹t
)Ñestart = 1;

532 
	`ems_js⁄_gë_öt_def
(
ªq
, "ac˘p‹t", 
tmp
, 1813);

533 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
, 
	`ems_ôﬂ
(
tmp
));

534 i‡(!
ª°¨t
 && 
tmp
 !
ø
->
ac˘_p‹t
)Ñestart = 1;

536 
	`ems_js⁄_gë_öt_def
(
ªq
, "Ω_≥riod", 
tmp
, 300);

537 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
, 
	`ems_ôﬂ
(
tmp
));

538 
ø
->
ªp‹t_≥riod
 = 
tmp
;

540 
	`ems_js⁄_gë_öt_def
(
ªq
, "disc⁄√˘", 
tmp
, 0);

541 i‡(
tmp
 > 0) {

542 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_disc⁄√˘
, 
	`ems_ôﬂ
(
tmp
));

543 
ø
->
disc⁄√˘
 = 
tmp
;

546 
	`ems_js⁄_gë_öt_def
(
ªq
, "ªåy_times", 
tmp
, 3);

547 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªåy_times
, 
	`ems_ôﬂ
(
tmp
));

548 
ø
->
ªåy_times
 = 
tmp
;

550 
	`ems_js⁄_gë_öt_def
(
ªq
, "ªåy_timeout", 
tmp
, 5);

551 
	`cfg_£t
(
cfg
, 
CFG_≠p_ødius_ªåy_timeout
, 
	`ems_ôﬂ
(
tmp
));

552 
ø
->
ªåy_timeout
 = 
tmp
;

554 
	`°r_unöô
(&
buf
);

556 i‡(
run
 && 
ª°¨t
) {

557 
	`ems_l_åa˚
("radiusÑestart...");

558 
	`ødius_°›
(
ø
);

559 
	`ødius_°¨t
(
ø
);

562  
EMS_OK
;

563 
	}
}

565 
ems_öt
 
	$ødius_evt_ruÀs_upd©e
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
ªq
, 
ems_öt
 
run
)

567 
ems_uöt
 
tmp
;

568 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

570 
	`ems_js⁄_gë_öt_def
(
ªq
, "auto", 
tmp
, 1);

571 i‡(
tmp
)

572 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_RADIUS_AUTO
);

574 
	`ems_Êag_un£t
(
c‹e
->
Êg
, 
FLG_RADIUS_AUTO
);

576 
	`cfg_£t
(
	`emscfg
(), 
CFG_≠p_ødius_auto
, 
	`ems_ôﬂ
(
tmp
));

578 i‡(
tmp
)

579  
EMS_OK
;

581  
	`ødius_ruÀs_upd©e
(
ø
, 
ªq
, 
run
);

582 
	}
}

584 
ems_öt
 
	$ødius_evt_£rvî_ruÀs_upd©e
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
ªq
)

586 i‡(!
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_ødius_auto
))) {

587 
	`ems_l_åa˚
("use user defined configs...");

588  
EMS_OK
;

591  
	`ødius_ruÀs_upd©e
(
ø
, 
ªq
, 
EMS_YES
);

592 
	}
}

595 
ems_öt
 
	$ødius_evt_°©us
(
ems_ødius
 *
ø
, 
js⁄_obje˘
 *
roŸ
)

597 
ø
->
œ°îr
) {

598 
RADIUS_ERR_CANNOT_CONNECT
:

599 
RADIUS_ERR_REJECT
:

600 
RADIUS_ERR_NETWORK
:

601  
ø
->
œ°îr
;

609 
	}
}

611 
ems_öt
 
ø_run
(
≠p_moduÀ
 *
mod
,Éms_öà
run
);

613 
ems_öt


614 
	$ø_¥o˚ss
(
≠p_moduÀ
 *
mod
, 
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
roŸ
)

616 
ems_ødius
 *
ø
 = (ems_ødiu†*Ë
mod
->
˘x
;

618 
	`ems_l_åa˚
("ødiu†gŸÉvt: 0x%x,árgs: %s", 
evt
, 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

620 
evt
) {

621 
EMS_APP_STOP
:

622  
	`ø_run
(
mod
, 
EMS_NO
);

624 
EMS_APP_START
:

625  
	`ø_run
(
mod
, 
EMS_YES
);

627 
EMS_APP_RULES_UPDATE
:

628  
	`ødius_evt_ruÀs_upd©e
(
ø
, 
roŸ
, 
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
));

634 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

635  
EMS_ERR
;

637 
	`ems_as£π
(
mod
->
˘x
 && 
ø
);

639 i‡(!
ø
->
rh
) {

640 
	`ems_l_w¨n
("radius config file missing...");

641  
EMS_ERR
;

644 
evt
) {

645 
EMS_APP_CMD_RADIUS_AUTH
:

646  
	`ødius_cmd_auth
(
ø
, 
roŸ
);

648 
EMS_APP_CMD_RADIUS_LOGOUT
:

649  
	`ødius_cmd_logout
(
ø
, 
roŸ
);

651 
EMS_APP_EVT_FW_RELOAD
:

652  
	`ødius_evt_fw_ªlﬂd
(
ø
, 
roŸ
);

654 
EMS_APP_SERVER_RULES_UPDATE
:

655  
	`ødius_evt_£rvî_ruÀs_upd©e
(
ø
, 
roŸ
);

657 
EMS_APP_EVT_STATUS
:

658  
	`ødius_evt_°©us
(
ø
, 
roŸ
);

664  
EMS_OK
;

665 
	}
}

667 
ems_öt
 
	$ø_¥o˚ss_ruÀs
(
≠p_moduÀ
 *
mod
, 
js⁄_obje˘
 *
roŸ
)

669 #ifde‡
DEBUG


670 
ems_ødius
 *
ø
 = (ems_ødiu†*)
mod
->
˘x
;

672 
js⁄_obje˘
 *
obj
;

674 
	`ems_as£π
(
mod
 && 
roŸ
 && 
ø
);

676 
	`ems_l_åa˚
("ødiu†≠∞öfo: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

678 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "rsrv");

680 i‡(
obj
 && 
	`ødius_gë_ruÀs
(
mod
, objË=
EMS_OK
)

683 
	`ems_l_åa˚
("updateÑadiusÉnv here");

686  
EMS_OK
;

687 
	}
}

689 
ems_öt
 
	$ø_run
(
≠p_moduÀ
 *
mod
, 
ems_öt
 
run
)

691 
ems_ødius
 *
ø
 = (ems_ødiu†*)
mod
->
˘x
;

692 
	`ems_as£π
(
mod
 && 
ø
);

694 i‡(
run
) {

695 i‡(
	`ems_Êag_like
(
mod
->
Êg
, 
FLG_RUN
))

696  
EMS_OK
;

698 
	`ems_l_åa˚
("radiusÑunning here");

699 i‡(
	`ødius_°¨t
(
ø
Ë=
EMS_OK
)

700 
	`ems_Êag_£t
(
mod
->
Êg
, 
FLG_RUN
);

703 i‡(
	`ems_Êag_u∆ike
(
mod
->
Êg
, 
FLG_RUN
))

704  
EMS_OK
;

706 
	`ems_l_åa˚
("radius stopped");

707 
	`ødius_°›
(
ø
);

708 
	`ems_Êag_un£t
(
mod
->
Êg
, 
FLG_RUN
);

711  
EMS_OK
;

712 
	}
}

715 
ems_cch¨
 *
	$ødius_u£∫ame
(
≠p_moduÀ
 *
mod
, 
ems_cch¨
 *
ù
)

717 
ems_devi˚
 *
dev
;

719 i‡(!(
mod
 && mod->
˘x
 && 
ù
))

720  
NULL
;

722 
dev
 = 
	`ødius_föd_dev
((
ems_ødius
 *)
mod
->
˘x
, 
ù
);

724 i‡(
dev
)

725  
	`°r_ãxt
(&
dev
->
u£r
.
«me
);

727  
NULL
;

728 
	}
}

730 
ems_öt
 
	$ødius_⁄löe_u£r_numbî
(
≠p_moduÀ
 *
mod
)

732 
ems_öt
 
n
;

733 
ems_ødius
 *
ø
 = (ems_ødiu†*)
mod
->
˘x
;

734 
ems_queue
 *
p
;

736 i‡(!(
ø
 && 
mod
 && mod->
˘x
))

739 
n
 = 0;

740 
	`ems_queue_f‹óch
(&
ø
->
dev_íåy
, 
p
) {

741 
n
++;

744  
n
;

745 
	}
}

747 
js⁄_obje˘
 *
	$ødius_u£æi°
(
≠p_moduÀ
 *
mod
)

749 
js⁄_obje˘
 *
roŸ
, *
¨y
, *
obj
;

750 
ems_ødius
 *
ø
 = (ems_ødiu†*)
mod
->
˘x
;

751 
ems_queue
 *
p
;

752 
ems_devi˚
 *
dev
;

754 i‡(!(
ø
 && 
mod
 && mod->
˘x
))

757 
roŸ
 = 
	`js⁄_obje˘_√w_obje˘
();

758 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

760 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "u£r", 
¨y
);

762 
	`ems_queue_f‹óch
(&
ø
->
dev_íåy
, 
p
) {

763 
dev
 = 
	`ems_c⁄èöî_of
(
p
, 
ems_devi˚
, 
íåy
);

765 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

766 
	`js⁄_obje˘_obje˘_add
(
obj
, "nick", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
«me
)));

767 
	`js⁄_obje˘_obje˘_add
(
obj
, "pwd", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
∑ss
)));

768 
	`js⁄_obje˘_obje˘_add
(
obj
, "ù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

769 
	`js⁄_obje˘_obje˘_add
(
obj
, "mac", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

770 
	`js⁄_obje˘_obje˘_add
(
obj
, "°©us", 
	`js⁄_obje˘_√w_öt
(
dev
->
°
));

772 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
obj
);

775  
roŸ
;

776 
	}
}

779 
≠p_moduÀ
 
	g≠p_ødius
 = {

781 .
ty
 = 
ty_ødius
,

782 .
	gdesc
 = 
ems_°rög
("radius"),

783 .
	g˘x
 = 
NULL
,

784 .
	gÊg
 = 0,

786 .
	göô
 = 
ø_öô
,

787 .
	gunöô
 = 
ø_unöô
,

788 .
	grun
 = 
ø_run
,

789 .
	g¥o˚ss
 = 
ø_¥o˚ss
,

790 .
	g¥o˚ss_ruÀ
 = 
ø_¥o˚ss_ruÀs
,

791 .
	gvîsi⁄_m©ch
 = 
NULL
,

792 .
	gö°Æl
 = 
NULL


	@src/core/cmd_main.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

6 
ems_öt
 
	$cmd_c⁄√˘
(
ems_sock
 *
sock
)

8 
ems_öt
 
fd
;

9 
sockÀn_t
 
Àn
;

10 
sockaddr_ö
 
addr
;

12 
	`mem£t
(&
addr
, 0, (addr));

14 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

15 
	`ems_l_åa˚
("gethostbynameÉrr for %s : %s",

16 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

17  
EMS_ERR
;

20 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

21 i‡(
fd
 <= 0)

22  
EMS_ERR
;

24 
	`ems_£tsock_rw_timeout
(
fd
, 5000);

26 
addr
.
sö_Ámûy
 = 
AF_INET
;

27 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

29 
Àn
 = (
sockaddr_ö
);

31 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

32 
	`˛o£
(
fd
);

33 
	`ems_l_åa˚
("connectÅo: %s:%d failed: %s",

34 
	`ems_sock_addr
(
sock
), 
	`ems_sock_p‹t
(sock),

35 
	`ems_œ°îrmsg
());

36  
EMS_ERR
;

39 
	`ems_sock_£tfd
(
sock
, 
fd
);

41  
EMS_OK
;

42 
	}
}

44 
ems_öt
 
	$cmd_£nd
(
ems_sock
 *
sock
, 
ems_buf„r
 *
buf
)

46 
ems_öt
 
πn
;

47 
ems_öt
 
tŸÆ
 = 
	`buf_Àn
(
buf
);

49 
πn
 = 
	`ems_sock_£nd
(
sock
, 
buf
);

51 i‡(
πn
 !
tŸÆ
)

52  
EMS_ERR
;

54 
	`ems_buf„r_ª‰esh
(
buf
);

55  
EMS_OK
;

56 
	}
}

58 
ems_öt
 
	$cmd_ªcv_n
(
ems_sock
 *
sock
, 
ems_buf„r
 *
buf
, 
ems_uöt
 
Àn
)

60 
ems_ch¨
 *
p
;

61 
ems_öt
 
ªt
, 
fd
;

62 
ems_uöt
 
À·
 = 
Àn
;

64 i‡(
	`ems_sock_fd
(
sock
) <= 0)

65  
EMS_ERR
;

67 
fd
 = 
	`ems_sock_fd
(
sock
);

68 
p
 = 
	`buf_wr
(
buf
);

69 
À·
 = 
Àn
;

71 
À·
 > 0) {

72 
ªt
 = 
	`ªcv
(
fd
, 
p
, 
À·
, 0);

74 i‡(
ªt
 <= 0) {

75 
	`ems_l_åa˚
("£ss: %dÑecv faûed: %s", 
fd
, 
	`ems_œ°îrmsg
());

76 
	`ems_sock_˛o£
(
sock
);

80 
À·
 -
ªt
;

81 
p
 +
ªt
;

84 
ªt
 = 
	`abs
(
p
 - 
	`buf_wr
(
buf
));

85 
	`ems_buf„r_£ek_wr
(
buf
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

87  
ªt
;

88 
	}
}

90 
ems_öt
 
	$cmd_ªcv
(
ems_sock
 *
sock
, 
ems_buf„r
 *
buf
)

92 
ems_öt
 
À·
;

93 
ems_ª•⁄£
 
r•
;

95 i‡(
	`cmd_ªcv_n
(
sock
, 
buf
, 
SIZE_RESPONSE
) != SIZE_RESPONSE)

97  
EMS_ERR
;

100 
	`ems_buf„r_¥e„tch
(
buf
, (
ems_ch¨
 *)
r•
.
vÆ
, 
SIZE_RESPONSE
);

102 
r•
.
èg
.
vÆ
 = 
	`¡ohl
(rsp.tag.val);

103 
r•
.
Àn
 = 
	`¡ohl
(rsp.len);

105 
À·
 = 
r•
.
Àn
 - 
SIZE_RESPONSE
;

107 
	`ems_l_åa˚
("èg: %x,Üí: %d,Üe·: %d", 
r•
.
èg
.
vÆ
,Ñ•.
Àn
, 
À·
);

109 i‡(
À·
 > 0) {

111 i‡(
	`buf_À·
(
buf
Ë<
À·
)

112 
	`ems_buf„r_ö¸ó£
(
buf
, 
À·
);

114 i‡(
	`cmd_ªcv_n
(
sock
, 
buf
, 
À·
) !=Üeft)

115  
EMS_ERR
;

118  
EMS_OK
;

119 
	}
}

121 
ems_öt
 
	$cmd_∑r£_r•
(
ems_buf„r
 *
buf
)

123 
js⁄_obje˘
 *
roŸ
;

124 
ems_ª•⁄£
 *
r•
;

125 
ems_öt
 
πn
;

127 
r•
 = (
ems_ª•⁄£
 *)
	`buf_rd
(
buf
);

129 
r•
->
èg
.
vÆ
 = 
	`¡ohl
(rsp->tag.val);

130 
r•
->
Àn
 = 
	`¡ohl
(rsp->len);

131 
r•
->
°
 = 
	`¡ohl
(rsp->st);

133 
roŸ
 = 
NULL
;

134 i‡(
r•
->
Àn
 > 
SIZE_RESPONSE
) {

135 
	`ems_as£π
(
	`buf_Àn
(
buf
Ë>
r•
->
Àn
);

136 
ems_öt
 
Àn
;

137 
ems_ch¨
 *
p
, 
ch
;

139 
p
 = (
ems_ch¨
 *)(
	`buf_rd
(
buf
Ë+ 
SIZE_RESPONSE
);

140 
	`gëw‹d
(
p
, 
Àn
);

142 
ch
 = 
p
[
Àn
];

143 
p
[
Àn
] = '\0';

144 
roŸ
 = 
	`ems_js⁄_tokíî_∑r£
(
p
);

145 
p
[
Àn
] = 
ch
;

148 
	`ems_l_åa˚
("\033[01;34m[sync]<rspÅag: 0x%x, st: %d ctx: %s> \033[00m",

149 
r•
->
èg
.
vÆ
,Ñ•->
°
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"no ctx");

150 
πn
 = 
r•
->
°
;

152 i‡(
roŸ
) {

153 
ems_cch¨
 *
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
);

154 
FILE
 *
Â
 = 
	`f›í
("/tmp/ems_result.res", "w");

156 i‡(
Â
) {

157 i‡(
˘x
)

158 
	`fwrôe
(
˘x
, 
	`°æí
(˘x), 1, 
Â
);

160 
	`f˛o£
(
Â
);

163 
	`js⁄_obje˘_put
(
roŸ
);

166 
	`ems_buf„r_£ek_rd
(
buf
, 
r•
->
Àn
, 
EMS_BUFFER_SEEK_CUR
);

167 
	`ems_buf„r_ª‰esh
(
buf
);

168  
πn
;

170 
	}
}

172 
ems_öt
 
	$exec_cmd
(
ems_öt
 
cmd
, 
js⁄_obje˘
 *
roŸ
)

174 
ems_sock
 
sock
;

175 
ems_buf„r
 
buf
;

176 
ems_öt
 
πn
;

177 
ems_cch¨
 *
˘x
;

179 
	`ems_l_åa˚
("\033[00;31m[sync]<req:Åag: 0x%x ctx: %s> \033[00m",

180 
cmd
, 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"no ctx");

182 
	`ems_sock_öô
(&
sock
);

183 
	`ems_buf„r_öô
(&
buf
, 
EMS_BUFFER_1K
);

186 
πn
 = 
EMS_OK
;

187 
˘x
 = 
NULL
;

189 
	`ems_sock_£èddr
(&
sock
, 
EMS_ADDR
);

190 
	`ems_sock_£ç‹t
(&
sock
, 
EMS_PORT
);

192 i‡(
	`cmd_c⁄√˘
(&
sock
Ë!
EMS_OK
) {

193 
πn
 = 
MSG_ST_CONNECT_EMS_FAILED
;

197 i‡(
roŸ
)

198 
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
);

200 
	`ems_∑ck_ªq
(
cmd
, 
˘x
, 
	`ems_°æí
(˘x), &
buf
);

202 
πn
 = 
	`cmd_£nd
(&
sock
, &
buf
);

203 i‡(
πn
 !
EMS_OK
) ;

205 
πn
 = 
	`cmd_ªcv
(&
sock
, &
buf
);

206 i‡(
πn
 !
EMS_OK
) ;

208 
πn
 = 
	`cmd_∑r£_r•
(&
buf
);

212 
	`ems_buf„r_unöô
(&
buf
);

213 
	`ems_sock_˛o£
(&
sock
);

214 
	`ems_sock_˛ór
(&
sock
);

216  
πn
;

217 
	}
}

219 
ems_öt
 
	$cmd_∑r£_cmd
(
ems_öt
 
¨gc
, 
ems_ch¨
 **
¨gv
, 
js⁄_obje˘
 *
ªq
)

221 
ems_öt
 
i
;

222 
ems_ch¨
 
buf
[1024], *
key
, *
vÆ
;

224 
i
 = 1; i < 
¨gc
; i++) {

225 
	`¢¥ötf
(
buf
, (buf), "%s", 
¨gv
[
i
]);

227 
key
 = 
buf
;

228 
vÆ
 = 
	`°rchr
(
buf
, '=');

230 i‡(!
vÆ
)

232 *
vÆ
++ = '\0';

234 i‡(
	`°æí
(
key
Ë<0 || såÀn(
vÆ
) <= 0)

237 
	`js⁄_obje˘_obje˘_add
(
ªq
, 
key
, 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

240 
	`ems_l_åa˚
("∑r£_cmdÑesu…: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
ªq
));

242  
EMS_OK
;

243 
	}
}

	@src/core/ems_bridge.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_bridge.h
"

6 
	~"ems_cmd.h
"

8 
	#BR_CONNECT_GW_TIMEOUT
 3000

	)

9 
	#BR_HEARTBEAT_TIME
 60000

	)

11 
ems_öt
 
br_°¨t
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

12 
ems_öt
 
br_°›≥d
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

13 
ems_öt
 
br_c⁄√˘
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

14 
ems_öt
 
br_n‹mÆ
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

15 
ems_öt
 
br_br
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

16 
ems_öt
 
br_îr
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

18 
	$ems_öt
 (*
	tbr_evt_func
)(
	tems_bridge
 *
	tbr
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

19 
br_evt_func
 
br_evt_h™dÀr
[] =

21 [
°_°¨t
] = 
br_°¨t
,

22 [
°_°›≥d
] = 
br_°›≥d
,

23 [
°_c⁄√˘
] = 
br_c⁄√˘
,

24 [
°_n‹mÆ
] = 
br_n‹mÆ
,

25 [
°_hb
] = 
br_br
,

26 [
°_îr
] = 
br_îr
,

27 [
°_max
] = 
NULL


28 
	}
};

31 
ems_öt
 
br_to_c⁄√˘
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

32 
ems_öt
 
br_to_n‹mÆ
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

33 
ems_öt
 
br_to_br
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

34 
ems_öt
 
br_to_îr
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

36 
	$ems_öt
 (*
	tbr_timeout_func
)(
	tems_bridge
 *
	tbr
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_timeout
 *
	tto
);

37 
br_timeout_func
 
br_timeout_h™dÀr
[] =

39 [
°_°¨t
] = 
NULL
,

40 [
°_°›≥d
] = 
NULL
,

41 [
°_c⁄√˘
] = 
br_to_c⁄√˘
,

42 [
°_n‹mÆ
] = 
br_to_n‹mÆ
,

43 [
°_hb
] = 
br_to_br
,

44 [
°_îr
] = 
br_to_îr
,

45 [
°_max
] = 
NULL


46 
	}
};

48 
ems_öt
 
	$br_evt_run
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

50 
	`ems_as£π
(
br_evt_h™dÀr
[
br
->
°
]);

51  
br_evt_h™dÀr
[
br
->
°
](br, 
£ss
, 
Êg
);

52 
	}
}

54 
ems_void
 
	$br_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

56 
ems_bridge
 *
br
 = (ems_bridgê*)
	`£ss_cb¨g
(
£ss
);

58 
	`ems_as£π
(
br
->
°
 > 
°_mö
 && br->° < 
°_max
);

60 
	`ems_l_åa˚
("[br]Évt:Éº‹? %s, flg: 0x%x", 
îr
?"yes":"no", 
Êg
);

62 i‡(
îr
) {

63 
	`ems_l_åa˚
("[br]ÉvtÉrr, sess: %d %s",

64 
	`ems_sock_fd
(&
£ss
->
sock
),

65 
	`ems_sock_addr
(&
£ss
->
sock
));

67 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
))

68 
	`br_ch™ge_°©us
(
br
, 
°_hb
);

70 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

71 
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

77 
	`br_evt_run
(
br
, 
£ss
, 
Êg
);

78 
	}
}

80 
ems_void
 
	$br_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

82 
ems_bridge
 *
br
 = (ems_bridgê*)
	`£ss_cb¨g
(
£ss
);

84 
	`ems_as£π
(
br
->
°
 > 
°_mö
 && br->° < 
°_max
);

86 
	`ems_as£π
(
br_timeout_h™dÀr
[
br
->
°
]);

88 i‡(
br_timeout_h™dÀr
[
br
->
°
])

89 
br_timeout_h™dÀr
[
br
->
°
](br, 
£ss
, 
to
);

90 
	}
}

92 
ems_öt
 
	$br_c⁄√˘_gw
(
ems_£ssi⁄
 *
£ss
)

94 
ems_öt
 
fd
, 
ªt
;

95 
sockÀn_t
 
Àn
;

96 
sockaddr_ö
 
addr
;

97 
ems_sock
 *
sock
 = &
£ss
->sock;

99 
	`ems_as£π
(
£ss
);

101 
	`mem£t
(&
addr
, 0, (addr));

102 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

103 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

104 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

105  
EMS_ERR
;

108 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

109 i‡(
fd
 <= 0)

110  
EMS_ERR
;

112 
	`ems_l_åa˚
("[br] sess(%d)ÅryÅo connectÅo: %s(%s): %d...",

113 
fd
,

114 
	`ems_sock_addr
(
sock
),

115 
	`öë_¡ﬂ
(
addr
.
sö_addr
),

116 
	`ems_sock_p‹t
(
sock
));

118 
addr
.
sö_Ámûy
 = 
AF_INET
;

119 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

121 
	`ems_£ä⁄blockög
(
fd
, 
YES
);

122 
Àn
 = (
sockaddr_ö
);

123 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
);

125 
ªt
) {

127 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

131 
ªt
 = 
	`ems_œ°îr
();

132 
	`ems_Êag_un£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

134 i‡(
ªt
 !
EINPROGRESS
) {

135 
	`˛o£
(
fd
);

136 
	`ems_l_åa˚
("[br] connectÅo: %s:%d: failed: %s",

137 
	`ems_sock_addr
(
sock
),

138 
	`ems_sock_p‹t
(
sock
),

139 
	`ems_gëîrmsg
(
ªt
));

140  
EMS_ERR
;

147 
	`ems_sock_£tfd
(
sock
, 
fd
);

148  
EMS_OK
;

149 
	}
}

151 
ems_öt
 
	$br_dëe˘_u∂ök
(
ems_bridge
 *
br
)

153 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

154 
ems_cfg
 *
cfg
 = 
	`emscfg
();

156 i‡(!
br
->
£ss
) {

157 
br
->
£ss
 = 
	`ems_£ssi⁄_√w
();

158 i‡(!
br
->
£ss
)

159  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

162 
£ss
 = 
br
->sess;

163 
	`£ss_cb¨g_£t
(
£ss
, 
br
);

165 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`cfg_gë
(
cfg
, 
CFG_w™_gw
));

166 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
EMS_PORT
);

168 i‡(
	`br_c⁄√˘_gw
(
£ss
Ë!
EMS_OK
)

169  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

171 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
br_evt_cb
);

172 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
BR_CONNECT_GW_TIMEOUT
, 
br_timeout_cb
);

174 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
)) {

175 
	`c‹e_∑ck_ªq
(
£ss
, 
CMD_BRIDGE_REQ
);

176  
	`br_ch™ge_°©us
(
br
, 
°_n‹mÆ
);

179  
	`br_ch™ge_°©us
(
br
, 
°_c⁄√˘
);

180 
	}
}

182 
ems_öt
 
	$br_°¨t
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

184 
ems_cfg
 *
cfg
 = 
	`emscfg
();

186 
	`ems_l_åa˚
("\033[00;32m\n"

191 
	`c‹e_gw_i‚ame
(),

192 
	`cfg_gë
(
cfg
, 
CFG_œn_¥Ÿo
),

193 
	`c‹e_gw_addr
(),

194 
	`cfg_gë
(
cfg
, 
CFG_œn_mask
),

195 
	`cfg_gë
(
cfg
, 
CFG_œn_gw
),

197 
	`cfg_gë
(
cfg
, 
CFG_w™_i‚ame
),

198 
	`cfg_gë
(
cfg
, 
CFG_w™_¥Ÿo
),

199 
	`cfg_gë
(
cfg
, 
CFG_w™_addr
),

200 
	`cfg_gë
(
cfg
, 
CFG_w™_mask
),

201 
	`cfg_gë
(
cfg
, 
CFG_w™_gw
),

203 
	`cfg_gë
(
cfg
, 
CFG_wúñess_i‚ame
),

204 
	`cfg_gë
(
cfg
, 
CFG_wúñess_ssid
),

205 
	`cfg_gë
(
cfg
, 
CFG_wúñess_í¸y±
),

206 
	`cfg_gë
(
cfg
, 
CFG_wúñess_key
)

210 i‡(!
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_READY
))

212 
	`ems_as£π
(0 && "shouldÇot be here");

213 
	`ems_l_åa˚
("networkÇotÑeady");

214  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

217 
	`ems_as£π
((
	`cfg_gë
(
cfg
, 
CFG_w™_gw
Ë|| cfg_gë(cfg, 
CFG_œn_gw
)) && "never show upÅhis");

223 i‡(!
	`cfg_gë
(
cfg
, 
CFG_w™_addr
Ë&& cfg_gë(cfg, 
CFG_œn_gw
))

225 
	`ems_l_åa˚
("weáre in brigde modeÑightÇow");

227 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
);

228 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_√t
, 
EMS_APP_STOP
, 
NULL
);

234 i‡(!
br
->
£ss
)

235 
br
->
£ss
 = 
	`ems_£ssi⁄_√w
();

237 i‡(
br
->
£ss
) {

238 
	`£ss_cb¨g_£t
(
br
->
£ss
, br);

239  
	`br_ch™ge_°©us
(
br
, 
°_hb
);

242  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

245 i‡(
	`cfg_gë
(
cfg
, 
CFG_w™_addr
Ë&& cfg_gë(cfg, 
CFG_w™_gw
)) {

247 
ems_cch¨
 *
¥o
 = 
	`cfg_gë
(
cfg
, 
CFG_w™_¥Ÿo
);

248 
ems_cch¨
 *
i‚ame
 = 
	`cfg_gë
(
cfg
, 
CFG_w™_i‚ame
);

251 
	`ems_l_åa˚
("tryÅo connectÅo gw: %s from : %s",

252 
	`cfg_gë
(
cfg
, 
CFG_w™_gw
), cfg_gë(cfg, 
CFG_w™_addr
));

254 i‡(
¥o
 && !
	`°rcmp
(pro, "pppoe")) {

255 
	`ems_l_åa˚
("the uplink isÖppoe server, weáre fatáp");

257 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

258  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

261 i‡(
i‚ame
 && !
	`°∫cmp
(ifname, "apcli", 5)) {

262 
	`ems_l_åa˚
("weáre in wirelessÑepeat mode,Çot support wireless brigde");

263 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

264  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

272 
ems_cch¨
 *
œn_addr
, *
w™_gw
;

273 
œn_addr
 = 
	`cfg_gë
(
cfg
, 
CFG_œn_addr
);

274 
w™_gw
 = 
	`cfg_gë
(
cfg
, 
CFG_w™_gw
);

276 i‡(
œn_addr
 && 
w™_gw
 && !
	`°rcmp
(lan_addr, wan_gw)) {

277 
ems_ch¨
 
buf
[512];

279 
	`¢¥ötf
(
buf
, (buf), "ipáddr del dev %s %s/%s",

280 
	`cfg_gë
(
cfg
, 
CFG_œn_i‚ame
),

281 
œn_addr
,

282 
	`cfg_gë
(
cfg
, 
CFG_œn_mask
));

283 
	`ems_sy°emcmd
(
buf
);

285 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_LAN_BACK
);

289  
	`br_dëe˘_u∂ök
(
br
);

292 
	`ems_as£π
(0 && "we didÇot handle forÇow");

293 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

294  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

295 
	}
}

297 
ems_öt
 
	$br_°›≥d
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

299 
	`ems_l_åa˚
("[br] in status stoppped");

301 i‡(
br
->
£ss
) {

302 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
br
->
£ss
);

303 
br
->
£ss
 = 
NULL
;

306 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_LAN_BACK
)) {

307 
ems_ch¨
 
buf
[512];

308 
ems_cfg
 *
cfg
 = 
	`emscfg
();

310 
	`ems_Êag_un£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_LAN_BACK
);

311 
	`¢¥ötf
(
buf
, (buf), "ipáddrádd dev %s %s/%s",

312 
	`cfg_gë
(
cfg
, 
CFG_œn_i‚ame
),

313 
	`cfg_gë
(
cfg
, 
CFG_œn_addr
),

314 
	`cfg_gë
(
cfg
, 
CFG_œn_mask
));

315 
	`ems_sy°emcmd
(
buf
);

318  
EMS_OK
;

319 
	}
}

321 
ems_öt
 
	$br_c⁄√˘
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

323 
ems_öt
 
îr
;

324 
sockÀn_t
 
Àn
;

326 
Àn
 = (
îr
);

327 
îr
 = 0;

328 
	`gësock›t
(
	`ems_sock_fd
(&
£ss
->
sock
), 
SOL_SOCKET
, 
SO_ERROR
, (
ems_ch¨
 *)&
îr
, &
Àn
);

330 i‡(
îr
 ) {

331 
î∫o
 = 
îr
;

332 
	`ems_l_åa˚
("[br]sess(%d) connectÅo %s:%d failed, %s",

333 
	`ems_sock_fd
(&
£ss
->
sock
),

334 
	`ems_sock_addr
(&
£ss
->
sock
),

335 
	`ems_sock_p‹t
(&
£ss
->
sock
),

336 
	`ems_gëîrmsg
(
îr
));

337  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

340 
	`ems_l_åa˚
("[br]sess(%d)Éstablished with %s:%d",

341 
	`ems_sock_fd
(&
£ss
->
sock
),

342 
	`ems_sock_addr
(&
£ss
->
sock
),

343 
	`ems_sock_p‹t
(&
£ss
->
sock
));

345 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

347 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
))

348 
	`c‹e_∑ck_ªq
(
£ss
, 
CMD_BRIDGE_HB
);

350 
	`c‹e_∑ck_ªq
(
£ss
, 
CMD_BRIDGE_REQ
);

352 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
 | 
EMS_EVT_WRITE
, 
br_evt_cb
);

353 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
BR_CONNECT_GW_TIMEOUT
, 
br_timeout_cb
);

355  
	`br_ch™ge_°©us
(
br
, 
°_n‹mÆ
);

356 
	}
}

358 
ems_öt
 
	$br_£nd_msg
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

360 
ems_öt
 
ªt
;

362 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

364 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

365 i‡(
ªt
 <= 0) {

366 
ªt
) {

368 -
EAGAIN
:

372  
ªt
;

376 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0) {

377 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
br_evt_cb
);

378 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf
);

381  
EMS_OK
;

382 
	}
}

384 
	$ems_öt
 (*
	tbr_r•_cb
)(
	tems_bridge
 *, 
	tems_£ssi⁄
 *, 
	tems_ª•⁄£
 *, 
	tjs⁄_obje˘
 *);

385 
ems_öt


386 
	$br_¥o˚ss_r•
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
br_r•_cb
 
h
)

388 
js⁄_obje˘
 *
roŸ
;

389 
ems_öt
 
πn
 = 
EMS_OK
;

391 
	`ems_as£π
(
br
 && 
£ss
 && 
r•
);

393 
roŸ
 = 
NULL
;

394 i‡(
r•
->
Àn
 > 
SIZE_RESPONSE
) {

395 
ems_öt
 
Àn
;

396 
ems_ch¨
 *
p
, 
ch
;

398 
	`ems_as£π
(
	`buf_Àn
(&
£ss
->
buf_ö
Ë>
r•
->
Àn
);

400 
p
 = (
ems_ch¨
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
SIZE_RESPONSE
);

401 
	`gëw‹d
(
p
, 
Àn
);

403 
ch
 = 
p
[
Àn
];

404 
p
[
Àn
] = '\0';

405 
roŸ
 = 
	`ems_js⁄_tokíî_∑r£
(
p
);

406 
p
[
Àn
] = 
ch
;

408 #ifde‡
DEUBG


410 
ems_cch¨
 *
˘x
 = 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"no ctx";

412 
	`ems_l_åa˚
("\033[01;34m[br]<rspÅag: 0x%x, st: %d ctx: %s> \033[00m",

413 
r•
->
èg
.
vÆ
,Ñ•->
°
, 
	`°æí
(
˘x
)> 0x200?"**tooÜong**":ctx);

417 i‡(
h
)

418 
πn
 = 
	`h
(
br
, 
£ss
, 
r•
, 
roŸ
);

420 
πn
 = 
EMS_ERR
;

422 i‡(
roŸ
)

423 
	`js⁄_obje˘_put
(
roŸ
);

425 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_ö
, 
r•
->
Àn
, 
EMS_BUFFER_SEEK_CUR
);

426 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

427  
πn
;

428 
	}
}

431 
ems_öt
 
	$br_¥ïro˚ss
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
br_r•_cb
 
h
)

433 
ems_ª•⁄£
 
r•
;

435 
	`ems_as£π
(
br
 && 
£ss
 && 
h
);

437 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
SIZE_RESPONSE
)

438  
EMS_CONTINUE
;

440 
	`ems_buf„r_¥e„tch
(&
£ss
->
buf_ö
, (
ems_ch¨
 *)
r•
.
vÆ
, 
SIZE_RESPONSE
);

442 
r•
.
èg
.
vÆ
 = 
	`¡ohl
(rsp.tag.val);

443 
r•
.
Àn
 = 
	`¡ohl
(rsp.len);

444 
r•
.
°
 = 
	`¡ohl
(rsp.st);

446 i‡(
r•
.
Àn
 >
	`buf_size
(&
£ss
->
buf_ö
)) {

447 i‡(
	`ems_buf„r_ö¸ó£
(&
£ss
->
buf_ö
, 
r•
.
Àn
Ë!
EMS_OK
)

448  
EMS_BUFFER_INSUFFICIENT
;

451 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
r•
.
Àn
)

452  
EMS_CONTINUE
;

454  
	`br_¥o˚ss_r•
(
br
, 
£ss
, &
r•
, 
h
);

455 
	}
}

458 
ems_öt


459 
	$br_ªcv_h™dÀ
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
br_r•_cb
 
h
)

461 
ems_öt
 
ªt
, 
agaö
;

463 
agaö
 = 
EMS_YES
;

464 
ªcv_agaö
:

465 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

466 i‡(
ªt
 <= 0) {

467 
ªt
) {

468 -
EAGAIN
:

469 
agaö
 = 
EMS_NO
;

472 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) > 0)

473 
	`br_¥ïro˚ss
(
br
, 
£ss
, 
h
);

474  
EMS_ERR
;

479 
ªt
 = 
	`br_¥ïro˚ss
(
br
, 
£ss
, 
h
);

481 
ªt
) {

482 
EMS_BUFFER_INSUFFICIENT
:

483 
EMS_ERR
:

484  
EMS_ERR
;

486 
EMS_OK
:

487 
EMS_CONTINUE
:

491 } 
ªt
 !
EMS_CONTINUE
);

493 i‡(
agaö
)

494 
ªcv_agaö
;

496  
EMS_OK
;

497 
	}
}

528 
	s_wifi_cmd_s
 {

529 
ems_ch¨
 *
	mnick
;

530 
ems_ch¨
 *
	mAuthMode
;

531 
ems_ch¨
 *
	mEn¸ypTy≥
;

532 
ems_ch¨
 *
	mIEEE8021X
;

533 
ems_ch¨
 *
	m¥e_SSID
;

534 
ems_ch¨
 *
	mkey
;

535 
ems_ch¨
 *
	mkeyid
;

536 } 
	tbr_wifi_cmd
;

538 
br_wifi_cmd
 
	g_gcmds
[] =

542 {"n⁄e", "OPEN", "NONE", 
NULL
, NULL, NULL, NULL},

543 {"›í", "OPEN", "NONE", 
NULL
, NULL, NULL, NULL},

546 {"wï-›í", "WEPAUTO", "WEP", "IEEE8021X=0", 
NULL
, "Key1", "DefaultKeyID=1"},

547 {"wï-sh¨ed", "WEPAUTO", "WEP", "IEEE8021X=0", 
NULL
, "Key1", "DefaultKeyID=1"},

548 {"wï", "WEPAUTO", "WEP", "IEEE8021X=0", 
NULL
, "Key1", "DefaultKeyID=1"},

549 {"WEP", "WEPAUTO", "WEP", "IEEE8021X=0", 
NULL
, "Key1", "DefaultKeyID=1"},

566 
br_wifi_cmd
 *
	$wifi_mod_föd
(
ems_cch¨
 *
íc
)

568 
br_wifi_cmd
 *
cmd
;

569 
ems_öt
 
tŸÆ
, 
i
;

572 
tŸÆ
 = (
_gcmds
Ë/ (
br_wifi_cmd
);

574 
i
 = 0; i < 
tŸÆ
; i++) {

575 
cmd
 = &
_gcmds
[
i
];

576 i‡(!
	`°rcmp
(
íc
, 
cmd
->
nick
))

577  
cmd
;

580  
NULL
;

581 
	}
}

584 
ems_öt
 
	$br_£t_wifi_öfo
(
ems_cch¨
 *
öf
, 
br_wifi_cmd
 *
wifi
,Éms_cch¨ *
ssid
, 
ems_°r
 *
key
)

586 
ems_buf„r
 *
cmd
 = 
	`c‹e_buf„r
();

588 
	`ems_as£π
(
öf
 && 
wifi
 && 
ssid
);

589 i‡(
öf
 && 
wifi
 && 
ssid
) {

590 
ems_ch¨
 *
buf
 = 
	`buf_wr
(
cmd
);

591 
ems_öt
 
Àn
 = 
	`buf_À·
(
cmd
);

593 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£àAuthMode=%s", 
öf
, 
wifi
->
AuthMode
);

594 
	`ems_sy°emcmd
(
buf
);

596 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£àEn¸ypTy≥=%s", 
öf
, 
wifi
->
En¸ypTy≥
);

597 
	`ems_sy°emcmd
(
buf
);

599 i‡(
wifi
->
IEEE8021X
) {

600 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£à%s", 
öf
, 
wifi
->
IEEE8021X
);

601 
	`ems_sy°emcmd
(
buf
);

604 
	`ems_as£π
(
ssid
 !
NULL
);

605 i‡(
wifi
->
¥e_SSID
) {

606 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£à%s=%s", 
öf
, 
wifi
->
¥e_SSID
, 
ssid
);

607 
	`ems_sy°emcmd
(
buf
);

610 i‡(
wifi
->
key
) {

611 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£à%s=%s", 
öf
, 
wifi
->
key
, 
	`°r_ãxt
(key));

612 
	`ems_sy°emcmd
(
buf
);

615 i‡(
wifi
->
keyid
) {

616 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£à%s", 
öf
, 
wifi
->
keyid
);

617 
	`ems_sy°emcmd
(
buf
);

620 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£àWscC⁄fMode=0", 
öf
);

621 
	`ems_sy°emcmd
(
buf
);

623 
	`¢¥ötf
(
buf
, 
Àn
, "iw¥iv %†£àSSID=%s", 
öf
, 
ssid
);

624 
	`ems_sy°emcmd
(
buf
);

628  
EMS_OK
;

629 
	}
}

631 
ems_öt


632 
	$br_chrﬁe_to_≠
(
ems_bridge
 *
br
, 
ems_°r
 *
ssid
,Éms_°∏*
í¸y±
,Éms_°∏*
key
)

634 
ems_öt
 
πn
;

635 
ems_cfg
 *
cfg
 = 
	`emscfg
();

636 
ems_buf„r
 *
cmd
 = 
	`c‹e_buf„r
();

637 
br_wifi_cmd
 *
wifi
 = 
NULL
;

640 
πn
 = 
EMS_ERR
;

642 
wifi
 = 
	`wifi_mod_föd
(
	`°r_ãxt
(
í¸y±
));

644 i‡(!
wifi
) {

645 
	`ems_l_åa˚
("didÇŸ födány wifòmod suµly f‹ : %s", 
	`°r_ãxt
(
í¸y±
));

649 i‡(
wifi
->
key
 && 
	`°r_Àn
(key) <= 0) {

650 
	`ems_l_åa˚
("key missing");

654 
	`br_£t_wifi_öfo
(
	`cfg_gë
(
cfg
, 
CFG_wúñess_i‚ame
), 
wifi
, 
	`°r_ãxt
(
ssid
), 
key
);

657 
ems_cch¨
 *
œn_öf
, *
w™_öf
;

658 
ems_ch¨
 *
buf
 = 
	`buf_wr
(
cmd
);

659 
ems_öt
 
Àn
 = 
	`buf_À·
(
cmd
);

661 
	`ems_sy°emcmd
("/etc/init.d/dnsmasq stop");

662 
	`ems_sy°emcmd
("/etc/init.d/uhttpd stop");

664 
œn_öf
 = 
	`c‹e_gw_i‚ame
();

665 
w™_öf
 = 
	`cfg_gë
(
cfg
, 
CFG_w™_i‚ame
);

667 
	`ems_as£π
(
œn_öf
 && 
w™_öf
);

669 
	`¢¥ötf
(
buf
, 
Àn
, "br˘»addi‡%†%s", 
œn_öf
, 
w™_öf
);

670 
	`ems_sy°emcmd
(
buf
);

672 
	`¢¥ötf
(
buf
, 
Àn
,

674 
w™_öf
, wan_inf);

675 
	`ems_sy°emcmd
(
buf
);

677 
	`¢¥ötf
(
buf
, 
Àn
, "ùÑouã dñ deÁu… vü %†dev %s", 
	`cfg_gë
(
cfg
, 
CFG_w™_gw
), 
w™_öf
);

678 
	`ems_sy°emcmd
(
buf
);

680 
	`¢¥ötf
(
buf
, 
Àn
,

682 
œn_öf
,Üan_inf);

683 
	`ems_sy°emcmd
(
buf
);

685 
	`¢¥ötf
(
buf
, 
Àn
, "/sbö/udh˝¯-ò%†-xho°«me:%s", 
œn_öf
, 
	`cfg_gë
(
cfg
, 
CFG_wúñess_ssid
));

686 
	`ems_sy°emcmd
(
buf
);

689 
πn
 = 
EMS_OK
;

692  
πn
;

693 
	}
}

695 
ems_öt


696 
	$br_r•_ªq
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
roŸ
)

698 
ems_öt
 
πn
;

699 
ems_°r
 
ssid
;

700 
ems_°r
 
í¸y±
;

701 
ems_°r
 
key
;

703 
	`ems_l_åa˚
("u∂ök'†ªtu∫: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
));

705 
	`°r_öô
(&
ssid
);

706 
	`°r_öô
(&
í¸y±
);

707 
	`°r_öô
(&
key
);

710 
πn
 = 
EMS_ERR
;

711 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "ssid", &
ssid
, 
NULL
);

712 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "í¸y±i⁄", &
í¸y±
, 
NULL
);

713 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "key", &
key
, 
NULL
);

715 i‡(
	`°r_Àn
(&
ssid
Ë<0 || så_Àn(&
í¸y±
) <= 0)

717 
	`ems_l_åa˚
("invalidárg");

721 i‡(
	`br_chrﬁe_to_≠
(
br
, &
ssid
, &
í¸y±
, &
key
Ë=
EMS_OK
) {

722 
	`ems_l_åa˚
("weáre in brigde modeÇow");

723 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
);

724 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_√t
, 
EMS_APP_STOP
, 
NULL
);

728 
πn
 = 
EMS_OK
;

733 
	`°r_unöô
(&
ssid
);

734 
	`°r_unöô
(&
í¸y±
);

735 
	`°r_unöô
(&
key
);

737 i‡(
πn
 =
EMS_OK
)

738  
	`br_ch™ge_°©us
(
br
, 
°_hb
);

740 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

742  
πn
;

743 
	}
}

745 
ems_öt
 
	$br_r•_hb
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
roŸ
)

747  
	`br_ch™ge_°©us
(
br
, 
°_hb
);

748 
	}
}

750 
ems_öt


751 
	$br_msg_n‹mÆ_r•
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
js⁄_obje˘
 *
roŸ
)

753 
	`£ss_timeout_ˇn˚l
(
£ss
);

755 i‡(
r•
->
°
 !
EMS_OK
)

756  
EMS_ERR
;

758 
r•
->
èg
.
msg
 & 0x0000ffff) {

760 
CMD_BRIDGE_REQ
:

761  
	`br_r•_ªq
(
br
, 
£ss
, 
roŸ
);

763 
CMD_BRIDGE_HB
:

764  
	`br_r•_hb
(
br
, 
£ss
, 
roŸ
);

770  
EMS_ERR
;

771 
	}
}

773 
ems_öt
 
	$br_n‹mÆ
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

775 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

776 i‡(
	`br_ªcv_h™dÀ
(
br
, 
£ss
, 
br_msg_n‹mÆ_r•
Ë!
EMS_OK
)

777  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

780 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

781 i‡(
	`br_£nd_msg
(
br
, 
£ss
, 
Êg
Ë!
EMS_OK
)

782  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

785  
EMS_OK
;

786 
	}
}

788 
ems_öt
 
	$br_br
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

790 
£ss
 = 
br
->sess;

791 i‡(!
£ss
)

792  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

794 
	`ems_l_åa˚
("[br]session(%d) [%s: %d] down",

795 
	`ems_sock_fd
(&
£ss
->
sock
),

796 
	`ems_sock_addr
(&
£ss
->
sock
),

797 
	`ems_sock_p‹t
(&
£ss
->
sock
));

799 
	`£ss_evít_ˇn˚l
(
£ss
);

800 
	`ems_sock_˛o£
(&
£ss
->
sock
);

801 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
BR_HEARTBEAT_TIME
, 
br_timeout_cb
);

803  
EMS_OK
;

804 
	}
}

806 
ems_öt
 
	$br_îr
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

808  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

809 
	}
}

811 
ems_öt
 
	$br_to_c⁄√˘
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

813 
	`ems_l_åa˚
("timeoutÅo connect uplink");

814 
	`ems_£nd_mesßge
(
ty_bridge
, 
ty_dow∆ök
, 
EMS_APP_START
, 
NULL
);

815  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

816 
	}
}

818 
ems_öt
 
	$br_to_n‹mÆ
 (
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

820 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
))

821  
	`br_ch™ge_°©us
(
br
, 
°_hb
);

823  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

824 
	}
}

826 
ems_öt
 
	$br_to_br
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

828 
ems_cch¨
 *
gw
 = 
NULL
;

829 
	`ems_l_åa˚
("[br]ÅimeÅo say hello");

831 
gw
 = 
	`ems_sock_addr
(&
£ss
->
sock
);

832 i‡(!
gw
) {

833 
gw
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_œn_gw
);

834 i‡(
gw
) {

835 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
gw
);

836 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
EMS_PORT
);

838  
	`br_ch™ge_°©us
(
br
, 
°_hb
);

841 i‡(
	`br_c⁄√˘_gw
(
£ss
Ë!
EMS_OK
)

842  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

844 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
br_evt_cb
);

845 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
BR_CONNECT_GW_TIMEOUT
, 
br_timeout_cb
);

847 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
)) {

848 
	`c‹e_∑ck_ªq
(
£ss
, 
CMD_BRIDGE_HB
);

849  
	`br_ch™ge_°©us
(
br
, 
°_n‹mÆ
);

852  
	`br_ch™ge_°©us
(
br
, 
°_c⁄√˘
);

853 
	}
}

855 
ems_öt
 
	$br_to_îr
(
ems_bridge
 *
br
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

857  
	`br_ch™ge_°©us
(
br
, 
°_°›≥d
);

858 
	}
}

860 
ems_void
 
	$ems_£twifi_n›assw‹d
()

862 
ems_cfg
 *
cfg
 = 
	`emscfg
();

863 
ems_cch¨
 *
vÆ
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_í¸y±
);

865 i‡(
vÆ
 && !
	`°rcmp
(val, "none"))

868 
	`br_£t_wifi_öfo
(
	`cfg_gë
(
cfg
, 
CFG_wúñess_i‚ame
),

869 
	`wifi_mod_föd
("none"),

870 
	`cfg_gë
(
cfg
, 
CFG_wúñess_ssid
),

871 
NULL
);

872 
	}
}

874 
ems_öt
 
	$br_ch™ge_°©us
(
ems_bridge
 *
br
, 
ems_°©us
 
°
)

876 i‡(
br
->
°
 == st)

877  
EMS_OK
;

879 
	`ems_l_åa˚
("[br] chnage status: %s +++> %s",

880 
	`ems_°©us_°r
(
br
->
°
),Éms_status_str(st));

882 
br
->
°
 = st;

884 
°
) {

886 
°_°¨t
:

887 
°_°›≥d
:

888 
°_hb
:

889  
	`br_evt_run
(
br
, 
NULL
, 0);

896  
EMS_OK
;

897 
	}
}

	@src/core/ems_bridge.h

2 #i‚de‡ 
EMS_HEADERE_CLIENT_FOR_BRIGDE___


3 
	#EMS_HEADERE_CLIENT_FOR_BRIGDE___


	)

5 
_ems_bridge_s
 
	tems_bridge
;

7 
	s_ems_bridge_s


9 
ems_°©us
 
	m°
;

11 
ems_£ssi⁄
 *
	m£ss
;

14 
ems_öt
 
br_ch™ge_°©us
(
ems_bridge
 *
br
, 
ems_°©us
 
°
);

	@src/core/ems_client.c

2 #ifde‡
USE_EMS_SERVER


4 
	~"ems_c‹e.h
"

5 
	~"ems_˛õ¡.h
"

6 
	~"≠p.h
"

7 
	~"ems_fw.h
"

9 
	s_ems_˛õ¡_s


11 
ems_c‹e
 *
	mc‹e
;

12 
ems_£ssi⁄
 *
	m£ss
;

13 
ems_°©us
 
	m°
;

14 
ems_void
 *
	m˘x
;

16 
ems_uöt
 
	mu±
;

17 
ems_öt
 
	mªåy
;

18 
ems_uöt
 
	mÊg
;

19 
ems_°r
 
	mtickë
;

22 
	#EMS_TIMEOUT_CONNECT
 10000

	)

23 
	#EMS_TIMEOUT_ERROR_WAIT
 10000

	)

24 
	#EMS_TIMEOUT_REGISTER
 10000

	)

25 
	#EMS_TIMEOUT_DEFAULT
 10000

	)

26 
	#EMS_TIMEOUT_FOR_HB
 10000

	)

27 
	#EMS_TIMEOUT_HB
 5000

	)

30 
ems_void
 
˛_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

31 
ems_void
 
˛_evt_cb
 (
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
°
,Éms_öà
Êg
);

33 
ems_öt
 
˛_öô
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

34 
ems_öt
 
˛_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

35 
ems_öt
 
˛_°›≥d
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

36 
ems_öt
 
˛_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

37 
ems_öt
 
˛_hb
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

38 
ems_öt
 
˛_ªg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

39 
ems_öt
 
˛_≠∂i°
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

40 
ems_öt
 
˛_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

41 
ems_öt
 
˛_ö°Æl
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

42 
ems_öt
 
˛_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

44 
	$ems_öt
 (*
	t˛_evt_func
)(
	tems_˛õ¡
 *
	t˛
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

45 
˛_evt_func
 
˘æ_h™dÀr
[] =

47 [
°_öô
] = 
˛_öô
,

48 [
°_°›≥d
] = 
˛_°›≥d
,

49 [
°_n‹mÆ
] = 
˛_n‹mÆ
,

50 [
°_hb
] = 
˛_hb
,

51 [
°_ªg
] = 
˛_ªg
,

52 [
°_≠∂i°
] = 
˛_≠∂i°
,

53 [
°_dow∆ﬂd
]
˛_dow∆ﬂd
,

54 [
°_ö°Æl
] = 
˛_ö°Æl
,

55 [
°_îr
] = 
˛_îr
,

56 [
°_c⁄√˘
] = 
˛_c⁄√˘
,

57 [
°_max
] = 
NULL


58 
	}
};

60 
	$ems_öt
 (*
	t˛_timeout_func
)(
	tems_˛õ¡
 *
	tÊ
, 
	tems_£ssi⁄
 *
	t£ss
);

62 
ems_öt
 
	`˛_to_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

63 
ems_öt
 
	`˛_to_hb
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

64 
ems_öt
 
	`˛_to_ªg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

65 
ems_öt
 
	`˛_to_≠∂i°
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

66 
ems_öt
 
	`˛_to_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

67 
ems_öt
 
	`˛_to_ö°Æl
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

68 
ems_öt
 
	`˛_to_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

69 
ems_öt
 
	`˛_to_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

71 
˛_timeout_func
 
timeout_h™dÀr
[] =

73 [
°_öô
] = 
NULL
,

74 [
°_°›≥d
] = 
NULL
,

75 [
°_n‹mÆ
] = 
˛_to_n‹mÆ
,

76 [
°_hb
] = 
˛_to_hb
,

77 [
°_ªg
] = 
˛_to_ªg
,

78 [
°_≠∂i°
] = 
˛_to_≠∂i°
,

79 [
°_dow∆ﬂd
]
˛_to_dow∆ﬂd
,

80 [
°_ö°Æl
] = 
˛_to_ö°Æl
,

81 [
°_îr
] = 
˛_to_îr
,

82 [
°_c⁄√˘
] = 
˛_to_c⁄√˘
,

83 [
°_max
] = 
NULL


84 
	}
};

86 
	$ems_öt
 (*
	t˛_evt_r•_cb
)(
	tems_˛õ¡
 *, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_ª•⁄£
 *
	tr•
, 
	tjs⁄_obje˘
 *
	troŸ
);

88 
ems_void
 
	$˛_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

90 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
	`£ss_cb¨g
(
£ss
);

92 
	`ems_as£π
(
˛
->
°
 > 
°_mö
 && cl->° < 
°_max
);

94 
	`ems_as£π
(
timeout_h™dÀr
[
˛
->
°
]);

96 i‡(
timeout_h™dÀr
[
˛
->
°
])

97 
timeout_h™dÀr
[
˛
->
°
](˛, 
£ss
);

98 
	}
}

100 
ems_öt
 
	$˛_evt_run
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
Êg
)

102 
	`ems_as£π
(
˛
 && cl->
°
 > 
°_mö
 && cl->° < 
°_max
);

104 
	`ems_as£π
(
˘æ_h™dÀr
[
˛
->
°
]);

106  
˘æ_h™dÀr
[
˛
->
°
](˛, 
£ss
, 
Êg
);

107 
	}
}

109 
ems_void
 
	$˛_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

111 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
	`£ss_cb¨g
(
£ss
);

113 
	`ems_as£π
(
˛
->
°
 > 
°_mö
 && cl->° < 
°_max
);

115 i‡(
îr
) {

116 
	`ems_l_åa˚
("[clnt]ÉvtÉrr, sess: %d %s:%d",

117 
	`ems_sock_fd
(&
£ss
->
sock
),

118 
	`ems_sock_addr
(&
£ss
->
sock
),

119 
	`ems_sock_p‹t
(&
£ss
->
sock
)

121 
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

125 
	`˛_evt_run
(
˛
, 
£ss
, 
Êg
);

126 
	}
}

128 
ems_öt
 
	$˛_do_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

130 
ems_öt
 
fd
, 
ªt
;

131 
sockÀn_t
 
Àn
;

132 
sockaddr_ö
 
addr
;

133 
ems_sock
 *
sock
 = &
£ss
->sock;

135 
	`ems_as£π
(
£ss
);

137 
	`mem£t
(&
addr
, 0, (addr));

138 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

139 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

140 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

141  
EMS_ERR
;

144 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

145 i‡(
fd
 <= 0)

146  
EMS_ERR
;

148 
	`ems_l_åa˚
("[clnt] sess(%d)ÅryÅo connectÅo: %s(%s): %d...",

149 
fd
,

150 
	`ems_sock_addr
(
sock
),

151 
	`öë_¡ﬂ
(
addr
.
sö_addr
),

152 
	`ems_sock_p‹t
(
sock
));

154 
addr
.
sö_Ámûy
 = 
AF_INET
;

155 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

157 
	`ems_£ä⁄blockög
(
fd
, 
YES
);

158 
Àn
 = (
sockaddr_ö
);

159 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
);

161 
ªt
) {

163 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

167 
ªt
 = 
	`ems_œ°îr
();

168 
	`ems_Êag_un£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

170 i‡(
ªt
 !
EINPROGRESS
) {

171 
	`˛o£
(
fd
);

172 
	`ems_l_åa˚
("[clnt] connectÅo: %s:%d: failed: %s",

173 
	`ems_sock_addr
(
sock
),

174 
	`ems_sock_p‹t
(
sock
),

175 
	`ems_gëîrmsg
(
ªt
));

176  
EMS_ERR
;

183 
	`ems_sock_£tfd
(
sock
, 
fd
);

184  
EMS_OK
;

185 
	}
}

187 
ems_öt
 
	$˛_öô
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

189 i‡(!
˛
->
£ss
) {

190 
˛
->
£ss
 = 
	`ems_£ssi⁄_√w
();

191 i‡(!
˛
->
£ss
)

192  
EMS_ERR
;

194 
	`£ss_cb¨g_£t
(
˛
->
£ss
, cl);

197 
£ss
 = 
˛
->sess;

198 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

199 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

201 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_addr
));

202 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_p‹t
)));

204 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
)

205  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

207 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
))

208  
	`˛_ch™ge_°©us
(
˛
, 
°_ªg
);

210 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
|
EMS_EVT_WRITE
, 
˛_evt_cb
);

211 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

213  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

214 
	}
}

216 
ems_öt
 
	$˛_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

218 
ems_öt
 
îr
;

219 
sockÀn_t
 
Àn
;

221 
Àn
 = (
îr
);

222 
îr
 = 0;

223 
	`gësock›t
(
	`ems_sock_fd
(&
£ss
->
sock
), 
SOL_SOCKET
, 
SO_ERROR
, (
ems_ch¨
 *)&
îr
, &
Àn
);

225 i‡(
îr
 ) {

226 
î∫o
 = 
îr
;

227 
	`ems_l_åa˚
("[clnt]sess(%d) connectÅo %s:%d failed, %s",

228 
	`ems_sock_fd
(&
£ss
->
sock
),

229 
	`ems_sock_addr
(&
£ss
->
sock
),

230 
	`ems_sock_p‹t
(&
£ss
->
sock
),

231 
	`ems_gëîrmsg
(
îr
));

232  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

235 
	`ems_l_åa˚
("[clnt]sess(%d)Éstablished with %s:%d",

236 
	`ems_sock_fd
(&
£ss
->
sock
),

237 
	`ems_sock_addr
(&
£ss
->
sock
),

238 
	`ems_sock_p‹t
(&
£ss
->
sock
));

240 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

242 i‡(
	`ems_Êag_like
(
˛
->
Êg
, 
FLG_CLIENT_ONLINE
))

243  
	`˛_ch™ge_°©us
(
˛
, 
°_hb
);

245  
	`˛_ch™ge_°©us
(
˛
, 
°_ªg
);

246 
	}
}

248 
ems_öt
 
	$˛_°›≥d
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

250 i‡(
˛
->
£ss
) {

251 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˛
->
£ss
);

252 
˛
->
£ss
 = 
NULL
;

255  
EMS_OK
;

256 
	}
}

258 
ems_öt


259 
	$˛_¥o˚ss_r•
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
˛_evt_r•_cb
 
h
)

261 
js⁄_obje˘
 *
roŸ
;

262 
ems_öt
 
πn
 = 
EMS_OK
;

264 
	`ems_as£π
(
˛
 && 
£ss
 && 
r•
);

266 
roŸ
 = 
NULL
;

267 i‡(
r•
->
Àn
 > 
SIZE_RESPONSE
) {

268 
ems_öt
 
Àn
;

269 
ems_ch¨
 *
p
, 
ch
;

271 
	`ems_as£π
(
	`buf_Àn
(&
£ss
->
buf_ö
Ë>
r•
->
Àn
);

273 
p
 = (
ems_ch¨
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
SIZE_RESPONSE
);

274 
	`gëw‹d
(
p
, 
Àn
);

276 
ch
 = 
p
[
Àn
];

277 
p
[
Àn
] = '\0';

278 
roŸ
 = 
	`ems_js⁄_tokíî_∑r£
(
p
);

279 
p
[
Àn
] = 
ch
;

281 #ifde‡
DEBUG


283 
ems_cch¨
 *
˘x
 = 
roŸ
?
	`js⁄_obje˘_to_js⁄_°rög
(root):"no ctx";

285 
	`ems_l_åa˚
("\033[01;34m[clnt]<rspÅag: 0x%x, st: %d ctx: %s> \033[00m",

286 
r•
->
èg
.
vÆ
,Ñ•->
°
, 
	`°æí
(
˘x
)> 0x200?"**tooÜong**":ctx);

291 i‡(
h
)

292 
πn
 = 
	`h
(
˛
, 
£ss
, 
r•
, 
roŸ
);

294 
πn
 = 
EMS_ERR
;

296 i‡(
roŸ
)

297 
	`js⁄_obje˘_put
(
roŸ
);

299 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_ö
, 
r•
->
Àn
, 
EMS_BUFFER_SEEK_CUR
);

300 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

301  
πn
;

302 
	}
}

305 
ems_öt
 
	$˛_¥ïro˚ss
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
˛_evt_r•_cb
 
h
)

307 
ems_ª•⁄£
 
r•
;

309 
	`ems_as£π
(
˛
 && 
£ss
 && 
h
);

311 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
SIZE_RESPONSE
)

312  
EMS_CONTINUE
;

314 
	`ems_buf„r_¥e„tch
(&
£ss
->
buf_ö
, (
ems_ch¨
 *)
r•
.
vÆ
, 
SIZE_RESPONSE
);

316 
r•
.
èg
.
vÆ
 = 
	`¡ohl
(rsp.tag.val);

317 
r•
.
Àn
 = 
	`¡ohl
(rsp.len);

318 
r•
.
°
 = 
	`¡ohl
(rsp.st);

320 i‡(
r•
.
Àn
 >
	`buf_size
(&
£ss
->
buf_ö
)) {

321 i‡(
	`ems_buf„r_ö¸ó£
(&
£ss
->
buf_ö
, 
r•
.
Àn
Ë!
EMS_OK
)

322  
EMS_BUFFER_INSUFFICIENT
;

325 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
r•
.
Àn
)

326  
EMS_CONTINUE
;

328  
	`˛_¥o˚ss_r•
(
˛
, 
£ss
, &
r•
, 
h
);

329 
	}
}

332 
ems_öt


333 
	$˛_ªcv_h™dÀ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
˛_evt_r•_cb
 
h
)

335 
ems_öt
 
ªt
, 
agaö
;

337 
agaö
 = 
EMS_YES
;

338 
ªcv_agaö
:

339 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

340 i‡(
ªt
 <= 0) {

341 
ªt
) {

342 -
EAGAIN
:

343 
agaö
 = 
EMS_NO
;

346 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) > 0)

347 
	`˛_¥ïro˚ss
(
˛
, 
£ss
, 
h
);

348  
EMS_ERR
;

353 
ªt
 = 
	`˛_¥ïro˚ss
(
˛
, 
£ss
, 
h
);

355 
ªt
) {

356 
EMS_BUFFER_INSUFFICIENT
:

357 
EMS_ERR
:

358  
EMS_ERR
;

360 
EMS_OK
:

361 
EMS_CONTINUE
:

365 } 
ªt
 !
EMS_CONTINUE
);

367 i‡(
agaö
)

368 
ªcv_agaö
;

370  
EMS_OK
;

371 
	}
}

373 
ems_öt
 
	$˛_£nd_msg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

375 
ems_öt
 
ªt
;

377 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

379 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

380 i‡(
ªt
 <= 0) {

381 
ªt
) {

383 -
EAGAIN
:

387  
ªt
;

391 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0) {

392 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
˛_evt_cb
);

393 
	`£ss_timeout_ˇn˚l
(
£ss
);

394 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf
);

397  
EMS_OK
;

398 
	}
}

401 
ems_öt
 
	$˛_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

403 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

405 
£ss
 = 
˛
->sess;

407 i‡(
£ss
) {

408 
	`£ss_evít_ˇn˚l
(
£ss
);

409 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

410 
	`ems_sock_fd
(&
£ss
->
sock
),

411 
	`ems_sock_addr
(&
£ss
->
sock
),

412 
	`ems_sock_p‹t
(&
£ss
->
sock
));

413 
	`ems_sock_˛o£
(&
£ss
->
sock
);

414 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_FOR_HB
, 
˛_timeout_cb
);

417  
EMS_OK
;

418 
	}
}

420 
ems_öt


421 
	$˛_msg_r•_hb
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
js⁄_obje˘
 *
roŸ
)

423 
ems_öt
 
u±
;

425 
	`ems_js⁄_gë_öt_def
(
roŸ
, "modify_id", 
u±
, 0);

426 i‡(
u±
 !
˛
->upt) {

427 
	`ems_l_åa˚
("£rvî'†u± upd©e: from %u i¡ÿ%u", 
˛
->
u±
, upt);

428 
˛
->
u±
 = upt;

429  
	`˛_ch™ge_°©us
(
˛
, 
°_≠∂i°
);

432  
	`˛_ch™ge_°©us
(
˛
, 
°_n‹mÆ
);

433 
	}
}

435 
ems_öt
 
	$˛_hb
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

437 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

438 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_msg_r•_hb
Ë!
EMS_OK
)

440  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

444 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

445 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
)

446  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

449  
EMS_OK
;

450 
	}
}

452 
ems_öt


453 
	$˛_msg_r•_ªg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
js⁄_obje˘
 *
roŸ
)

455 i‡((
r•
->
°
 =
EMS_OK
Ë&& 
roŸ
) {

456 
	`ems_js⁄_gë_°rög_def
(
roŸ
, "tickë", &
˛
->
tickë
, 
NULL
);

457 
	`ems_js⁄_gë_öt_def
(
roŸ
, "modify_id", 
˛
->
u±
, 0);

459 
	`ems_as£π
(
	`°r_Àn
(&
˛
->
tickë
) > 0);

460 i‡(
	`°r_Àn
(&
˛
->
tickë
) > 0) {

461 
	`ems_Êag_£t
(
˛
->
Êg
, 
FLG_CLIENT_ONLINE
);

462  
	`˛_ch™ge_°©us
(
˛
, 
°_≠∂i°
);

466  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

467 
	}
}

469 
ems_öt
 
	$˛_ªg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

471 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

472 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_msg_r•_ªg
Ë!
EMS_OK
)

474  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

478 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

479 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
)

480  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

483  
EMS_OK
;

484 
	}
}

486 
ems_öt


487 
	$˛_msg_r•_≠∂i°
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_ª•⁄£
 *
r•
, 
js⁄_obje˘
 *
roŸ
)

489 
	`ems_≠∂i°_¥o˚ss
(
roŸ
);

494  
	`˛_ch™ge_°©us
(
˛
, 
°_n‹mÆ
);

495 
	}
}

497 
ems_öt
 
	$˛_≠∂i°
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

499 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

500 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_msg_r•_≠∂i°
Ë!
EMS_OK
)

502  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

506 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

507 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
)

508  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

511  
EMS_OK
;

512 
	}
}

514 
ems_öt
 
	$˛_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

516  
EMS_OK
;

517 
	}
}

519 
ems_öt
 
	$˛_ö°Æl
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

521  
EMS_OK
;

522 
	}
}

524 
ems_öt
 
	$˛_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

526 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

528 
£ss
 = 
˛
->sess;

530 i‡(
£ss
) {

531 
	`£ss_evít_ˇn˚l
(
£ss
);

532 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

533 
	`ems_sock_fd
(&
£ss
->
sock
),

534 
	`ems_sock_addr
(&
£ss
->
sock
),

535 
	`ems_sock_p‹t
(&
£ss
->
sock
));

536 
	`ems_sock_˛o£
(&
£ss
->
sock
);

537 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_ERROR_WAIT
, 
˛_timeout_cb
);

540 
	`ems_Êag_un£t
(
˛
->
Êg
, 
FLG_CLIENT_ONLINE
);

541 
˛
->
u±
 = -1;

543  
EMS_OK
;

544 
	}
}

546 
ems_öt
 
	$˛_to_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

548 
	`ems_l_åa˚
("[clnt]sess(%d) connectÅo %s:%dÅimeout",

549 
	`ems_sock_fd
(&
£ss
->
sock
),

550 
	`ems_sock_addr
(&
£ss
->
sock
),

551 
	`ems_sock_p‹t
(&
£ss
->
sock
));

553  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

554 
	}
}

556 
ems_öt
 
	$˛_to_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

558 
	`ems_l_åa˚
("[˛¡]£ss(%dËtimêf‹ hb ", 
	`ems_sock_fd
(&
£ss
->
sock
));

559 #ifde‡
DEBUG


560 i‡(!
˛
->
ªåy
)

561  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

563 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

564 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

566 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
)

567  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

569 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
))

570  
	`˛_ch™ge_°©us
(
˛
, 
°_hb
);

572 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
|
EMS_EVT_WRITE
, 
˛_evt_cb
);

573 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

575  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

576 
	}
}

578 
ems_öt
 
	$˛_to_hb
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

580 
	`ems_l_åa˚
("[clnt]sess(%d) send hbÅimeoutÅo %s:%d ",

581 
	`ems_sock_fd
(&
£ss
->
sock
),

582 
	`ems_sock_addr
(&
£ss
->
sock
),

583 
	`ems_sock_p‹t
(&
£ss
->
sock
));

585  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

586 
	}
}

588 
ems_öt
 
	$˛_to_ªg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

590 
	`ems_l_åa˚
("[clnt]sess(%d)ÑegÅo %s:%dÅimeout",

591 
	`ems_sock_fd
(&
£ss
->
sock
),

592 
	`ems_sock_addr
(&
£ss
->
sock
),

593 
	`ems_sock_p‹t
(&
£ss
->
sock
));

595  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

596 
	}
}

598 
ems_öt
 
	$˛_to_≠∂i°
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

600  
EMS_OK
;

601 
	}
}

603 
ems_öt
 
	$˛_to_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

605  
EMS_OK
;

606 
	}
}

608 
ems_öt
 
	$˛_to_ö°Æl
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

610  
EMS_OK
;

611 
	}
}

613 
ems_öt
 
	$˛_to_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

615 
	`ems_l_åa˚
("[clnt]ÅimeÅoÑetryÅo connect server");

616  
	`˛_ch™ge_°©us
(
˛
, 
°_öô
);

617 
	}
}

619 #ifde‡
DEBUG


620 
ems_cch¨
 *
	$ems_°©us_°r
(
ems_°©us
 
°
)

622 
°
) {

623 
°_öô
:

625 
°_n‹mÆ
:

627 
°_hb
:

629 
°_ªg
:

631 
°_≠∂i°
:

633 
°_dow∆ﬂd
:

635 
°_ö°Æl
:

637 
°_îr
:

639 
°_°›≥d
:

641 
°_c⁄√˘
:

644 
°_auth
:

647 
°_ac˘
:

650 
°_ac˘_°›
:

657 
	}
}

661 
ems_öt
 
	$˛_°_öto_ªg
(
ems_˛õ¡
 *
˛
)

663 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

664 
js⁄_obje˘
 *
ªq
;

666 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

668 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

669 
	`js⁄_obje˘_obje˘_add
(
ªq
, "code", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_¢
)));

670 
	`js⁄_obje˘_obje˘_add
(
ªq
, "mac", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_mac
)));

672 
	`£ss_ªque°_£t
(
£ss
, 
ªq
);

673 
	`c‹e_∑ck_ªq
(
£ss
, 
AC_MSG_REGISTER
);

674 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

675 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_REGISTER
, 
˛_timeout_cb
);

677  
EMS_OK
;

678 
	}
}

680 
ems_öt
 
	$˛_°_öto_hb
(
ems_˛õ¡
 *
˛
)

682 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

683 
js⁄_obje˘
 *
ªq
;

685 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

687 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

688 
	`js⁄_obje˘_obje˘_add
(
ªq
, "tickë", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
˛
->
tickë
)));

690 
	`£ss_ªque°_£t
(
£ss
, 
ªq
);

691 
	`c‹e_∑ck_ªq
(
£ss
, 
AC_MSG_HB
);

692 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

693 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_REGISTER
, 
˛_timeout_cb
);

695  
EMS_OK
;

696 
	}
}

698 
ems_öt
 
	$˛_°_öto_≠∂i°
(
ems_˛õ¡
 *
˛
)

700 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

701 
js⁄_obje˘
 *
ªq
;

703 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

705 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

706 
	`js⁄_obje˘_obje˘_add
(
ªq
, "tickë", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
˛
->
tickë
)));

708 
	`£ss_ªque°_£t
(
£ss
, 
ªq
);

709 
	`c‹e_∑ck_ªq
(
£ss
, 
AC_MSG_APPLIST
);

710 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

711 
	`£ss_timeout_£t
(
£ss
, 
EMS_TIMEOUT_REGISTER
, 
˛_timeout_cb
);

713  
EMS_OK
;

714 
	}
}

717 
ems_öt
 
	$˛_ch™ge_°©us
(
ems_˛õ¡
 *
˛
, 
ems_°©us
 
°
)

719 
	`ems_l_åa˚
("[clnt] change status: %s ---> %s",

720 
	`ems_°©us_°r
(
˛
->
°
),Éms_status_str(st));

722 
˛
->
°
 = st;

724 
˛
->
°
) {

725 
°_öô
:

726 
°_°›≥d
:

727 
°_îr
:

728  
	`˛_evt_run
(
˛
, 
NULL
, 0);

731 
°_ªg
:

732  
	`˛_°_öto_ªg
(
˛
);

735 
°_≠∂i°
:

736  
	`˛_°_öto_≠∂i°
(
˛
);

738 
°_n‹mÆ
:

739 
˛
->
ªåy
 = 5;

740  
	`˛_evt_run
(
˛
, 
NULL
, 0);

742 
°_hb
:

743  
	`˛_°_öto_hb
(
˛
);

749  
EMS_OK
;

750 
	}
}

754 
ems_öt
 
	$˛¡_öô
(
ems_c‹e
 *
c‹e
)

756 
ems_˛õ¡
 *
˛
 = 
c‹e
->
˛¡
;

758 
	`mem£t
(
˛
, 0, (
ems_˛õ¡
));

760 
˛
->
c‹e
 = core;

761 
˛
->
°
 = 
°_°›≥d
;

762 
˛
->
£ss
 = 
NULL
;

764 
˛
->
u±
 = -1;

765 
˛
->
ªåy
 = 0;

766 
˛
->
Êg
 = 0;

767 
	`°r_öô
(&
˛
->
tickë
);

769  
EMS_OK
;

770 
	}
}

772 
ems_öt
 
	$˛¡_unöô
(
ems_c‹e
 *
c‹e
)

774 
ems_˛õ¡
 *
˛
 = 
c‹e
->
˛¡
;

775 
	`ems_as£π
(
c‹e
 !
NULL
);

777 
	`ems_as£π
(
˛
->
°
 =
°_°›≥d
);

779 i‡(
˛
->
£ss
) {

780 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˛
->
£ss
);

781 
˛
->
£ss
 = 
NULL
;

784 
˛
->
c‹e
 = 
NULL
;

785 
˛
->
°
 = 
°_°›≥d
;

787 
	`°r_unöô
(&
˛
->
tickë
);

789  
EMS_OK
;

790 
	}
}

792 
ems_öt
 
	$˛¡_run
(
ems_c‹e
 *
c‹e
, 
ems_öt
 
run
)

794 
ems_˛õ¡
 *
˛
 = 
c‹e
->
˛¡
;

795 
	`ems_as£π
(
c‹e
 !
NULL
 && 
˛
);

797 i‡(
run
) {

798 i‡(
˛
->
°
 !
°_°›≥d
)

799  
EMS_OK
;

801 
	`ems_≠p_moduÀs_run
(
EMS_YES
);

802 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_RUN
);

803  
	`˛_ch™ge_°©us
(
˛
, 
°_öô
);

806 i‡(
˛
->
°
 =
°_°›≥d
)

807  
EMS_OK
;

809 
	`ems_≠p_moduÀs_run
(
EMS_NO
);

810 
	`ems_Êag_un£t
(
c‹e
->
Êg
, 
FLG_RUN
);

811  
	`˛_ch™ge_°©us
(
˛
, 
°_°›≥d
);

814  
EMS_OK
;

815 
	}
}

817 
ems_˛õ¡
 *
	$˛¡_√w
()

819  (
ems_˛õ¡
 *)
	`ems_mÆloc
((ems_client));

820 
	}
}

822 
ems_void
 
	$˛¡_de°roy
(
ems_˛õ¡
 *
˛¡
)

824 i‡(
˛¡
)

825 
	`ems_‰ì
(
˛¡
);

826 
	}
}

828 
ems_öt
 
	$ems_cmd_°©us_fûl_ems
(
ems_c‹e
 *
c‹e
, 
js⁄_obje˘
 *
roŸ
)

830 
ems_˛õ¡
 *
˛
 = 
c‹e
->
˛¡
;

831 
js⁄_obje˘
 *
r•
 = 
NULL
;

833 i‡(!
˛
)

834  
EMS_ERR
;

836 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

837 
	`js⁄_obje˘_obje˘_add
(
r•
, "°©us", 
	`js⁄_obje˘_√w_öt
(
˛
->
°
));

838 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "ems_c", 
r•
);

840  
EMS_OK
;

841 
	}
}

	@src/core/ems_client.h

2 #i‚de‡
EMS_CLIENT_HEADER_____123


3 
	#EMS_CLIENT_HEADER_____123


	)

5 
	~"ems_c⁄f.h
"

7 
	#FLG_AUTO_REG
 0x00000001

	)

8 
	#FLG_RUN
 0x00000002

	)

9 
	#FLG_INITED
 0x00000004

	)

10 
	#FLG_CLIENT_ONLINE
 0x80000000

	)

11 
	#FLG_NETWORK_BRIDGE_RUN
 0x40000000

	)

12 
	#FLG_NETWORK_READY
 0x20000000

	)

13 
	#FLG_NETWORK_BRIDGE
 0x10000000

	)

14 
	#FLG_NETWORK_WIRELESS
 0x08000000

	)

15 
	#FLG_RADIUS_AUTO
 0x04000000

	)

16 
	#FLG_PORTAL_AUTO
 0x02000000

	)

17 
	#FLG_SESSION_IS_WEB
 0x01000000

	)

18 
	#FLG_NETWORK_LAN_BACK
 0x00800000

	)

19 
	#FLG_SUBDOMAIN_ENABLE
 0x00400000

	)

20 
	#FLG_NET_DNS_RUN
 0x00200000

	)

21 
	#FLG_FIRST_CONFIG
 0x00100000

	)

22 
	#FLG_CONFIG_READY
 0x00080000

	)

25 
_ems_c‹e_s
 
	tems_c‹e
;

26 
_ems_˛õ¡_s
 
	tems_˛õ¡
;

27 
_ems_°©us_s
 
	tems_°©us
;

28 
_msg_queue_s
 
	tmsgqueue
;

31 
_dns_s
 
	tems_dns
;

32 
_dns_hódî_s
 
	tdns_hódî
;

33 
_dns_que°i⁄_s
 
	tdns_que°i⁄
;

34 
_dns_º_s
 
	tdns_º
;

35 
_dns_ôem_s
 
	tdns_ôem
;

36 
_dns_u£r_s
 
	tdns_u£r
;

37 
_dns_uæ_s
 
	tdns_uæ
;

39 
_ems_fw_s
 
	tems_fw
;

41 
	s_ems_c‹e_s


43 
ems_cfg
 
	mcfg
;

44 
ems_evít
 
	mevt
;

45 
ems_uöt
 
	mÊg
;

47 
ems_queue
 
	m≠p_íåy
;

49 
ems_buf„r
 
	mbuf
;

50 
ems_°r
 
	mgw
;

51 
ems_°r
 
	mi‚ame
;

52 
ems_°r
 
	mac_mac
;

53 
ems_°r
 
	mp‹èl
;

54 
ems_öt
 
	mp‹èl_ªdúe˘_p‹t
;

55 
ems_°r
 
	mssid
;

56 
ems_°r
 
	mdevty
;

57 
ems_°r
 
	m¢
;

60 
ems_queue
 
	mmsg_íåy
;

61 
ems_mtx
 
	mmsg_mtx
;

64 
	s_msg_queue_s
 {

65 
ems_uöt
 
	ms
;

66 
ems_uöt
 
	md
;

67 
ems_uöt
 
	mevt
;

68 
js⁄_obje˘
 *
	mobj
;

69 
ems_queue
 
	míåy
;

73 
	e_ems_°©us_s


75 
	m°_mö
 = -1,

76 
	m°_öô
 = 0,

77 
	m°_°›≥d
,

78 
	m°_n‹mÆ
,

79 
	m°_hb
,

80 
	m°_ªg
,

81 
	m°_≠∂i°
,

82 
	m°_dow∆ﬂd
,

83 
	m°_ö°Æl
,

84 
	m°_îr
,

85 
	m°_c⁄√˘
,

87 
	m°_gëc⁄fig
,

88 
	m°_gëupd©efûe
,

90 
	#°_°¨t
 
°_öô


	)

91 
	#°_gëdc
 
°_ªg


	)

92 
	#°_≠∂y
 
°_ö°Æl


	)

93 
	#°_upd©e°©us
 
°_hb


	)

95 
	m°_auth
,

96 
	m°_ac˘
,

97 
	m°_ac˘_°›
,

98 
	m°_max


101 
	s_ems_˛õ¡_s


103 
ems_£ssi⁄
 *
	m£ss
;

104 
ems_°©us
 
	m°
;

105 
ems_void
 *
	m˘x
;

106 
ems_°©us
 
	m√xt
;

108 
ems_uöt
 
	mu±
;

109 
ems_öt
 
	mªåy
;

110 
ems_uöt
 
	mÊg
;

111 
ems_öt
 
	mu£_s¶
;

112 
ems_uöt
 
	mœ°îr
;

114 
ems_°r
 
	mnm_addr
;

115 
ems_öt
 
	mnm_p‹t
;

116 
ems_öt
 
	mgëc⁄f
;

118 
ems_l⁄g
 
	mn_u±
;

119 
ems_l⁄g
 
	mn_c⁄f
;

121 
ems_öt
 
	mu±_≥riod
;

122 
ems_öt
 
	mgëc⁄f_≥riod
;

123 
ems_öt
 
	mªåy_≥riod
;

125 
ems_¥o˚ssid
 
	mpid
;

130 
ems_öt
 
ems_£nd_mesßge
(
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
obj
);

133 
ems_öt
 
ems_c‹e_öô
(
ems_c‹e
 *
c‹e
);

134 
ems_öt
 
ems_c‹e_unöô
(
ems_c‹e
 *
c‹e
);

135 
ems_öt
 
ems_c‹e_maö
(
ems_c‹e
 *
c‹e
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

137 
ems_öt
 
c‹e_∑ck_r•
(
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
èg
,Éms_öà
°
);

138 
ems_öt
 
c‹e_∑ck_ªq
(
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
èg
);

139 
ems_c‹e
 *
emsc‹î
();

140 
ems_cfg
 *
emscfg
();

142 #ifde‡
DEBUG


143 
ems_cch¨
 *
ems_°©us_°r
(
ems_°©us
 
°
);

145 
ems_cch¨
 *
ems_p›í_gë
”ms_cch¨ *
cmd
);

146 
ems_cch¨
 *
ems_°rˇt
”ms_cch¨ *
s1
,Éms_cch¨ *
s2
);

147 
ems_ch¨
 *
ems_u£rmac
(
ems_cch¨
 *
ù
);

148 
ems_öt
 
ems_sy°emcmd
(
ems_cch¨
 *
cmd
);

149 
ems_öt
 
c‹e_wúñess_öfo
();

150 
ems_öt
 
ems_Êush_sy°em_öfo
();

157 
ems_void
 
c‹e_gw_addr_˛ór
();

158 
ems_cch¨
 *
c‹e_gw_addr
();

159 
ems_void
 
c‹e_gw_i‚ame_˛ór
();

160 
ems_cch¨
 *
c‹e_gw_i‚ame
();

161 
ems_buf„r
 *
c‹e_buf„r
();

163 
ems_cch¨
 *
c‹e_ac_mac
();

164 
ems_cch¨
 *
c‹e_p‹èl_addr
();

165 
ems_öt
 
c‹e_p‹èl_ªdúe˘_p‹t
();

166 
ems_cch¨
 *
c‹e_ssid
();

167 
ems_cch¨
 *
c‹e_devi˚ty≥
();

168 
ems_cch¨
 *
c‹e_¢
();

170 
	#NAS_ADDR
 "115.28.38.73"

	)

171 
	#NAS_INFO_URL
 "hâp://"
NAS_ADDR


	)

173 
ems_void
 
ems_£twifi_n›assw‹d
();

174 
ems_öt
 
˛_ch™ge_°©us
(
ems_˛õ¡
 *
˛
, 
ems_°©us
 
°
);

	@src/core/ems_client_v1.c

2 #i‚de‡
USE_EMS_SERVER


4 
	~"ems_c‹e.h
"

5 
	~"ems_˛õ¡.h
"

6 
	~"≠p.h
"

7 
	~"ems_fw.h
"

9 
	#EMS_TIMEOUT_SEND
 10000

	)

10 
	#EMS_TIMEOUT_CONNECT
 10000

	)

13 
	#ERR_DEVICE_INACTIVE
 0x999

	)

14 
	#ERR_CONNECT_DC_FAILED
 0x1000

	)

15 
	#ERR_DOWNLOAD_APPCONFIG
 0x1001

	)

16 
	#ERR_RESPONSE_ERROR
 0x1002

	)

18 
	#ERR_CONNECT_NM_FAILED
 0x2000

	)

19 
	#ERR_DOWNLOAD_CONFIG_FAILED
 0x2001

	)

20 
	#ERR_SETUPFILE_MISSING
 0x2002

	)

21 
	#ERR_INSTALL_FAILED
 0x2003

	)

25 #ifde‡
FOR_TEST_INM


30 
	#GETDC_RSP_ERR
 "{'js⁄Ωc': '2.0', 'îr‹': {'code': -1, 'mesßge': 'MëhodÇŸ found'}, 'id': 1}"

	)

31 
	#GETDC_RSP_OK
 \

34 "'id': 1}"

	)

38 
ems_cch¨
 *
	gnm_r•
[] = {

39 [
°_gëdc
] = 
GETDC_RSP_OK
,

41 [
°_gëc⁄fig
] =

75 [
°_gëupd©efûe
] =

90 [
°_max
] = 
NULL


95 
ems_void
 
˛_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

96 
ems_void
 
˛_evt_cb
 (
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
°
,Éms_öà
Êg
);

98 
ems_öt
 
˛_°¨t
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

99 
ems_öt
 
˛_°›≥d
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

100 
ems_öt
 
˛_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

101 
ems_öt
 
˛_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

102 
ems_öt
 
˛_gëdc
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

103 
ems_öt
 
˛_gëc⁄fig
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

104 
ems_öt
 
˛_gëupd©efûe
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

105 
ems_öt
 
˛_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

106 
ems_öt
 
˛_≠∂y
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

107 
ems_öt
 
˛_upd©e°©us
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

108 
ems_öt
 
˛_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

110 
	$ems_öt
 (*
	t˛_evt_func
)(
	tems_˛õ¡
 *
	t˛
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

111 
˛_evt_func
 
˘æ_h™dÀr
[] =

113 [
°_°¨t
] = 
˛_°¨t
,

114 [
°_°›≥d
] = 
˛_°›≥d
,

115 [
°_îr
] = 
˛_îr
,

116 [
°_n‹mÆ
] = 
˛_n‹mÆ
,

117 [
°_gëdc
] = 
˛_gëdc
,

118 [
°_gëc⁄fig
] = 
˛_gëc⁄fig
,

119 [
°_gëupd©efûe
] = 
˛_gëupd©efûe
,

120 [
°_dow∆ﬂd
] = 
˛_dow∆ﬂd
,

121 [
°_≠∂y
] = 
˛_≠∂y
,

122 [
°_upd©e°©us
] = 
˛_upd©e°©us
,

123 [
°_c⁄√˘
] = 
˛_c⁄√˘
,

124 [
°_max
] = 
NULL


125 
	}
};

127 
	$ems_öt
 (*
	t˛_timeout_func
)(
	tems_˛õ¡
 *
	tÊ
, 
	tems_£ssi⁄
 *
	t£ss
);

129 
ems_öt
 
	`˛_to_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

130 
ems_öt
 
	`˛_to_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

131 
ems_öt
 
	`˛_to_gëdc
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

132 
ems_öt
 
	`˛_to_gëc⁄fig
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

133 
ems_öt
 
	`˛_to_gëupd©efûe
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

134 
ems_öt
 
	`˛_to_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

135 
ems_öt
 
	`˛_to_upd©e°©us
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

136 
ems_öt
 
	`˛_to_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
);

138 
˛_timeout_func
 
timeout_h™dÀr
[] =

140 [
°_°¨t
] = 
NULL
,

141 [
°_°›≥d
] = 
NULL
,

142 [
°_îr
] = 
˛_to_îr
,

143 [
°_n‹mÆ
] = 
˛_to_n‹mÆ
,

144 [
°_gëdc
] = 
˛_to_gëdc
,

145 [
°_gëc⁄fig
] = 
˛_to_gëc⁄fig
,

146 [
°_gëupd©efûe
] = 
˛_to_gëupd©efûe
,

147 [
°_dow∆ﬂd
] = 
˛_to_dow∆ﬂd
,

148 [
°_≠∂y
] = 
NULL
,

149 [
°_upd©e°©us
] = 
˛_to_upd©e°©us
,

150 [
°_c⁄√˘
] = 
˛_to_c⁄√˘
,

151 [
°_max
] = 
NULL


152 
	}
};

154 
	$ems_öt
 (*
	t˛_evt_r•_cb
)(
	tems_˛õ¡
 *, 
	tems_£ssi⁄
 *
	t£ss
, 
	tjs⁄_obje˘
 *
	troŸ
);

156 
js⁄_obje˘
 *
	$˛_kv_öto_js⁄
(
ems_cch¨
 *
˘x
)

158 
js⁄_obje˘
 *
obj
 = 
NULL
;

159 
ems_buf„r
 
buff
;

160 
ems_cch¨
 *
p
, *
q
;

161 
ems_ch¨
 *
buf
, *
k
, *
v
;

162 
ems_öt
 
Àn
;

164 
	`ems_buf„r_öô
(&
buff
, 
EMS_BUFFER_1K
);

165 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

167 
buf
 = 
	`buf_wr
(&
buff
);

168 
k
 = 
v
 = 
NULL
;

171 
	`mem£t
(
buf
, 0, 
	`buf_size
(&
buff
));

172 
q
 = 
˘x
;

173 
p
 = 
	`°rchr
(
q
, '\n');

175 i‡(!
p
) {

176 
˘x
 +
	`°æí
(ctx);

177 
p
 = 
˘x
;

180 
˘x
 = 
p
 + 1;

182 
Àn
 = 
	`abs
(
p
 - 
q
);

183 i‡(
Àn
 > 
	`buf_size
(&
buff
))

184 
Àn
 = 
	`buf_size
(&
buff
) -1;

186 
	`mem˝y
(
buf
, 
q
, 
Àn
);

188 
	`ems_åim
(
buf
);

189 
	`ems_l_åa˚
("löêöfo: %s", 
buf
);

191 
k
 = 
buf
;

192 
v
 = 
	`°rchr
(
k
, '=');

194 i‡(
v
 && 
	`°æí
(vË> 0 && såÀn(
k
) > 0) {

195 *
v
 = '\0';

196 
v
++;

198 
	`js⁄_obje˘_obje˘_add
(
obj
, 
k
, 
	`js⁄_obje˘_√w_°rög
(
v
));

200 } *
˘x
);

202 
	`ems_buf„r_unöô
(&
buff
);

204 #ifde‡
DEBUG


205 
	`ems_l_åa˚
("after convert: ");

206 
	`js⁄_obje˘_obje˘_f‹óch
(
obj
, 
key
, 
vÆ
)

207 
	`ems_l_åa˚
("\t%†>> %s", 
key
, 
	`js⁄_obje˘_gë_°rög
(
vÆ
));

210  
obj
;

211 
	}
}

213 
ems_öt


214 
	$gΩ_js⁄_cfg
(
js⁄_obje˘
 *
d°
, js⁄_obje˘ *
§c
, 
ems_cch¨
 *
roŸ
,Éms_cch¨ *
sub
, 
ems_öt
 
¨y
)

216 
js⁄_obje˘
 *
obj
 = 
NULL
, *
chûd
 = NULL;

217 
ems_cch¨
 *
p
;

218 
ems_öt
 
Àn
;

220 
	`ems_as£π
(
d°
 && 
§c
 && 
roŸ
);

222 i‡(
¨y
) {

223 i‡(
sub
) {

224 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

225 
chûd
 = 
	`js⁄_obje˘_√w_¨øy
();

226 
	`js⁄_obje˘_obje˘_add
(
obj
, 
sub
, 
chûd
);

228 
obj
 = 
	`js⁄_obje˘_√w_¨øy
();

231 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

233 
	`js⁄_obje˘_obje˘_add
(
d°
, 
roŸ
, 
obj
);

234 
Àn
 = 
	`°æí
(
roŸ
);

236 
	`js⁄_obje˘_obje˘_f‹óch
(
§c
, 
key
, 
vÆ
)

238 i‡(
	`°æí
(
key
Ë< 
Àn
)

241 i‡(!
	`°∫cmp
(
key
, 
roŸ
, 
Àn
)) {

242 
p
 = 
key
 + 
Àn
 + 1;

243 i‡(
sub
 && !
	`°r°r
(
key
, sub))

246 i‡(
¨y
) {

247 i‡(
chûd
)

248 
	`js⁄_obje˘_¨øy_add
(
chûd
, 
	`js⁄_obje˘_√w_°rög
(
	`js⁄_obje˘_gë_°rög
(
vÆ
)));

250 
	`js⁄_obje˘_¨øy_add
(
obj
, 
	`js⁄_obje˘_√w_°rög
(
	`js⁄_obje˘_gë_°rög
(
vÆ
)));

253 
	`js⁄_obje˘_obje˘_add
(
obj
, 
p
, 
	`js⁄_obje˘_√w_°rög
(
	`js⁄_obje˘_gë_°rög
(
vÆ
)));

257 
	`ems_l_åa˚
("gΩ : %s, %s", 
roŸ
, 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

259  
EMS_OK
;

260 
	}
}

262 
	#ems_js⁄_key_©oi
(
obj
, 
ªq
, 
key
) \

263 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, 
key
); \

264 i‡(
obj
) \

265 
	`js⁄_obje˘_obje˘_add
(
ªq
, 
key
, \

266 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
)))); \

268 
	`ems_l_åa˚
("w¨nög, didÇŸ föd key: %s", 
key
)

	)

272 
ems_öt
 
	$gΩ_js⁄_p‹èl_upd©e
(
js⁄_obje˘
 *
roŸ
)

274 
js⁄_obje˘
 *
ªq
, *
obj
;

276 
ªq
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "portal");

278 i‡(!
ªq
)

279  
EMS_OK
;

281 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "port");

282 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "redirect_port");

283 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "reg_period");

284 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "hb_period");

286  
EMS_OK
;

287 
	}
}

289 
ems_öt
 
	$gΩ_js⁄_ødius_upd©e
(
js⁄_obje˘
 *
roŸ
)

291 
js⁄_obje˘
 *
ªq
, *
obj
;

293 
ªq
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "radius");

295 i‡(!
ªq
)

296  
EMS_OK
;

298 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "authport");

299 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "acctport");

300 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "rp_period");

301 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "retry_times");

302 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "retry_timeout");

304  
EMS_OK
;

305 
	}
}

307 
ems_öt
 
	$gΩ_js⁄_˛õ¡_upd©e
(
js⁄_obje˘
 *
roŸ
)

309 
js⁄_obje˘
 *
ªq
, *
obj
;

311 
ªq
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "client");

313 i‡(!
ªq
)

314  
EMS_OK
;

316 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "upt_period");

317 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "getconf_period");

318 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "retry_period");

319 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "enable_subdomain");

321  
EMS_OK
;

322 
	}
}

324 
ems_öt
 
	$gΩ_js⁄_wúñess_upd©e
(
js⁄_obje˘
 *
roŸ
)

326 
js⁄_obje˘
 *
ªq
, *
obj
;

328 
ªq
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "wireless");

330 i‡(!
ªq
)

331  
EMS_OK
;

333 
	`ems_js⁄_key_©oi
(
obj
, 
ªq
, "enable_encrypt");

335  
EMS_OK
;

336 
	}
}

338 
js⁄_obje˘
 *
	$gΩ_Æl_cfgs
(
js⁄_obje˘
 *
obj
)

340 
js⁄_obje˘
 *
roŸ
 = 
NULL
;

341 
roŸ
 = 
	`js⁄_obje˘_√w_obje˘
();

343 
	`gΩ_js⁄_cfg
(
roŸ
, 
obj
, "˛õ¡", 
NULL
, 
EMS_NO
);

344 
	`gΩ_js⁄_cfg
(
roŸ
, 
obj
, "p‹èl", 
NULL
, 
EMS_NO
);

345 
	`gΩ_js⁄_cfg
(
roŸ
, 
obj
, "ødius", 
NULL
, 
EMS_NO
);

346 
	`gΩ_js⁄_cfg
(
roŸ
, 
obj
, "bwli°", "whôe", 
EMS_YES
);

347 
	`gΩ_js⁄_cfg
(
roŸ
, 
obj
, "wúñess", 
NULL
, 
EMS_NO
);

349 
	`gΩ_js⁄_p‹èl_upd©e
(
roŸ
);

350 
	`gΩ_js⁄_ødius_upd©e
(
roŸ
);

351 
	`gΩ_js⁄_˛õ¡_upd©e
(
roŸ
);

352 
	`gΩ_js⁄_wúñess_upd©e
(
roŸ
);

354 #ifde‡
DEBUG


355 
	`ems_l_åa˚
("after grouped: ");

356 
	`js⁄_obje˘_obje˘_f‹óch
(
roŸ
, 
key
, 
vÆ
) {

357 
	`js⁄_obje˘_gë_ty≥
(
vÆ
)) {

358 
js⁄_ty≥_¨øy
:

362 
	`ems_l_åa˚
("%†==> %s", 
key
, 
	`js⁄_obje˘_to_js⁄_°rög
(
vÆ
));

368  
roŸ
;

369 
	}
}

372 
ems_void
 
	$˛_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

374 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
	`£ss_cb¨g
(
£ss
);

376 
	`ems_as£π
(
˛
->
°
 > 
°_mö
 && cl->° < 
°_max
);

378 
	`ems_as£π
(
timeout_h™dÀr
[
˛
->
°
]);

380 i‡(
timeout_h™dÀr
[
˛
->
°
])

381 
timeout_h™dÀr
[
˛
->
°
](˛, 
£ss
);

382 
	}
}

384 
ems_öt
 
	$˛_evt_run
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
Êg
)

386 
	`ems_as£π
(
˛
 && cl->
°
 > 
°_mö
 && cl->° < 
°_max
);

388 
	`ems_as£π
(
˘æ_h™dÀr
[
˛
->
°
]);

390  
˘æ_h™dÀr
[
˛
->
°
](˛, 
£ss
, 
Êg
);

391 
	}
}

393 
ems_void
 
	$˛_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

395 
ems_˛õ¡
 *
˛
 = (ems_˛õ¡ *)
	`£ss_cb¨g
(
£ss
);

397 
	`ems_as£π
(
˛
->
°
 > 
°_mö
 && cl->° < 
°_max
);

399 i‡(
îr
) {

400 
	`ems_l_åa˚
("[clnt]ÉvtÉrr, sess: %d %s:%d",

401 
	`ems_sock_fd
(&
£ss
->
sock
),

402 
	`ems_sock_addr
(&
£ss
->
sock
),

403 
	`ems_sock_p‹t
(&
£ss
->
sock
)

406 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

407 i‡(
˛
->
√xt
 !
°_gëdc
)

408 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

409 
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

413 
	`˛_evt_run
(
˛
, 
£ss
, 
Êg
);

414 
	}
}

416 
ems_öt
 
	$˛_do_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

418 
ems_öt
 
fd
, 
ªt
;

419 
sockÀn_t
 
Àn
;

420 
sockaddr_ö
 
addr
;

421 
ems_sock
 *
sock
 = &
£ss
->sock;

423 
	`ems_as£π
(
£ss
);

425 
	`mem£t
(&
addr
, 0, (addr));

426 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

427 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

428 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

429  
EMS_ERR
;

432 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

433 i‡(
fd
 <= 0)

434  
EMS_ERR
;

436 
	`ems_l_åa˚
("[clnt] sess(%d)ÅryÅo connectÅo: %s(%s): %d...",

437 
fd
,

438 
	`ems_sock_addr
(
sock
),

439 
	`öë_¡ﬂ
(
addr
.
sö_addr
),

440 
	`ems_sock_p‹t
(
sock
));

442 
addr
.
sö_Ámûy
 = 
AF_INET
;

443 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

445 
	`ems_£ä⁄blockög
(
fd
, 
YES
);

446 
Àn
 = (
sockaddr_ö
);

447 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
);

449 
ªt
) {

451 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

455 
ªt
 = 
	`ems_œ°îr
();

456 
	`ems_Êag_un£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

458 i‡(
ªt
 !
EINPROGRESS
) {

459 
	`˛o£
(
fd
);

460 
	`ems_l_åa˚
("[clnt] connectÅo: %s:%d: failed: %s",

461 
	`ems_sock_addr
(
sock
),

462 
	`ems_sock_p‹t
(
sock
),

463 
	`ems_gëîrmsg
(
ªt
));

464  
EMS_ERR
;

471 
	`ems_sock_£tfd
(
sock
, 
fd
);

472  
EMS_OK
;

473 
	}
}

477 
ems_öt
 
	$˛_°¨t
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

479 i‡(!
˛
->
£ss
) {

480 
˛
->
£ss
 = 
	`ems_£ssi⁄_√w
();

481 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

482 i‡(!
˛
->
£ss
)

483  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

485 
	`ems_buf„r_ö¸ó£
(&
˛
->
£ss
->
buf
, 
EMS_BUFFER_4k
 - 
EMS_BUFFER_1K
);

486 
	`ems_buf„r_ö¸ó£
(&
˛
->
£ss
->
buf_ö
, 
EMS_BUFFER_4k
 - 
EMS_BUFFER_1K
);

487 
	`£ss_cb¨g_£t
(
˛
->
£ss
, cl);

490 
˛
->
ªåy_≥riod
 = 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_˛õ¡_ªåy_≥riod
));

491 i‡(
˛
->
ªåy_≥riod
 <= 0) {

492 
˛
->
ªåy_≥riod
 = 600;

493 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_ªåy_≥riod
, 
	`ems_ôﬂ
(
˛
->
ªåy_≥riod
));

496 
˛
->
u±_≥riod
 = 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_˛õ¡_u±_≥riod
));

497 i‡(
˛
->
u±_≥riod
 <= 0) {

498 
˛
->
u±_≥riod
 = 300;

499 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_u±_≥riod
, 
	`ems_ôﬂ
(
˛
->
u±_≥riod
));

502 
˛
->
gëc⁄f_≥riod
 = 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_˛õ¡_gëc⁄f_≥riod
));

503 i‡(
˛
->
gëc⁄f_≥riod
 <= 0) {

504 
˛
->
gëc⁄f_≥riod
 = 600;

505 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_gëc⁄f_≥riod
, 
	`ems_ôﬂ
(
˛
->
gëc⁄f_≥riod
));

508 
£ss
 = 
˛
->sess;

509 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

510 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

512 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_addr
));

513 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_p‹t
)));

515 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

516 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

517  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

520 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
))

521  
	`˛_ch™ge_°©us
(
˛
, 
°_gëdc
);

523 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
|
EMS_EVT_WRITE
, 
˛_evt_cb
);

524 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

526 
˛
->
√xt
 = 
°_gëdc
;

527  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

528 
	}
}

530 
ems_öt
 
	$˛_°›≥d
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

532 i‡(
˛
->
£ss
) {

533 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˛
->
£ss
);

534 
˛
->
£ss
 = 
NULL
;

537 
˛
->
n_c⁄f
 = -1;

538 
˛
->
n_u±
 = -1;

540 i‡(
˛
->
pid
) {

541 
	`waôpid
(
˛
->
pid
, 
NULL
, 
WNOHANG
);

542 
˛
->
pid
 = 0;

545  
EMS_OK
;

546 
	}
}

548 
ems_öt
 
	$˛_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

550 
	`ems_as£π
(
˛
->
£ss
 !
NULL
);

552 
£ss
 = 
˛
->sess;

554 
	`ems_as£π
(
£ss
 !
NULL
);

555 i‡(
£ss
) {

556 
	`£ss_evít_ˇn˚l
(
£ss
);

557 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

558 
	`ems_sock_fd
(&
£ss
->
sock
),

559 
	`ems_sock_addr
(&
£ss
->
sock
),

560 
	`ems_sock_p‹t
(&
£ss
->
sock
));

561 
	`ems_sock_˛o£
(&
£ss
->
sock
);

563 
	`ems_Êag_un£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

564 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
˛
->
ªåy_≥riod
 * 1000, 
˛_timeout_cb
);

566 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

567 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

570 i‡(
˛
->
pid
) {

571 
	`waôpid
(
˛
->
pid
, 
NULL
, 
WNOHANG
);

572 
˛
->
pid
 = 0;

578  
EMS_OK
;

579 
	}
}

581 
ems_öt
 
	$˛_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

583  
EMS_OK
;

584 
	}
}

586 
ems_öt
 
	$˛_£nd_msg
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

588 
ems_öt
 
ªt
;

590 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

592 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

593 i‡(
ªt
 <= 0) {

594 
ªt
) {

596 -
EAGAIN
:

600  
ªt
;

604 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0) {

605 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
˛_evt_cb
);

606 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

609  
EMS_OK
;

610 
	}
}

617 
ems_öt
 
	$˛_fûãr_hâp_r•
(
ems_buf„r
 *
buff
)

619 
ems_ch¨
 *
£p
, *
˘_Àn
;

620 
ems_ch¨
 *
rd
 = 
	`buf_rd
(
buff
);

621 
ems_öt
 
tŸÆ
 = 0;

623 
	#HTTP_SEP
 "\r\n\r\n"

	)

624 
	#CONTENT_LENGTH
 "C⁄ã¡-Lígth: "

	)

626 
	`ems_l_åa˚
("r• c⁄ã¡: %s", 
rd
);

629 i‡(
	`buf_Àn
(
buff
) <= 4)

630  
EMS_CONTINUE
;

632 i‡(
	`°∫cmp
("HTTP", 
rd
, 4))

633  
EMS_ERR
;

635 #i‚de‡
FOR_TEST_INM


636 i‡(!
	`°r°r
(
rd
, "200"))

637  
EMS_ERR
;

640 
£p
 = 
˘_Àn
 = 
NULL
;

642 
˘_Àn
 = 
	`°r°r
(
rd
, 
CONTENT_LENGTH
);

643 i‡(
˘_Àn
) {

644 
˘_Àn
 +
	`°æí
(
CONTENT_LENGTH
);

645 
tŸÆ
 = 
	`ems_©oi
(
˘_Àn
);

647 
	`ems_l_åa˚
("gëÜígth: %d", 
tŸÆ
);

649 i‡(
tŸÆ
 <0 ||ÅŸÆ > 
EMS_BUFFER_16k
 ) {

650 
	`ems_l_åa˚
("Content-LengthÉrror 0x%x (0 < x < 0x%x)",

651 
tŸÆ
, 
EMS_BUFFER_16k
);

652  
EMS_ERR
;

655 i‡(
	`buf_size
(
buff
Ë- 
tŸÆ
 <= 0) {

656 
	`ems_l_åa˚
("total: 0x%x,Üeft: %d, size:%d, do increase",

657 
tŸÆ
, 
	`buf_À·
(
buff
), 
	`buf_size
(buff));

658 
	`ems_buf„r_ö¸ó£
(
buff
, 
tŸÆ
);

659  
EMS_CONTINUE
;

663 
£p
 = 
	`°r°r
(
rd
, 
HTTP_SEP
);

664 i‡(
£p
) {

666 i‡(
tŸÆ
 > 0) {

667 i‡(
	`abs
(
	`buf_Àn
(
buff
Ë-ábs((
£p
 + 
	`°æí
(
HTTP_SEP
Ë- 
rd
))Ë< 
tŸÆ
)

668  
EMS_CONTINUE
;

670 *
£p
 = '\0';

671 
£p
 +
	`°æí
(
HTTP_SEP
);

673 
	`ems_buf„r_£ek_rd
(
buff
, 
	`abs
(
£p
 - 
rd
), 
EMS_BUFFER_SEEK_CUR
);

674 
	`ems_l_åa˚
("hódÀn(%d), C⁄ã¡: %s", 
	`abs
(
£p
 -
rd
), 
	`buf_rd
(
buff
));

677 i‡(
£p
) {

678 i‡(
˘_Àn
 ) {

679 i‡(
	`buf_Àn
(
buff
Ë< 
tŸÆ
)

680  
EMS_CONTINUE
;

683 
	`ems_buf„r_ª‰esh
(
buff
);

684  
EMS_OK
;

687  
EMS_CONTINUE
;

688 
	}
}

690 
ems_öt
 
	$˛_¥ïro˚ss
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
˛_evt_r•_cb
 
h
)

692 
ems_cch¨
 *
buf
;

693 
ems_öt
 
Àn
, 
πn
;

694 
js⁄_tokíî
 *
tok
;

695 
js⁄_obje˘
 *
jobj
;

696 
js⁄_tokíî_îr‹
 
jîr
;

698 
πn
 = 
	`˛_fûãr_hâp_r•
(&
£ss
->
buf_ö
);

699 i‡(
πn
 !
EMS_OK
)

700  
πn
;

702 
tok
 = 
	`js⁄_tokíî_√w
();

703 i‡(!
tok
)

704  
EMS_ERR
;

706 #ifde‡
FOR_TEST_INM


707 i‡(
nm_r•
[
˛
->
°
] !
NULL
) {

708 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

709 
	`ems_l_åa˚
("ª∂a˚ cuºíàc⁄ã¡ i¡o; %s", 
nm_r•
[
˛
->
°
]);

710 
	`ems_buf„r_wrôe
(&
£ss
->
buf_ö
, 
nm_r•
[
˛
->
°
], 
	`°æí
(nm_rsp[cl->st]));

713 
buf
 = 
	`buf_rd
(&
£ss
->
buf_ö
);

714 
Àn
 = 
	`buf_Àn
(&
£ss
->
buf_ö
);

716 
jobj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, 
buf
, 
Àn
);

718 i‡((
jîr
 = 
	`js⁄_tokíî_gë_îr‹
(
tok
)Ë=
js⁄_tokíî_c⁄töue
)

720 
	`js⁄_tokíî_‰ì
(
tok
);

721  
EMS_CONTINUE
;

724 
	`js⁄_tokíî_‰ì
(
tok
);

726 i‡(!(
jobj
 && (
jîr
 =
js⁄_tokíî_suc˚ss
))) {

727 
	`ems_l_åa˚
("∑r£Éº: %s", 
	`js⁄_tokíî_îr‹_desc
(
jîr
));

728 i‡(
jobj
)

729 
	`js⁄_obje˘_put
(
jobj
);

731 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

732 
˛
->
œ°îr
 = 
ERR_RESPONSE_ERROR
;

733  
EMS_ERR
;

736 #ifde‡
DEBUG


738 
ems_cch¨
 *
˘x
 = 
jobj
?
	`js⁄_obje˘_to_js⁄_°rög
(jobj):"no ctx";

740 
	`ems_l_åa˚
("\033[01;34m[clnt]<rsp ctx: %s> \033[00m",

741 
	`°æí
(
˘x
)> 0x400?"**tooÜong**":ctx);

744 i‡(
h
) {

745 
	`£ss_evít_ˇn˚l
(
£ss
);

746 
	`ems_sock_˛o£
(&
£ss
->
sock
);

747 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

748 
	`ems_sock_fd
(&
£ss
->
sock
),

749 
	`ems_sock_addr
(&
£ss
->
sock
),

750 
	`ems_sock_p‹t
(&
£ss
->
sock
));

752 
	`h
(
˛
, 
£ss
, 
jobj
);

753 
πn
 = 
EMS_OK
;

756 
πn
 = 
EMS_ERR
;

758 i‡(
jobj
)

759 
	`js⁄_obje˘_put
(
jobj
);

761 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

762  
πn
;

763 
	}
}

767 
ems_öt


768 
	$˛_ªcv_h™dÀ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
˛_evt_r•_cb
 
h
)

770 
ems_öt
 
ªt
, 
agaö
;

772 
agaö
 = 
EMS_YES
;

773 
ªcv_agaö
:

774 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

775 i‡(
ªt
 <= 0) {

776 
ªt
) {

777 -
EAGAIN
:

778 
agaö
 = 
EMS_NO
;

781 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) > 0)

782 
ªt
 = 
	`˛_¥ïro˚ss
(
˛
, 
£ss
, 
h
);

784 
˛o£_out
;

789 
ªt
 = 
	`˛_¥ïro˚ss
(
˛
, 
£ss
, 
h
);

791 
ªt
) {

792 
EMS_BUFFER_INSUFFICIENT
:

793 
EMS_ERR
:

794 
EMS_OK
:

795 
˛o£_out
;

797 
EMS_CONTINUE
:

801 } 
ªt
 !
EMS_CONTINUE
);

803 i‡(
agaö
)

804 
ªcv_agaö
;

806  
EMS_OK
;

808 
˛o£_out
:

809 i‡(
ªt
 !
EMS_OK
) {

810 
	`£ss_evít_ˇn˚l
(
£ss
);

811 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

812 
	`ems_sock_fd
(&
£ss
->
sock
),

813 
	`ems_sock_addr
(&
£ss
->
sock
),

814 
	`ems_sock_p‹t
(&
£ss
->
sock
));

815 
	`ems_sock_˛o£
(&
£ss
->
sock
);

818  
ªt
;

819 
	}
}

822 
ems_öt
 
	$˛_msg_gëdc_r•
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
roŸ
)

824 
js⁄_obje˘
 *
ªsu…
, *
r•
, *
cfg
;

826 
ªsu…
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "result");

828 i‡(!(
ªsu…
 && 
	`js⁄_obje˘_is_ty≥
‘esu…, 
js⁄_ty≥_obje˘
))) {

829 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

830  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

833 
cfg
 = 
	`js⁄_obje˘_obje˘_gë
(
ªsu…
, "dcConfig");

834 i‡(!(
cfg
 && 
	`js⁄_obje˘_is_ty≥
(cfg, 
js⁄_ty≥_°rög
))) {

835 
˛
->
œ°îr
 = 
ERR_RESPONSE_ERROR
;

836  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

839 
r•
 = 
	`˛_kv_öto_js⁄
(
	`js⁄_obje˘_gë_°rög
(
cfg
));

840 i‡(
r•
) {

841 
ems_°r
 
tmp
;

842 
	`°r_öô
(&
tmp
);

844 
	`ems_js⁄_gë_°rög_def
(
r•
, "nm_addr", &
tmp
, 
NULL
);

845 i‡(
	`°r_Àn
(&
tmp
) > 0)

846 
	`°r_˝y
(&
˛
->
nm_addr
, &
tmp
);

848 
	`ems_js⁄_gë_°rög_def
(
r•
, "nm_p‹t", &
tmp
, 
NULL
);

849 i‡(
	`°r_Àn
(&
tmp
) > 0)

850 
˛
->
nm_p‹t
 = 
	`ems_©oi
(
	`°r_ãxt
(&
tmp
));

852 
	`°r_unöô
(&
tmp
);

853 
	`js⁄_obje˘_put
(
r•
);

855 
	`ems_as£π
(
	`°r_Àn
(&
˛
->
nm_addr
Ë> 0 && cl->
nm_p‹t
 > 0);

857 i‡(
	`°r_Àn
(&
˛
->
nm_addr
Ë<0 || cl->
nm_p‹t
 <= 0) {

858 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

859  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

862 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
˛
->
nm_addr
));

863 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
˛
->
nm_p‹t
);

864 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

865 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

866  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

869 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

870 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

872 
	`ems_Êag_£t
(
˛
->
Êg
, 
EMS_FLG_ONLINE
);

874 
˛
->
√xt
 = 
°_gëc⁄fig
;

875  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

878 
˛
->
œ°îr
 = 
ERR_RESPONSE_ERROR
;

879  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

880 
	}
}

883 
ems_öt
 
	$˛_gëdc
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

885 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

886 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_msg_gëdc_r•
Ë!
EMS_OK
)

888 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

889  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

893 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

894 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

895 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

896  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

900  
EMS_OK
;

901 
	}
}

903 
ems_öt
 
	$˛_c⁄f_¥o˚ss
(
ems_˛õ¡
 *
˛
, 
js⁄_obje˘
 *
roŸ
)

905 
ems_öt
 
u±
, 
c⁄f
, 
ªåy
, 
íabÀ
;

907 
	`ems_js⁄_gë_öt_def
(
roŸ
, "u±_≥riod", 
u±
, 0);

908 
	`ems_js⁄_gë_öt_def
(
roŸ
, "gëc⁄f_≥riod", 
c⁄f
, 0);

909 
	`ems_js⁄_gë_öt_def
(
roŸ
, "ªåy_≥riod", 
ªåy
, 0);

911 
	`ems_js⁄_gë_öt_def
(
roŸ
, "íabÀ_subdomaö", 
íabÀ
, 0);

912 i‡(
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_˛õ¡_subdomaö_íabÀ
)Ë!
íabÀ
) {

913 i‡(
íabÀ
)

914 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
);

916 
	`ems_Êag_un£t
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
);

918 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_subdomaö_íabÀ
, 
	`ems_ôﬂ
(
íabÀ
));

921 i‡(
u±
 > 0) {

922 
˛
->
u±_≥riod
 = 
u±
;

923 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_u±_≥riod
, 
	`ems_ôﬂ
(
˛
->
u±_≥riod
));

926 i‡(
c⁄f
 > 0) {

927 
˛
->
gëc⁄f_≥riod
 = 
c⁄f
;

928 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_gëc⁄f_≥riod
, 
	`ems_ôﬂ
(
˛
->
gëc⁄f_≥riod
));

931 i‡(
ªåy
 > 0) {

932 
˛
->
ªåy_≥riod
 = 
ªåy
;

933 
	`cfg_£t
(
	`emscfg
(), 
CFG_˛õ¡_ªåy_≥riod
, 
	`ems_ôﬂ
(
˛
->
ªåy_≥riod
));

936 
	`ems_as£π
(
˛
->
gëc⁄f_≥riod
 > 0 && cl->
u±_≥riod
 > 0);

937 
˛
->
gëc⁄f
 = cl->
gëc⁄f_≥riod
 / cl->
u±_≥riod
;

939  
EMS_OK
;

940 
	}
}

942 
ems_void
 *
	$˛_ªlﬂd_wifi
(
ems_thªad¨g
 
¨g
)

944 
	`±hªad_dëach
(
	`±hªad_£lf
());

945 
	`ems_l_åa˚
("[client]Ñeload wirelessÉncrypt method");

946 
	`ems_sy°emcmd
("/sbin/wifiÑeload_legacy");

947  
NULL
;

948 
	}
}

950 
ems_öt
 
	$˛_c⁄f_¥o˚ss_wúñess
(
ems_˛õ¡
 *
˛
, 
js⁄_obje˘
 *
roŸ
)

952 
ems_öt
 
íabÀ
;

953 
ems_thªadid
 
tid
;

955 
	`ems_js⁄_gë_öt_def
(
roŸ
, "íabÀ_í¸y±", 
íabÀ
, 0);

957 i‡(
íabÀ
 !
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_íabÀ_í¸y±
))) {

958 
	`cfg_£t
(
	`emscfg
(), 
CFG_wúñess_íabÀ_í¸y±
, 
	`ems_ôﬂ
(
íabÀ
));

960 i‡(
íabÀ
) {

961 i‡(
	`ems_thªad¸óã
(&
tid
, 
˛_ªlﬂd_wifi
, 
NULL
))

963 
	`ems_l_åa˚
("[client]Ñeload wirelessÉncrypt method");

964 
	`ems_sy°emcmd
("/sbin/wifiÑeload_legacy");

967 
	`ems_l_åa˚
("reset wirelessÉncrypt method");

968 
	`ems_£twifi_n›assw‹d
();

972  
EMS_OK
;

973 
	}
}

975 
ems_öt
 
	$˛_¥o˚ss_ruÀs
(
ems_˛õ¡
 *
˛
, 
js⁄_obje˘
 *
roŸ
)

977 
js⁄_obje˘
 *
obj
;

979 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "portal");

980 i‡(
obj
)

981 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_p‹èl
, 
EMS_APP_SERVER_RULES_UPDATE
, 
obj
);

983 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "radius");

984 i‡(
obj
)

985 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_ødius
, 
EMS_APP_SERVER_RULES_UPDATE
, 
obj
);

987 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "bwlist");

988 i‡(
obj
)

989 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_bwli°
, 
EMS_APP_SERVER_RULES_UPDATE
, 
obj
);

991 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "client");

992 i‡(
obj
)

993 
	`˛_c⁄f_¥o˚ss
(
˛
, 
obj
);

995 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "wireless");

996 i‡(
obj
)

997 
	`˛_c⁄f_¥o˚ss_wúñess
(
˛
, 
obj
);

999 
	`cfg_wrôe
(
	`emscfg
());

1001  
EMS_OK
;

1002 
	}
}

1005 
ems_öt
 
	$˛_gëc⁄fig_r•
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
roŸ
)

1007 
öt64_t
 
c⁄f_n
;

1008 
js⁄_obje˘
 *
ªsu…
, *
cfg
, *
r•
, *
¨y
;

1010 
ªsu…
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "result");

1011 i‡(!(
ªsu…
 && 
	`js⁄_obje˘_is_ty≥
‘esu…, 
js⁄_ty≥_obje˘
))) {

1012 
˛
->
œ°îr
 = 
ERR_DOWNLOAD_CONFIG_FAILED
;

1013 
√xt_°
;

1016 
¨y
 = 
	`js⁄_obje˘_obje˘_gë
(
ªsu…
, "config");

1017 i‡(!(
¨y
 && 
	`js⁄_obje˘_is_ty≥
◊ry, 
js⁄_ty≥_¨øy
))) {

1018 
˛
->
œ°îr
 = 
ERR_DOWNLOAD_CONFIG_FAILED
;

1019 
√xt_°
;

1022 i‡(
	`js⁄_obje˘_¨øy_Àngth
(
¨y
) <= 0) {

1023 
	`ems_l_åa˚
("c⁄figÇuŒ: , cuºíàc⁄figÇumbî: %ld", 
˛
->
n_c⁄f
);

1024 
√xt_°
;

1027 
ªsu…
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 0);

1028 i‡(!(
ªsu…
 && 
	`js⁄_obje˘_is_ty≥
‘esu…, 
js⁄_ty≥_obje˘
))) {

1029 
˛
->
œ°îr
 = 
ERR_DOWNLOAD_CONFIG_FAILED
;

1030 
√xt_°
;

1033 
	`ems_js⁄_gë_öt64_def
(
ªsu…
, "c⁄figNumbî", 
c⁄f_n
, -1);

1034 i‡(
c⁄f_n
 =
˛
->
n_c⁄f
) {

1035 
	`ems_l_åa˚
("c⁄figÇŸ ch™ge: %ld", 
c⁄f_n
);

1036 
√xt_°
;

1039 
˛
->
n_c⁄f
 = 
c⁄f_n
;

1041 
cfg
 = 
	`js⁄_obje˘_obje˘_gë
(
ªsu…
, "config");

1042 i‡(!(
cfg
 && 
	`js⁄_obje˘_is_ty≥
(cfg, 
js⁄_ty≥_°rög
))) {

1043 
˛
->
œ°îr
 = 
ERR_DOWNLOAD_CONFIG_FAILED
;

1044 
√xt_°
;

1047 
r•
 = 
	`˛_kv_öto_js⁄
(
	`js⁄_obje˘_gë_°rög
(
cfg
));

1048 i‡(
r•
) {

1049 
cfg
 = 
	`gΩ_Æl_cfgs
(
r•
);

1050 
	`js⁄_obje˘_put
(
r•
);

1052 
	`˛_¥o˚ss_ruÀs
(
˛
, 
cfg
);

1053 
	`js⁄_obje˘_put
(
cfg
);

1055 
	`ems_as£π
(0 && "never show upÅhisÜine, if server'sÑeady");

1056 
˛
->
œ°îr
 = 
ERR_RESPONSE_ERROR
;

1057 
√xt_°
;

1060 
√xt_°
:

1061 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

1062 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1063  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1066 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1067 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

1069 
˛
->
√xt
 = 
°_gëupd©efûe
;

1070  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

1071 
	}
}

1073 
ems_öt
 
	$˛_gëc⁄fig
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1075 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

1076 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_gëc⁄fig_r•
Ë!
EMS_OK
)

1078 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1080 
	`ems_l_åa˚
("recv failed, maybeá bug,ÅryÅo update self");

1082 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

1084 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
)

1085  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1087 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1088 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

1090 
˛
->
√xt
 = 
°_gëupd©efûe
;

1091  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

1095 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1096 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1097 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1098  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1102  
EMS_OK
;

1103 
	}
}

1106 
ems_öt


1107 
	$˛_fûe_√ed_upd©e
(
ems_cch¨
 *
«me
,Éms_cch¨ *
ty
,Éms_cch¨ *
vî
,Éms_cch¨ *
uæ
)

1109 
ems_cch¨
 *
vÆ
 = 
NULL
;

1110 i‡(!
	`°rcmp
(
ty
, "client")) {

1111 i‡(
	`°rcmp
(
vî
, 
	`ems_p›í_gë
("cat /tmp/ems/conf/ver")))

1112  
EMS_YES
;

1114 } i‡(!
	`°rcmp
(
ty
, "rom")) {

1115 
vÆ
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_sy°em_vîsi⁄
);

1116 
	`ems_l_åa˚
("upd©êrom: (%†%s)", 
ty
, 
vÆ
);

1117 i‡(
	`°rcmp
(
vî
, 
vÆ
))

1118  
EMS_YES
;

1119 } i‡(!
	`°rcmp
(
ty
, "app")) {

1121 
	`ems_l_åa˚
("app update,Çot support forÇow");

1122  
EMS_NO
;

1125 
	`ems_l_åa˚
("unknownÅype");

1126  
EMS_NO
;

1127 
	}
}

1129 
	~<sys/ty≥s.h
>

1130 
	~<sys/°©.h
>

1132 
ems_void


1133 
	$˛_ö°ÆÀr
(
ems_cch¨
 *
cmd
,Éms_cch¨ *
«me
,Éms_cch¨ *
ty
,Éms_cch¨ *
vî
,Éms_cch¨ *
uæ
)

1135 #i‚de‡
DEBUG


1136 
ems_öt
 
fd
;

1138 
ems_ch¨
 *
¨gv
[10];

1140 
	`£tsid
();

1141 
	`umask
(0);

1143 #i‚de‡
DEBUG


1144 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

1145 i‡(
fd
 > 0) {

1146 
	`dup2
(
fd
, 
STDIN_FILENO
);

1147 
	`dup2
(
fd
, 
STDOUT_FILENO
);

1148 
	`˛o£
(
fd
);

1152 
¨gv
[0] = (
ems_ch¨
 *)
cmd
;

1153 
¨gv
[1] = (
ems_ch¨
 *)
«me
;

1154 
¨gv
[2] = (
ems_ch¨
 *)
ty
;

1155 
¨gv
[3] = (
ems_ch¨
 *)
vî
;

1156 
¨gv
[4] = (
ems_ch¨
 *)
uæ
;

1157 
¨gv
[5] = 
NULL
;

1159 i‡(
	`execv
(
cmd
, 
¨gv
) == -1)

1160 
	`ems_l_åa˚
("exe¯cmd: %†Áûed: %s", 
cmd
, 
	`ems_œ°îrmsg
());

1162 
	`exô
(0);

1163 
	}
}

1165 
ems_öt


1166 
	$˛_fûe_do_upd©e_⁄e
(
ems_˛õ¡
 *
˛
, 
ems_cch¨
 *
«me
,Éms_cch¨ *
ty
,Éms_cch¨ *
vî
,Éms_cch¨ *
uæ
)

1168 
ems_¥o˚ssid
 
pid
;

1169 
°©
 
°
;

1170 
ems_cch¨
 *
£tup
 = "/tmp/ems/bin/app_setup.sh";

1172 i‡(
	`°©
(
£tup
, &
°
)) {

1173 
˛
->
œ°îr
 = 
ERR_SETUPFILE_MISSING
;

1174 
	`ems_l_åa˚
("w¨nög sëu∞fûêmissög: %s", 
£tup
);

1175  
EMS_ERR
;

1178 i‡(!(
°
.
°_mode
 & 
S_IXUSR
))

1179 
	`chmod
(
£tup
, 
°
.
°_mode
 | 
S_IXUSR
);

1181 
pid
 = 
	`f‹k
();

1183 
pid
) {

1186 
	`ems_l_åa˚
("f‹k(ËÁûed: %s", 
	`ems_œ°îrmsg
());

1187  
EMS_ERR
;

1190 
	`˛_ö°ÆÀr
(
£tup
, 
«me
, 
ty
, 
vî
, 
uæ
);

1194 
˛
->
pid
 =Öid;

1196  
EMS_OK
;

1197 
	}
}

1199 
ems_öt
 
	$˛_check_™d_upd©e
(
ems_˛õ¡
 *
˛
, 
js⁄_obje˘
 *
¨y
)

1201 
js⁄_obje˘
 *
obj
;

1202 
js⁄_obje˘
 *
ty
, *
«me
, *
vî
, *
uæ
;

1203 
ems_öt
 
i
;

1204 
ems_cch¨
 *
f_ty
, *
f_«me
, *
f_vî
,*
f_uæ
;

1206 
	`ems_as£π
(
¨y
 && 
	`js⁄_obje˘_is_ty≥
◊ry, 
js⁄_ty≥_¨øy
));

1208 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
¨y
); i++) {

1209 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 
i
);

1211 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_obje˘
))

1213 
	`ems_l_åa˚
("fûe: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
obj
));

1215 
ty
 = 
	`js⁄_obje˘_obje˘_gë
(
obj
, "fileType");

1216 
«me
 = 
	`js⁄_obje˘_obje˘_gë
(
obj
, "fileName");

1217 
vî
 = 
	`js⁄_obje˘_obje˘_gë
(
obj
, "fileVer");

1218 
uæ
 = 
	`js⁄_obje˘_obje˘_gë
(
obj
, "fileUrl");

1220 i‡(!(
ty
 && 
«me
 && 
vî
 && 
uæ
))

1223 i‡(! (
	`js⁄_obje˘_is_ty≥
(
ty
, 
js⁄_ty≥_°rög
) &&

1224 
	`js⁄_obje˘_is_ty≥
(
«me
, 
js⁄_ty≥_°rög
) &&

1225 
	`js⁄_obje˘_is_ty≥
(
vî
, 
js⁄_ty≥_°rög
) &&

1226 
	`js⁄_obje˘_is_ty≥
(
uæ
, 
js⁄_ty≥_°rög
))) {

1230 
f_ty
 = 
	`js⁄_obje˘_gë_°rög
(
ty
);

1231 
f_«me
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

1232 
f_vî
 = 
	`js⁄_obje˘_gë_°rög
(
vî
);

1233 
f_uæ
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

1235 i‡(
	`˛_fûe_√ed_upd©e
(
f_«me
, 
f_ty
, 
f_vî
, 
f_uæ
)) {

1239 
	`˛_fûe_do_upd©e_⁄e
(
˛
, 
f_«me
, 
f_ty
, 
f_vî
, 
f_uæ
);

1241 i‡(
	`°rcmp
(
f_ty
, "app"))

1242  
EMS_OK
;

1247  
EMS_OK
;

1248 
	}
}

1250 
ems_öt
 
	$˛_gëupd©efûe_r•
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
roŸ
)

1252 
js⁄_obje˘
 *
ªsu…
, *
obj
, *
¨y
;

1253 
ems_l⁄g
 
u±_n
;

1255 
ªsu…
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "result");

1256 i‡(!(
ªsu…
 && 
	`js⁄_obje˘_is_ty≥
‘esu…, 
js⁄_ty≥_obje˘
)))

1257 
√xt_°
;

1259 
¨y
 = 
	`js⁄_obje˘_obje˘_gë
(
ªsu…
, "updateFile");

1260 i‡(!(
¨y
 && 
	`js⁄_obje˘_is_ty≥
◊ry, 
js⁄_ty≥_¨øy
))) {

1261 
	`ems_l_åa˚
("updateFile missing.");

1262 
√xt_°
;

1265 i‡(
	`js⁄_obje˘_¨øy_Àngth
(
¨y
) <= 0) {

1266 
	`ems_l_åa˚
("updateárrayÜengthÇull.");

1267 
√xt_°
;

1270 
ªsu…
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 0);

1271 i‡(!(
ªsu…
 && 
	`js⁄_obje˘_is_ty≥
‘esu…, 
js⁄_ty≥_obje˘
))) {

1272 
	`ems_l_åa˚
("indexárray missing.");

1273 
√xt_°
;

1276 
	`ems_js⁄_gë_öt64_def
(
ªsu…
, "upd©eFûeNumbî", 
u±_n
, -1);

1277 i‡(
u±_n
 =
˛
->
n_u±
) {

1278 
	`ems_l_åa˚
("upd©êfûênumbîÇŸ ch™ge: %ld", 
u±_n
);

1279 
ems_öt
 
°
;

1280 i‡(
˛
->
pid
 > 0) {

1281 
	`waôpid
(
˛
->
pid
, &
°
, 
WNOHANG
)) {

1283 
	`ems_l_åa˚
("≠∞ö°Æ»föished,ánd suc˚ss,Öid:%ld", 
˛
->
pid
);

1284 
˛
->
pid
 = 0;

1288 i‡(
	`WIFEXITED
(
°
)) {

1289 
	`ems_l_åa˚
("install failedÖrocess: %ldÉxited, status=%d,Ñeset updateFileNumber",

1290 
˛
->
pid
, 
	`WEXITSTATUS
(
°
));

1291 } i‡(
	`WIFSIGNALED
(
°
)) {

1292 
	`ems_l_åa˚
("install failedÖrocess: %ld killed by signal=%dÑeset updateFileNumber",

1293 
˛
->
pid
, 
	`WTERMSIG
(
°
));

1296 
˛
->
œ°îr
 = 
ERR_INSTALL_FAILED
;

1297 
˛
->
n_u±
 = -1;

1299 i‡(
	`WIFEXITED
(
°
Ë|| 
	`WIFSIGNALED
(st))

1300 
˛
->
pid
 = 0;

1306 
√xt_°
;

1309 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªsu…
, "files");

1310 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_¨øy
))) {

1311 
	`ems_l_åa˚
("files missing");

1312 
√xt_°
;

1315 #ifde‡
DENY_UPDATE


1316 
˛
->
n_u±
 = 
u±_n
;

1318 i‡(
	`˛_check_™d_upd©e
(
˛
, 
obj
Ë=
EMS_OK
)

1319 
˛
->
n_u±
 = 
u±_n
;

1322 
√xt_°
:

1323  
	`˛_ch™ge_°©us
(
˛
, 
°_n‹mÆ
);

1325 
îr_°
:

1326 
˛
->
œ°îr
 = 
ERR_RESPONSE_ERROR
;

1327  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1329 
	}
}

1331 
ems_öt
 
	$˛_gëupd©efûe
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1333 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

1334 i‡(
	`˛_ªcv_h™dÀ
(
˛
, 
£ss
, 
˛_gëupd©efûe_r•
Ë!
EMS_OK
)

1336 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1337  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1341 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1342 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1343 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1344  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1348  
EMS_OK
;

1349 
	}
}

1351 
ems_öt
 
	$˛_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1353  
EMS_OK
;

1354 
	}
}

1356 
ems_öt
 
	$˛_≠∂y
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1358  
EMS_OK
;

1359 
	}
}

1361 
ems_öt
 
	$˛_upd©e°©us
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1363 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1364 i‡(
	`˛_£nd_msg
(
˛
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1365 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1366  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1369 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0) {

1370 
	`£ss_evít_ˇn˚l
(
£ss
);

1371 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1372 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1373 
	`ems_sock_fd
(&
£ss
->
sock
),

1374 
	`ems_sock_addr
(&
£ss
->
sock
),

1375 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1376 
˛
->
gëc⁄f
--;

1377 i‡(
˛
->
gëc⁄f
 <= 0) {

1378 
	`ems_as£π
(
˛
->
gëc⁄f_≥riod
 > 0 && cl->
u±_≥riod
 > 0);

1379 
˛
->
gëc⁄f
 = cl->
gëc⁄f_≥riod
 / cl->
u±_≥riod
;

1381 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

1382 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1383  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1386 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1387 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

1389 
˛
->
√xt
 = 
°_gëc⁄fig
;

1390  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

1393  
	`˛_ch™ge_°©us
(
˛
, 
°_n‹mÆ
);

1397  
EMS_OK
;

1398 
	}
}

1400 
ems_öt
 
	$˛_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1402 
ems_öt
 
îr
;

1403 
sockÀn_t
 
Àn
;

1405 
Àn
 = (
îr
);

1406 
îr
 = 0;

1407 
	`gësock›t
(
	`ems_sock_fd
(&
£ss
->
sock
), 
SOL_SOCKET
, 
SO_ERROR
, (
ems_ch¨
 *)&
îr
, &
Àn
);

1409 i‡(
îr
 ) {

1410 
î∫o
 = 
îr
;

1411 
	`ems_l_åa˚
("[clnt]sess(%d) connectÅo %s:%d failed, %s",

1412 
	`ems_sock_fd
(&
£ss
->
sock
),

1413 
	`ems_sock_addr
(&
£ss
->
sock
),

1414 
	`ems_sock_p‹t
(&
£ss
->
sock
),

1415 
	`ems_gëîrmsg
(
îr
));

1417 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

1418 i‡(
˛
->
√xt
 !
°_gëdc
)

1419 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1421  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1424 
	`ems_l_åa˚
("[clnt]sess(%d)Éstablished with %s:%d",

1425 
	`ems_sock_fd
(&
£ss
->
sock
),

1426 
	`ems_sock_addr
(&
£ss
->
sock
),

1427 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1429 
	`ems_Êag_£t
(
£ss
->
Êg
, 
EMS_FLG_ONLINE
);

1431 
	`£ss_evít_ˇn˚l
(
£ss
);

1432  
	`˛_ch™ge_°©us
(
˛
, cl->
√xt
);

1433 
	}
}

1437 
ems_öt
 
	$˛_to_îr
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1439 
	`ems_l_åa˚
("[clnt]ÉrrorÅimeout, doÑestart");

1441 
˛
->
√xt
 = 
°_°›≥d
;

1443 i‡(
	`ems_Êag_u∆ike
(
˛
->
Êg
, 
EMS_FLG_ONLINE
))

1444  
	`˛_ch™ge_°©us
(
˛
, 
°_°¨t
);

1446 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
˛
->
nm_addr
));

1447 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
˛
->
nm_p‹t
);

1448 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

1449 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1450  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1453 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1454 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

1456 
˛
->
√xt
 = 
°_gëc⁄fig
;

1457  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

1458 
	}
}

1460 
ems_öt
 
	$˛_to_n‹mÆ
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1462 
	`ems_l_åa˚
("[clnt] clientÑestart");

1464 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
˛
->
nm_addr
));

1465 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
˛
->
nm_p‹t
);

1466 i‡(
	`˛_do_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

1467 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1468  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1471 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1472 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_CONNECT
, 
˛_timeout_cb
);

1474 
˛
->
√xt
 = 
°_upd©e°©us
;

1475  
	`˛_ch™ge_°©us
(
˛
, 
°_c⁄√˘
);

1476 
	}
}

1478 
ems_öt
 
	$˛_to_gëdc
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1480 
	`£ss_evít_ˇn˚l
(
£ss
);

1481 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1482 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1483 
	`ems_sock_fd
(&
£ss
->
sock
),

1484 
	`ems_sock_addr
(&
£ss
->
sock
),

1485 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1487 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

1488  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1489 
	}
}

1491 
ems_öt
 
	$˛_to_gëc⁄fig
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1493 
	`£ss_evít_ˇn˚l
(
£ss
);

1494 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1495 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1496 
	`ems_sock_fd
(&
£ss
->
sock
),

1497 
	`ems_sock_addr
(&
£ss
->
sock
),

1498 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1500 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1501  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1502 
	}
}

1504 
ems_öt
 
	$˛_to_gëupd©efûe
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1506 
	`£ss_evít_ˇn˚l
(
£ss
);

1507 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1508 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1509 
	`ems_sock_fd
(&
£ss
->
sock
),

1510 
	`ems_sock_addr
(&
£ss
->
sock
),

1511 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1513 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1514  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1515 
	}
}

1517 
ems_öt
 
	$˛_to_dow∆ﬂd
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1519 
	`ems_as£π
(0 && "never be here");

1520  
EMS_OK
;

1521 
	}
}

1523 
ems_öt
 
	$˛_to_upd©e°©us
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1525 
	`£ss_evít_ˇn˚l
(
£ss
);

1526 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1527 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1528 
	`ems_sock_fd
(&
£ss
->
sock
),

1529 
	`ems_sock_addr
(&
£ss
->
sock
),

1530 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1532 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1533  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1534 
	}
}

1536 
ems_öt
 
	$˛_to_c⁄√˘
(
ems_˛õ¡
 *
˛
, 
ems_£ssi⁄
 *
£ss
)

1538 
	`£ss_evít_ˇn˚l
(
£ss
);

1539 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1540 
	`ems_l_åa˚
("[clnt]shutdown session(%d) with [%s: %d]",

1541 
	`ems_sock_fd
(&
£ss
->
sock
),

1542 
	`ems_sock_addr
(&
£ss
->
sock
),

1543 
	`ems_sock_p‹t
(&
£ss
->
sock
));

1545 
˛
->
œ°îr
 = 
ERR_CONNECT_DC_FAILED
;

1546 i‡(
˛
->
√xt
 !
°_gëdc
)

1547 
˛
->
œ°îr
 = 
ERR_CONNECT_NM_FAILED
;

1549  
	`˛_ch™ge_°©us
(
˛
, 
°_îr
);

1550 
	}
}

1552 
ems_öt


1553 
	$˛_fûl_ªque°
(
ems_£ssi⁄
 *
£ss
, 
ems_cch¨
 *
∑th
,Éms_cch¨ *
mëhod
, 
js⁄_obje˘
 *
∑øm
, 
ems_uöt
 
id
)

1555 
ems_öt
 
Àn
;

1556 
js⁄_obje˘
 *
ªq
;

1557 
ems_cch¨
 *
˘x
;

1559 
	`ems_as£π
(
£ss
 && 
∑th
 && 
mëhod
 && "never show upÅhisÜine");

1561 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

1563 
	`js⁄_obje˘_obje˘_add
(
ªq
, "js⁄Ωc", 
	`js⁄_obje˘_√w_°rög
("2.0"));

1564 
	`js⁄_obje˘_obje˘_add
(
ªq
, "mëhod", 
	`js⁄_obje˘_√w_°rög
(
mëhod
));

1566 i‡(!
∑øm
) {

1567 
∑øm
 = 
	`js⁄_obje˘_√w_obje˘
();

1569 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

1570 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "devTy≥", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_devi˚ty≥
()));

1571 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "so·Vî", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_sy°em_vîsi⁄
)));

1574 
	`ems_as£π
(
	`js⁄_obje˘_is_ty≥
(
∑øm
, 
js⁄_ty≥_obje˘
));

1576 
	`js⁄_obje˘_obje˘_add
(
ªq
, "∑øms", 
∑øm
);

1577 
	`js⁄_obje˘_obje˘_add
(
ªq
, "id", 
	`js⁄_obje˘_√w_öt
(
id
));

1579 
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
ªq
);

1580 i‡(!
˘x
)

1581 
˘x
 = "";

1583 
	`ems_l_åa˚
("ªque°: %s", 
˘x
);

1585 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(&
£ss
->
buf
), 
	`buf_À·
(&sess->buf),

1594 
∑th
, 
	`c‹e_¢
(), 
	`ems_sock_addr
(&
£ss
->
sock
), (
ems_öt
)
	`°æí
(
˘x
), ctx);

1596 
	`js⁄_obje˘_put
(
ªq
);

1597 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

1599  
EMS_OK
;

1600 
	}
}

1603 
ems_öt
 
	$˛_°©us_gëdc
(
ems_˛õ¡
 *
˛
)

1605 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

1607 
	`ems_as£π
(
˛
 && 
£ss
 && "never show upÅhisÜine");

1609 
	`˛_fûl_ªque°
(
£ss
, "öm_«s_dc_v1", "gëDC", 
NULL
, 1);

1611 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1612 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_SEND
, 
˛_timeout_cb
);

1614  
EMS_OK
;

1615 
	}
}

1617 
ems_öt
 
	$˛_°©us_gëc⁄fig
(
ems_˛õ¡
 *
˛
)

1619 
js⁄_obje˘
 *
∑øm
;

1620 
js⁄_obje˘
 *
¨y
, *
obj
;

1621 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

1623 
	`ems_as£π
(
˛
 && 
£ss
 && "never show upÅhisÜine");

1625 
∑øm
 = 
	`js⁄_obje˘_√w_obje˘
();

1627 
∑øm
 = 
	`js⁄_obje˘_√w_obje˘
();

1628 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

1629 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

1631 
	`js⁄_obje˘_obje˘_add
(
obj
, "c⁄figNumbî", 
	`js⁄_obje˘_√w_öt64
(
˛
->
n_c⁄f
));

1632 
	`js⁄_obje˘_obje˘_add
(
obj
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

1633 
	`js⁄_obje˘_obje˘_add
(
obj
, "devTy≥", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_devi˚ty≥
()));

1634 
	`js⁄_obje˘_obje˘_add
(
obj
, "so·Vî", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_sy°em_vîsi⁄
)));

1636 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
obj
);

1637 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "«sInfos", 
¨y
);

1639 
	`˛_fûl_ªque°
(
£ss
, "öm_«s_v1", "gëC⁄f", 
∑øm
, 3);

1641 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1642 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_SEND
, 
˛_timeout_cb
);

1644  
EMS_OK
;

1645 
	}
}

1647 
ems_öt
 
	$˛_°©us_n‹mÆ
(
ems_˛õ¡
 *
˛
)

1649 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

1651 
	`ems_as£π
(
˛
 && 
£ss
 && "never show upÅhisÜine");

1653 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
˛
->
u±_≥riod
 * 1000, 
˛_timeout_cb
);

1655  
EMS_OK
;

1656 
	}
}

1658 
ems_öt
 
	$˛_°©us_gëupd©efûe
(
ems_˛õ¡
 *
˛
)

1660 
js⁄_obje˘
 *
∑øm
;

1661 
js⁄_obje˘
 *
¨y
, *
obj
;

1662 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

1664 
	`ems_as£π
(
˛
 && 
£ss
 && "never show upÅhisÜine");

1666 
∑øm
 = 
	`js⁄_obje˘_√w_obje˘
();

1667 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

1668 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

1670 
	`js⁄_obje˘_obje˘_add
(
obj
, "upd©eFûeNumbî", 
	`js⁄_obje˘_√w_öt64
(
˛
->
n_u±
));

1671 
	`js⁄_obje˘_obje˘_add
(
obj
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

1672 
	`js⁄_obje˘_obje˘_add
(
obj
, "devTy≥", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_devi˚ty≥
()));

1673 
	`js⁄_obje˘_obje˘_add
(
obj
, "so·Vî", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_sy°em_vîsi⁄
)));

1675 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
obj
);

1676 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "«sInfos", 
¨y
);

1678 
	`˛_fûl_ªque°
(
£ss
, "öm_«s_v1", "gëUpd©eFûe", 
∑øm
, 4);

1680 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1681 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_SEND
, 
˛_timeout_cb
);

1683  
EMS_OK
;

1684 
	}
}

1686 
ems_öt
 
	$ems_gë_i‚ame_throughput
(
ems_cch¨
 *
i‚ame
, 
off_t
 *
ö
, off_à*
out
)

1688 
ems_ch¨
 
buf
[256] = {0};

1689 
ems_ch¨
 
cmd
[256] = {0};

1692 
	`¢¥ötf
(
cmd
, (cmd),

1693 "ˇà/¥oc/√t/dev | gª∞%†|áwk '{¥ötf(\"%%†%%s\", $2, $10)}'", 
i‚ame
);

1695 
	`mem£t
(
buf
, 0, (buf));

1696 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`ems_p›í_gë
(
cmd
));

1698 i‡(
	`°æí
(
buf
) > 0) {

1699 #i‚de‡
GENERIC_LINUX


1700 
	`ssˇnf
(
buf
, "%Œd %Œd", 
ö
, 
out
);

1702 
	`ssˇnf
(
buf
, "%ld %ld", 
ö
, 
out
);

1705  
EMS_OK
;

1708  
EMS_ERR
;

1709 
	}
}

1711 
ems_öt
 
	$ems_diskußge
()

1713  
	`ems_©oi
(
	`ems_p›í_gë
("df | grepÑootfs |áwk '{print $5}' | cut -d% -f1"));

1714 
	}
}

1716 
ems_öt
 
	$˛_°©us_upd©e°©us
(
ems_˛õ¡
 *
˛
)

1718 
js⁄_obje˘
 *
∑øm
, *
obj
, *
¨y
;

1719 
ems_£ssi⁄
 *
£ss
 = 
˛
->sess;

1720 
off_t
 
ö
, 
out
;

1721 
ems_öt
 
°
, 
°_p‹èl
, 
°_ødius
, 
«p
;

1723 
	`ems_as£π
(
˛
 && 
£ss
 && "never show upÅhisÜine");

1725 
ö
 = 
out
 = 0;

1726 
	`ems_gë_i‚ame_throughput
(
	`cfg_gë
(
	`emscfg
(), 
CFG_w™_i‚ame
), &
ö
, &
out
);

1728 
∑øm
 = 
	`js⁄_obje˘_√w_obje˘
();

1729 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

1730 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

1732 
	`js⁄_obje˘_obje˘_add
(
obj
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

1733 
	`js⁄_obje˘_obje˘_add
(
obj
, "devTy≥", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_devi˚ty≥
()));

1734 
	`js⁄_obje˘_obje˘_add
(
obj
, "so·Vî", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_sy°em_vîsi⁄
)));

1736 
	`js⁄_obje˘_obje˘_add
(
obj
, "upd©eFûeNumbî", 
	`js⁄_obje˘_√w_öt64
(
˛
->
n_u±
));

1737 
	`js⁄_obje˘_obje˘_add
(
obj
, "c⁄figNumbî", 
	`js⁄_obje˘_√w_öt64
(
˛
->
n_c⁄f
));

1739 
	`js⁄_obje˘_obje˘_add
(
obj
, "˝u", 
	`js⁄_obje˘_√w_öt
(
	`ems_˝uußge
()));

1740 
	`js⁄_obje˘_obje˘_add
(
obj
, "mem", 
	`js⁄_obje˘_√w_öt
(
	`ems_memußge
()));

1741 
	`js⁄_obje˘_obje˘_add
(
obj
, "disk", 
	`js⁄_obje˘_√w_öt
(
	`ems_diskußge
()));

1743 
	`js⁄_obje˘_obje˘_add
(
obj
, "öO˘ës", 
	`js⁄_obje˘_√w_öt64
(
ö
));

1744 
	`js⁄_obje˘_obje˘_add
(
obj
, "outO˘ës", 
	`js⁄_obje˘_√w_öt64
(
out
));

1745 
	`js⁄_obje˘_obje˘_add
(
obj
, "u£rCou¡", 
	`js⁄_obje˘_√w_öt
(
	`ems_≠p_ødius_u£r_numbî
()));

1747 
°_p‹èl
 = 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_p‹èl
, 
EMS_APP_EVT_STATUS
, 
NULL
);

1748 
°_ødius
 = 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_ødius
, 
EMS_APP_EVT_STATUS
, 
NULL
);

1749 
°
 = 
°_p‹èl
 | 
°_ødius
;

1751 
	`js⁄_obje˘_obje˘_add
(
obj
, "°©us", 
	`js⁄_obje˘_√w_öt
(
°
?1:0));

1752 
	`js⁄_obje˘_obje˘_add
(
obj
, "p‹èlSètus", 
	`js⁄_obje˘_√w_öt
(
°_p‹èl
 ? 1:0));

1753 
	`js⁄_obje˘_obje˘_add
(
obj
, "ødiusSètus", 
	`js⁄_obje˘_√w_öt
(
°_ødius
 ? 1:0));

1754 
	`js⁄_obje˘_obje˘_add
(
obj
, "°©usDes", 
	`js⁄_obje˘_√w_°rög
(""));

1756 
«p
 = 
	`ems_≠p_¥o˚ss
(
ty_˛õ¡
, 
ty_dow∆ök
, 
EMS_EVT_DOWNLINK_NUM
, 
NULL
);

1757 
	`js⁄_obje˘_obje˘_add
(
obj
, "≠Num", 
	`js⁄_obje˘_√w_öt
(
«p
));

1759 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
obj
);

1760 
	`js⁄_obje˘_obje˘_add
(
∑øm
, "°©us", 
¨y
);

1762 
	`˛_fûl_ªque°
(
£ss
, "öm_«s_v1", "upd©eSètus", 
∑øm
, 5);

1764 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
˛_evt_cb
);

1765 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_TIMEOUT_SEND
, 
˛_timeout_cb
);

1767  
EMS_OK
;

1768 
	}
}

1770 
ems_öt
 
	$˛_ch™ge_°©us
(
ems_˛õ¡
 *
˛
, 
ems_°©us
 
°
)

1772 
	`ems_l_åa˚
("[clnt] change status: %s ---> %s",

1773 
	`ems_°©us_°r
(
˛
->
°
),Éms_status_str(st));

1775 
˛
->
°
 = st;

1777 
˛
->
°
) {

1778 
°_öô
:

1779 
°_°›≥d
:

1780 
°_îr
:

1781  
	`˛_evt_run
(
˛
, 
NULL
, 0);

1784 
°_gëdc
:

1785  
	`˛_°©us_gëdc
(
˛
);

1787 
°_gëc⁄fig
:

1788  
	`˛_°©us_gëc⁄fig
(
˛
);

1790 
°_n‹mÆ
:

1791  
	`˛_°©us_n‹mÆ
(
˛
);

1793 
°_gëupd©efûe
:

1794  
	`˛_°©us_gëupd©efûe
(
˛
);

1796 
°_upd©e°©us
:

1797  
	`˛_°©us_upd©e°©us
(
˛
);

1803  
EMS_OK
;

1804 
	}
}

1807 #ifde‡
DEBUG


1808 
ems_cch¨
 *
	$ems_°©us_°r
(
ems_°©us
 
°
)

1810 
°
) {

1811 
°_öô
:

1813 
°_n‹mÆ
:

1815 
°_hb
:

1817 
°_ªg
:

1819 
°_≠∂i°
:

1821 
°_dow∆ﬂd
:

1823 
°_ö°Æl
:

1825 
°_îr
:

1827 
°_°›≥d
:

1829 
°_c⁄√˘
:

1832 
°_auth
:

1835 
°_ac˘
:

1838 
°_ac˘_°›
:

1841 
°_gëc⁄fig
:

1844 
°_gëupd©efûe
:

1852 
	}
}

	@src/core/ems_cmd.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_fw.h
"

5 
	~"≠p.h
"

6 
	~"ems_√tcheck.h
"

8 
ems_öt


9 
	$ems_cmd_c_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

11 
ems_öt
 
p‹t
;

12 
ems_°r
 
buf
;

13 
ems_öt
 
ª°¨t
 = 
EMS_NO
;

15 
	`°r_öô
(&
buf
);

17 
	`ems_js⁄_gë_öt
(
ªq
, "p‹t", 
p‹t
);

18 
	`ems_js⁄_gë_°rög
(
ªq
, "addr", &
buf
);

20 i‡(
	`°r_Àn
(&
buf
) <= 0)

21  
MSG_ST_INVALID_ARG
;

23 i‡(
	`°rcmp
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_addr
), 
	`°r_ãxt
(&
buf
))) {

24 
	`cfg_£t
(
	`emscfg
(), 
CFG_ems_s_addr
, 
	`°r_ãxt
(&
buf
));

25 
ª°¨t
 = 
EMS_YES
;

28 i‡(
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_s_p‹t
)Ë!
p‹t
 ) {

29 
	`cfg_£t
(
	`emscfg
(), 
CFG_ems_s_p‹t
, 
	`ems_ôﬂ
(
p‹t
));

30 
ª°¨t
 = 
EMS_YES
;

33 #ifde‡
DEBUG


34 
	`ems_js⁄_gë_°rög_def
(
ªq
, "¢", &
buf
, 
NULL
);

35 i‡(
	`°r_Àn
(&
buf
) > 0)

36 
	`cfg_£t
(
	`emscfg
(), 
CFG_ems_¢
, 
	`°r_ãxt
(&
buf
));

38 i‡(
ª°¨t
) {

39 
	`cfg_wrôe
(
	`emscfg
());

40 
	`ems_£nd_mesßge
(
ty_˘æ
, 
ty_˛õ¡
, 
EMS_APP_STOP
, 
NULL
);

41 
	`ems_£nd_mesßge
(
ty_˘æ
, 
ty_˛õ¡
, 
EMS_APP_START
, 
NULL
);

44 
	`°r_˛ór
(&
buf
);

46  
EMS_OK
;

47 
	}
}

49 
ems_öt


50 
	$ems_cmd_c_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

52 
js⁄_obje˘
 *
r•
;

53 
ems_cfg
 *
cfg
 = 
	`emscfg
();

56 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

58 
	`ems_as£π
(
	`cfg_gë
(
cfg
, 
CFG_ems_s_addr
Ë&& cfg_gë(cfg, 
CFG_ems_s_p‹t
));

60 
	`js⁄_obje˘_obje˘_add
(
r•
, "addr",

61 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
cfg
, 
CFG_ems_s_addr
)));

62 
	`js⁄_obje˘_obje˘_add
(
r•
, "port",

63 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_ems_s_p‹t
))));

65 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

67  
EMS_OK
;

68 
	}
}

71 
ems_öt
 
	$ems_cmd_c
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

73 
js⁄_obje˘
 *
obj
;

75 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

77 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

78  
MSG_ST_INVALID_ARG
;

80 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

81  
	`ems_cmd_c_£t
(
c‹e
, 
£ss
, 
ªq
);

83  
	`ems_cmd_c_gë
(
c‹e
, 
£ss
, 
ªq
);

84 
	}
}

87 
ems_öt


88 
	$ems_cmd_˘æ_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

90 
ems_öt
 
auto_ªg
;

91 
ems_öt
 
run
;

92 
ems_uöt
 
Êg
;

94 
	`ems_js⁄_gë_öt_def
(
ªq
, "auto", 
auto_ªg
, 1);

95 
	`ems_js⁄_gë_öt
(
ªq
, "run", 
run
);

97 i‡(
auto_ªg
)

98 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_AUTO_REG
);

100 
	`ems_Êag_un£t
(
c‹e
->
Êg
, 
FLG_AUTO_REG
);

102 i‡(
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_c_auto
)Ë!
auto_ªg
) {

103 
	`cfg_£t
(
	`emscfg
(), 
CFG_ems_c_auto
, 
	`ems_ôﬂ
(
auto_ªg
));

106 
Êg
 = 
c‹e
->flg;

108 i‡(
run
)

109 
	`ems_Êag_£t
(
Êg
, 
FLG_RUN
);

111 
	`ems_Êag_un£t
(
Êg
, 
FLG_RUN
);

113  (
Êg
 =
c‹e
->Êg)? 
EMS_OK
: 
	`˛¡_run
(c‹e, 
run
);

114 
	}
}

116 
ems_öt


117 
	$ems_cmd_˘æ_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

119 
ems_öt
 
tmp
;

120 
js⁄_obje˘
 *
r•
;

122 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

124 
tmp
 = 
EMS_YES
;

125 i‡(
	`ems_Êag_u∆ike
(
c‹e
->
Êg
, 
FLG_AUTO_REG
))

126 
tmp
 = 
EMS_NO
;

128 
	`js⁄_obje˘_obje˘_add
(
r•
, "auto", 
	`js⁄_obje˘_√w_öt
(
tmp
));

130 
tmp
 = 
EMS_YES
;

131 i‡(
	`ems_Êag_u∆ike
(
c‹e
->
Êg
, 
FLG_RUN
))

132 
tmp
 = 
EMS_NO
;

134 
	`js⁄_obje˘_obje˘_add
(
r•
, "run", 
	`js⁄_obje˘_√w_öt
(
tmp
));

136 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

138  
EMS_OK
;

139 
	}
}

143 
ems_öt
 
	$ems_cmd_˘æ
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

145 
js⁄_obje˘
 *
obj
;

147 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

149 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

150  
MSG_ST_INVALID_ARG
;

153 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

154  
	`ems_cmd_˘æ_£t
(
c‹e
, 
£ss
, 
ªq
);

156  
	`ems_cmd_˘æ_gë
(
c‹e
, 
£ss
, 
ªq
);

158  
EMS_OK
;

160 
	}
}

163 
ems_öt


164 
	$ems_cmd_°©us_fûl_sy°em
(
ems_c‹e
 *
c‹e
, 
js⁄_obje˘
 *
roŸ
)

166 
js⁄_obje˘
 *
r•
, *
√t
;

168 
ems_cfg
 *
cfg
 = 
	`emscfg
();

170 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

172 
	`js⁄_obje˘_obje˘_add
(
r•
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
cfg
, 
CFG_ems_¢
)));

173 
	`js⁄_obje˘_obje˘_add
(
r•
, "mac", 
	`js⁄_obje˘_√w_°rög
(
	`cfg_gë
(
cfg
, 
CFG_ems_mac
)));

175 
√t
 = 
	`js⁄_obje˘_√w_obje˘
();

177 
	`js⁄_obje˘_obje˘_add
(
√t
, "st",

178 
	`js⁄_obje˘_√w_°rög
(
	`ems_Êag_like
(
c‹e
->
Êg
, 
FLG_NETWORK_READY
)?"up":"down"));

180 
	`js⁄_obje˘_obje˘_add
(
√t
, "bridge",

181 
	`js⁄_obje˘_√w_°rög
(
	`ems_Êag_like
(
c‹e
->
Êg
, 
FLG_NETWORK_BRIDGE
)?"yes":"no"));

184 
	`js⁄_obje˘_obje˘_add
(
r•
, "√tw‹k_°©us", 
√t
);

185 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "sy°em", 
r•
);

187  
EMS_OK
;

188 
	}
}

191 
ems_öt
 
	$ems_cmd_°©us
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

193 
ems_uöt
 
Êg
;

194 
js⁄_obje˘
 *
r•
;

196 
	`ems_js⁄_gë_öt_def
(
ªq
, "Êag", 
Êg
, 0x01);

198 
	#Êg_sy°em
 0x01<<0

	)

199 
	#Êg_ems
 0x01<<1

	)

201 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

202 i‡(
	`ems_Êag_like
(
Êg
, 
Êg_sy°em
))

203 
	`ems_cmd_°©us_fûl_sy°em
(
c‹e
, 
r•
);

205 i‡(
	`ems_Êag_like
(
Êg
, 
Êg_ems
))

206 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_˛õ¡
, 
EMS_APP_EMS_STATUS
, 
r•
);

208 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

210  
EMS_OK
;

211 
	}
}

214 
ems_öt
 
	$ems_cmd_bwli°_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

216 
ems_uöt
 
Êg
;

217 
js⁄_obje˘
 *
obj
;

219 
	`ems_js⁄_gë_öt
(
ªq
, "Êag", 
Êg
);

221 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 0)) {

222 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "url");

223 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_¨øy
)) {

224 
	`cfg_£t_js⁄
(
	`emscfg
(), 
CFG_u£r_uæ_whôe
, 
obj
);

228 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 1)) {

229 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "whitemac");

230 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_¨øy
)) {

231 
	`cfg_£t_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_whôe
, 
obj
);

235 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 2)) {

236 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "blackmac");

237 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_¨øy
)) {

238 
	`cfg_£t_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_bœck
, 
obj
);

242 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_fw
, 
EMS_APP_RULES_UPDATE
, 
NULL
);

243 
	`cfg_wrôe
(
	`emscfg
());

245  
EMS_OK
;

246 
	}
}

249 
ems_öt
 
	$ems_cmd_bwli°_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

251 
ems_uöt
 
Êg
;

252 
js⁄_obje˘
 *
r•
;

254 
	`ems_js⁄_gë_öt_def
(
ªq
, "Êag", 
Êg
, 0x07);

256 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

258 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 0)) {

259 
	`js⁄_obje˘_obje˘_add
(
r•
, "uæ", 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_uæ_whôe
));

262 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 1)) {

263 
	`js⁄_obje˘_obje˘_add
(
r•
, "whôemac", 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_whôe
));

267 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 2)) {

268 
	`js⁄_obje˘_obje˘_add
(
r•
, "bœckmac", 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_bœck
));

271 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

273  
EMS_OK
;

275 
	}
}

277 
ems_öt
 
	$ems_cmd_bwli°
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

279 
js⁄_obje˘
 *
obj
;

281 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

283 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

284  
MSG_ST_INVALID_ARG
;

286 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

287  
	`ems_cmd_bwli°_£t
(
c‹e
, 
£ss
, 
ªq
);

289  
	`ems_cmd_bwli°_gë
(
c‹e
, 
£ss
, 
ªq
);

290 
	}
}

294 
ems_öt


295 
	$ems_cmd_qos_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

297 
ems_uöt
 
íabÀ
;

299 
	`ems_js⁄_gë_öt
(
ªq
, "íabÀ", 
íabÀ
);

301 
	`ems_l_åa˚
("qo†£àötÿíabÀ? %s", 
íabÀ
?"yes":"no");

303 
	`cfg_£t
(
	`emscfg
(), 
CFG_≠p_qos_íabÀ
, 
	`ems_ôﬂ
(
íabÀ
));

305 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_qos
, 
EMS_APP_RULES_UPDATE
, 
ªq
);

307 
	`cfg_wrôe
(
	`emscfg
());

309  
EMS_OK
;

310 
	}
}

312 
ems_öt


313 
	$ems_cmd_qos_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

315 
js⁄_obje˘
 *
r•
;

316 
ems_cch¨
 *
vÆ
;

318 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

320 
vÆ
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_qos_íabÀ
);

321 i‡(!
vÆ
) {

322 
	`cfg_£t
(
	`emscfg
(), 
CFG_≠p_qos_íabÀ
, "1");

323 
vÆ
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_qos_íabÀ
);

326 
	`js⁄_obje˘_obje˘_add
(
r•
, "íabÀ", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

328 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

330  
EMS_OK
;

331 
	}
}

334 
ems_öt
 
	$ems_cmd_qos
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

337 
js⁄_obje˘
 *
obj
;

339 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

341 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

342  
MSG_ST_INVALID_ARG
;

344 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

345  
	`ems_cmd_qos_£t
(
c‹e
, 
£ss
, 
ªq
);

347  
	`ems_cmd_qos_gë
(
c‹e
, 
£ss
, 
ªq
);

349  
EMS_ERR
;

351 
	}
}

354 
ems_öt


355 
	$ems_cmd_p‹èl_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

357 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_p‹èl
, 
EMS_APP_RULES_UPDATE
, 
ªq
);

358 
	`cfg_wrôe
(
	`emscfg
());

360 
	`°r_˛ór
(&
c‹e
->
p‹èl
);

361 
c‹e
->
p‹èl_ªdúe˘_p‹t
 = 0;

363  
EMS_OK
;

364 
	}
}

366 
ems_öt


367 
	$ems_cmd_p‹èl_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

369 
js⁄_obje˘
 *
r•
;

370 
ems_cch¨
 *
vÆ
;

371 
ems_cfg
 *
cfg
 = 
	`emscfg
();

373 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

375 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_auto
);

376 i‡(
vÆ
)

377 
	`js⁄_obje˘_obje˘_add
(
r•
, "auto", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

379 
	`js⁄_obje˘_obje˘_add
(
r•
, "auto", 
	`js⁄_obje˘_√w_öt
(1));

381 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_addr
);

382 i‡(
vÆ
)

383 
	`js⁄_obje˘_obje˘_add
(
r•
, "addr", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

385 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_p‹t
);

386 i‡(
vÆ
)

387 
	`js⁄_obje˘_obje˘_add
(
r•
, "p‹t", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

389 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_ªg
);

390 i‡(
vÆ
)

391 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªg_≥riod", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

393 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_hb
);

394 i‡(
vÆ
)

395 
	`js⁄_obje˘_obje˘_add
(
r•
, "hb_≥riod", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

397 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_p‹èl_ªdúe˘
);

398 i‡(
vÆ
)

399 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªdúe˘_p‹t", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

401 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

403  
EMS_OK
;

404 
	}
}

406 
ems_öt
 
	$ems_cmd_p‹èl
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

408 
js⁄_obje˘
 *
obj
;

410 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

412 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

413  
MSG_ST_INVALID_ARG
;

415 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

416  
	`ems_cmd_p‹èl_£t
(
c‹e
, 
£ss
, 
ªq
);

418  
	`ems_cmd_p‹èl_gë
(
c‹e
, 
£ss
, 
ªq
);

419 
	}
}

421 
ems_öt


422 
	$ems_cmd_ødius_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

424 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_ødius
, 
EMS_APP_RULES_UPDATE
, 
ªq
);

425 
	`cfg_wrôe
(
	`emscfg
());

426  
EMS_OK
;

427 
	}
}

429 
ems_öt


430 
	$ems_cmd_ødius_gë
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

432 
js⁄_obje˘
 *
r•
;

433 
ems_cch¨
 *
vÆ
;

434 
ems_cfg
 *
cfg
 = 
	`emscfg
();

436 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

438 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_auto
);

439 i‡(
vÆ
)

440 
	`js⁄_obje˘_obje˘_add
(
r•
, "auto", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

442 
	`js⁄_obje˘_obje˘_add
(
r•
, "auto", 
	`js⁄_obje˘_√w_öt
(1));

444 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_addr
);

445 i‡(
vÆ
)

446 
	`js⁄_obje˘_obje˘_add
(
r•
, "addr", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

448 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_sh¨ed_key
);

449 i‡(
vÆ
)

450 
	`js⁄_obje˘_obje˘_add
(
r•
, "£¸ë", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

452 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_auth
);

453 i‡(
vÆ
)

454 
	`js⁄_obje˘_obje˘_add
(
r•
, "authp‹t", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

456 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_p‹t_ac˘
);

457 i‡(
vÆ
)

458 
	`js⁄_obje˘_obje˘_add
(
r•
, "ac˘p‹t", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

460 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªp‹t_≥riod
);

461 i‡(
vÆ
)

462 
	`js⁄_obje˘_obje˘_add
(
r•
, "Ω_≥riod", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

464 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_times
);

465 i‡(
vÆ
)

466 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªåy_times", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

468 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªåy_times", 
	`js⁄_obje˘_√w_öt
(3));

470 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_≠p_ødius_ªåy_timeout
);

471 i‡(
vÆ
)

472 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªåy_timeout", 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
vÆ
)));

474 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªåy_timeout", 
	`js⁄_obje˘_√w_öt
(5));

476 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

478  
EMS_OK
;

479 
	}
}

481 
ems_öt
 
	$ems_cmd_ødius
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

483 
js⁄_obje˘
 *
obj
;

485 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

487 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

488  
MSG_ST_INVALID_ARG
;

490 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

491  
	`ems_cmd_ødius_£t
(
c‹e
, 
£ss
, 
ªq
);

493  
	`ems_cmd_ødius_gë
(
c‹e
, 
£ss
, 
ªq
);

494 
	}
}

496 
ems_öt
 
	$ems_cmd_bridge_ªq
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

498 
ems_öt
 
πn
;

499 
js⁄_obje˘
 *
r•
 = 
NULL
;

500 
ems_cch¨
 *
vÆ
;

501 
ems_cfg
 *
cfg
 = 
	`emscfg
();

503 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

506 
πn
 = 
EMS_ERR
;

508 
	`c‹e_wúñess_öfo
();

510 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_wúñess_ssid
);

511 i‡(!
vÆ
) ;

512 
	`js⁄_obje˘_obje˘_add
(
r•
, "ssid", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

514 i‡(
	`ems_©oi
(
	`cfg_gë
(
cfg
, 
CFG_wúñess_íabÀ_í¸y±
))) {

515 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_wúñess_í¸y±
);

516 i‡(!
vÆ
) ;

518 
	`js⁄_obje˘_obje˘_add
(
r•
, "í¸y±i⁄", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

520 
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_wúñess_key
);

521 i‡(
vÆ
)

522 
	`js⁄_obje˘_obje˘_add
(
r•
, "key", 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

524 
	`js⁄_obje˘_obje˘_add
(
r•
, "í¸y±i⁄", 
	`js⁄_obje˘_√w_°rög
("none"));

526 
πn
 = 
EMS_OK
;

529 i‡(
πn
 !
EMS_OK
) {

530 
	`js⁄_obje˘_put
(
r•
);

531 
r•
 = 
NULL
;

533 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

536  
πn
;

537 
	}
}

539 
ems_öt
 
	$ems_cmd_bridge_hb
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

541 
js⁄_obje˘
 *
obj
;

542 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

544 
	`js⁄_obje˘_obje˘_add
(
obj
, "ip",

545 
	`js⁄_obje˘_√w_°rög
(
	`ems_sock_addr
(&
£ss
->
sock
)));

546 
	`js⁄_obje˘_obje˘_add
(
obj
, "mac",

547 
	`js⁄_obje˘_√w_°rög
(
	`ems_u£rmac
(
	`ems_sock_addr
(&
£ss
->
sock
))));

549 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_dow∆ök
, 
EMS_EVT_DOWNLINK_IN
, 
obj
);

551 
	`js⁄_obje˘_put
(
obj
);

553  
EMS_OK
;

554 
	}
}

556 
ems_öt
 
	$ems_cmd_ã°_ødius
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

558 
js⁄_obje˘
 *
obj
;

559 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

561 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

562  
MSG_ST_INVALID_ARG
;

564 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

565  
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 0x0001, 
ªq
);

567  
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 0x0002, 
ªq
);

568 
	}
}

570 
ems_öt


571 
	$ems_cmd_√tw‹k_up
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

573 i‡(
	`ems_Êag_like
(
c‹e
->
Êg
, 
FLG_NETWORK_BRIDGE
))

574  
EMS_OK
;

576 i‡(
	`ems_Êag_like
(
c‹e
->
Êg
, 
FLG_NETWORK_READY
))

577  
EMS_OK
;

579 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_√t
, 
EMS_APP_STOP
, 
NULL
);

580 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_p‹èl
, 
EMS_APP_STOP
, 
NULL
);

582 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_√t
, 
EMS_APP_START
, 
NULL
);

583 
	`ems_£nd_mesßge
(
ty_˘æ
, 
ty_p‹èl
, 
EMS_APP_START
, 
NULL
);

585  
EMS_OK
;

586 
	}
}

588 
ems_öt
 
	$ems_cmd_√tw‹k
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

590 
js⁄_obje˘
 *
obj
;

591 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

593 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

594  
MSG_ST_INVALID_ARG
;

596 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "up"))

597  
	`ems_cmd_√tw‹k_up
(
c‹e
, 
£ss
, 
ªq
);

599  
EMS_OK
;

600 
	}
}

602 
ems_öt


603 
	$ems_cmd_c⁄fig_£t
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

605 
ems_öt
 
cfg
;

607 
	`ems_js⁄_gë_öt
(
ªq
, "fú°c⁄fig", 
cfg
);

609 i‡(
cfg
)

610 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_FIRST_CONFIG
);

612 
	`ems_Êag_un£t
(
c‹e
->
Êg
, 
FLG_FIRST_CONFIG
);

614  
EMS_OK
;

615 
	}
}

617 
ems_öt


618 
	$ems_cmd_c⁄fig
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

620 
js⁄_obje˘
 *
obj
;

621 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

623 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

624  
MSG_ST_INVALID_ARG
;

626 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

627  
	`ems_cmd_c⁄fig_£t
(
c‹e
, 
£ss
, 
ªq
);

629  
EMS_OK
;

630 
	}
}

632 
ems_öt
 
	$ems_cmd_fw
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

634 
	`ems_l_åa˚
("reloading.....");

636 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_√t
, 
EMS_APP_STOP
, 
NULL
);

637 
	`ems_Êush_sy°em_öfo
();

638 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_√t
, 
EMS_APP_START
, 
NULL
);

640 
	`°r_˛ór
(&
c‹e
->
gw
);

641 
	`°r_˛ór
(&
c‹e
->
i‚ame
);

642 
	`°r_˛ór
(&
c‹e
->
ac_mac
);

643 
	`°r_˛ór
(&
c‹e
->
ssid
);

645 i‡(!
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_íabÀ_í¸y±
))) {

646 
	`ems_l_åa˚
("reset wirelessÉncrypt method");

647 
	`ems_£twifi_n›assw‹d
();

650 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_fw
, 
EMS_APP_EVT_FW_RELOAD
, 
NULL
);

651 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_ødius
, 
EMS_APP_EVT_FW_RELOAD
, 
NULL
);

652 
	`ems_l_åa˚
("done !!!");

654  
EMS_OK
;

655 
	}
}

657 
ems_öt
 
	$ems_cmd_u£r
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

659 
js⁄_obje˘
 *
obj
;

660 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

662 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

663  
MSG_ST_INVALID_ARG
;

665 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "kickout")) {

666 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "userip");

668 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

669  
MSG_ST_INVALID_ARG
;

671 
	`js⁄_obje˘_obje˘_add
(
ªq
, "usermac",

672 
	`js⁄_obje˘_√w_°rög
(
	`ems_u£rmac
(
	`js⁄_obje˘_gë_°rög
(
obj
)))

675 
	`js⁄_obje˘_obje˘_add
(
ªq
, "username",

676 
	`js⁄_obje˘_√w_°rög
(

677 
	`ems_≠p_ødius_u£∫ame
(
	`js⁄_obje˘_gë_°rög
(
obj
))

681  
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_CMD_RADIUS_LOGOUT
, 
ªq
);

684 
	`£ss_ª•⁄£_£t
(
£ss
, 
	`ems_≠p_ødius_u£æi°
());

686  
EMS_OK
;

687 
	}
}

689 
ems_öt
 
	$ems_cmd_wúñess
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
)

691 
js⁄_obje˘
 *
r•
 = 
NULL
;

692 
js⁄_obje˘
 *
obj
;

693 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

695 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)))

696  
MSG_ST_INVALID_ARG
;

698 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "get")) {

699 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

700 
	`js⁄_obje˘_obje˘_add
(
r•
, "enable_encrypt",

701 
	`js⁄_obje˘_√w_öt
(

702 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_íabÀ_í¸y±
))

706 
	`£ss_ª•⁄£_£t
(
£ss
, 
r•
);

707  
EMS_OK
;

710  
EMS_ERR
;

711 
	}
}

	@src/core/ems_cmd.h

2 #i‚de‡
EMS_COMMAND_HEADER___


3 
	#EMS_COMMAND_HEADER___


	)

6 
	#CMD_EMS
 0

	)

7 
	#CMD_EMS_C
 0x0001

	)

8 
	#CMD_EMS_CTRL
 0x0002

	)

9 
	#CMD_EMS_STATUS
 0x0003

	)

10 
	#CMD_EMS_QOS
 0x0004

	)

11 
	#CMD_EMS_PORTAL
 0x0005

	)

12 
	#CMD_EMS_RADIUS
 0x0006

	)

13 
	#CMD_EMS_BWLIST
 0x0007

	)

14 
	#CMD_EMS_FW
 0x0008

	)

15 
	#CMD_EMS_APP
 0x0009

	)

16 
	#CMD_EMS_USER
 0x000a

	)

17 
	#CMD_EMS_WIRELESS
 0x000b

	)

18 
	#CMD_EMS_NETWORK
 0x000c

	)

19 
	#CMD_EMS_CONFIG
 0x000d

	)

21 
	#CMD_BRIDGE_BASE
 0x1000

	)

22 
	#CMD_BRIDGE_REQ
 0x1001

	)

23 
	#CMD_BRIDGE_HB
 0x1002

	)

24 
	#CMD_EMS_TEST_RADIUS
 0x2000

	)

29 
	#MSG_ST_REQUEST_ERR
 199

	)

30 
	#MSG_ST_CONNECT_EMS_FAILED
 200

	)

31 
	#MSG_ST_RESULT_ERROR
 201

	)

33 
ems_öt
 
exec_cmd
”ms_öà
cmd
, 
js⁄_obje˘
 *
roŸ
);

34 
ems_öt
 
cmd_∑r£_cmd
”ms_öà
¨gc
, 
ems_ch¨
 **
¨gv
, 
js⁄_obje˘
 *
ªq
);

36 
	#ems_js⁄_ª£t_key
(
obj
, 
ªq
, 
key
) \

37 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, 
key
); \

38 i‡(!
obj
) ; \

39 
	`js⁄_obje˘_obje˘_add
(
ªq
, 
key
, \

40 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
))))

	)

	@src/core/ems_conf.c

2 
	~"ems.h
"

3 
	~"js⁄.h
"

4 
	~"ems_maö.h
"

5 
	~"ems_c⁄f.h
"

8 
_ems_kv_s
 
	tcfg_kv
;

10 
	s_ems_kv_s
 {

11 
ems_°r
 
	mkey
;

12 
ems_°r
 
	mvÆ
;

13 
ems_queue
 
	míåy
;

16 
cfg_kv
 *
	$cfg_kv_√w
()

18 
cfg_kv
 *
kv
 = 
NULL
;

20 
kv
 = (
cfg_kv
 *)
	`ems_mÆloc
((cfg_kv));

21 i‡(
kv
) {

22 
	`°r_öô
(&
kv
->
key
);

23 
	`°r_öô
(&
kv
->
vÆ
);

24 
	`ems_queue_öô
(&
kv
->
íåy
);

27  
kv
;

28 
	}
}

30 
ems_void
 
	$cfg_kv_de°roy
(
cfg_kv
 *
kv
)

32 i‡(
kv
) {

33 
	`°r_˛ór
(&
kv
->
key
);

34 
	`°r_˛ór
(&
kv
->
vÆ
);

35 
	`ems_‰ì
(
kv
);

37 
	}
}

39 
cfg_kv
 *
	$cfg_föd
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
)

41 
ems_queue
 *
p
;

42 
cfg_kv
 *
kv
;

44 
	`ems_as£π
(
cfg
 && 
key
);

46 
	`ems_queue_f‹óch
(&
cfg
->
kv_íåy
, 
p
) {

47 
kv
 = 
	`ems_c⁄èöî_of
(
p
, 
cfg_kv
, 
íåy
);

49 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
kv
->
key
), key))

50  
kv
;

53  
NULL
;

54 
	}
}

57 
ems_öt
 
	$cfg_öô
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
Ê
)

59 
	`ems_as£π
(
cfg
 && 
Ê
);

61 
	`mem£t
(
cfg
, 0, (
ems_cfg
));

63 
	`°r_£t
(&
cfg
->
Ê
, fl);

64 
	`ems_queue_öô
(&
cfg
->
kv_íåy
);

66  
EMS_OK
;

67 
	}
}

69 
ems_void
 
	$cfg_unöô
(
ems_cfg
 *
cfg
)

71 
	`ems_as£π
(
cfg
);

73 
	`°r_˛ór
(&
cfg
->
Ê
);

74 
	`ems_queue_˛ór
(&
cfg
->
kv_íåy
, 
cfg_kv
, 
íåy
, 
cfg_kv_de°roy
);

75 
	}
}

77 
ems_öt
 
	$cfg_∑r£_löe
(
ems_cfg
 *
cfg
, 
ems_ch¨
 *
buf
)

79 
ems_ch¨
 *
k
, *
v
;

81 
k
 = 
buf
;

82 
v
 = 
	`°rchr
(
k
, '=');

83 i‡(!
v
)

84  
EMS_ERR
;

86 *
v
++ = '\0';

87 
	`ems_åim
(
k
);

88 
	`ems_åim
(
v
);

90 i‡(
	`°æí
(
k
Ë<0 || såÀn(
v
) <= 0)

91  
EMS_ERR
;

93  
	`cfg_£t
(
cfg
, 
k
, 
v
);

94 
	}
}

96 
ems_öt
 
	$cfg_ªad
(
ems_cfg
 *
cfg
)

98 
FILE
 *
Â
 = 
NULL
;

99 
ems_ch¨
 
buf
[1024] = {0};

101 
	`ems_as£π
(
cfg
 && 
	`°r_Àn
(&cfg->
Ê
) > 0);

103 
Â
 = 
	`f›í
(
	`°r_ãxt
(&
cfg
->
Ê
), "r");

105 i‡(!
Â
) {

106 
	`ems_l_w¨n
("›í cfg fûê: %†îr: %s", 
	`°r_ãxt
(&
cfg
->
Ê
), 
	`ems_œ°îrmsg
());

107  
EMS_ERR
;

110 
NULL
 !
	`fgës
(
buf
, (bufË- 1, 
Â
)) {

111 
	`ems_åim
(
buf
);

112 i‡(
	`°æí
(
buf
) > 0) {

113 
	`cfg_∑r£_löe
(
cfg
, 
buf
);

117 
	`f˛o£
(
Â
);

119  
EMS_OK
;

120 
	}
}

122 
ems_öt
 
	$cfg_wrôe
(
ems_cfg
 *
cfg
)

124 
FILE
 *
Â
 = 
NULL
;

125 
ems_queue
 *
p
;

126 
cfg_kv
 *
kv
;

127 
ems_ch¨
 
buf
[1024] = {0};

129 
	`ems_as£π
(
cfg
 && 
	`°r_Àn
(&cfg->
Ê
) > 0);

131 
Â
 = 
	`f›í
(
	`°r_ãxt
(&
cfg
->
Ê
), "w");

133 i‡(!
Â
) {

134 
	`ems_l_w¨n
("›í cfg fûê %†îr: %s", 
	`°r_ãxt
(&
cfg
->
Ê
), 
	`ems_œ°îrmsg
());

135  
EMS_ERR
;

138 
	`ems_queue_f‹óch
(&
cfg
->
kv_íåy
, 
p
) {

139 
kv
 = 
	`ems_c⁄èöî_of
(
p
, 
cfg_kv
, 
íåy
);

140 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
key
) > 0);

141 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
vÆ
) > 0);

143 i‡(
	`°r_Àn
(&
kv
->
key
Ë<0 || så_Àn(&kv->
vÆ
) <= 0)

146 
	`¢¥ötf
(
buf
, (buf), "%s=%s\n", 
	`°r_ãxt
(&
kv
->
key
), så_ãxt(&kv->
vÆ
));

147 
	`fwrôe
(
buf
, 
	`°æí
(buf), 1, 
Â
);

150 
	`f˛o£
(
Â
);

152  
EMS_OK
;

153 
	}
}

155 
ems_öt
 
	$cfg_Êush
(
ems_cfg
 *
cfg
)

157 
	`ems_as£π
(
cfg
 && "never show upÅhisÜine");

158 
	`ems_queue_˛ór
(&
cfg
->
kv_íåy
, 
cfg_kv
, 
íåy
, 
cfg_kv_de°roy
);

159  
	`cfg_ªad
(
cfg
);

160 
	}
}

162 
ems_öt
 
	$cfg_£t
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
k
,Éms_cch¨ *
v
)

164 
cfg_kv
 *
kv
;

166 
kv
 = 
	`cfg_föd
(
cfg
, 
k
);

167 i‡(!
kv
) {

168 i‡(!(
v
 && 
	`°æí
(v) > 0))

169  
EMS_OK
;

171 
kv
 = 
	`cfg_kv_√w
();

172 i‡(!
kv
)

173  
MSG_ST_MEM_ERR
;

175 
	`°r_£t
(&
kv
->
key
, 
k
);

176 
	`°r_£t
(&
kv
->
vÆ
, 
v
);

177 
	`ems_queue_ö£π_èû
(&
cfg
->
kv_íåy
, &
kv
->
íåy
);

180 i‡(!(
v
 && 
	`°æí
(v) > 0)) {

181 
	`ems_queue_ªmove
(&
kv
->
íåy
);

182 
	`cfg_kv_de°roy
(
kv
);

184 
	`°r_£t
(&
kv
->
vÆ
, 
v
);

187  
EMS_OK
;

188 
	}
}

190 
ems_cch¨
 *
	$cfg_gë
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
)

192 
cfg_kv
 *
kv
;

194 
kv
 = 
	`cfg_föd
(
cfg
, 
key
);

195 i‡(
kv
)

196  
	`°r_ãxt
(&
kv
->
vÆ
);

198  
NULL
;

199 
	}
}

201 
ems_öt
 
	$cfg_£À˘
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
like
, 
ems_void
 *
¨g
, 
cfg_£¨ch_cb
 
cb
)

203 
ems_öt
 
πn
, 
Àn
, 
n
;

204 
ems_queue
 *
p
, *
q
;

205 
cfg_kv
 *
kv
;

207 i‡(!
cb
)

208  
EMS_ERR
;

210 
Àn
 = 
	`°æí
(
like
);

212 
	`ems_queue_f‹óch_ß„
(&
cfg
->
kv_íåy
, 
p
, 
q
) {

213 
kv
 = 
	`ems_c⁄èöî_of
(
p
, 
cfg_kv
, 
íåy
);

215 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
key
) > 0);

216 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
vÆ
) > 0);

218 
n
 = (
Àn
 <
	`°r_Àn
(&
kv
->
key
))?len: str_len(&kv->key);

220 i‡(!
	`°∫cmp
(
	`°r_ãxt
(&
kv
->
key
), 
like
, 
n
)) {

221 
πn
 = 
	`cb
(
¨g
, 
	`°r_ãxt
(&
kv
->
key
), så_ãxt(&kv->
vÆ
));

222 i‡(
πn
 !
EMS_OK
)

223  
πn
;

227  
EMS_OK
;

228 
	}
}

230 
ems_öt
 
	$cfg_dñ_js⁄
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
like
)

232 
ems_öt
 
Àn
, 
n
;

233 
ems_queue
 *
p
, *
q
;

234 
cfg_kv
 *
kv
;

236 
Àn
 = 
	`°æí
(
like
);

238 
	`ems_queue_f‹óch_ß„
(&
cfg
->
kv_íåy
, 
p
, 
q
) {

239 
kv
 = 
	`ems_c⁄èöî_of
(
p
, 
cfg_kv
, 
íåy
);

241 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
key
) > 0);

242 
	`ems_as£π
(
	`°r_Àn
(&
kv
->
vÆ
) > 0);

244 
n
 = (
Àn
 <
	`°r_Àn
(&
kv
->
key
))?len: str_len(&kv->key);

246 i‡(!
	`°∫cmp
(
	`°r_ãxt
(&
kv
->
key
), 
like
, 
n
)) {

247 
	`ems_queue_ªmove
(&
kv
->
íåy
);

248 
	`cfg_kv_de°roy
(
kv
);

252  
EMS_OK
;

253 
	}
}

255 
ems_öt
 
	$cfg_£t_js⁄
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
, 
js⁄_obje˘
 *
ruÀs
)

257 
ems_öt
 
i
;

258 
js⁄_obje˘
 *
obj
;

259 
ems_ch¨
 
buf
[128] = {0};

261 
	`cfg_dñ_js⁄
(
cfg
, 
key
);

263 i‡(!
ruÀs
)

264  
EMS_OK
;

266 
	`ems_as£π
(
ruÀs
 && 
	`js⁄_obje˘_is_ty≥
‘uÀs, 
js⁄_ty≥_¨øy
));

268 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
ruÀs
); i++) {

269 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
ruÀs
, 
i
);

271 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)) {

272 
	`¢¥ötf
(
buf
, 128, "%s.%d", 
key
, 
i
);

273 
	`cfg_£t
(
cfg
, 
buf
, 
	`js⁄_obje˘_gë_°rög
(
obj
));

277  
EMS_OK
;

278 
	}
}

281 
ems_öt
 
	$cfg_gë_js⁄_cb
(
ems_void
 *
¨g
, 
ems_cch¨
 *
key
,Éms_cch¨ *
vÆ
)

283 
js⁄_obje˘
 *
¨y
 = (js⁄_obje˘ *)
¨g
;

285 
	`ems_as£π
(
key
 && 
vÆ
);

287 i‡(
key
 && 
vÆ
)

288 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
vÆ
));

290  
EMS_OK
;

291 
	}
}

293 
js⁄_obje˘
 *
	$cfg_gë_js⁄
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
)

295 
js⁄_obje˘
 *
¨y
 = 
NULL
;

297 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

299 
	`cfg_£À˘
(
cfg
, 
key
, (
ems_void
 *)
¨y
, 
cfg_gë_js⁄_cb
);

301  
¨y
;

302 
	}
}

	@src/core/ems_conf.h

2 #i‚de‡
EMS_CONFIG___HEADER___


3 
	#EMS_CONFIG___HEADER___


	)

5 
_ems_c⁄fig_s
 
	tems_cfg
;

7 
	s_ems_c⁄fig_s
 {

8 
ems_°r
 
	mÊ
;

9 
ems_queue
 
	mkv_íåy
;

12 
ems_öt
 
cfg_öô
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
Ê
);

13 
ems_void
 
cfg_unöô
(
ems_cfg
 *
cfg
);

15 
ems_öt
 
cfg_ªad
(
ems_cfg
 *
cfg
);

16 
ems_öt
 
cfg_wrôe
(
ems_cfg
 *
cfg
);

17 
ems_öt
 
cfg_Êush
(
ems_cfg
 *
cfg
);

18 
ems_öt
 
cfg_£t
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
,Éms_cch¨ *
vÆ
);

19 
ems_cch¨
 *
cfg_gë
(
ems_cfg
 *
cfg
,Éms_cch¨ *
key
);

39 
	$ems_öt
 (*
	tcfg_£¨ch_cb
)(
	tems_void
 *
	t¨g
, 
	tems_cch¨
 *
	tkey
,Éms_cch¨ *
	tvÆ
);

40 
ems_öt
 
	`cfg_£À˘
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
like
, 
ems_void
 *
¨g
, 
cfg_£¨ch_cb
 
cb
);

42 
js⁄_obje˘
 *
	`cfg_gë_js⁄
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
);

43 
ems_öt
 
	`cfg_£t_js⁄
(
ems_cfg
 *
cfg
, 
ems_cch¨
 *
key
, 
js⁄_obje˘
 *
ruÀs
);

49 
	#CFG_dow∆ﬂd_uæ_ios
 "ems_down.ios.uæ"

	)

50 
	#CFG_dow∆ﬂd_uæ_™droid
 "ems_down.™droid.uæ"

	)

51 
	#CFG_dow∆ﬂd_uæ_wöph⁄e
 "ems_down.wöph⁄e.uæ"

	)

57 
	#CFG_ems_vîsi⁄
 "ems.vîsi⁄"

	)

58 
	#CFG_ems_sy°em_vîsi⁄
 "ems.sy°em.vîsi⁄"

	)

59 
	#CFG_ems_¢
 "ems.¢"

	)

60 
	#CFG_ems_mac
 "ems.mac"

	)

61 
	#CFG_ems_devi˚ty≥
 "ems.devi˚ty≥"

	)

63 
	#CFG_ems_c_addr
 "ems_c.addr"

	)

64 
	#CFG_ems_c_p‹t
 "ems_c.p‹t"

	)

65 
	#CFG_ems_c_auto
 "ems_c.auto"

	)

67 
	#CFG_ems_s_addr
 "ems_s.addr"

	)

68 
	#CFG_ems_s_p‹t
 "ems_s.p‹t"

	)

70 
	#CFG_ems_s_¢
 
CFG_ems_¢


	)

71 
	#CFG_ems_s_code
 
CFG_ems_¢


	)

72 
	#CFG_ems_s_a˙ame
 
CFG_ems_¢


	)

73 
	#CFG_ems_s_mac
 
CFG_ems_mac


	)

75 
	#CFG_ødius_di˘
 "ems.ødius.di˘i⁄ay"

	)

81 
	#CFG_u£r_uæ_whôe
 "u£r.uæ_whôe"

	)

82 
	#CFG_u£r_mac_whôe
 "u£r.mac_whôe"

	)

83 
	#CFG_u£r_mac_bœck
 "u£r.mac_bœck"

	)

89 
	#CFG_≠p_p‹èl_addr
 "app.portal.addr"

90 
	#CFG_≠p_p‹èl_p‹t
 "app.portal.port"

91 
	#CFG_≠p_p‹èl_ªdúe˘
 "app.portal.redirect"

92 
	#CFG_≠p_p‹èl_ªg
 "app.portal.reg"

93 
	#CFG_≠p_p‹èl_hb
 "app.portal.hb"

94 
	#CFG_≠p_p‹èl_auto
 "app.portal.auto"

95 

	)

99 
	#CFG_≠p_ødius_auto
 "app.radius.auto"

100 
	#CFG_≠p_ødius_addr
 "≠p.ødius.addr"

	)

101 
	#CFG_≠p_ødius_p‹t_auth
 "app.radius.port.auth"

102 
	#CFG_≠p_ødius_p‹t_ac˘
 "app.radius.port.acct"

103 
	#CFG_≠p_ødius_sh¨ed_key
 "app.radius.shared_key"

104 
	#CFG_≠p_ødius_ªp‹t_≥riod
 "app.radius.rp_period"

105 
	#CFG_≠p_ødius_ªåy_times
 "app.radius.retry_times"

106 
	#CFG_≠p_ødius_ªåy_timeout
 "app.radius.retry_timeout"

107 
	#CFG_≠p_ødius_disc⁄√˘
 "app.radius.disconnect"

108 

	)

112 
	#CFG_≠p_qos_íabÀ
 "app.qos.enable"

113 
	#CFG_≠p_qos_p2p
 "≠p.qos.p2p"

	)

114 
	#CFH_≠p_qos_down
 "≠p.qos.down"

	)

115 
	#CFG_≠p_qos_up
 "≠p.qos.up"

	)

121 
	#CFG_≠p_bwli°_uæ_def
 "≠p.bwli°.def.uæ"

	)

122 
	#CFG_≠p_bwli°_uæ
 "≠p.bwli°.uæ"

	)

123 
	#CFG_≠p_bwli°_mac_whôe
 "≠p.bwli°.mac.whôe"

	)

124 
	#CFG_≠p_bwli°_mac_bœck
 "≠p.bwli°.mac.bœck"

	)

126 
	#CFG_œn_i‚ame
 "√tw‹k.œn.i‚ame"

	)

127 
	#CFG_œn_addr
 "√tw‹k.œn.ùaddr"

	)

128 
	#CFG_œn_mask
 "√tw‹k.œn.√tmask"

	)

129 
	#CFG_œn_gw
 "√tw‹k.œn.g©eway"

	)

130 
	#CFG_œn_¥Ÿo
 "√tw‹k.œn.¥Ÿo"

	)

132 
	#CFG_w™_i‚ame
 "√tw‹k.w™.i‚ame"

	)

133 
	#CFG_w™_addr
 "√tw‹k.w™.ùaddr"

	)

134 
	#CFG_w™_mask
 "√tw‹k.w™.√tmask"

	)

135 
	#CFG_w™_gw
 "√tw‹k.w™.g©eway"

	)

136 
	#CFG_w™_¥Ÿo
 "√tw‹k.w™.¥Ÿo"

	)

137 
	#CFG_w™_dns
 "√tw‹k.w™.dns"

	)

139 
	#CFG_wúñess_i‚ame
 "wúñess.@wifi-iÁ˚[0].i‚ame"

	)

140 
	#CFG_wúñess_ssid
 "wúñess.@wifi-iÁ˚[0].ssid"

	)

141 
	#CFG_wúñess_í¸y±
 "wúñess.@wifi-iÁ˚[0].í¸y±i⁄"

	)

142 
	#CFG_wúñess_key
 "wúñess.@wifi-iÁ˚[0].key"

	)

147 
	#CFG_wúñess_íabÀ_í¸y±
 "wúñess.íabÀ_í¸y±"

	)

153 
	#CFG_˛õ¡_ªåy_≥riod
 "˛õ¡.ªåy_≥riod"

	)

154 
	#CFG_˛õ¡_gëc⁄f_≥riod
 "˛õ¡.gëc⁄f_≥riod"

	)

155 
	#CFG_˛õ¡_u±_≥riod
 "˛õ¡.u±_≥riod"

	)

156 
	#CFG_˛õ¡_subdomaö_íabÀ
 "˛õ¡.íabÀ_subdomaö"

	)

	@src/core/ems_core.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_√tcheck.h
"

6 
	~"ems_bridge.h
"

7 
	~"ems_fw.h
"

9 
	~<sig«l.h
>

10 
	~<£tjmp.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

14 
jmp_buf
 
	gjm∑ddr
;

15 
ems_void
 
ems_mq_de°roy
(
msgqueue
 *
mq
);

17 
ems_cch¨
 *
	$ems_p›í_gë
(
ems_cch¨
 *
cmd
)

19 
ems_ch¨
 
buf
[512];

20 
FILE
 *
Â
;

22 
	`mem£t
(
buf
, 0, (buf));

23 
Â
 = 
	`p›í
(
cmd
, "r");

24 i‡(!
Â
)

25  
NULL
;

27 
	`fgës
(
buf
, (buf), 
Â
);

29 
	`ems_åim
(
buf
);

31 
	`p˛o£
(
Â
);

33 
	`ems_l_åa˚
("\033[00;32m cmd: %s,Ñesu…: %s\033[00m", 
cmd
, 
buf
);

34  
buf
;

35 
	}
}

37 
ems_öt
 
	$ems_sy°emcmd
(
ems_cch¨
 *
cmd
)

39 
	`ems_as£π
(
cmd
);

40 i‡(!
cmd
)

41  
EMS_ERR
;

43 
	`ems_l_åa˚
("\033[00;31m >>>>>>>: %†\033[00m", 
cmd
);

45  
	`sy°em
(
cmd
);

46 
	}
}

48 
ems_void
 
	$ems_sigh™dÀr
(
ems_öt
 
sig
)

50 
	`Ârötf
(
°dout
, "sig«»gŸ %d\n", 
sig
);

51 
	`l⁄gjmp
(
jm∑ddr
,1);

52 
	}
}

55 
js⁄_obje˘
 *
	$ems_js⁄_tokíî_∑r£
(
ems_cch¨
 *
°r
)

57 
js⁄_tokíî_îr‹
 
îr
;

58 
js⁄_obje˘
 *
roŸ
;

60 
	`ems_as£π
(
°r
 !
NULL
);

61 i‡(!
°r
)

62  
NULL
;

64 
roŸ
 = 
	`js⁄_tokíî_∑r£_vîbo£
(
°r
, &
îr
);

66 i‡(
îr
 !
js⁄_tokíî_suc˚ss
) {

67 
	`ems_l_w¨n
("<< \033[01;32m JSON ERROR: %s:%s \033[00m>>>>",

68 
°r
, 
	`js⁄_tokíî_îr‹_desc
(
îr
));

69  
NULL
;

72  
roŸ
;

73 
	}
}

75 
ems_öt
 
	$ems_c‹e_öô
(
ems_c‹e
 *
c‹e
)

77 
	`ems_as£π
(
c‹e
);

79 
	`mem£t
(
c‹e
, 0, (
ems_c‹e
));

81 
	`ems_buf„r_öô
(&
c‹e
->
buf
, 
EMS_BUFFER_8k
);

82 
	`°r_öô
(&
c‹e
->
gw
);

83 
	`°r_öô
(&
c‹e
->
i‚ame
);

84 
	`°r_öô
(&
c‹e
->
ac_mac
);

85 
	`°r_öô
(&
c‹e
->
p‹èl
);

86 
	`°r_öô
(&
c‹e
->
ssid
);

87 
	`°r_öô
(&
c‹e
->
devty
);

88 
	`°r_öô
(&
c‹e
->
¢
);

89 
c‹e
->
p‹èl_ªdúe˘_p‹t
 = 0;

91 
	`ems_queue_öô
(&
c‹e
->
msg_íåy
);

92 
	`ems_mtx_öô
(
c‹e
->
msg_mtx
);

94 
	`ems_evít_öô
(&
c‹e
->
evt
, 
EVT_DRIVER_EPOLL
);

95 
c‹e
->
Êg
 = 0;

96 
	`ems_queue_öô
(&
c‹e
->
≠p_íåy
);

98 #i‚de‡
DEBUG


99 
	`cfg_öô
(&
c‹e
->
cfg
, "/usr/ems/conf/ems.cfg");

101 
	`cfg_öô
(&
c‹e
->
cfg
, "/tmp/ems/conf/ems.cfg");

104 
	`ems_≠p_moduÀs_öô
();

106  
EMS_OK
;

107 
	}
}

109 
ems_öt
 
	$ems_c‹e_unöô
(
ems_c‹e
 *
c‹e
)

111 
	`ems_≠p_moduÀs_unöô
();

113 
	`ems_evít_d⁄e
(&
c‹e
->
evt
);

114 
	`cfg_unöô
(&
c‹e
->
cfg
);

115 
	`ems_queue_˛ór
(&
c‹e
->
≠p_íåy
, 
ems_≠p
, 
íåy
, 
ems_≠p_de°roy
);

116 
	`ems_buf„r_unöô
(&
c‹e
->
buf
);

118 
	`°r_unöô
(&
c‹e
->
gw
);

119 
	`°r_unöô
(&
c‹e
->
i‚ame
);

120 
	`°r_unöô
(&
c‹e
->
ac_mac
);

121 
	`°r_unöô
(&
c‹e
->
p‹èl
);

122 
	`°r_unöô
(&
c‹e
->
ssid
);

123 
	`°r_unöô
(&
c‹e
->
devty
);

124 
	`°r_unöô
(&
c‹e
->
¢
);

126 
	`ems_queue_˛ór
(&
c‹e
->
msg_íåy
, 
msgqueue
, 
íåy
, 
ems_mq_de°roy
);

127 
	`ems_queue_öô
(&
c‹e
->
msg_íåy
);

128 
	`ems_mtx_de°roy
(
c‹e
->
msg_mtx
);

130  
EMS_OK
;

131 
	}
}

133 
ems_öt
 
	$c‹e_∑ck_ªq
(
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
èg
)

135 
ems_cch¨
 *
˘x
 = 
NULL
;

136 
ems_öt
 
Àn
, 
πn
;

138 
js⁄_obje˘
 *
roŸ
 = (js⁄_obje˘ *)
	`£ss_ªque°
(
£ss
);

140 
˘x
 = 
NULL
;

141 
Àn
 = 0;

142 i‡(
roŸ
) {

143 
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
);

144 
Àn
 = 
	`ems_°æí
(
˘x
);

147 
èg
 = (
EMS_MODULE_AC
 << 16) |Åag;

149 
	`ems_l_åa˚
("\033[01;33m <reqÅag: 0x%x, ctx: %s> \033[00m",

150 
èg
 , 
˘x
?ctx:"null");

152 
πn
 = 
	`ems_∑ck_ªq
(
èg
, 
˘x
, 
Àn
, &
£ss
->
buf
);

154 i‡(
roŸ
) {

155 
	`js⁄_obje˘_put
(
roŸ
);

156 
	`£ss_ªque°_£t
(
£ss
, 
NULL
);

159  
πn
;

161 
	}
}

163 
ems_öt
 
	$c‹e_∑ck_r•
(
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
èg
, 
ems_öt
 
°
)

165 
ems_cch¨
 *
˘x
 = 
NULL
;

166 
ems_öt
 
Àn
, 
πn
;

168 
js⁄_obje˘
 *
roŸ
 = (js⁄_obje˘ *)
	`£ss_ª•⁄£
(
£ss
);

170 
˘x
 = 
NULL
;

171 
Àn
 = 0;

172 i‡(
roŸ
) {

173 
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
roŸ
);

174 
Àn
 = 
	`ems_°æí
(
˘x
);

177 
	`ems_l_åa˚
("\033[01;34m<rspÅag: 0x%x, st: %d ctx(0x%x): %s> \033[00m",

178 
èg
 | 0x80000000, 
°
, 
Àn
,

179 (
Àn
 < 1024)?(
˘x
?ctx:"no ctx"):"******TOO LONG *****");

181 
πn
 = 
	`ems_∑ck_r•
(
èg
, 
°
, 
˘x
, 
Àn
, &
£ss
->
buf
);

183 i‡(
roŸ
) {

184 
	`js⁄_obje˘_put
(
roŸ
);

185 
	`£ss_ª•⁄£_£t
(
£ss
, 
NULL
);

188  
πn
;

189 
	}
}

191 
ems_cch¨
 *
	$ems_°rˇt
(
ems_cch¨
 *
s1
,Éms_cch¨ *
s2
)

193 
ems_ch¨
 
buf
[512] = {0};

195 
	`¢¥ötf
(
buf
, 512, "%s%†2&>/dev/nuŒ", 
s1
, 
s2
);

196  
buf
;

197 
	}
}

199 
ems_öt
 
	$ems_Êush_sy°em_öfo
()

201 
ems_cfg
 *
cfg
 = 
	`emscfg
();

202 
ems_ch¨
 
buf
[256] = {0};

203 
ems_cch¨
 *
i‚ame
 = 
NULL
;

204 
ems_cch¨
 *
cmd
 = "uci get -P /tmp/state ";

206 
	`c‹e_gw_i‚ame_˛ór
();

207 
	`c‹e_gw_addr_˛ór
();

209 
	`cfg_£t
(
cfg
, 
CFG_œn_i‚ame
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_lan_ifname)));

210 
	`cfg_£t
(
cfg
, 
CFG_œn_¥Ÿo
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_lan_proto)));

211 
	`cfg_£t
(
cfg
, 
CFG_œn_addr
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_lan_addr)));

212 
	`cfg_£t
(
cfg
, 
CFG_œn_mask
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_lan_mask)));

213 
	`cfg_£t
(
cfg
, 
CFG_œn_gw
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_lan_gw)));

215 
i‚ame
 = 
	`cfg_gë
(
cfg
, 
CFG_œn_i‚ame
);

216 i‡(!
	`cfg_gë
(
cfg
, 
CFG_œn_addr
)) {

217 
	`¢¥ötf
(
buf
, (buf),

218 "ifc⁄fig %†| gª∞öë |áwk '{¥öà$2}' | cuà-d: -f2-", 
i‚ame
);

219 
	`cfg_£t
(
cfg
, 
CFG_œn_addr
, 
	`ems_p›í_gë
(
buf
));

222 i‡(!
	`cfg_gë
(
cfg
, 
CFG_œn_mask
)) {

223 
	`¢¥ötf
(
buf
, (buf),

224 "ifc⁄fig %†| gª∞öë |áwk '{¥öà$4}' | cuà-d: -f2-", 
i‚ame
);

225 
	`cfg_£t
(
cfg
, 
CFG_œn_mask
, 
	`ems_p›í_gë
(
buf
));

228 i‡(!
	`cfg_gë
(
cfg
, 
CFG_œn_gw
)) {

229 
	`¢¥ötf
(
buf
, (buf),

230 "ùÑouã | gª∞'deÁu…*.*%s' |áwk '{¥öà$3}'", 
i‚ame
);

231 
	`cfg_£t
(
cfg
, 
CFG_œn_gw
, 
	`ems_p›í_gë
(
buf
));

234 
	`cfg_£t
(
cfg
, 
CFG_w™_i‚ame
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wan_ifname)));

236 
	`cfg_£t
(
cfg
, 
CFG_w™_addr
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wan_addr)));

237 
	`cfg_£t
(
cfg
, 
CFG_w™_mask
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wan_mask)));

238 
	`cfg_£t
(
cfg
, 
CFG_w™_gw
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wan_gw)));

240 
	`cfg_£t
(
cfg
, 
CFG_w™_¥Ÿo
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wan_proto)));

242 
i‚ame
 = 
	`cfg_gë
(
cfg
, 
CFG_w™_i‚ame
);

244 i‡(!
	`cfg_gë
(
cfg
, 
CFG_w™_addr
))

247 
	`¢¥ötf
(
buf
, (buf),

248 "ifc⁄fig %†| gª∞öë |áwk '{¥öà$2}' | cuà-d: -f2-", 
i‚ame
);

249 
	`cfg_£t
(
cfg
, 
CFG_w™_addr
, 
	`ems_p›í_gë
(
buf
));

253 i‡(!
	`cfg_gë
(
cfg
, 
CFG_w™_mask
))

256 
	`¢¥ötf
(
buf
, (buf),

257 "ifc⁄fig %†| gª∞öë |áwk '{¥öà$4}' | cuà-d: -f2-", 
i‚ame
);

258 
	`cfg_£t
(
cfg
, 
CFG_w™_mask
, 
	`ems_p›í_gë
(
buf
));

262 i‡(!
	`cfg_gë
(
cfg
, 
CFG_w™_gw
))

265 
	`¢¥ötf
(
buf
, (buf),

266 "ùÑouã | gª∞'deÁu…*.*%s' |áwk '{¥öà$3}'", 
i‚ame
);

267 
	`cfg_£t
(
cfg
, 
CFG_w™_gw
, 
	`ems_p›í_gë
(
buf
));

270 
	`c‹e_wúñess_öfo
();

272  
EMS_OK
;

273 
	}
}

275 
ems_öt
 
	$c‹e_wúñess_öfo
()

277 
ems_cfg
 *
cfg
 = 
	`emscfg
();

278 
ems_cch¨
 *
cmd
 = "uci get -P /tmp/state ";

280 
	`cfg_£t
(
cfg
, 
CFG_wúñess_i‚ame
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wireless_ifname)));

281 
	`cfg_£t
(
cfg
, 
CFG_wúñess_ssid
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wireless_ssid)));

282 
	`cfg_£t
(
cfg
, 
CFG_wúñess_í¸y±
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wireless_encrypt)));

283 
	`cfg_£t
(
cfg
, 
CFG_wúñess_key
, 
	`ems_p›í_gë
(
	`ems_°rˇt
(
cmd
, CFG_wireless_key)));

285 
ems_cch¨
 *
vÆ
 = 
	`cfg_gë
(
cfg
, 
CFG_wúñess_í¸y±
);

287 i‡(
vÆ
 && 
	`°r°r
(val, "wep")) {

288 
ems_ch¨
 
buf
[256] = {0};

289 
	`¢¥ötf
(
buf
, (buf), "%†%s1", 
cmd
, 
CFG_wúñess_key
);

290 
	`cfg_£t
(
cfg
, 
CFG_wúñess_key
, 
	`ems_p›í_gë
(
buf
));

292 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`cfg_gë
(
cfg
, 
CFG_wúñess_key
));

293 
	`ems_l_åa˚
("‹òkey: %s", 
buf
);

295 i‡(!
	`°∫cmp
("s:", 
buf
, 2))

296 
	`cfg_£t
(
cfg
, 
CFG_wúñess_key
, 
buf
 + 2);

300  
EMS_OK
;

301 
	}
}

303 
ems_ch¨
 *
	$ems_≠mac
()

305 
ems_cch¨
 *
cmd
 = "hexdump -s 0x28 -n 6 -C /dev/mtd2 | head -1 |áwk '{printf(\"%02s:%02s:%02s:%02s:%02s:%02s\", $2, $3, $4, $5, $6, $7)}'";

306 
ems_ch¨
 
buf
[32];

308 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`ems_p›í_gë
(
cmd
));

310  
buf
;

311 
	}
}

313 
ems_öt
 
	$ems_vÆid_¢
(
ems_ch¨
 *
¢
)

315 
ems_ch¨
 
c
;

317 *
¢
) {

318 
c
 = *
¢
++;

320 i‡(!
	`iß um
(
c
))

321  
EMS_NO
;

324  
EMS_YES
;

325 
	}
}

327 
ems_ch¨
 *
	$ems_≠¢
()

329 
ems_ch¨
 
¢
[32] = {0};

330 
ems_ch¨
 
buf
[64] = {0};

331 
ems_cch¨
 *
cmd
 = 
NULL
;

333 
cmd
 = "hexdump -s 0x100 -n 16 -C /dev/mtd2 | head -1 |áwk '{print $2$3$4$5$6$7$8$9$10$11$12$13$14$15$16$17}'";

335 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`ems_p›í_gë
(
cmd
));

336 
	`mem£t
(
¢
, 0, (sn));

337 
	`ems_°r2bö
(
buf
, 
¢
, 32);

339 i‡(!
	`ems_vÆid_¢
(
¢
)) {

340 
cmd
 = "hexdump -s 0x28 -n 6 -C /dev/mtd2 | head -1 |áwk '{print $2$3$4$5$6$7}'";

341 
	`¢¥ötf
(
¢
, (¢), "%s", 
	`ems_p›í_gë
(
cmd
));

344  
¢
;

345 
	}
}

347 
ems_ch¨
 *
	$ems_devi˚ty≥
()

349 
ems_ch¨
 
buf
[32];

350 
	`¢¥ötf
(
buf
, 32, "%s", 
	`ems_p›í_gë
("cat /proc/cpuinfo |grep machine | cut -d: -f2-"));

351  
buf
;

352 
	}
}

354 
ems_cch¨
 *
	$ems_sys_vîsi⁄
()

356  
	`ems_p›í_gë
("cat /etc/lkwifi2000_ver");

358 
	}
}

361 
ems_öt
 
	$c‹e_cfg_öô
(
ems_c‹e
 *
c‹e
)

363 
ems_cfg
 *
cfg
 = &
c‹e
->cfg;

365 
	`cfg_ªad
(
cfg
);

367 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_c_addr
))

368 
	`cfg_£t
(
cfg
, 
CFG_ems_c_addr
, 
EMS_ADDR
);

370 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_c_p‹t
))

371 
	`cfg_£t
(
cfg
, 
CFG_ems_c_p‹t
, 
	`ems_ôﬂ
(
EMS_PORT
));

374 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_s_addr
))

375 
	`cfg_£t
(
cfg
, 
CFG_ems_s_addr
, "udc.cengbar.com");

377 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_s_p‹t
))

378 
	`cfg_£t
(
cfg
, 
CFG_ems_s_p‹t
, "80");

380 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_¢
))

381 
	`cfg_£t
(
cfg
, 
CFG_ems_¢
, 
	`ems_≠¢
());

383 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_mac
))

384 
	`cfg_£t
(
cfg
, 
CFG_ems_mac
, 
	`ems_≠mac
());

386 
	`cfg_£t
(
cfg
, 
CFG_ems_devi˚ty≥
, 
	`ems_devi˚ty≥
());

388 i‡(!
	`cfg_gë
(
cfg
, 
CFG_ems_c_auto
))

389 
	`cfg_£t
(
cfg
, 
CFG_ems_c_auto
, "1");

391 
	`cfg_£t
(
cfg
, 
CFG_ems_sy°em_vîsi⁄
, 
	`ems_sys_vîsi⁄
());

393 i‡(!
	`cfg_gë
(
cfg
, 
CFG_wúñess_íabÀ_í¸y±
))

394 
	`cfg_£t
(
cfg
, 
CFG_wúñess_íabÀ_í¸y±
, "0");

396 
	`cfg_wrôe
(
cfg
);

398  
EMS_OK
;

399 
	}
}

401 
ems_öt
 
	$c‹e_gë¨gs
(
ems_c‹e
 *
c‹e
, 
ems_öt
 
¨gc
, 
ems_ch¨
 **
¨gv
)

403 
ems_öt
 
c
;

405 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:")) != -1) {

407 
c
) {

410 
	`°r_£t
(&
c‹e
->
cfg
.
Ê
, 
›èrg
);

413 
	`ems_l_îr‹
("ußge: %†-¯c⁄fig fûe\n", 
¨gv
[0]);

414  
EMS_ERR
;

418  
	`c‹e_cfg_öô
(
c‹e
);

419 
	}
}

421 
msgqueue
 *
	$ems_mq_√w
()

423 
msgqueue
 *
mq
 = (msgqueuê*)
	`ems_mÆloc
((msgqueue));

425 i‡(
mq
) {

426 
	`mem£t
(
mq
, 0, (
msgqueue
));

427 
	`ems_queue_öô
(&
mq
->
íåy
);

430  
mq
;

431 
	}
}

433 
ems_void
 
	$ems_mq_de°roy
(
msgqueue
 *
mq
)

435 i‡(
mq
) {

436 i‡(
mq
->
obj
) {

437 
	`js⁄_obje˘_put
(
mq
->
obj
);

438 
mq
->
obj
 = 
NULL
;

441 
	`ems_‰ì
(
mq
);

443 
	}
}

445 #ifde‡
DEBUG


446 
ems_cch¨
 *
ems_≠p_desc
(
ems_uöt
 
ty
);

447 
ems_cch¨
 *
ems_evt_desc
(
ems_uöt
 
evt
);

450 
ems_öt
 
	$ems_£nd_mesßge
(
ems_uöt
 
s
,Éms_uöà
d
,Éms_uöà
evt
, 
js⁄_obje˘
 *
obj
)

452 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

453 
msgqueue
 *
mq
 = 
	`ems_mq_√w
();

455 i‡(!
mq
)

456  
EMS_ERR
;

458 
mq
->
s
 = s;

459 
mq
->
d
 = d;

460 
mq
->
evt
 =Évt;

461 
mq
->
obj
 = 
NULL
;

462 i‡(
obj
) {

463 
mq
->
obj
 = 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(obj));

464 i‡(!
mq
->
obj
) {

465 
	`ems_mq_de°roy
(
mq
);

466  
EMS_ERR
;

470 
	`ems_l_åa˚
("send msg (%s --> %s, (%s, %s))",

471 
	`ems_≠p_desc
(
s
),

472 
	`ems_≠p_desc
(
d
),

473 
	`ems_evt_desc
(
evt
),

474 
mq
->
obj
?
	`js⁄_obje˘_to_js⁄_°rög
(mq->obj):"");

476 
	`ems_queue_ö£π_èû
(&
c‹e
->
msg_íåy
, &
mq
->
íåy
);

478  
EMS_OK
;

479 
	}
}

481 
ems_void
 
	$c‹e_evt_cb
(
ems_evít
 *
evt
)

483 
ems_queue
 *
p
;

484 
msgqueue
 *
mq
;

485 
ems_c‹e
 *
c‹e
 = 
	`emsc‹î
();

486 #ifde‡
DEBUG


487 
ems_uöt
 
˙t
 = 0;

489 
	`ems_l_åa˚
("evàcb, c¡: %u", ++
˙t
);

492 !
	`ems_queue_em±y
(&
c‹e
->
msg_íåy
)) {

494 
p
 = 
	`ems_queue_hód
(&
c‹e
->
msg_íåy
);

495 
	`ems_queue_ªmove
(
p
);

497 
mq
 = 
	`ems_c⁄èöî_of
(
p
, 
msgqueue
, 
íåy
);

499 
	`ems_≠p_¥o˚ss
(
mq
->
s
, mq->
d
, mq->
evt
, mq->
obj
);

500 
	`ems_mq_de°roy
(
mq
);

502 
	}
}

504 
ems_öt
 
	$ems_c‹e_maö
(
ems_c‹e
 *
c‹e
, 
ems_öt
 
¨gc
, 
ems_ch¨
 **
¨gv
)

506 
	`§™dom
(
	`time
(
NULL
));

508 
	`sig«l
(
SIGINT
, 
ems_sigh™dÀr
);

509 
	`sig«l
(
SIGABRT
, 
ems_sigh™dÀr
);

510 
	`sig«l
(
SIGKILL
, 
ems_sigh™dÀr
);

511 
	`sig«l
(
SIGSTOP
, 
ems_sigh™dÀr
);

512 
	`sig«l
(
SIGTERM
, 
ems_sigh™dÀr
);

515 i‡(
	`c‹e_gë¨gs
(
c‹e
, 
¨gc
, 
¨gv
Ë!
EMS_OK
)

518 
	`ems_Êush_sy°em_öfo
();

520 i‡(
	`ems_©oi
(
	`ems_p›í_gë
("uci get -P /tmp/state ykwifi.base.first_config"))) {

521 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_FIRST_CONFIG
);

524 i‡(!
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_íabÀ_í¸y±
))) {

525 
	`ems_l_åa˚
("reset wirelessÉncrypt method");

526 
	`ems_£twifi_n›assw‹d
();

529 i‡(
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_˛õ¡_subdomaö_íabÀ
)))

530 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_SUBDOMAIN_ENABLE
);

532 i‡(
	`°rcmp
("127.0.0.1", 
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_addr
))){

533 
	`ems_Êag_£t
(
c‹e
->
Êg
, 
FLG_CONFIG_READY
);

536 
	`ems_≠p_¥o˚ss
(0, 
ty_˘æ
, 
EMS_APP_START
, 
NULL
);

537 
	`ems_≠p_¥o˚ss
(0, 
ty_√t
, 
EMS_APP_START
, 
NULL
);

539 i‡(!
	`£tjmp
(
jm∑ddr
)) {

540 
	`ems_evít_run
(&
c‹e
->
evt
, 
c‹e_evt_cb
);

542 
	`ems_l_åa˚
("aaa got signal, doÉxit");

544 
	`ems_≠p_moduÀs_run
(
EMS_NO
);

547  
EMS_OK
;

548 
	}
}

	@src/core/ems_core.h

2 #i‚de‡
EMS_CLIENT_CORE_HEADER_____


3 
	#EMS_CLIENT_CORE_HEADER_____


	)

5 
	~"ems_maö.h
"

6 
	~"js⁄.h
"

8 
js⁄_obje˘
 *
ems_js⁄_tokíî_∑r£
(
ems_cch¨
 *
°r
);

11 
	#ems_js⁄_gë_öt64_def
(
roŸ
, 
key
, 
vÆ
, 
def
) do { \

12 
js⁄_obje˘
 *
obj
; \

13 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

14 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_öt
)) \

15 (
vÆ
Ë
	`js⁄_obje˘_gë_öt64
(
obj
); \

17 (
vÆ
Ë(
def
); \

18 } 0)

	)

20 
	#ems_js⁄_gë_öt64
(
roŸ
, 
key
, 
vÆ
) do { \

21 
js⁄_obje˘
 *
obj
; \

22 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

23 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_öt
)) \

24 (
vÆ
Ë
	`js⁄_obje˘_gë_öt64
(
obj
); \

26  
MSG_ST_INVALID_ARG
; \

27 } 0)

	)

29 
	#ems_js⁄_gë_öt_def
(
roŸ
, 
key
, 
vÆ
, 
def
) do { \

30 
js⁄_obje˘
 *
obj
; \

31 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

32 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_öt
)) \

33 (
vÆ
Ë
	`js⁄_obje˘_gë_öt
(
obj
); \

35 (
vÆ
Ë(
def
); \

36 } 0)

	)

38 
	#ems_js⁄_gë_öt
(
roŸ
, 
key
, 
vÆ
) do { \

39 
js⁄_obje˘
 *
obj
; \

40 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

41 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_öt
)) \

42 (
vÆ
Ë
	`js⁄_obje˘_gë_öt
(
obj
); \

44  
MSG_ST_INVALID_ARG
; \

45 } 0)

	)

47 
	#ems_js⁄_gë_°rög_def
(
roŸ
, 
key
, 
°r
, 
def
) do { \

48 
js⁄_obje˘
 *
obj
; \

49 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

50 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)) \

51 
	`°r_£t
((
°r
), 
	`js⁄_obje˘_gë_°rög
(
obj
)); \

53 
	`°r_£t
((
°r
), (
def
)); \

54 } 0)

	)

56 
	#ems_js⁄_gë_°rög
(
roŸ
, 
key
, 
°r
) do { \

57 
js⁄_obje˘
 *
obj
; \

58 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
); \

59 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
)) \

60 
	`°r_£t
((
°r
), 
	`js⁄_obje˘_gë_°rög
(
obj
)); \

62  
MSG_ST_INVALID_ARG
; \

63 } 0)

	)

65 
	#EMS_ADDR
 "0.0.0.0"

	)

66 
	#EMS_PORT
 9111

	)

67 
	#EMS_DNS_BIND
 9113

	)

68 
	#EMS_HTTP_PORT
 80

	)

	@src/core/ems_ctrl.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_cmd.h
"

5 
	~"ems_ødius.h
"

6 
	~"≠p.h
"

7 
	~"ems_˘æ.h
"

10 
	#EMS_CMD_TIMEOUT
 3000

	)

12 
ems_öt
 
˘æ_°¨t
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

13 
ems_öt
 
˘æ_°›≥d
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

14 
ems_öt
 
˘æ_n‹mÆ
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

15 
ems_öt
 
˘æ_evt_run
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

17 
	$ems_öt
 (*
	t˘æ_evt_func
)(
	tems_˘æ
 *
	t˘æ
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

18 
˘æ_evt_func
 
˘æ_h™dÀr
[] =

20 [
°_°¨t
] = 
˘æ_°¨t
,

21 [
°_°›≥d
] = 
˘æ_°›≥d
,

22 [
°_n‹mÆ
] = 
˘æ_n‹mÆ
,

23 [
°_max
] = 
NULL


24 
	}
};

26 
ems_void
 
evt_cmd_cb
 (
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
°
,Éms_öà
Êg
);

27 
ems_void
 
timeout_cmd_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

29 
ems_öt
 
ems_cmd_c
 (
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

30 
ems_öt
 
ems_cmd_˘æ
 (
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

31 
ems_öt
 
ems_cmd_°©us
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

32 
ems_öt
 
ems_cmd_bridge_ªq
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

33 
ems_öt
 
ems_cmd_bridge_hb
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

34 
ems_öt
 
ems_cmd_bwli°
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

36 
ems_öt
 
ems_cmd_qos
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

37 
ems_öt
 
ems_cmd_p‹èl
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

38 
ems_öt
 
ems_cmd_ødius
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

40 
ems_öt
 
ems_cmd_fw
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

41 
ems_öt
 
ems_cmd_u£r
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

42 
ems_öt
 
ems_cmd_wúñess
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

44 
ems_öt
 
ems_cmd_ã°_ødius
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

45 
ems_öt
 
ems_cmd_√tw‹k
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

46 
ems_öt
 
ems_cmd_c⁄fig
(
ems_c‹e
 *
c‹e
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
);

48 
ems_öt


49 
	$˘æ_cmd_h™dÀ
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
js⁄_obje˘
 *
ªq
, 
ems_uöt
 
msgid
)

51 
	`ems_l_åa˚
("<< \033[01;33mÑeq: %s \033[00m>>",

52 
ªq
?
	`js⁄_obje˘_to_js⁄_°rög
(req): "noárg");

54 
msgid
 & 0x0000ffff) {

56 
CMD_EMS_C
:

57  
	`ems_cmd_c
(
	`emsc‹î
(), 
£ss
, 
ªq
);

59 
CMD_EMS_CTRL
:

60  
	`ems_cmd_˘æ
(
	`emsc‹î
(), 
£ss
, 
ªq
);

62 
CMD_EMS_STATUS
:

63  
	`ems_cmd_°©us
(
	`emsc‹î
(), 
£ss
, 
ªq
);

65 
CMD_EMS_BWLIST
:

66  
	`ems_cmd_bwli°
(
	`emsc‹î
(), 
£ss
, 
ªq
);

68 
CMD_EMS_QOS
:

69  
	`ems_cmd_qos
(
	`emsc‹î
(), 
£ss
, 
ªq
);

71 
CMD_EMS_PORTAL
:

72  
	`ems_cmd_p‹èl
(
	`emsc‹î
(), 
£ss
, 
ªq
);

74 
CMD_EMS_RADIUS
:

75  
	`ems_cmd_ødius
(
	`emsc‹î
(), 
£ss
, 
ªq
);

77 
CMD_BRIDGE_REQ
:

78  
	`ems_cmd_bridge_ªq
(
	`emsc‹î
(), 
£ss
, 
ªq
);

80 
CMD_BRIDGE_HB
:

81  
	`ems_cmd_bridge_hb
(
	`emsc‹î
(), 
£ss
, 
ªq
);

83 
CMD_EMS_FW
:

84  
	`ems_cmd_fw
(
	`emsc‹î
(), 
£ss
, 
ªq
);

86 
CMD_EMS_USER
:

87  
	`ems_cmd_u£r
(
	`emsc‹î
(), 
£ss
, 
ªq
);

89 
CMD_EMS_WIRELESS
:

90  
	`ems_cmd_wúñess
(
	`emsc‹î
(), 
£ss
, 
ªq
);

93 
CMD_EMS_TEST_RADIUS
:

94  
	`ems_cmd_ã°_ødius
(
	`emsc‹î
(), 
£ss
, 
ªq
);

96 
CMD_EMS_NETWORK
:

97  
	`ems_cmd_√tw‹k
(
	`emsc‹î
(), 
£ss
, 
ªq
);

99 
CMD_EMS_CONFIG
:

100  
	`ems_cmd_c⁄fig
(
	`emsc‹î
(), 
£ss
, 
ªq
);

107  
EMS_ERR
;

108 
	}
}

111 
ems_öt


112 
	$˘æ_cmd_¥o˚ss_⁄e
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_ªque°
 *
ªq
)

114 
ems_öt
 
πn
;

115 
js⁄_obje˘
 *
roŸ
 = 
NULL
;

117 
	`ems_as£π
(
ªq
 && 
˘æ
 && 
£ss
);

118 
	`ems_as£π
(
ªq
->
Àn
 >
SIZE_REQUEST
);

119 
	`ems_as£π
(
	`buf_Àn
(&
£ss
->
buf_ö
Ë>
ªq
->
Àn
);

121 i‡(
ªq
->
Àn
 >(
SIZE_REQUEST
 + 
INTSIZE
))

123 
ems_öt
 
Àn
;

124 
ems_ch¨
 *
p
, 
ch
;

126 
p
 = (
ems_ch¨
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
SIZE_REQUEST
);

127 
	`gëw‹d
(
p
, 
Àn
);

129 i‡(
Àn
 > 
ªq
->len)

130  
EMS_ERR
;

132 
ch
 = 
p
[
Àn
];

133 
p
[
Àn
] = '\0';

134 
roŸ
 = 
	`ems_js⁄_tokíî_∑r£
(
p
);

135 
p
[
Àn
] = 
ch
;

138 
πn
 = 
	`˘æ_cmd_h™dÀ
(
˘æ
, 
£ss
, 
roŸ
, 
ªq
->
èg
.
msg
);

140 i‡(
roŸ
)

141 
	`js⁄_obje˘_put
(
roŸ
);

143 
	`c‹e_∑ck_r•
(
£ss
, 
ªq
->
èg
.
vÆ
, 
πn
);

144 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
evt_cmd_cb
);

145 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

147 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_ö
, 
ªq
->
Àn
, 
EMS_BUFFER_SEEK_CUR
);

148 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

150  
EMS_OK
;

151 
	}
}

154 
	#HTTP_NEWLINE
 "\r\n"

	)

155 
	#HTTP_GET
 "GET"

	)

156 
	#HTTP_POST
 "POST"

	)

157 
	#HTTP_HOST
 "Ho°: "

	)

159 
ems_öt
 
	$˘æ_msg_is_web
(
ems_£ssi⁄
 *
£ss
)

161 i‡(!
	`°∫cmp
(
	`buf_rd
(&
£ss
->
buf_ö
), 
HTTP_GET
, 3))

162  
EMS_YES
;

164 i‡(!
	`°∫cmp
(
	`buf_rd
(&
£ss
->
buf_ö
), 
HTTP_POST
, 4))

165  
EMS_YES
;

167  
EMS_NO
;

168 
	}
}

170 
ems_cch¨
 *
	$ems_cuºít_tm
()

172 
ems_ch¨
 
tm_buf
[128] = {0};

173 
time_t
 
tm
;

175 
	`time
(&
tm
);

176 
	`¢¥ötf
(
tm_buf
, —m_buf), "%s", 
	`˘ime
(&
tm
));

177 
tm_buf
[
	`°æí
(tm_buf) -1] = '\0';

179  
tm_buf
;

180 
	}
}

182 
ems_öt
 
	$˘æ_web_ªdúe˘_to_homïage
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
)

184 
ems_öt
 
Àn
;

185 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

187 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

195 , 
	`ems_cuºít_tm
(), 
	`c‹e_gw_addr
());

197 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, 
	`buf_rd
(buf), 
Àn
);

199 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
 | 
EMS_EVT_WRITE
, 
evt_cmd_cb
);

200 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

202 
	`ems_Êag_£t
(
£ss
->
Êg
, 
SESSION_FLAG_DIE_AFTER_SEND
);

204  
EMS_OK
;

205 
	}
}

207 
ems_öt
 
	$˘æ_web_ªdúe˘_to_mgmt
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
)

209 
ems_öt
 
Àn
;

210 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

212 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

220 , 
	`ems_cuºít_tm
(), 
	`c‹e_gw_addr
());

222 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, 
	`buf_rd
(buf), 
Àn
);

224 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
 | 
EMS_EVT_WRITE
, 
evt_cmd_cb
);

225 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

227 
	`ems_Êag_£t
(
£ss
->
Êg
, 
SESSION_FLAG_DIE_AFTER_SEND
);

229  
EMS_OK
;

230 
	}
}

232 #i‚de‡
SKIP_ERROR


233 
ems_öt
 
	$˘æ_web_ªdúe˘_to_îr‹
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
buf
)

235 
ems_öt
 
Àn
;

237 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

245 , 
	`ems_cuºít_tm
(), 
	`c‹e_gw_addr
());

247 
	`ems_buf„r_£ek_wr
(
buf
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

249  
EMS_OK
;

250 
	}
}

253 
ems_öt


254 
	$˘æ_web_ªdúe˘_to_ßme_∑ge
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
buf
, 
ems_cch¨
 *
§cuæ
)

256 
ems_öt
 
Àn
;

258 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

266 , 
	`ems_cuºít_tm
(), 
§cuæ
?srcurl:"no");

268 
	`ems_buf„r_£ek_wr
(
buf
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

270  
EMS_OK
;

271 
	}
}

273 
ems_ch¨
 *
	$ems_mac_upd©e
(
ems_ch¨
 *
d°
, 
ems_cch¨
 *
§c
)

275 *
§c
) {

276 *
d°
 = *
§c
++;

278 i‡(*
d°
 == ':')

279 *
d°
 = '-';

280 
d°
++;

283  
d°
;

284 
	}
}

286 
ems_ch¨
 *
	$ems_u£rmac
(
ems_cch¨
 *
ù
)

288 
ems_ch¨
 
cmd
[128];

289 
ems_ch¨
 
buf
[32];

291 
	`¢¥ötf
(
cmd
, 128, "/sbö/¨∞-¿| gª∞-v incom∂ëê| gª∞'(%s)' |áwk '{¥öà$4}'", 
ù
);

292 
	`¢¥ötf
(
buf
, 32, "%s", 
	`ems_p›í_gë
(
cmd
));

294  
buf
;

295 
	}
}

297 
ems_öt
 
	$ems_uæícode
(
ems_buf„r
 *
d°
,Éms_buf„∏*
§c
)

299 
ems_ch¨
 *
buf
 = 
NULL
;

300 
ems_öt
 
Àn
 = 0, 
ªt
;

303 
ªt
 = 
EMS_ERR
;

305 
buf
 = 
	`uæ_ícode
(
	`buf_rd
(
§c
), 
	`buf_Àn
(src));

307 i‡(!
buf
) ;

309 
Àn
 = 
	`ems_°æí
(
buf
);

311 
	`ems_l_åa˚
("uæÉncode: %s, buf_À·(%d),Üí: %d", 
buf
, 
	`buf_À·
(
d°
), 
Àn
);

313 i‡(
Àn
 >
	`buf_À·
(
d°
)) ;

315 
	`ems_buf„r_wrôe
(
d°
, 
buf
, 
Àn
);

317 
ems_ch¨
 *
ch
 = 
	`buf_wr
(
d°
);

318 *
ch
 = '\0';

321 
ªt
 = 
EMS_OK
;

324 i‡(
buf
)

325 
	`ems_‰ì
(
buf
);

327  
ªt
;

328 
	}
}

330 
ems_öt


331 
	$ems_gë∑øms
(
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
∑øm
)

333 
ems_öt
 
Àn
;

334 
ems_buf„r
 *
buf
 = &
£ss
->
buf_ö
;

335 
ems_ch¨
 *
p
, *
q
, *
ídî
;

337 
p
 = 
	`buf_rd
(
buf
);

339 i‡(!
	`°∫cmp
(
p
, 
HTTP_GET
, 3)) {

340 
p
 += 4;

341 } i‡(!
	`°∫cmp
(
p
, 
HTTP_POST
, 4)) {

342 
p
 += 5;

344 
	`ems_as£π
(0 && "never show upÅhisÜine");

345  
EMS_ERR
;

348 
ídî
 = 
	`°r°r
(
p
, 
HTTP_NEWLINE
);

349 i‡(!
ídî
) {

350 
	`ems_l_åa˚
("hódî: %s", 
p
);

351  
EMS_ERR
;

354 *
ídî
 = '\0';

355 
ídî
 += 2;

356 
	`ems_buf„r_£ek_rd
(
buf
, 
	`abs
(
ídî
 - 
	`buf_rd
(buf)), 
EMS_BUFFER_SEEK_CUR
);

358 
q
 = 
	`°rchr
(
p
, ' ');

359 i‡(!
q
)

360  
EMS_ERR
;

361 *
q
 = '\0';

363 
Àn
 = 
	`abs
(
p
 - 
q
);

364 i‡(
Àn
 > 
	`buf_À·
(
∑øm
)) {

365 
	`ems_l_åa˚
("∑ømÅoÿl⁄g“ìd %d > %dÜe·)", 
Àn
, 
	`buf_À·
(
∑øm
));

366  
EMS_ERR
;

369 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
∑øm
), 
	`buf_À·
’¨am), "%s", 
p
);

370 
	`ems_buf„r_£ek_wr
(
∑øm
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

372 
	`ems_l_åa˚
("∑øm: %s", 
p
);

374  
EMS_OK
;

375 
	}
}

377 
ems_öt
 
	$ems_gëho°
(
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
ho°
, 
ems_öt
 *
≥rmô
)

379 
ems_öt
 
Àn
 = 0;

380 
ems_buf„r
 *
buf
 = &
£ss
->
buf_ö
;

381 
ems_ch¨
 *
p
, *
ídî
;

383 
p
 = 
	`°r°r
(
	`buf_rd
(
buf
), 
HTTP_HOST
);

384 i‡(!
p
)

385  
EMS_ERR
;

387 
p
 +
	`°æí
(
HTTP_HOST
);

389 
ídî
 = 
	`°r°r
(
p
, 
HTTP_NEWLINE
);

390 i‡(!
ídî
)

391  
EMS_ERR
;

393 *
ídî
 = '\0';

394 
ídî
 += 2;

395 
	`ems_buf„r_£ek_rd
(
buf
, 
	`abs
(
ídî
 - 
	`buf_rd
(buf)), 
EMS_BUFFER_SEEK_CUR
);

397 
Àn
 = 
	`¢¥ötf
(
	`buf_wr
(
ho°
), 
	`buf_À·
(ho°), "%s", 
p
);

398 
	`ems_buf„r_£ek_wr
(
ho°
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

400 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
)){

401 
js⁄_obje˘
 *
obj
;

402 
ems_ch¨
 *
comma
;

404 
comma
 = 
	`°rchr
(
p
, ':');

405 i‡(
comma
)

406 *
comma
 = '\0';

408 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

409 
	`js⁄_obje˘_obje˘_add
(
obj
, "uæ", 
	`js⁄_obje˘_√w_°rög
(
p
));

411 i‡(
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_fw
, 
EMS_APP_CHECK_SUBDOMAIN
, 
obj
Ë=
EMS_YES
)

412 *
≥rmô
 = 
EMS_YES
;

414 
	`js⁄_obje˘_put
(
obj
);

416 
	`ems_l_åa˚
("ho°: %s", 
	`buf_rd
(
ho°
));

418  
EMS_OK
;

419 
	}
}

421 
ems_cch¨
 *

422 
	$ems_§cuæ
(
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
∑øm
,Éms_buf„∏*
ho°
, 
ems_öt
 *
≥rmô
)

424 
ems_öt
 
πn
;

427 
πn
 = 
	`ems_gë∑øms
(
£ss
, 
∑øm
);

428 i‡(
πn
 !
OK
) {

429 
	`ems_l_åa˚
("(%sÌ¨am†toÿl⁄g", 
	`ems_sock_addr
(&
£ss
->
sock
));

433 
	#uæ_hódî
 "hâp://"

	)

434 
	`ems_buf„r_wrôe
(
ho°
, 
uæ_hódî
, 
	`°æí
(url_header));

435 
πn
 = 
	`ems_gëho°
(
£ss
, 
ho°
, 
≥rmô
);

436 i‡(
πn
 !
OK
) {

437 
	`ems_l_åa˚
("(%s)didÇŸ gë ho°s", 
	`ems_sock_addr
(&
£ss
->
sock
));

443 i‡–!*
≥rmô
 &&

444 
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
) &&

445 
	`öë_addr
(
	`buf_rd
(
ho°
Ë+ 7Ë!
INADDR_NONE


448 
js⁄_obje˘
 *
obj
;

451 
ems_ch¨
 
¨g
[80] = {0};

452 
	`¢¥ötf
(
¨g
, ◊rg), "%s", 
	`buf_rd
(
∑øm
));

454 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

455 
	`js⁄_obje˘_obje˘_add
(
obj
, "¨g", 
	`js⁄_obje˘_√w_°rög
(
¨g
));

456 
	`js⁄_obje˘_obje˘_add
(
obj
, "ù", 
	`js⁄_obje˘_√w_°rög
(
	`buf_rd
(
ho°
) + 7));

458 i‡(
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_fw
, 
EMS_APP_CHECK_PARAM_APPLE_COM
, 
obj
Ë=
EMS_YES
)

459 *
≥rmô
 = 
EMS_YES
;

461 
	`js⁄_obje˘_put
(
obj
);

464 i‡(
	`buf_À·
(
ho°
Ë-1 < 
	`buf_Àn
(
∑øm
)) {

465 
	`ems_l_åa˚
("(%sË∑øm†toÿl⁄g", 
	`ems_sock_addr
(&
£ss
->
sock
));

466 
πn
 = 
EMS_ERR
;

470 
	`ems_buf„r_wrôe
(
ho°
, 
	`buf_rd
(
∑øm
), 
	`buf_Àn
(param));

472 
ems_ch¨
 *
ch
 = 
	`buf_wr
(
ho°
);

473 *
ch
 = '\0';

476 
	`ems_l_åa˚
("uæ(%d): %s", 
	`buf_Àn
(
ho°
), 
	`buf_rd
(host));

477 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

479 i‡(*
≥rmô
) {

480 
	`ems_buf„r_wrôe
(&
£ss
->
buf_ö
, 
	`buf_rd
(
ho°
), 
	`buf_Àn
(host));

482 
ems_ch¨
 *
ch
 = 
	`buf_wr
(&
£ss
->
buf_ö
);

483 *
ch
 = '\0';

486 i‡(
	`ems_uæícode
(&
£ss
->
buf_ö
, 
ho°
Ë!
EMS_OK
) {

487 
	`ems_l_åa˚
("urlÅooÜong");

488 
πn
 = 
EMS_ERR
;

493 
	`ems_l_åa˚
("§cuæ: %s", 
	`buf_rd
(&
£ss
->
buf_ö
));

495 
πn
 = 
EMS_OK
;

499 i‡(
πn
 !
OK
)

500  
NULL
;

502  
	`buf_rd
(&
£ss
->
buf_ö
);

503 
	}
}

505 
ems_öt


506 
	$˘æ_web_p‹èl_fûl_wôh
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
buf
, 
ems_cch¨
 *
d©e
,Éms_cch¨ *
§cuæ
)

508 
ems_öt
 
πn
;

509 
ems_ch¨
 
wœnu£rmac
[32], 
wœ«pmac
[32];

510 
ems_buf„r
 
¨g
;

512 
ems_cch¨
 *
wœnu£rù
 = 
	`ems_sock_addr
(&
£ss
->
sock
);

514 
	`ems_mac_upd©e
(
wœnu£rmac
, 
	`ems_u£rmac
(
wœnu£rù
));

515 
	`ems_mac_upd©e
(
wœ«pmac
, 
	`c‹e_ac_mac
());

517 
	`ems_buf„r_öô
(&
¨g
, 
EMS_BUFFER_2K
);

518 
	`mem£t
(
	`buf_wr
(&
¨g
), 0, 
	`buf_À·
(&arg));

520 
πn
 = 
	`¢¥ötf
(
	`buf_wr
(&
¨g
), 
	`buf_À·
(&arg),

528 
wœnu£rù
, 
	`c‹e_¢
(), 
	`c‹e_ssid
(), 
wœnu£rmac
, 
wœ«pmac
, 
	`c‹e_devi˚ty≥
(), core_sn());

530 
	`ems_buf„r_£ek_wr
(&
¨g
, 
πn
, 
EMS_BUFFER_SEEK_CUR
);

531 i‡(
§cuæ
) {

532 
	`ems_buf„r_wrôe
(&
¨g
, "&§cuæ=", 
	`°æí
("&srcurl="));

533 
	`ems_buf„r_wrôe
(&
¨g
, 
§cuæ
, 
	`°æí
(srcurl));

536 #ifde‡
WEIXIN


537 
ems_ch¨
 *
tmpbuf
 = 
	`uæ_ícode
(
	`buf_rd
(&
¨g
), 
	`buf_Àn
(&arg));

538 i‡(
tmpbuf
) {

539 
	`ems_buf„r_wrôe
(&
¨g
, "&auth=", 
	`°æí
("&auth="));

540 
	`ems_buf„r_wrôe
(&
¨g
, 
tmpbuf
, 
	`°æí
(tmpbuf));

541 
	`ems_‰ì
(
tmpbuf
);

545 
	`ems_l_åa˚
("¨gs: %s", 
	`buf_rd
(&
¨g
));

547 
πn
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

556 , 
d©e
,

557 
	`c‹e_p‹èl_addr
(),

558 
	`c‹e_p‹èl_ªdúe˘_p‹t
(),

559 
	`buf_rd
(&
¨g
));

561 
πn
 =Ñä < 
	`buf_À·
(
buf
) ?Ñtn: buf_left(buf);

562 
	`ems_buf„r_unöô
(&
¨g
);

564 
	`ems_buf„r_£ek_wr
(
buf
, 
πn
, 
EMS_BUFFER_SEEK_CUR
);

566  
EMS_OK
;

567 
	}
}

569 
ems_cch¨
 *
	$˘æ_web_ˇŒback
(
ems_buf„r
 *
buf
)

571 
ems_ch¨
 *
p
, *
q
;

573 
	#NAS_CALLBACK
 "ˇŒback="

	)

575 
q
 = 
NULL
;

577 
p
 = 
	`°r°r
(
	`buf_rd
(
buf
), 
NAS_CALLBACK
);

578 i‡(
p
) {

579 
q
 = 
p
 + 
	`°æí
(
NAS_CALLBACK
);

581 
p
 = 
	`°rchr
(
q
, '&');

582 i‡(
p
)

583 *
p
 = '\0';

586  
q
;

587 
	}
}

589 
ems_öt


590 
	$˘æ_web_«söfo_fûl_wôh
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_buf„r
 *
buf
, 
ems_cch¨
 *
d©e
,Éms_cch¨ *
func
)

592 
ems_öt
 
ªs
;

593 
js⁄_obje˘
 *
r•
, *
obj
;

594 
ems_cch¨
 *
˘x
 = 
NULL
;

595 
ems_cch¨
 *
wœnu£rù
 = 
	`ems_sock_addr
(&
£ss
->
sock
);

596 
ems_cch¨
 *
u£∫ame
 = 
	`ems_≠p_ødius_u£∫ame
(
wœnu£rù
);

598 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

599 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

601 
ªs
 = 0;

602 i‡(!
u£∫ame
) {

603 
ªs
 = 1;

604 
u£∫ame
 = "";

607 
	`js⁄_obje˘_obje˘_add
(
r•
, "ªsu…", 
	`js⁄_obje˘_√w_öt
(
ªs
));

609 
ems_ch¨
 
wœnu£rmac
[32], 
wœ«pmac
[32];

611 
	`ems_mac_upd©e
(
wœnu£rmac
, 
	`ems_u£rmac
(
wœnu£rù
));

612 
	`ems_mac_upd©e
(
wœ«pmac
, 
	`c‹e_ac_mac
());

614 
	`js⁄_obje˘_obje˘_add
(
obj
, "p‹èlù", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_p‹èl_addr
()));

615 
	`js⁄_obje˘_obje˘_add
(
obj
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
u£∫ame
));

616 
	`js⁄_obje˘_obje˘_add
(
obj
, "wœnu£rmac",
	`js⁄_obje˘_√w_°rög
(
wœnu£rmac
));

617 
	`js⁄_obje˘_obje˘_add
(
obj
, "wœnu£rù", 
	`js⁄_obje˘_√w_°rög
(
wœnu£rù
));

618 
	`js⁄_obje˘_obje˘_add
(
obj
, "ssid", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_ssid
()));

619 
	`js⁄_obje˘_obje˘_add
(
obj
, "wœ«pmac", 
	`js⁄_obje˘_√w_°rög
(
wœ«pmac
));

620 
	`js⁄_obje˘_obje˘_add
(
obj
, "wœ«cmac", 
	`js⁄_obje˘_√w_°rög
(
wœ«pmac
));

621 
	`js⁄_obje˘_obje˘_add
(
obj
, "wœ«˙ame", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

622 
	`js⁄_obje˘_obje˘_add
(
obj
, "devi˚ty≥", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_devi˚ty≥
()));

623 
	`js⁄_obje˘_obje˘_add
(
obj
, "¢", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_¢
()));

624 
	`js⁄_obje˘_obje˘_add
(
obj
, "acù", 
	`js⁄_obje˘_√w_°rög
(
	`c‹e_gw_addr
()));

626 
	`js⁄_obje˘_obje˘_add
(
r•
, "d©a", 
obj
);

628 
˘x
 = 
	`js⁄_obje˘_to_js⁄_°rög
(
r•
);

630 i‡(!
˘x
)

631 
˘x
 = "";

633 i‡(!
func
)

634 
func
 = "afunc";

636 
	`ems_l_åa˚
("«sgëöfo: %s", 
˘x
);

638 
ªs
 = 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf),

648 
d©e
, (
ems_öt
)(
	`°æí
(
˘x
Ë+ såÀn(
func
) + 3), func, ctx);

650 
	`ems_buf„r_£ek_wr
(
buf
, 
ªs
, 
EMS_BUFFER_SEEK_CUR
);

652 
	`js⁄_obje˘_put
(
r•
);

654  
EMS_OK
;

655 
	}
}

657 
ems_öt
 
	$˘æ_web_ªdúe˘_to_p‹èl
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
)

659 
ems_buf„r
 
∑øm
, 
ho°
;

660 
ems_cch¨
 *
§cuæ
 = 
NULL
;

661 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

662 
ems_öt
 
Àn
 = 0;

663 
ems_öt
 
≥rmô
 = 
EMS_NO
;

665 
	`ems_buf„r_öô
(&
∑øm
, 
EMS_BUFFER_1K
);

666 
	`ems_buf„r_öô
(&
ho°
, 
EMS_BUFFER_1K
);

668 
	`mem£t
(
	`buf_wr
(&
∑øm
), 0, 
	`buf_size
(&param));

669 
	`mem£t
(
	`buf_wr
(&
ho°
), 0, 
	`buf_size
(&host));

671 
§cuæ
 = 
	`ems_§cuæ
(
£ss
, &
∑øm
, &
ho°
, &
≥rmô
);

676 
	#PORTAL_PARAMS
 "/p‹èl/?"

	)

677 
Àn
 = 9;

678 i‡(
	`buf_Àn
(&
∑øm
Ë<
Àn
) ;

679 i‡(
	`°∫cmp
(
	`buf_rd
(&
∑øm
), 
PORTAL_PARAMS
, 
Àn
)) ;

682 
Àn
 = 
	`°æí
(
NAS_INFO_URL
);

683 i‡(
	`buf_Àn
(&
ho°
Ë< 
Àn
) ;

685 i‡(
	`°∫cmp
(
NAS_INFO_URL
, 
	`buf_rd
(&
ho°
), 
Àn
) &&

686 
	`°∫cmp
("hâp://«sgëöfo.com", 
	`buf_rd
(&
ho°
), 
Àn
+2))

689 
	`˘æ_web_«söfo_fûl_wôh
(
˘æ
, 
£ss
, 
buf
, 
	`ems_cuºít_tm
(), 
	`˘æ_web_ˇŒback
(&
∑øm
));

691 
h™dÀ_ovî
;

694 i‡(
≥rmô
) {

695 
	`˘æ_web_ªdúe˘_to_ßme_∑ge
(
˘æ
, 
£ss
, 
buf
, 
§cuæ
);

697 #i‚de‡
SKIP_ERROR


698 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_CONFIG_READY
)) {

699 
	`˘æ_web_p‹èl_fûl_wôh
(
˘æ
, 
£ss
, 
buf
, 
	`ems_cuºít_tm
(), 
§cuæ
);

701 
	`˘æ_web_ªdúe˘_to_îr‹
(
˘æ
, 
£ss
, 
buf
);

703 
ems_öt
 
°
 = 0;

704 
js⁄_obje˘
 *
roŸ
, *
emsc
;

706 
roŸ
 = 
	`js⁄_obje˘_√w_obje˘
();

708 
	`ems_≠p_¥o˚ss
(
ty_˘æ
, 
ty_˛õ¡
, 
EMS_APP_EMS_STATUS
, 
roŸ
);

709 
emsc
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, "ems_c");

710 i‡(!
emsc
) ;

712 
	`ems_js⁄_gë_öt_def
(
emsc
, "°©us", 
°
, 0);

715 
js⁄_obje˘
 *
obj_îr
;

716 
ems_öt
 
îr
;

718 
obj_îr
 = 
	`js⁄_obje˘_obje˘_gë
(
emsc
, "err");

719 i‡(!
obj_îr
) ;

721 
	`ems_js⁄_gë_öt_def
(
obj_îr
, "code", 
îr
, 0);

722 i‡–(
îr
 =
RADIUS_ERR_CANNOT_CONNECT
) ||

723 (
îr
 =
RADIUS_ERR_REJECT
) ||

724 (
îr
 =
RADIUS_ERR_NETWORK
))

727 
°
 = 0;

731 
	`js⁄_obje˘_put
(
roŸ
);

733 i‡(
°
 == 4)

734 
	`˘æ_web_ªdúe˘_to_îr‹
(
˘æ
, 
£ss
, 
buf
);

736 
	`ems_as£π
(
°
 != 0 && "never be here");

737 
	`˘æ_web_p‹èl_fûl_wôh
(
˘æ
, 
£ss
, 
buf
, 
	`ems_cuºít_tm
(), 
§cuæ
);

743 
	`˘æ_web_p‹èl_fûl_wôh
(
˘æ
, 
£ss
, 
buf
, 
	`ems_cuºít_tm
(), 
§cuæ
);

747 
h™dÀ_ovî
:

749 
	`ems_buf„r_unöô
(&
∑øm
);

750 
	`ems_buf„r_unöô
(&
ho°
);

752 
	`ems_l_åa˚
("sess(%s:%d): bufferÜength: %d",

753 
	`ems_sock_addr
(&
£ss
->
sock
),

754 
	`ems_sock_p‹t
(&
£ss
->
sock
),

755 
	`buf_Àn
(
buf
));

757 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, 
	`buf_rd
(buf), 
	`buf_Àn
(buf));

758 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
 | 
EMS_EVT_WRITE
, 
evt_cmd_cb
);

759 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

761 
	`ems_Êag_£t
(
£ss
->
Êg
, 
SESSION_FLAG_DIE_AFTER_SEND
);

763  
EMS_OK
;

764 
	}
}

766 
ems_öt
 
	$˘æ_web_msg_ªdúe˘
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
)

768 
	`ems_Êag_£t
(
£ss
->
Êg
, 
FLG_SESSION_IS_WEB
);

769 
	`ems_buf„r_˛ór
(
	`c‹e_buf„r
());

771 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_FIRST_CONFIG
)) {

772  
	`˘æ_web_ªdúe˘_to_homïage
(
˘æ
, 
£ss
);

775 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_READY
)) {

776  
	`˘æ_web_ªdúe˘_to_p‹èl
(
˘æ
, 
£ss
);

779  
	`˘æ_web_ªdúe˘_to_mgmt
(
˘æ
, 
£ss
);

780 
	}
}

782 
ems_öt


783 
	$˘æ_cmd_¥o˚ss
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
)

785 
ems_ªque°
 
ªq
;

787 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
FLG_SESSION_IS_WEB
))

789 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

790  
EMS_CONTINUE
;

793 i‡(
	`˘æ_msg_is_web
(
£ss
)) {

794 
ems_öt
 
πn
;

795 
πn
 = 
	`˘æ_web_msg_ªdúe˘
(
˘æ
, 
£ss
);

796 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

797  
πn
;

800 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
SIZE_REQUEST
)

801  
EMS_CONTINUE
;

803 
	`ems_buf„r_¥e„tch
(&
£ss
->
buf_ö
, (
ems_ch¨
 *)
ªq
.
vÆ
, 
SIZE_REQUEST
);

805 
ªq
.
èg
.
vÆ
 = 
	`¡ohl
(req.tag.val);

806 
ªq
.
Àn
 = 
	`¡ohl
(req.len);

808 
	`ems_l_åa˚
("[ctrl]tag: 0x%.8X, msgid: 0x%.2X,Üen: 0x%.4X",

809 
ªq
.
èg
.
vÆ
,Ñeq.èg.
msg
,Ñeq.
Àn
);

811 i‡(
ªq
.
Àn
 >
	`buf_size
(&
£ss
->
buf_ö
))

812  
EMS_BUFFER_INSUFFICIENT
;

814 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
ªq
.
Àn
)

815  
EMS_CONTINUE
;

817  
	`˘æ_cmd_¥o˚ss_⁄e
(
˘æ
, 
£ss
, &
ªq
);

818 
	}
}

821 
ems_öt


822 
	$˘æ_cmd_ªad
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
Êg
)

824 
ems_öt
 
ªt
, 
agaö
;

826 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
));

828 
agaö
 = 
EMS_YES
;

829 
ªcv_agaö
:

830 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

831 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

833 i‡(
ªt
 <= 0) {

834 
ªt
) {

836 -
EAGAIN
:

837 
agaö
 = 
EMS_NO
;

841  
EMS_ERR
;

845 
	`˘æ_cmd_¥o˚ss
(
˘æ
, 
£ss
)) {

847 
EMS_CONTINUE
:

848 
EMS_OK
:

851 
EMS_ERR
:

853  
EMS_ERR
;

857 i‡(
agaö
)

858 
ªcv_agaö
;

860  
EMS_OK
;

861 
	}
}

863 
ems_öt


864 
	$˘æ_cmd_wrôe
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
Êg
)

866 
ems_öt
 
ªt
;

868 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

870 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

872 i‡(
ªt
 <= 0) {

873 
ªt
) {

874 -
EAGAIN
:

878  
EMS_ERR
;

882 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0) {

884 i‡(
	`ems_Êag_like
(
£ss
->
Êg
, 
SESSION_FLAG_DIE_AFTER_SEND
))

886  
EMS_ERR
;

889 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
evt_cmd_cb
);

890 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

891 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf
);

894  
EMS_OK
;

895 
	}
}

898 
ems_void
 
	$evt_cmd_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

900 
ems_˘æ
 *
˘æ
 = (ems_˘æ *)
	`£ss_cb¨g
(
£ss
);

902 
	`ems_l_åa˚
("sess(%d),Érr? %s, flg: %x",

903 
	`ems_sock_fd
(&
£ss
->
sock
),

904 
îr
?"yes":"no",

905 
Êg
);

906 i‡(
îr
)

907 
îr_out
;

910 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
) &&

911 
	`˘æ_cmd_ªad
(
˘æ
, 
£ss
, 
Êg
))

913 
îr_out
;

916 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
) &&

917 
	`˘æ_cmd_wrôe
(
˘æ
, 
£ss
, 
Êg
))

919 
îr_out
;

924 
îr_out
:

925 
	`ems_queue_ªmove
(&
£ss
->
íåy
);

926 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

927 
	}
}

929 
ems_void
 
	$timeout_cmd_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

931 
	`ems_l_åa˚
("[ctrl]timeout for cmd sess(%d): %s:%d",

932 
	`ems_sock_fd
(&
£ss
->
sock
),

933 
	`ems_sock_addr
(&
£ss
->
sock
),

934 
	`ems_sock_p‹t
(&
£ss
->
sock
));

936 
	`ems_queue_ªmove
(&
£ss
->
íåy
);

937 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

938 
	}
}

940 
ems_öt


941 
	$˘æ_£ss_ö
(
ems_˘æ
 *
˘æ
, 
ems_öt
 
sockfd
, 
ems_cch¨
 *
addr
,Éms_öà
p‹t
)

943 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

945 
£ss
 = 
	`ems_£ssi⁄_√w
();

946 i‡(!
£ss
)

947  
EMS_ERR
;

949 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
addr
);

950 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
p‹t
);

951 
	`ems_sock_£tfd
(&
£ss
->
sock
, 
sockfd
);

953 
	`ems_queue_ö£π_èû
(&
˘æ
->
cmd
, &
£ss
->
íåy
);

955 
	`£ss_cb¨g_£t
(
£ss
, 
˘æ
);

956 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
evt_cmd_cb
);

957 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
EMS_CMD_TIMEOUT
, 
timeout_cmd_cb
);

959  
EMS_OK
;

960 
	}
}

962 
ems_öt


963 
	$˘æ_ac˚±_√xt
(
ems_˘æ
 *
˘æ
, 
ems_öt
 
sock
)

965 
ems_öt
 
ªt
;

966 
sockÀn_t
 
Àn
;

967 
sockaddr_ö
 
addr
;

969 
Àn
 = (
addr
);

970 
	`mem£t
(&
addr
, 0, (addr));

972 
ªt
 = 
	`ac˚±
(
sock
, (
sockaddr
 *)&
addr
, &
Àn
);

974 i‡(
ªt
 < 0) {

975 
	`ems_œ°îr
()) {

977 
EINTR
:

978 
ECONNABORTED
:

979  
EMS_YES
;

981 
EAGAIN
:

982  
EMS_NO
;

985 
	`ems_l_åa˚
("[˘æ]ac˚±Éº‹: %s", 
	`ems_œ°îrmsg
());

986  
NO
;

990 
	`ems_l_åa˚
("[ctrl] NEW connection (%d) from: %s:%d in",

991 
ªt
, 
	`öë_¡ﬂ
(
addr
.
sö_addr
), 
	`¡ohs
◊ddr.
sö_p‹t
));

993 
lögî
 
lg
;

995 
lg
.
l_⁄off
 = 1;

996 
lg
.
l_lögî
 = 2;

997 
	`£tsock›t
(
ªt
, 
SOL_SOCKET
, 
SO_LINGER
, (
ems_cch¨
 *)&
lg
, (lg));

1000 i‡(
	`˘æ_£ss_ö
(
˘æ
, 
ªt
, 
	`öë_¡ﬂ
(
addr
.
sö_addr
), 
	`¡ohs
◊ddr.
sö_p‹t
)))

1002 
	`˛o£
(
ªt
);

1005  
EMS_YES
;

1006 
	}
}

1009 
ems_void
 
	$evt_˘æ_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

1011 
ems_˘æ
 *
˘æ
 = (ems_˘æ *)
	`£ss_cb¨g
(
£ss
);

1013 
	`ems_as£π
(
˘æ
);

1014 i‡(
îr
) {

1015 
	`ems_as£π
(0 && "shouldÇever be here");

1016 
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°›≥d
);

1018 
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°¨t
);

1022 
	`˘æ_evt_run
(
˘æ
, 
£ss
, 
Êg
);

1023 
	}
}

1025 
ems_öt
 
	$˘æ_°¨t
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1027 i‡(!
˘æ
->
£ss
) {

1028 
˘æ
->
£ss
 = 
	`ems_£ssi⁄_√w
();

1029 i‡(!
˘æ
->
£ss
)

1030  
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°›≥d
);

1032 
	`ems_sock_£èddr
(&
˘æ
->
£ss
->
sock
, 
EMS_ADDR
);

1033 
	`ems_sock_£ç‹t
(&
˘æ
->
£ss
->
sock
, 
EMS_PORT
);

1036 
£ss
 = 
˘æ
->sess;

1038 i‡(
	`ems_sock_be_£rvî
(&
£ss
->
sock
Ë!
EMS_OK
)

1039  
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_°›≥d
);

1041 
	`£ss_cb¨g_£t
(
£ss
, 
˘æ
);

1042 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
evt_˘æ_cb
);

1044  
	`˘æ_ch™ge_°©us
(
˘æ
, 
°_n‹mÆ
);

1045 
	}
}

1047 
ems_öt
 
	$˘æ_°›≥d
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1049 
	`ems_as£π
(
˘æ
);

1051 i‡(
˘æ
->
£ss
) {

1052 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
˘æ
->
£ss
);

1053 
˘æ
->
£ss
 = 
NULL
;

1056 
	`ems_queue_˛ór
(&
˘æ
->
cmd
, 
ems_£ssi⁄
, 
íåy
, 
ems_£ssi⁄_shutdown_™d_de°roy
);

1058  
EMS_OK
;

1059 
	}
}

1061 
ems_öt
 
	$˘æ_n‹mÆ
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1063 
ems_öt
 
√xt
;

1065 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
));

1067 i‡(
	`ems_Êag_u∆ike
(
Êg
, 
EMS_EVT_READ
))

1068  
EMS_OK
;

1071 
√xt
 = 
EMS_NO
;

1072 
√xt
 = 
	`˘æ_ac˚±_√xt
(
˘æ
, 
	`ems_sock_fd
(&
£ss
->
sock
));

1073 } 
√xt
);

1075  
EMS_OK
;

1076 
	}
}

1078 
ems_öt


1079 
	$˘æ_evt_run
(
ems_˘æ
 *
˘æ
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1081 
	`ems_as£π
(
˘æ
->
°
 >
°_°¨t
 && cål->° <
°_n‹mÆ
);

1083 i‡(
˘æ_h™dÀr
[
˘æ
->
°
])

1084  
˘æ_h™dÀr
[
˘æ
->
°
](˘æ, 
£ss
, 
Êg
);

1086  
EMS_OK
;

1087 
	}
}

1089 
ems_öt
 
	$˘æ_ch™ge_°©us
(
ems_˘æ
 *
˘æ
, 
ems_°©us
 
°
)

1091 
	`ems_l_åa˚
("[ctrl] change status: %s ===> %s",

1092 
	`ems_°©us_°r
(
˘æ
->
°
),

1093 
	`ems_°©us_°r
(
°
));

1095 
˘æ
->
°
 = st;

1097 
°
) {

1098 
°_°¨t
:

1099 
°_°›≥d
:

1100  
	`˘æ_evt_run
(
˘æ
, 
NULL
, 0);

1107  
EMS_OK
;

1108 
	}
}

	@src/core/ems_ctrl.h

1 #i‚de‡
EMS_CONTROL_HEADER___


2 
	#EMS_CONTROL_HEADER___


	)

4 
_ems_˘æ_s
 
	tems_˘æ
;

6 
	s_ems_˘æ_s


8 
ems_£ssi⁄
 *
	m£ss
;

9 
ems_°©us
 
	m°
;

10 
ems_queue
 
	mcmd
;

13 
ems_öt
 
˘æ_ch™ge_°©us
(
ems_˘æ
 *
˘æ
, 
ems_°©us
 
°
);

	@src/core/ems_dns.c

1 
	~"ems_c‹e.h
"

2 
	~"ems_˛õ¡.h
"

3 
	~"ems_fw.h
"

4 
	~"ems_dns.h
"

6 
ems_void
 
	$dns_fwd_timeout
(
ems_timeout
 *
timeout
)

8 
dns_u£r
 *
u£r
 = 
	`ems_c⁄èöî_of
(
timeout
, dns_u£r, 
to
);

10 
	`ems_l_åa˚
("---->>>>>>>> [DNS]TIMEOUT for user(%s:%d) <<<<<<<<----",

11 
	`öë_¡ﬂ
(
u£r
->
addr
), u£r->
p‹t
);

13 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

14 
	`ems_hash_ªmove
(&
u£r
->
h_msg
);

15 
	`dns_u£r_‰ì
(
u£r
);

16 
	}
}

19 
ems_void
 
	$dns_scheduÀ_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

21 
ems_fw
 *
fw
 = (ems_fw *)
	`£ss_cb¨g
(
£ss
);

23 
	`fw_dns_quîy_åigî
(
fw
);

24 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 10000, 
dns_scheduÀ_timeout_cb
);

25 
	}
}

27 
ems_öt
 
	$dns_böd
(
ems_£ssi⁄
 *
£ss
)

29 
fd
, 
rc
, 
›t
 = 1;

30 
sockaddr_ö
 
addr
;

31 
ems_sock
 *
sock
 = &
£ss
->sock;

33 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) == -1)

35 
	`ems_l_åa˚
("[dns]sockëÉº: %s", 
	`ems_œ°îrmsg
());

36  
EMS_ERR
;

39 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt)) == -1)

41 
	`ems_l_åa˚
("[dns]£tsock›àîr: %s", 
	`ems_œ°îrmsg
());

42 
	`˛o£
(
fd
);

43  
EMS_ERR
;

46 
	`mem£t
(&
addr
, 0, (addr));

47 
addr
.
sö_Ámûy
 = 
AF_INET
;

48 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
EMS_DNS_BIND
);

49 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0);

51 i‡((
rc
 = 
	`böd
(
fd
, (
sockaddr
 *)&
addr
, (
sockaddr_ö
))) == -1)

53 
	`ems_l_åa˚
("î∏böd: %s", 
	`ems_œ°îrmsg
());

54 
	`˛o£
(
fd
);

55  
EMS_ERR
;

58 
	`ems_sock_£èddr
(
sock
, "0.0.0.0");

59 
	`ems_sock_£tfd
(
sock
, 
fd
);

60  
EMS_OK
;

61 
	}
}

63 
ems_öt
 
	$fw_dns_push_fwd
(
ems_fw
 *
fw
, 
dns_u£r
 *
u£r
)

65 
	`ems_as£π
(
fw
 && 
u£r
);

67 
	`ems_queue_ö£π_èû
(&
fw
->
fwd
, &
u£r
->
íåy
);

68 
	`ems_hash_ö£π
(&
fw
->
hash_msg
, &
u£r
->
h_msg
);

70 
u£r
->
˘x
 = (
ems_void
 *)
fw
;

71 
	`ems_timeout_£t
(
	`timeouãr
(), &
u£r
->
to
, 6000, 
dns_fwd_timeout
, 
EMS_TIMEOUT_SORT
);

73  
EMS_OK
;

74 
	}
}

81 
ems_öt


82 
	$fw_dns_fwd
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
, 
sockaddr_ö
 *
‰om
)

84 
dns_hódî
 *
dns
 = 
NULL
;

85 
dns_u£r
 *
u£r
 = 
NULL
;

87 
	`ems_l_åa˚
("DNSÑequest from(%s:%d),Üength: %d",

88 
	`öë_¡ﬂ
(
‰om
->
sö_addr
), 
	`¡ohs
(‰om->
sö_p‹t
), 
	`buf_Àn
(&
£ss
->
buf_ö
));

90 
dns
 = (
dns_hódî
 *)
	`buf_rd
(&
£ss
->
buf_ö
);

92 
u£r
 = 
	`dns_föd_u£r
(
fw
, 
	`¡ohs
(
dns
->
id
));

93 i‡(
u£r
) {

94 
	`ems_l_åa˚
("resend dnsÑequestÅo user: (%s: %d): 0x%x",

95 
	`öë_¡ﬂ
(
u£r
->
addr
), u£r->
p‹t
, 
	`¡ohs
(
dns
->
id
));

96 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

97 
	`ems_buf„r_˛ór
(&
u£r
->
buf
);

98 
	`ems_timeout_ˇn˚l
(&
u£r
->
to
);

100 
u£r
 = 
	`dns_u£r_√w
();

101 i‡(!
u£r
)

102  
EMS_OK
;

104 
	`mem˝y
(&
u£r
->
addr
, &
‰om
->
sö_addr
, (
ö_addr
));

105 
u£r
->
p‹t
 = 
	`¡ohs
(
‰om
->
sö_p‹t
);

107 
	`ems_l_åa˚
("newÑequest: (%s:%d) id: 0x%x",

108 
	`öë_¡ﬂ
(
u£r
->
addr
), u£r->
p‹t
, 
	`¡ohs
(
dns
->
id
));

109 
	`ems_hash_fd_£t_key
(&
u£r
->
h_msg
, 
	`ems_hash_key
(0xfff‡& 
	`¡ohs
(
dns
->
id
)));

112 
	`ems_buf„r_wrôe
(&
u£r
->
buf
, 
	`buf_rd
(&
£ss
->
buf_ö
), 
	`buf_Àn
(&sess->buf_in));

114 
	`fw_dns_push_fwd
(
fw
, 
u£r
);

115 
	`fw_dns_˛õ¡_£t_wrôe
(
fw
, 
EMS_YES
);

117  
EMS_OK
;

118 
	}
}

121 
ems_öt
 
	$fw_dns_ªque°
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
)

123 
sockÀn_t
 
Àn
;

124 
sockaddr_ö
 
‰om
;

125 
ªt
;

126 
ems_buf„r
 *
buf
 = &
£ss
->
buf_ö
;

128 
	`ems_as£π
(
fw
->
£ss_böd
 =
£ss
);

130 
Àn
 = (
‰om
);

131 
agaö
:

132 
ªt
 = 
	`ªcv‰om
(
	`ems_sock_fd
(&
£ss
->
sock
), 
	`buf_wr
(
buf
), 
	`buf_À·
(buf), 0,

133 (
sockaddr
 *)&
‰om
, &
Àn
);

135 i‡(
ªt
 <= 0) {

136  
EMS_OK
;

139 
	`ems_buf„r_£ek_wr
(
buf
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

141 
	`fw_dns_fwd
(
fw
, 
£ss
, &
‰om
);

143 
	`ems_buf„r_˛ór
(
buf
);

145 
agaö
;

147  
EMS_OK
;

148 
	}
}

150 
ems_öt
 
	$fw_dns_ª•⁄£
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
)

152 
dns_u£r
 *
u£r
 = 
NULL
;

153 
ems_queue
 *
p
, *
q
;

154 
ªt
;

155 
sockaddr_ö
 
‰om
;

157 
	`mem£t
(&
‰om
, 0, (from));

159 
	`ems_queue_f‹óch_ß„
(&
fw
->
out
, 
p
, 
q
) {

160 
u£r
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_u£r
, 
íåy
);

162 
	`ems_as£π
(
	`buf_Àn
(&
u£r
->
buf
) > 0);

164 
	`mem˝y
(&
‰om
.
sö_addr
, &
u£r
->
addr
, (user->addr));

165 
‰om
.
sö_p‹t
 = 
	`ht⁄s
(
u£r
->
p‹t
);

167 
ªt
 = 
	`£ndto
(
	`ems_sock_fd
(&
£ss
->
sock
),

168 
	`buf_rd
(&
u£r
->
buf
),

169 
	`buf_Àn
(&
u£r
->
buf
),

171 (
sockaddr
 *)&
‰om
,

172 (
sockaddr_ö
));

174 i‡(
ªt
 <= 0)

177 
	`ems_buf„r_˛ór
(&
u£r
->
buf
);

178 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

179 
	`dns_u£r_‰ì
(
u£r
);

182 i‡(
	`ems_queue_em±y
(&
fw
->
out
))

183 
	`fw_dns_£rvî_£t_wrôe
(
fw
, 
EMS_NO
);

185  
EMS_OK
;

186 
	}
}

188 
ems_void
 
	$fw_dns_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

190 
ems_fw
 *
fw
 = (ems_fw *)
	`£ss_cb¨g
(
£ss
);

192 i‡(
îr
) {

193 
	`ems_l_åa˚
("[fw] sîvî dn†î∏£ss: %d", 
	`ems_sock_fd
(&
£ss
->
sock
));

195 
	`fw_dns_£rvî_°›
(
fw
);

196 
	`fw_dns_be_£rvî
(
fw
);

200 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

201 
	`fw_dns_ªque°
(
fw
, 
£ss
);

204 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

205 
	`fw_dns_ª•⁄£
(
fw
, 
£ss
);

207 
	}
}

209 
ems_öt
 
	$fw_dns_be_£rvî
(
ems_fw
 *
fw
)

211 
ems_£ssi⁄
 *
£ss
;

213 i‡(!
fw
->
£ss_böd
)

214 
fw
->
£ss_böd
 = 
	`ems_£ssi⁄_√w
();

216 
£ss
 = 
fw
->
£ss_böd
;

218 i‡(
	`dns_böd
(
£ss
Ë!
EMS_OK
) {

219 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

220 
fw
->
£ss_böd
 = 
NULL
;

221  
EMS_ERR
;

224 
	`£ss_cb¨g_£t
(
£ss
, 
fw
);

225 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
fw_dns_evt_cb
);

228 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 10000, 
dns_scheduÀ_timeout_cb
);

230 
	`ems_l_åa˚
("[fw] dns server (%d) %s",

231 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

233  
EMS_OK
;

234 
	}
}

236 
ems_öt
 
	$fw_dns_£rvî_°›
(
ems_fw
 *
fw
)

238 i‡(
fw
->
£ss_böd
) {

239 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
fw
->
£ss_böd
);

240 
fw
->
£ss_böd
 = 
NULL
;

243  
EMS_OK
;

244 
	}
}

246 
ems_öt
 
	$fw_dns_£rvî_£t_wrôe
(
ems_fw
 *
fw
, 
ems_öt
 
wr
)

248 
ems_£ssi⁄
 *
£ss
 = 
fw
->
£ss_böd
;

249 
ems_öt
 
evt
 = 0;

251 
evt
 |
EMS_EVT_READ
;

252 i‡(
wr
)

253 
evt
 |
EMS_EVT_WRITE
;

255 
	`£ss_evít_£t
(
£ss
, 
evt
, 
fw_dns_evt_cb
);

257  
EMS_OK
;

258 
	}
}

260 
ems_öt
 
	$dns_£t_que°i⁄
(
ems_buf„r
 *
buf
, 
ems_cch¨
 *
uæ
)

262 
ems_cch¨
 *
p
, *
q
;

263 
ems_öt
 
Àn
 = 0;

265 *
uæ
) {

266 
q
 = 
uæ
;

267 
p
 = 
	`°rchr
(
q
, '.');

269 i‡(!
p
) {

270 
Àn
 = 
	`°æí
(
q
);

271 
	`ems_buf„r_wrôe
(
buf
, (
ems_cch¨
 *)&
Àn
, 1);

272 
	`ems_buf„r_wrôe
(
buf
, 
q
, 
Àn
);

276 i‡(
p
) {

277 
uæ
 = 
p
 + 1;

279 
Àn
 = 
	`abs
(
p
 - 
q
);

280 
	`ems_buf„r_wrôe
(
buf
, (
ems_cch¨
 *)&
Àn
, 1);

281 
	`ems_buf„r_wrôe
(
buf
, 
q
, 
Àn
);

285 
Àn
 = 0;

286 
	`ems_buf„r_wrôe
(
buf
, (
ems_cch¨
 *)&
Àn
, 1);

288  
EMS_OK
;

289 
	}
}

291 
ems_öt
 
	$fw_dns_¸óã_u£r
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
, 
ems_sh‹t
 
id
)

293 
dns_hódî
 *
dns
 = 
NULL
;

294 
dns_u£r
 *
u£r
 = 
NULL
;

295 
ems_sh‹t
 
tmp
 = 0;

297 
u£r
 = 
	`dns_u£r_√w
();

298 i‡(!
u£r
)

299  
EMS_ERR
;

301 
dns
 = (
dns_hódî
 *)
	`buf_rd
(&
u£r
->
buf
);

303 
	`ems_Êag_£t
(
u£r
->
Êg
, 
FLG_DNS_QUERY_SELF
);

305 
u£r
->
addr
.
s_addr
 = 
	`öë_addr
("127.0.0.1");

306 
u£r
->
p‹t
 = 0;

308 
dns
->
id
 = 
	`ht⁄s
(id);

309 
dns
->
Êg
 = 
	`ht⁄s
(0x0100);

310 
dns
->
qdcou¡
 = 
	`ht⁄s
(0x0001);

311 
dns
->
™cou¡
 = 
	`ht⁄s
(0);

312 
dns
->
nscou¡
 = 
	`ht⁄s
(0);

313 
dns
->
¨cou¡
 = 
	`ht⁄s
(0);

315 
	`ems_buf„r_£ek_wr
(&
u£r
->
buf
, (
dns_hódî
), 
EMS_BUFFER_SEEK_CUR
);

317 
	`dns_£t_que°i⁄
(&
u£r
->
buf
, 
	`°r_ãxt
(&
uæ
->url));

318 
tmp
 = 
	`ht⁄s
(0x0001);

319 
	`ems_buf„r_wrôe
(&
u£r
->
buf
, (
ems_cch¨
 *)&
tmp
, (tmp));

320 
	`ems_buf„r_wrôe
(&
u£r
->
buf
, (
ems_cch¨
 *)&
tmp
, (tmp));

322 
	`ems_l_åa˚
("dn†åigî quîy: %s", 
	`°r_ãxt
(&
uæ
->url));

324 
	`ems_hash_fd_£t_key
(&
u£r
->
h_msg
, 
	`ems_hash_key
(0xfff‡& 
	`¡ohs
(
dns
->
id
)));

326 
	`fw_dns_push_fwd
(
fw
, 
u£r
);

328  
EMS_OK
;

329 
	}
}

331 
ems_öt
 
	$fw_dns_uæ_öfo_u±
(
dns_uæ
 *
uæ
)

333 
ems_ch¨
 
buf
[512];

334 
ems_cch¨
 *
addr
, *
mask
;

336 
addr
 = 
	`°r_ãxt
(&
uæ
->url);

338 
mask
 = 
	`°rchr
(
addr
, '/');

339 i‡(
mask
) {

340 
mask
++;

342 i‡(*
mask
) {

343 
ems_öt
 
Àn
 = 
	`abs
(
mask
 - 
addr
) - 1;

344 i‡(
Àn
 >(
buf
))

345 
Àn
 = (
buf
) - 1;

347 
	`mem£t
(
buf
, 0, (buf));

348 
	`mem˝y
(
buf
, 
addr
, 
Àn
);

350 
	`ems_l_åa˚
("upd©êaddªss: %†--> %s, mask(%s)", 
addr
, 
buf
, 
mask
);

352 
uæ
->
mask
 = 
	`ems_©oi
(mask);

353 i‡(
uæ
->
mask
 < 0 || url->mask > 32) {

354 
	`ems_l_åa˚
("övÆidÇëmask: %d", 
uæ
->
mask
);

355  
EMS_ERR
;

358 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
);

359 
	`°r_£t
(&
uæ
->uæ, 
buf
);

363  
EMS_OK
;

364 
	}
}

366 
ems_öt
 
	$fw_dns_quîy_åigî
(
ems_fw
 *
fw
)

368 
dns_uæ
 *
uæ
 = 
NULL
;

369 
ems_queue
 *
p
;

370 
ö_addr
 
addr
;

371 
ems_sh‹t
 
id
;

372 
id
 = 
	`ønd
() % 35000;

374 
	`ems_queue_f‹óch
(&
fw
->
whôñi°
, 
p
) {

375 
uæ
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_uæ
, 
íåy
);

377 i‡(
	`ems_Êag_like
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
))

380 i‡(
uæ
->
addr
) {

381 i‡(
	`ems_Êag_u∆ike
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
)) {

382 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_DNS_QUERY_EXPIRED
);

386 i‡(
	`fw_dns_uæ_öfo_u±
(
uæ
Ë!
EMS_OK
)

389 
addr
.
s_addr
 = 
	`öë_addr
(
	`°r_ãxt
(&
uæ
->url));

390 i‡(
addr
.
s_addr
 =
INADDR_NONE
) {

391 i‡(
	`ems_Êag_u∆ike
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
)) {

392 
	`fw_dns_¸óã_u£r
(
fw
, 
uæ
, 
id
++);

395 
uæ
->
addr
 = (
ö_addr
 *)
	`ems_mÆloc
((addr));

396 i‡(
uæ
->
addr
) {

397 
	`mem˝y
(
uæ
->
addr
, &addr, (addr));

398 
uæ
->
n_addr
 = 1;

399 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
);

400 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_YES
);

406 
	`ems_queue_f‹óch
(&
fw
->
subdomaö
, 
p
) {

407 
uæ
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_uæ
, 
íåy
);

408 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_DNS_QUERY_EXPIRED
);

411 i‡(!
	`ems_queue_em±y
(&
fw
->
fwd
))

412 
	`fw_dns_˛õ¡_£t_wrôe
(
fw
, 
EMS_YES
);

414  
EMS_OK
;

415 
	}
}

418 
ems_öt
 
	$fw_dns_subdomaö_≠≥nd
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
)

420 
	`ems_l_åa˚
("dn†≠≥nd uæ: %s", 
	`°r_ãxt
(&
uæ
->url));

422 
	`ems_Êag_£t
(
uæ
->
Êg
, 
FLG_DNS_IS_SUBDOMAIN
);

423 
	`ems_hash_fd_£t_key
(&
uæ
->
h_uæ
, 
	`°r_ãxt
(&url->url));

424 
	`ems_hash_ö£π
(&
fw
->
hash_uæ
, &
uæ
->
h_uæ
);

426 
fw
->
n_subdomaö
++;

427 
	`ems_queue_ö£π_èû
(&
fw
->
subdomaö
, &
uæ
->
íåy
);

429 i‡(
fw
->
n_subdomaö
 > 
MAX_SUB_DOMAIN
) {

430 
fw
->
n_subdomaö
--;

432 
uæ
 = 
	`ems_c⁄èöî_of
(
	`ems_queue_hód
(&
fw
->
subdomaö
), 
dns_uæ
, 
íåy
);

433 
	`ems_queue_ªmove
(&
uæ
->
íåy
);

434 
	`ems_hash_ªmove
(&
uæ
->
h_uæ
);

435 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_NO
);

436 
	`ems_l_åa˚
("dn†LRUÅrigîÑemovêuæ: %s", 
	`°r_ãxt
(&
uæ
->url));

437 
	`dns_uæ_‰ì
(
uæ
);

440  
EMS_OK
;

441 
	}
}

443 
ems_öt
 
	$fw_dns_is_subdomaö
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
)

445 
dns_uæ
 *
uæ
;

446 
ems_queue
 *
p
;

448 
	`ems_queue_f‹óch
(&
fw
->
whôñi°
, 
p
) {

449 
uæ
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_uæ
, 
íåy
);

451 i‡(
	`ems_Êag_like
(
uæ
->
Êg
, 
FLG_URL_IS_IPADDRESS
Ë|| uæ->
n_addr
 <= 0)

456 i‡(
	`°r°r
(
key
, 
	`°r_ãxt
(&
uæ
->url)))

457  
EMS_YES
;

460  
EMS_NO
;

461 
	}
}

464 
ems_öt
 
	$fw_uæ_ö_whôñi°
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
)

466 
dns_uæ
 *
uæ
 = 
NULL
;

468 
addröfo
 *
ªs
, 
höt
, *
cur
;

469 
ems_öt
 
n_addr
, 
i
;

472 
uæ
 = 
	`dns_föd_uæ
(
fw
, 
key
);

473 i‡(
uæ
) {

474 i‡(
	`ems_Êag_like
(
uæ
->
Êg
, 
FLG_DNS_IS_SUBDOMAIN
)) {

476 
	`ems_queue_ªmove
(&
uæ
->
íåy
);

477 
	`ems_queue_ö£π_èû
(&
fw
->
subdomaö
, &
uæ
->
íåy
);

479  
EMS_YES
;

482  
EMS_NO
;

485 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
) &&

486 
	`fw_dns_is_subdomaö
(
fw
, 
key
))

488 
uæ
 = 
	`dns_uæ_√w
();

489 i‡(!
uæ
)

490  
EMS_NO
;

492 
	`°r_£t
(&
uæ
->uæ, 
key
);

493 
	`fw_dns_subdomaö_≠≥nd
(
fw
, 
uæ
);

496 
	`fw_dns_¸óã_u£r
(
fw
, 
uæ
, 
	`ønd
()%65535);

497 
	`fw_dns_˛õ¡_£t_wrôe
(
fw
, 
EMS_YES
);

500 
	`mem£t
(&
höt
, 0, (hint));

502 
höt
.
ai_Ámûy
 = 
AF_INET
;

503 
höt
.
ai_sockty≥
 = 
SOCK_DGRAM
 | 
SOCK_STREAM
;

504 
höt
.
ai_Êags
 = 
AI_PASSIVE
;

506 i‡(
	`gëaddröfo
(
	`°r_ãxt
(&
uæ
->uæ), 
NULL
, &
höt
, &
ªs
))

507  
EMS_NO
;

509 
n_addr
 = 0;

510 
cur
 = 
ªs
; cu∏!
NULL
; cu∏cur->
ai_√xt
)

511 
n_addr
++;

513 
uæ
->
addr
 =(
ö_addr
 *)
	`ems_mÆloc
((ö_addrË* 
n_addr
);

514 i‡(!
uæ
->
addr
) {

515 
	`‰ìaddröfo
(
ªs
);

516  
EMS_NO
;

519 
uæ
->
n_addr
 =Ç_addr;

521 
i
 = 0;

522 
cur
 = 
ªs
; cu∏!
NULL
; cu∏cur->
ai_√xt
)

524 
	`mem˝y
–&
uæ
->
addr
[
i
],

525 &((
sockaddr_ö
 *)(
cur
->
ai_addr
))->
sö_addr
,

526 (
ö_addr
));

527 
i
++;

530 
	`‰ìaddröfo
(
ªs
);

531 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_YES
);

533  
EMS_YES
;

536  
EMS_NO
;

537 
	}
}

	@src/core/ems_dns.h

2 #i‚de‡
EMS_CLIENT_DNS_INTERCEPT_HEADER__


3 
	#EMS_CLIENT_DNS_INTERCEPT_HEADER__


	)

5 #¥agm®
∑ck
(
push
, 1)

6 
	s_dns_hódî_s
 {

7 
ems_sh‹t
 
	mid
;

9 
ems_sh‹t
 
	mÊg
;

11 
	#DNS_QR
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x8000Ë>> 15)

	)

12 
	#DNS_OPCODE
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x7800Ë>> 11)

	)

13 
	#DNS_AA
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x0400Ë>> 10)

	)

14 
	#DNS_TC
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x0200Ë>> 9)

	)

15 
	#DNS_RD
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x0100Ë>> 8)

	)

16 
	#DNS_RA
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x0080Ë>> 7)

	)

17 
	#DNS_Z
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x0070Ë>> 4)

	)

18 
	#DNS_RCODE
(
hdr
Ë((
	`¡ohs
((hdr)->
Êg
Ë& 0x000fË>> 0)

	)

20 
ems_sh‹t
 
	mqdcou¡
;

21 
ems_sh‹t
 
	m™cou¡
;

22 
ems_sh‹t
 
	mnscou¡
;

23 
ems_sh‹t
 
	m¨cou¡
;

26 
	s_dns_ôem_s
 {

27 
ems_sh‹t
 
	mty
;

28 
ems_sh‹t
 
	m˛s
;

29 
ems_uöt
 
	mâl
;

30 
ems_sh‹t
 
	mÀn
;

31 
ems_uch¨
 
	mbuf
[0];

34 #¥agm®
∑ck
(
p›
)

36 
	s_dns_que°i⁄_s
 {

37 
ems_sh‹t
 
	mqty≥
;

38 
ems_sh‹t
 
	mq˛ass
;

39 
ems_°r
 
	mq«me
;

42 
	s_dns_º_s
 {

43 
ems_sh‹t
 
	m±r
;

44 
ems_°r
 
	mnick
;

45 
_dns_ôem_s
 
	môem
;

48 
	s_dns_u£r_s
 {

49 
ems_hash_fd
 
	mh_msg
;

50 
ems_timeout
 
	mto
;

51 
ems_uöt
 
	mÊg
;

52 
ems_öt
 
	mp‹t
;

53 
ö_addr
 
	maddr
;

54 
ems_buf„r
 
	mbuf
;

56 
ems_void
 *
	m˘x
;

57 
ems_queue
 
	míåy
;

60 
	s_dns_uæ_s
 {

61 
ems_hash_fd
 
	mh_uæ
;

62 
ems_uöt
 
	mÊg
;

63 
ems_°r
 
	muæ
;

64 
ems_öt
 
	mn_addr
;

65 
ö_addr
 *
	maddr
;

66 
ems_öt
 
	mmask
;

68 
ems_queue
 
	míåy
;

71 
	#FLG_URL_IS_IPADDRESS
 0x0001

	)

72 
	#FLG_DNS_QUERY_SELF
 0x0002

	)

73 
	#FLG_DNS_QUERY_EXPIRED
 0x0004

	)

74 
	#FLG_DNS_IS_SUBDOMAIN
 0x0008

	)

76 
ems_öt
 
fw_dns_be_£rvî
(
ems_fw
 *
fw
);

77 
ems_öt
 
fw_dns_£rvî_°›
(
ems_fw
 *
fw
);

78 
ems_öt
 
fw_dns_˛õ¡_°›
(
ems_fw
 *
fw
);

79 
ems_öt
 
fw_dns_be_˛õ¡
(
ems_fw
 *
fw
);

81 
ems_öt
 
fw_dns_˛õ¡_£t_ªad
(
ems_fw
 *
fw
,Éms_öà
rd
);

82 
ems_öt
 
fw_dns_˛õ¡_£t_wrôe
(
ems_fw
 *
fw
,Éms_öà
wr
);

83 
ems_öt
 
fw_dns_£rvî_£t_ªad
(
ems_fw
 *
fw
,Éms_öà
rd
);

84 
ems_öt
 
fw_dns_£rvî_£t_wrôe
(
ems_fw
 *
fw
,Éms_öà
wr
);

86 
dns_u£r
 *
dns_föd_u£r
(
ems_fw
 *
fw
, 
ems_sh‹t
 
key
);

87 
dns_u£r
 *
dns_u£r_√w
();

88 
ems_void
 
dns_u£r_‰ì
(
dns_u£r
 *
u£r
);

90 
dns_uæ
 *
dns_uæ_√w
();

91 
ems_void
 
dns_uæ_‰ì
(
dns_uæ
 *
uæ
);

92 
dns_uæ
 *
dns_föd_uæ
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
);

94 
ems_öt
 
fw_dns_quîy_åigî
(
ems_fw
 *
fw
);

95 
ems_öt
 
fw_uæ_ö_whôñi°
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
);

96 
ems_öt
 
fw_dns_is_subdomaö
(
ems_fw
 *
fw
, 
ems_cch¨
 *
key
);

97 
ems_öt
 
fw_dns_subdomaö_≠≥nd
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
);

	@src/core/ems_dns_fwd.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_fw.h
"

5 
	~"ems_dns.h
"

7 
ems_öt
 
	$dns_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

9 
fd
;

10 
sockaddr_ö
 
addr
;

11 
ems_sock
 *
sock
 = &
£ss
->sock;

13 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) == -1)

15 
	`ems_l_åa˚
("[dns]sockëÉº: %s", 
	`ems_œ°îrmsg
());

16  
EMS_ERR
;

19 
	`mem£t
(&
addr
, 0, (addr));

20 
addr
.
sö_Ámûy
 = 
AF_INET
;

21 
addr
.
sö_p‹t
 = 
	`ht⁄s
(53);

22 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("127.0.0.1");

24 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, (
sockaddr_ö
))) {

25 
	`ems_l_åa˚
("[dns] connect failed");

26 
	`˛o£
(
fd
);

27  
EMS_ERR
;

30 
	`ems_sock_£èddr
(
sock
, "127.0.0.1");

31 
	`ems_sock_£tfd
(
sock
, 
fd
);

32  
EMS_OK
;

33 
	}
}

35 
ems_cch¨
 *
	$dns_gë_«me
(
ems_cch¨
 *
∑ylﬂd
,Éms_cch¨ *
r•
, 
ems_ch¨
 *
«me
)

37 
ems_uch¨
 
Àn
;

38 
ems_sh‹t
 
off£t
;

40 
Àn
 = *
∑ylﬂd
++;

42 
Àn
 > 0) {

43 i‡(
Àn
 & 0xc0) {

45 
ems_uch¨
 
low
 = *
∑ylﬂd
++;

46 
off£t
 = ((
Àn
 & 0x03Ë<< 8 | (
low
 & 0xff));

47 
	`dns_gë_«me
(
r•
 + 
off£t
,Ñ•, 
«me
);

48 
Àn
 = 0;

50 
	`mem˝y
(
«me
, 
∑ylﬂd
, 
Àn
);

52 
«me
 +
Àn
;

53 
∑ylﬂd
 +
Àn
;

55 
Àn
 = *
∑ylﬂd
++;

56 i‡(
Àn
 > 0)

57 *
«me
++ = '.';

61  
∑ylﬂd
;

62 
	}
}

64 
ems_cch¨
 *
	$dns_gë_sh‹t
(
ems_cch¨
 *
∑ylﬂd
, 
ems_sh‹t
 *
n
)

66 *
n
 = 
	`¡ohs
(*(
ems_sh‹t
 *)
∑ylﬂd
);

67 
∑ylﬂd
 +(
ems_sh‹t
);

68  
∑ylﬂd
;

69 
	}
}

72 
ems_cch¨
 *
	$dns_gë_öt
(
ems_cch¨
 *
∑ylﬂd
, 
ems_öt
 *
n
)

74 *
n
 = 
	`¡ohl
(*(
ems_öt
 *)
∑ylﬂd
);

75 
∑ylﬂd
 +(
ems_öt
);

76  
∑ylﬂd
;

77 
	}
}

80 
ems_cch¨
 *

81 
	$fw_dns_gë_que°i⁄
(
ems_cch¨
 *
∑ylﬂd
,Éms_cch¨ *
r•
, 
dns_que°i⁄
 *
qu°
)

83 
ems_ch¨
 
uæ
[512];

85 
	`mem£t
(
uæ
, 0, (url));

87 
∑ylﬂd
 = 
	`dns_gë_«me
’aylﬂd, 
r•
, 
uæ
);

90 
	`°r_£t
(&
qu°
->
q«me
, 
uæ
);

92 
∑ylﬂd
 = 
	`dns_gë_sh‹t
’aylﬂd, &
qu°
->
qty≥
);

93 
∑ylﬂd
 = 
	`dns_gë_sh‹t
’aylﬂd, &
qu°
->
q˛ass
);

95  
∑ylﬂd
;

96 
	}
}

98 
ems_öt


99 
	$dns_gë_Æl_addªss
(
ems_cch¨
 *
∑ylﬂd
,Éms_cch¨ *
r•
, 
ö_addr
 *
addr
, 
ems_öt
 *
n_addr
)

101 
ems_ch¨
 
uæ
[512];

102 
dns_ôem
 *
ôm
;

103 
ems_öt
 
tŸÆ
 = *
n_addr
;

105 *
n_addr
 = 0;

107 
tŸÆ
 > 0) {

108 
tŸÆ
--;

110 
	`mem£t
(
uæ
, 0, (url));

112 
∑ylﬂd
 = 
	`dns_gë_«me
’aylﬂd, 
r•
, 
uæ
);

113 
	`ems_l_åa˚
("dn†«me: %†tŸÆ: %d", 
uæ
, 
tŸÆ
);

115 
ôm
 = (
dns_ôem
 *)
∑ylﬂd
;

117 i‡(
	`¡ohs
(
ôm
->
ty
Ë=1 &&Çtohs(ôm->
˛s
) == 1) {

118 
	`ems_as£π
(
	`¡ohs
(
ôm
->
Àn
) == 4);

119 
	`mem˝y
(&
addr
[*
n_addr
], 
ôm
->
buf
, 4);

121 
	`ems_l_åa˚
("A : %s", 
	`öë_¡ﬂ
(
addr
[*
n_addr
]));

123 *
n_addr
 = *n_addr +1;

126 
∑ylﬂd
 +(
dns_ôem
Ë+ 
	`¡ohs
(
ôm
->
Àn
);

129  
EMS_OK
;

130 
	}
}

132 
ems_öt
 
	$dns_addr_exi°
(
dns_uæ
 *
uæ
, 
ö_addr
 
ù
)

134 
ems_öt
 
i
;

136 i‡(!
uæ
 || !uæ->
addr
)

137  
EMS_NO
;

139 
i
 = 0; i < 
uæ
->
n_addr
; i++) {

140 i‡(
uæ
->
addr
[
i
].
s_addr
 =
ù
.s_addr)

141  
EMS_YES
;

144  
EMS_NO
;

145 
	}
}

147 
ems_öt


148 
	$dns_≠∂y_√w_addªsss
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
, 
ö_addr
 *
addr
, 
ems_öt
 
n_addr
)

150 
ems_öt
 
i
;

152 
	`ems_as£π
(
n_addr
 > 0 && 
addr
 !
NULL
);

155 i‡(
n_addr
 !
uæ
->n_addr) ;

157 
i
 = 0; i < 
n_addr
; i++) {

158 i‡(!
	`dns_addr_exi°
(
uæ
, 
addr
[
i
]))

159 
do_≠∂y
;

162  
EMS_OK
;

165 
do_≠∂y
:

166 
	`ems_l_åa˚
("dn†addªss: %†upd©ed", 
	`°r_ãxt
(&
uæ
->url));

168 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_NO
);

170 i‡(
uæ
->
addr
) {

171 
	`ems_‰ì
(
uæ
->
addr
);

172 
uæ
->
addr
 = 
NULL
;

173 
uæ
->
n_addr
 = 0;

176 i‡(
n_addr
 > 0 && 
addr
){

177 
ems_öt
 
tŸÆ
;

179 
tŸÆ
 = 
n_addr
 * (
ö_addr
);

181 
uæ
->
addr
 = (
ö_addr
 *)
	`ems_mÆloc
(
tŸÆ
);

182 i‡(
uæ
->
addr
) {

183 
	`mem˝y
(
uæ
->
addr
,áddr, 
tŸÆ
);

184 
uæ
->
n_addr
 =Ç_addr;

185 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_YES
);

189  
EMS_OK
;

190 
	}
}

192 
ems_öt


193 
	$dns_upd©e_uæ_addr
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
,

194 
ems_cch¨
 *
∑ylﬂd
, 
dns_hódî
 *
dns
,Éms_cch¨ *
r•
)

196 
ö_addr
 *
addr
 = 
NULL
;

197 
ems_öt
 
n_addr
 = 0;

199 
n_addr
 = 
	`¡ohs
(
dns
->
™cou¡
Ë+Çtohs(dns->
nscou¡
Ë+Çtohs(dns->
¨cou¡
);

200 
	`ems_as£π
(
n_addr
 > 0 && "never should be here");

202 
addr
 = (
ö_addr
 *)
	`ems_mÆloc
(
n_addr
 * (in_addr));

203 i‡(!
addr
)

204  
EMS_ERR
;

206 
	`ems_l_åa˚
("cuºíàaddr: %s,ÅŸÆÇ: %d", 
	`°r_ãxt
(&
uæ
->uæ), 
n_addr
);

208 
	`dns_gë_Æl_addªss
(
∑ylﬂd
, 
r•
, 
addr
, &
n_addr
);

210 i‡(
n_addr
 > 0)

211 
	`dns_≠∂y_√w_addªsss
(
fw
, 
uæ
, 
addr
, 
n_addr
);

213 
	`ems_Êag_un£t
(
uæ
->
Êg
, 
FLG_DNS_QUERY_EXPIRED
);

215 
	`ems_‰ì
(
addr
);

217  
EMS_OK
;

218 
	}
}

220 
ems_öt


221 
	$fw_dns_∑r£_™d_fûãr
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
, 
dns_u£r
 *
u£r
, 
dns_hódî
 *
dns
)

223 
ems_buf„r
 *
buf
 = &
£ss
->
buf_ö
;

224 
ems_cch¨
 *
∑ylﬂd
;

225 
dns_que°i⁄
 
qu°
;

226 
dns_uæ
 *
uæ
 = 
NULL
;

228 
	`mem£t
(&
qu°
, 0, (qust));

230 
	`°r_öô
(&
qu°
.
q«me
);

232 
∑ylﬂd
 = 
	`buf_rd
(
buf
Ë+ (
dns_hódî
);

233 
∑ylﬂd
 = 
	`fw_dns_gë_que°i⁄
’aylﬂd, 
	`buf_rd
(
buf
), &
qu°
);

235 
	`ems_l_åa˚
("question: %s, class: 0x%x,Åype: 0x%x",

236 
	`°r_ãxt
(&
qu°
.
q«me
), qu°.
qty≥
, qu°.
q˛ass
);

238 
uæ
 = 
	`dns_föd_uæ
(
fw
, 
	`°r_ãxt
(&
qu°
.
q«me
));

240 i‡(
uæ
) {

241 i‡(
uæ
->
n_addr
 <= 0 ||

242 
	`ems_Êag_like
(
uæ
->
Êg
, 
FLG_DNS_QUERY_EXPIRED
) ||

243 
	`ems_Êag_like
(
u£r
->
Êg
, 
FLG_DNS_QUERY_SELF
))

245 
	`dns_upd©e_uæ_addr
(
fw
, 
uæ
, 
∑ylﬂd
, 
dns
, 
	`buf_rd
(
buf
));

248 i‡(
	`ems_Êag_like
(
uæ
->
Êg
, 
FLG_DNS_IS_SUBDOMAIN
)) {

250 
	`ems_queue_ªmove
(&
uæ
->
íåy
);

251 
	`ems_queue_ö£π_èû
(&
fw
->
subdomaö
, &
uæ
->
íåy
);

254 i‡(
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_SUBDOMAIN_ENABLE
) &&

255 
	`fw_dns_is_subdomaö
(
fw
, 
	`°r_ãxt
(&
qu°
.
q«me
))) {

256 
uæ
 = 
	`dns_uæ_√w
();

257 i‡(
uæ
) {

258 
	`°r_£t
(&
uæ
->uæ, 
	`°r_ãxt
(&
qu°
.
q«me
));

259 
	`fw_dns_subdomaö_≠≥nd
(
fw
, 
uæ
);

260 
	`dns_upd©e_uæ_addr
(
fw
, 
uæ
, 
∑ylﬂd
, 
dns
, 
	`buf_rd
(
buf
));

265 
	`°r_unöô
(&
qu°
.
q«me
);

267  
EMS_OK
;

268 
	}
}

270 
ems_öt
 
	$fw_dns_fwd_fûãr
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
)

272 
dns_hódî
 *
dns
 = 
NULL
;

273 
dns_u£r
 *
u£r
 = 
NULL
;

275 
	`ems_l_åa˚
("DNSÑe•⁄£,Üígth: %d", 
	`buf_Àn
(&
£ss
->
buf_ö
));

277 
dns
 = (
dns_hódî
 *)
	`buf_rd
(&
£ss
->
buf_ö
);

278 
	`ems_as£π
(
	`DNS_QR
(
dns
) && "must beáÑesponse");

280 
u£r
 = 
	`dns_föd_u£r
(
fw
, 
	`¡ohs
(
dns
->
id
));

281 i‡(
u£r
) {

282 
	`ems_l_åa˚
("u£∏(%s:%dËdn†ª∂õd", 
	`öë_¡ﬂ
(
u£r
->
addr
), u£r->
p‹t
);

284 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

285 
	`ems_timeout_ˇn˚l
(&
u£r
->
to
);

286 
	`ems_hash_ªmove
(&
u£r
->
h_msg
);

288 
	`ems_buf„r_˛ór
(&
u£r
->
buf
);

289 
	`ems_buf„r_wrôe
(&
u£r
->
buf
, 
	`buf_rd
(&
£ss
->
buf_ö
), 
	`buf_Àn
(&sess->buf_in));

291 i‡((
	`DNS_RCODE
(
dns
Ë=0Ë&& (
	`¡ohs
(dns->
qdcou¡
) > 0)) {

292 i‡–
	`¡ohs
(
dns
->
™cou¡
) > 0

298 
	`fw_dns_∑r£_™d_fûãr
(
fw
, 
£ss
, 
u£r
, 
dns
);

302 i‡(
	`ems_Êag_like
(
u£r
->
Êg
, 
FLG_DNS_QUERY_SELF
)) {

303 
	`dns_u£r_‰ì
(
u£r
);

304  
EMS_OK
;

307 
	`ems_queue_ö£π_èû
(&
fw
->
out
, &
u£r
->
íåy
);

308 
	`fw_dns_£rvî_£t_wrôe
(
fw
, 
EMS_YES
);

311  
EMS_OK
;

312 
	}
}

314 
ems_öt
 
	$fw_dns_fwd_r•
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
)

316 
ems_öt
 
ªt
;

317 
ems_ch¨
 *
wr
 = 
	`buf_wr
(&
£ss
->
buf_ö
);

318 
ems_öt
 
Àn
 = 
	`buf_À·
(&
£ss
->
buf_ö
);

320 
agaö
:

321 
ªt
 = 
	`ªcv
(
	`ems_sock_fd
(&
£ss
->
sock
), 
wr
, 
Àn
, 0);

323 i‡(
ªt
 <= 0) {

324 
î∫o
) {

326 
EAGAIN
:

327 
EINTR
:

328  
EMS_OK
;

331 
	`ems_l_åa˚
("[fw] fwÉº‹: %s", 
	`ems_œ°îrmsg
());

332  
EMS_ERR
;

336 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_ö
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

338 
ªt
 = 
	`fw_dns_fwd_fûãr
(
fw
, 
£ss
);

340 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

342 
agaö
;

344  
EMS_OK
;

345 
	}
}

347 
ems_öt
 
	$fw_dns_fwd_ªq
(
ems_fw
 *
fw
, 
ems_£ssi⁄
 *
£ss
)

349 
dns_u£r
 *
u£r
 = 
NULL
;

350 
ems_queue
 *
p
, *
q
;

351 
ems_öt
 
ªt
;

353 
	`ems_queue_f‹óch_ß„
(&
fw
->
fwd
, 
p
, 
q
) {

354 
u£r
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_u£r
, 
íåy
);

356 
	`ems_as£π
(
	`buf_Àn
(&
u£r
->
buf
) > 0);

357 
ªt
 = 
	`£nd
(
	`ems_sock_fd
(&
£ss
->
sock
), 
	`buf_rd
(&
u£r
->
buf
), 
	`buf_Àn
(&user->buf), 0);

358 i‡(
ªt
 <= 0) {

362 
	`ems_buf„r_˛ór
(&
u£r
->
buf
);

363 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

364 
	`ems_queue_ö£π_èû
(&
fw
->
waô
, &
u£r
->
íåy
);

367 i‡(!
	`ems_queue_em±y
(&
fw
->
waô
))

368 
	`fw_dns_˛õ¡_£t_ªad
(
fw
, 
EMS_YES
);

370 i‡(
	`ems_queue_em±y
(&
fw
->
fwd
))

371 
	`fw_dns_˛õ¡_£t_wrôe
(
fw
, 
EMS_NO
);

373  
EMS_OK
;

374 
	}
}

376 
ems_void
 
	$fw_dns_fwd_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

378 
ems_fw
 *
fw
 = (ems_fw *)
	`£ss_cb¨g
(
£ss
);

380 i‡(
îr
) {

381 
	`ems_l_åa˚
("[fw] clõ¡ dn†î∏£ss: %d", 
	`ems_sock_fd
(&
£ss
->
sock
));

383 
	`fw_dns_˛õ¡_°›
(
fw
);

384 
	`fw_dns_be_˛õ¡
(
fw
);

388 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

389 
	`fw_dns_fwd_r•
(
fw
, 
£ss
);

392 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

393 
	`fw_dns_fwd_ªq
(
fw
, 
£ss
);

395 
	}
}

397 
ems_öt
 
	$fw_dns_be_˛õ¡
(
ems_fw
 *
fw
)

399 
ems_£ssi⁄
 *
£ss
;

401 i‡(!
fw
->
£ss_dns
)

402 
fw
->
£ss_dns
 = 
	`ems_£ssi⁄_√w
();

404 
	`ems_as£π
(
fw
->
£ss_dns
 !
NULL
);

405 
£ss
 = 
fw
->
£ss_dns
;

407 i‡(
	`dns_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

408 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

409 
fw
->
£ss_dns
 = 
NULL
;

410  
EMS_ERR
;

413 
	`£ss_cb¨g_£t
(
£ss
, 
fw
);

414 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
fw_dns_fwd_evt_cb
);

416 
	`ems_l_åa˚
("[fw] dns client (%d) %s",

417 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

419  
EMS_OK
;

420 
	}
}

422 
ems_öt
 
	$fw_dns_˛õ¡_°›
(
ems_fw
 *
fw
)

424 i‡(
fw
->
£ss_dns
) {

425 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
fw
->
£ss_dns
);

426 
fw
->
£ss_dns
 = 
NULL
;

429  
EMS_OK
;

430 
	}
}

432 
ems_öt
 
	$fw_dns_˛õ¡_£t_ªad
(
ems_fw
 *
fw
, 
ems_öt
 
rd
)

434 
ems_£ssi⁄
 *
£ss
 = 
fw
->
£ss_dns
;

435 
ems_öt
 
evt
;

437 
evt
 = 0;

438 
	`£ss_evít_ˇn˚l
(
£ss
);

439 i‡(
rd
)

440 
evt
 |
EMS_EVT_READ
;

442 i‡(!
	`ems_queue_em±y
(&
fw
->
fwd
))

443 
evt
 |
EMS_EVT_WRITE
;

445 i‡(
evt
)

446 
	`£ss_evít_£t
(
£ss
, 
evt
, 
fw_dns_fwd_evt_cb
);

448  
EMS_OK
;

449 
	}
}

451 
ems_öt
 
	$fw_dns_˛õ¡_£t_wrôe
(
ems_fw
 *
fw
, 
ems_öt
 
wr
)

453 
ems_£ssi⁄
 *
£ss
 = 
fw
->
£ss_dns
;

454 
ems_öt
 
evt
;

456 
evt
 = 0;

457 
	`£ss_evít_ˇn˚l
(
£ss
);

458 i‡(
wr
)

459 
evt
 |
EMS_EVT_WRITE
;

461 i‡(!
	`ems_queue_em±y
(&
fw
->
waô
))

462 
evt
 |
EMS_EVT_READ
;

464 i‡(
evt
)

465 
	`£ss_evít_£t
(
£ss
, 
evt
, 
fw_dns_fwd_evt_cb
);

467  
EMS_OK
;

468 
	}
}

	@src/core/ems_fw.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"ems_fw.h
"

5 
	~"ems_dns.h
"

6 
	~"≠p.h
"

10 
	#C_TABLE_NAT
 "«t"

	)

11 
	#LOCUS
 "locus_"

	)

12 
	#LOCUS_PRE
 
LOCUS
 "¥e_"

	)

13 
	#c_«t_fw_¥e
 
LOCUS_PRE
 "«t"

	)

14 
	#c_mac_bœck
 
LOCUS_PRE
 "mac_bœck"

	)

15 
	#c_mac_whôe
 
LOCUS_PRE
 "mac_whôe"

	)

16 
	#c_sy°em_deÁu…
 
LOCUS_PRE
 "sy°em_def"

	)

17 
	#c_u£r_whôe
 
LOCUS_PRE
 "u£r_whôe"

	)

18 
	#c_uæ_whôe
 
LOCUS_PRE
 "whôñi°"

	)

20 
	#C_TABLE_FILTER
 "fûãr"

	)

21 
	#c_fûãr_fwd
 
LOCUS
 "fûãr_fwd"

	)

23 
	#RET_ERR_FAILED
(
A
Ëi‡((AË!0Ë 
EMS_ERR


	)

25 
ems_öt
 
	$fw_¸óã_™d_ö£π
(
ems_ch¨
 *
chaö
,Éms_ch¨ *
u∂ök
, 
ems_cch¨
 *
tb
, 
ems_öt
 
hód
)

27 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

29 
	`ems_buf„r_˛ór
(
buf
);

31 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-N %s", 
tb
, 
chaö
);

32 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

34 i‡(
hód
)

35 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-I %†-j %s", 
tb
, 
u∂ök
, 
chaö
);

37 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-A %†-j %s", 
tb
, 
u∂ök
, 
chaö
);

39 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

41  
EMS_OK
;

42 
	}
}

44 
ems_öt
 
	$fw_≠∂y_deÁu…s
()

46 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

48 
ems_cch¨
 *
gw
 = 
	`c‹e_gw_addr
();

49 
ems_cch¨
 *
i‚ame
 = 
	`c‹e_gw_i‚ame
();

51 i‡(!
gw
) {

52 
	`ems_as£π
(0 && "shouldÇever be here");

53  
EMS_ERR
;

57 
ems_ch¨
 *
cmd
;

58 
ems_öt
 
Àn
;

60 
cmd
 = 
	`buf_wr
(
buf
);

61 
Àn
 = 
	`buf_À·
(
buf
);

64 
	`¢¥ötf
(
cmd
, 
Àn
, "iptables -i %s -tÇat -I %s -pÅcp -d %s --dport 80 -j DNAT --to-destination %s:%d",

65 
i‚ame
, 
c_«t_fw_¥e
, 
NAS_ADDR
, 
gw
, 
EMS_PORT
);

66 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

69 
	`¢¥ötf
(
cmd
, 
Àn
 , "iptables -i %s -tÇat -A %s -p udp --dport 53 -j DNAT --to-destination %s:%d",

70 
i‚ame
, 
c_sy°em_deÁu…
, 
gw
, 
EMS_DNS_BIND
);

71 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

74 
	`¢¥ötf
(
cmd
, 
Àn
 , "ùèbÀ†-ò%†-à«à-A %†-∞ud∞--dp‹à67 -j ACCEPT", 
i‚ame
, 
c_sy°em_deÁu…
);

75 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

78 
	`¢¥ötf
(
cmd
, 
Àn
 , "ùèbÀ†-ò%†-à«à-A %†-d %†-j ACCEPT", 
i‚ame
, 
c_sy°em_deÁu…
, 
gw
);

79 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

82 
	`¢¥ötf
(
cmd
, 
Àn
, "ùèbÀ†-ò%†-à«à-A %†-∞t˝ -m mu…ù‹à--dp‹t†80,8080 -j DNAT --to-de°ö©i⁄ %s:%d", 
i‚ame
, 
c_«t_fw_¥e
, 
gw
, 
EMS_PORT
);

83 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

86 
	`¢¥ötf
(
cmd
, 
Àn
, "ùèbÀ†-ò%†-à«à-A %† -j DNAT --to-de°ö©i⁄ 127.0.0.100", 
i‚ame
, 
c_«t_fw_¥e
);

87 
	`RET_ERR_FAILED
(
	`ems_sy°emcmd
(
	`buf_rd
(
buf
)));

90  
EMS_OK
;

91 
	}
}

94 
ems_öt
 
	$fw_öô_chaös
(
ems_fw
 *
fw
)

96 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_fûãr_fwd
, "FORWARD", 
C_TABLE_FILTER
, 
EMS_YES
));

97 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_«t_fw_¥e
, "PREROUTING", 
C_TABLE_NAT
, 
EMS_NO
));

98 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_mac_bœck
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
, 
EMS_NO
));

99 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_mac_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
, 
EMS_NO
));

100 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_u£r_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
, 
EMS_NO
));

101 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_sy°em_deÁu…
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
, 
EMS_NO
));

102 
	`RET_ERR_FAILED
(
	`fw_¸óã_™d_ö£π
(
c_uæ_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
, 
EMS_NO
));

104  
	`fw_≠∂y_deÁu…s
();

105 
	}
}

107 
ems_void
 
	$fw_˛ón_™d_dñ
(
ems_cch¨
 *
chaö
,Éms_cch¨ *
u∂ök
,Éms_cch¨ *
tb
)

109 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

111 
	`ems_buf„r_˛ór
(
buf
);

113 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-F %s", 
tb
, 
chaö
);

114 
	`ems_sy°emcmd
(
	`buf_rd
(
buf
));

116 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-D %†-j %s", 
tb
, 
u∂ök
, 
chaö
);

117 
	`ems_sy°emcmd
(
	`buf_rd
(
buf
));

119 
	`¢¥ötf
(
	`buf_wr
(
buf
), 
	`buf_À·
(buf), "ùèbÀ†-à%†-X %s", 
tb
, 
chaö
);

120 
	`ems_sy°emcmd
(
	`buf_rd
(
buf
));

121 
	}
}

123 
ems_öt
 
	$fw_unöô_chaös
(
ems_fw
 *
fw
)

125 
	`fw_˛ón_™d_dñ
(
c_mac_bœck
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
);

126 
	`fw_˛ón_™d_dñ
(
c_mac_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
);

127 
	`fw_˛ón_™d_dñ
(
c_sy°em_deÁu…
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
);

128 
	`fw_˛ón_™d_dñ
(
c_u£r_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
);

129 
	`fw_˛ón_™d_dñ
(
c_uæ_whôe
, 
c_«t_fw_¥e
, 
C_TABLE_NAT
);

130 
	`fw_˛ón_™d_dñ
(
c_«t_fw_¥e
, "PREROUTING", 
C_TABLE_NAT
);

131 
	`fw_˛ón_™d_dñ
(
c_fûãr_fwd
, "FORWARD", 
C_TABLE_FILTER
);

133  
EMS_OK
;

134 
	}
}

136 
ems_void
 
	$fw_˛ór_Æl
()

138 
	`fw_unöô_chaös
(
NULL
);

139 
	}
}

141 
ems_öt
 
	$fw_Êush_u£r_mac_whôe
(
ems_fw
 *
fw
)

143 
js⁄_obje˘
 *
¨y
, *
obj
;

144 
ems_öt
 
i
, 
Àn
;

145 
ems_ch¨
 *
cmd
;

146 
ems_buf„r
 *
buf
 = 
	`c‹e_buf„r
();

147 
ems_cch¨
 *
i‚ame
 = 
	`c‹e_gw_i‚ame
();

149 
¨y
 = 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_whôe
);

150 i‡(!
¨y
)

151  
EMS_OK
;

153 
	`ems_l_åa˚
("u£∏deföed ma¯whôñi°: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
¨y
));

155 
cmd
 = 
	`buf_wr
(
buf
);

156 
Àn
 = 
	`buf_À·
(
buf
);

158 
	`¢¥ötf
(
cmd
, 
Àn
, "ùèbÀ†-à«à-F %s", 
c_mac_whôe
);

159 
	`ems_sy°emcmd
(
cmd
);

161 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
¨y
); i++) {

162 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 
i
);

164 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
))

166 
	`¢¥ötf
(
cmd
, 
Àn
,

168 
i‚ame
, 
c_mac_whôe
, 
	`js⁄_obje˘_gë_°rög
(
obj
));

170 
	`ems_sy°emcmd
(
cmd
);

174 
	`js⁄_obje˘_put
(
¨y
);

176  
EMS_OK
;

177 
	}
}

179 
ems_öt
 
	$fw_Êush_u£r_mac_bœck
(
ems_fw
 *
fw
)

181 
js⁄_obje˘
 *
¨y
, *
obj
;

182 
ems_buf„r
 
buf
;

183 
ems_öt
 
i
, 
Àn
;

184 
ems_ch¨
 *
cmd
;

185 
ems_cch¨
 *
i‚ame
 = 
	`c‹e_gw_i‚ame
();

187 
¨y
 = 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_mac_bœck
);

188 i‡(!
¨y
)

189  
EMS_OK
;

191 
	`ems_l_åa˚
("u£∏deföed ma¯bœckli°: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
¨y
));

193 
	`ems_buf„r_öô
(&
buf
, 
EMS_BUFFER_1K
);

195 
cmd
 = 
	`buf_wr
(&
buf
);

196 
Àn
 = 
	`buf_À·
(&
buf
);

198 
	`¢¥ötf
(
cmd
, 
Àn
, "ùèbÀ†-à«à-F %s", 
c_mac_bœck
);

199 
	`ems_sy°emcmd
(
cmd
);

201 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
¨y
); i++) {

202 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 
i
);

204 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
))

207 
	`¢¥ötf
(
cmd
, 
Àn
,

209 
i‚ame
, 
c_mac_bœck
, 
	`js⁄_obje˘_gë_°rög
(
obj
));

211 
	`ems_sy°emcmd
(
cmd
);

215 
	`ems_buf„r_unöô
(&
buf
);

216 
	`js⁄_obje˘_put
(
¨y
);

218  
EMS_OK
;

219 
	}
}

221 
dns_uæ
 *
	$fw_föd_uæ
(
ems_queue
 *
hód
, 
ems_cch¨
 *
key
)

223 
ems_queue
 *
p
;

224 
dns_uæ
 *
uæ
;

226 
	`ems_queue_f‹óch
(
hód
, 
p
) {

227 
uæ
 = 
	`ems_c⁄èöî_of
(
p
, 
dns_uæ
, 
íåy
);

229 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
uæ
->uæ), 
key
)) {

230  
uæ
;

234  
NULL
;

235 
	}
}

237 
ems_öt
 
	$fw_ªmove_uæs
(
ems_fw
 *
fw
, 
ems_queue
 *
hód
, 
js⁄_obje˘
 *
¨y
)

239 
js⁄_obje˘
 *
obj
;

240 
ems_öt
 
i
;

241 
dns_uæ
 *
uæ
;

243 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
¨y
); i++) {

245 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 
i
);

247 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
))

249 
ems_cch¨
 *
buf
 = 
	`js⁄_obje˘_gë_°rög
(
obj
);

251 
uæ
 = 
	`fw_föd_uæ
(
hód
, 
buf
);

252 i‡(
uæ
) {

253 
	`ems_queue_ªmove
(&
uæ
->
íåy
);

254 
	`ems_hash_ªmove
(&
uæ
->
h_uæ
);

255 
	`fw_uæ_£t_‰ì
(
fw
, 
uæ
, 
EMS_NO
);

256 
	`ems_l_åa˚
("ªmovêuæ: %s", 
	`°r_ãxt
(&
uæ
->url));

257 
	`dns_uæ_‰ì
(
uæ
);

262  
EMS_OK
;

263 
	}
}

265 
ems_öt
 
	$fw_≠≥nd_uæs
(
ems_fw
 *
fw
, 
ems_queue
 *
hód
, 
js⁄_obje˘
 *
¨y
)

267 
js⁄_obje˘
 *
obj
;

268 
ems_öt
 
i
;

269 
dns_uæ
 *
uæ
;

271 
i
 = 0; i < 
	`js⁄_obje˘_¨øy_Àngth
(
¨y
); i++) {

273 
obj
 = 
	`js⁄_obje˘_¨øy_gë_idx
(
¨y
, 
i
);

275 i‡(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
))

277 
ems_cch¨
 *
buf
 = 
	`js⁄_obje˘_gë_°rög
(
obj
);

278 i‡(
	`fw_föd_uæ
(
hód
, 
buf
))

281 
uæ
 = 
	`dns_uæ_√w
();

282 i‡(
uæ
) {

283 
	`°r_£t
(&
uæ
->uæ, 
buf
);

286 
	`ems_hash_fd_£t_key
(&
uæ
->
h_uæ
, 
buf
);

287 
	`ems_hash_ö£π
(&
fw
->
hash_uæ
, &
uæ
->
h_uæ
);

289 
	`ems_l_åa˚
("≠≥nd uæ: %s", 
	`°r_ãxt
(&
uæ
->url));

290 
	`ems_queue_ö£π_èû
(
hód
, &
uæ
->
íåy
);

295  
EMS_OK
;

296 
	}
}

298 
ems_öt
 
	$fw_Êush_whûãli°
(
ems_fw
 *
fw
)

300 
js⁄_obje˘
 *
¨y
, *
obj
;

302 
	`fw_whôñi°_˛ór
(
fw
);

304 
	`ems_sy°emcmd
("ùèbÀ†-à«à-F " 
c_uæ_whôe
);

307 
¨y
 = 
	`cfg_gë_js⁄
(
	`emscfg
(), 
CFG_u£r_uæ_whôe
);

308 i‡(
¨y
) {

309 
	`ems_l_åa˚
("u£∏bwli°: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
¨y
));

310 
	`fw_≠≥nd_uæs
(
fw
, &fw->
whôñi°
, 
¨y
);

311 
	`js⁄_obje˘_put
(
¨y
);

314 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

316 
	`ems_≠p_¥o˚ss
(
ty_fw
, 
ty_bwli°
, 
EMS_APP_SERVER_BWLIST
, 
obj
);

317 
¨y
 = 
	`js⁄_obje˘_obje˘_gë
(
obj
, "white");

318 i‡(
¨y
) {

319 
	`ems_l_åa˚
("£rvî bwli°: %s", 
	`js⁄_obje˘_to_js⁄_°rög
(
¨y
));

320 
	`fw_≠≥nd_uæs
(
fw
, &fw->
whôñi°
, 
¨y
);

323 
	`js⁄_obje˘_put
(
obj
);

325 
	`ems_≠p_¥o˚ss
(
ty_fw
, 
ty_p‹èl
, 
EMS_APP_EVT_FW_RELOAD
, 
NULL
);

330 
	`fw_dns_quîy_åigî
(
fw
);

332  
EMS_OK
;

333 
	}
}

343 
ems_öt
 
	$fw_upd©e_Æl_ruÀs
(
ems_fw
 *
fw
)

345 i‡(
fw
) {

346 
	`fw_Êush_u£r_mac_whôe
(
fw
);

347 
	`fw_Êush_u£r_mac_bœck
(
fw
);

348 
	`fw_Êush_whûãli°
(
fw
);

351  
EMS_OK
;

352 
	}
}

354 
ems_ch¨
 *
	$fw_mac_upd©e
(
ems_ch¨
 *
d°
, 
ems_cch¨
 *
§c
)

356 *
§c
) {

357 *
d°
 = *
§c
++;

359 i‡(*
d°
 == '-')

360 *
d°
 = ':';

361 
d°
++;

364  
d°
;

365 
	}
}

368 
ems_öt
 
	$fw_devi˚_‰ì
(
ems_cch¨
 *
u£rù
,Éms_cch¨ *
u£rmac
, 
ems_öt
 
yes
)

370 
ems_ch¨
 
cmd
[256] = {0};

371 
ems_ch¨
 
mac
[32] = {0};

373 
	`fw_mac_upd©e
(
mac
, 
u£rmac
);

375 i‡(
yes
) {

376 
	`¢¥ötf
(
cmd
, (cmd),

378 
	`c‹e_gw_i‚ame
(), 
c_u£r_whôe
, 
mac
, 
u£rù
);

380 
	`¢¥ötf
(
cmd
, (cmd),

382 
	`c‹e_gw_i‚ame
(), 
c_u£r_whôe
, 
mac
, 
u£rù
);

385 
	`ems_sy°emcmd
(
cmd
);

388 i‡(
yes
) {

389 
	`¢¥ötf
(
cmd
, (cmd),

391 
c_fûãr_fwd
, 
u£rù
, 
u£rmac
);

393 
	`¢¥ötf
(
cmd
, (cmd),

395 
c_fûãr_fwd
, 
u£rù
, 
u£rmac
);

398 
	`ems_sy°emcmd
(
cmd
);

400  
EMS_OK
;

401 
	}
}

403 
ems_öt
 
	$fw_uæ_£t_‰ì
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
, 
ems_öt
 
≠≥nd
)

405 
ems_öt
 
i
;

406 
ems_ch¨
 
cmd
[256] = {0};

407 
ems_cch¨
 *
ö£π
 = "-I";

409 i‡(!
≠≥nd
)

410 
ö£π
 = "-D";

412 i‡(
uæ
 && uæ->
addr
) {

413 
i
 = 0; i < 
uæ
->
n_addr
; i++)

415 i‡(
uæ
->
addr
[
i
].
s_addr
 == 0) ;

417 
	`¢¥ötf
(
cmd
, (cmd),

418 "ùèbÀ†-ò%†-à«à%†" 
c_uæ_whôe
 " -d %s/%d -j ACCEPT -m comment --comment '%s'",

419 
	`c‹e_gw_i‚ame
(),

420 
ö£π
,

421 
	`öë_¡ﬂ
(
uæ
->
addr
[
i
]),

422 
uæ
->
mask
,

423 
	`°r_ãxt
(&
uæ
->url));

424 i‡(
	`ems_sy°emcmd
(
cmd
) != 0) {

426 
	`mem£t
(&
uæ
->
addr
[
i
], 0, (
ö_addr
));

431  
EMS_OK
;

432 
	}
}

	@src/core/ems_fw.h

2 #i‚de‡
EMS_FW_BALIST___HEADER____


3 
	#EMS_FW_BALIST___HEADER____


	)

5 
ems_öt
 
fw_öô_chaös
(
ems_fw
 *
fw
);

6 
ems_öt
 
fw_unöô_chaös
(
ems_fw
 *
fw
);

7 
ems_öt
 
fw_upd©e_Æl_ruÀs
(
ems_fw
 *
fw
);

8 
ems_öt
 
fw_whôñi°_˛ór
(
ems_fw
 *
fw
);

9 
ems_öt
 
fw_uæ_£t_‰ì
(
ems_fw
 *
fw
, 
dns_uæ
 *
uæ
,Éms_öà
≠≥nd
);

10 
ems_öt
 
fw_≠≥nd_uæs
(
ems_fw
 *
fw
, 
ems_queue
 *
hód
, 
js⁄_obje˘
 *
¨y
);

11 
ems_öt
 
fw_ªmove_uæs
(
ems_fw
 *
fw
, 
ems_queue
 *
hód
, 
js⁄_obje˘
 *
¨y
);

12 
ems_öt
 
fw_devi˚_‰ì
(
ems_cch¨
 *
ù
,Éms_cch¨ *
mac
,Éms_öà
yes
);

13 
ems_öt
 
fw_Êush_whûãli°
(
ems_fw
 *
fw
);

14 
ems_void
 
fw_˛ór_Æl
();

16 
	s_ems_fw_s
 {

18 
ems_queue
 
	mwhôñi°
;

19 
ems_öt
 
	mn_subdomaö
;

20 
ems_queue
 
	msubdomaö
;

23 
ems_£ssi⁄
 *
	m£ss_böd
;

24 
ems_£ssi⁄
 *
	m£ss_dns
;

26 
ems_hash
 
	mhash_msg
;

27 
ems_hash
 
	mhash_uæ
;

29 
ems_queue
 
	mfwd
;

30 
ems_queue
 
	mwaô
;

31 
ems_queue
 
	mout
;

35 
	#MAX_SUB_DOMAIN
 300

	)

	@src/core/ems_main.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

4 
	~"ems_˛õ¡.h
"

6 
	~<sig«l.h
>

7 
	~<£tjmp.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

11 
ems_c‹e
 *
	g_gc‹e
 = 
NULL
;

13 
ems_c‹e
 *
	$emsc‹î
()

15 
	`ems_as£π
(
_gc‹e
 !
NULL
);

16  
_gc‹e
;

17 
	}
}

19 
ems_cfg
 *
	$emscfg
()

21 
	`ems_as£π
(
_gc‹e
 !
NULL
);

22  &
_gc‹e
->
cfg
;

23 
	}
}

25 
ems_evít
 *
	$evíãr
()

27 
	`ems_as£π
(
_gc‹e
 !
NULL
);

28  &
_gc‹e
->
evt
;

29 
	}
}

31 
ems_queue
 *
	$timeouãr
()

33 
	`ems_as£π
(
_gc‹e
 !
NULL
);

35  &
_gc‹e
->
evt
.
timeout
;

36 
	}
}

38 
ems_void
 
	$c‹e_gw_addr_˛ór
()

40 
	`°r_£t
(&
_gc‹e
->
gw
, 
NULL
);

41 
	}
}

43 
ems_cch¨
 *
	$c‹e_gw_addr
()

45 i‡(
	`°r_Àn
(&
_gc‹e
->
gw
) <= 0) {

46 
	`°r_£t
(&
_gc‹e
->
gw
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_œn_addr
));

49  
	`°r_ãxt
(&
_gc‹e
->
gw
)?str_text(&_gcore->gw):"";

50 
	}
}

52 
ems_void
 
	$c‹e_gw_i‚ame_˛ór
()

54 
	`°r_£t
(&
_gc‹e
->
i‚ame
, 
NULL
);

55 
	}
}

57 
ems_cch¨
 *
	$c‹e_gw_i‚ame
()

59 i‡(
	`°r_Àn
(&
_gc‹e
->
gw
) <= 0) {

60 
	`°r_£t
(&
_gc‹e
->
i‚ame
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_œn_i‚ame
));

63  
	`°r_ãxt
(&
_gc‹e
->
i‚ame
)?str_text(&_gcore->ifname):"br-lan";

64 
	}
}

66 
ems_buf„r
 *
	$c‹e_buf„r
()

68  &
_gc‹e
->
buf
;

69 
	}
}

71 
ems_cch¨
 *
	$c‹e_ac_mac
()

73 i‡(
	`°r_Àn
(&
_gc‹e
->
ac_mac
) <= 0) {

74 
	`°r_£t
(&
_gc‹e
->
ac_mac
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_mac
));

77  
	`°r_ãxt
(&
_gc‹e
->
ac_mac
)?str_text(&_gcore->ac_mac):"";

78 
	}
}

80 
ems_cch¨
 *
	$c‹e_p‹èl_addr
()

82 i‡(
	`°r_Àn
(&
_gc‹e
->
p‹èl
) <= 0) {

83 
	`°r_£t
(&
_gc‹e
->
p‹èl
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_addr
));

86  
	`°r_ãxt
(&
_gc‹e
->
p‹èl
)?str_text(&_gcore->portal):"";

87 
	}
}

89 
ems_öt
 
	$c‹e_p‹èl_ªdúe˘_p‹t
()

91 i‡(
_gc‹e
->
p‹èl_ªdúe˘_p‹t
 <= 0) {

92 
_gc‹e
->
p‹èl_ªdúe˘_p‹t
 = 
	`ems_©oi
(
	`cfg_gë
(
	`emscfg
(), 
CFG_≠p_p‹èl_ªdúe˘
));

95  
_gc‹e
->
p‹èl_ªdúe˘_p‹t
;

96 
	}
}

98 
ems_cch¨
 *
	$c‹e_ssid
()

100 i‡(
	`°r_Àn
(&
_gc‹e
->
ssid
) <= 0) {

101 
	`°r_£t
(&
_gc‹e
->
ssid
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_ssid
));

104  
	`°r_ãxt
(&
_gc‹e
->
ssid
)?str_text(&_gcore->ssid):"";

105 
	}
}

107 
ems_cch¨
 *
	$c‹e_devi˚ty≥
()

109 i‡(
	`°r_Àn
(&
_gc‹e
->
devty
) <= 0) {

110 
	`°r_£t
(&
_gc‹e
->
devty
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_devi˚ty≥
));

113  
	`°r_ãxt
(&
_gc‹e
->
devty
)?str_text(&_gcore->devty):"";

114 
	}
}

116 
ems_cch¨
 *
	$c‹e_¢
()

118 i‡(
	`°r_Àn
(&
_gc‹e
->
¢
) <= 0) {

119 
	`°r_£t
(&
_gc‹e
->
¢
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_¢
));

122  
	`°r_ãxt
(&
_gc‹e
->
¢
)?str_text(&_gcore->sn):"";

123 
	}
}

125 
ems_öt
 
	$ems_maö
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

127 
ems_öt
 
πn
 = 
EMS_OK
;

128 
ems_c‹e
 *
c‹e
 = 
NULL
;

130 #ifde‡
EMS_LOGGER_FILE


131 
FILE
 *
Â
 = 
NULL
;

132 
	`ems_loggî_ª£t
(
	`loggî
());

133 
Â
 = 
	`f›í
("/tmp/ems_run_time.log", "a+");

134 i‡(
Â
)

135 
	`ems_loggî_£t_Â
(
	`loggî
(), 
Â
);

137 
	`ems_loggî_£t_Àvñ
(
	`loggî
(), 
EMS_LOG_TRACE
);

139 
c‹e
 = (
ems_c‹e
 *)
	`ems_mÆloc
((ems_core));

140 i‡(
c‹e
) {

141 
_gc‹e
 = 
c‹e
;

142 i‡(
	`ems_c‹e_öô
(
c‹e
Ë=
EMS_OK
)

143 
πn
 = 
	`ems_c‹e_maö
(
c‹e
, 
¨gc
, 
¨gv
);

145 
	`ems_c‹e_unöô
(
c‹e
);

146 
_gc‹e
 = 
NULL
;

147 
	`ems_‰ì
(
c‹e
);

150 #ifde‡
EMS_LOGGER_FILE


151 i‡(
Â
Ë
	`f˛o£
(fp);

154  
πn
;

155 
	}
}

	@src/core/ems_netcheck.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_√tcheck.h
"

6 
	~"ems_bridge.h
"

9 
	~<√töë/ö_sy°m.h
>

10 
	~<√töë/ö.h
>

11 
	~<√töë/ù.h
>

12 
	~<√töë/ù_icmp.h
>

13 
	~<√tdb.h
>

16 
	#PING_SEND_TIMEOUT
 2000

	)

17 
	#PING_IDLE_TIMEOUT
 5000

	)

19 
ems_ch¨
 *
	g√t_addrs
[] =

22 
NULL


25 
ems_öt
 
pög_°¨t
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

26 
ems_öt
 
pög_°›≥d
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

27 
ems_öt
 
pög_n‹mÆ
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

28 
ems_öt
 
pög_pög
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

29 
ems_öt
 
pög_îr
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

31 
	$ems_öt
 (*
	tpög_evt_func
)(
	t√tcheck
 *
	tpög
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

32 
pög_evt_func
 
pög_evt_h™dÀr
[] =

34 [
°_°¨t
] = 
pög_°¨t
,

35 [
°_°›≥d
] = 
pög_°›≥d
,

36 [
°_n‹mÆ
] = 
pög_n‹mÆ
,

37 [
°_hb
] = 
pög_pög
,

38 [
°_îr
] = 
pög_îr
,

39 [
°_max
] = 
NULL


40 
	}
};

43 
ems_öt
 
pög_to_n‹mÆ
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

44 
ems_öt
 
pög_to_pög
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

45 
ems_öt
 
pög_to_îr
 (
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

47 
	$ems_öt
 (*
	tpög_timeout_func
)(
	t√tcheck
 *
	tpög
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_timeout
 *
	tto
);

48 
pög_timeout_func
 
pög_timeout_h™dÀr
[] =

50 [
°_°¨t
] = 
NULL
,

51 [
°_°›≥d
] = 
NULL
,

52 [
°_n‹mÆ
] = 
pög_to_n‹mÆ
,

53 [
°_hb
] = 
pög_to_pög
,

54 [
°_îr
] = 
pög_to_îr
,

55 [
°_max
] = 
NULL


56 
	}
};

58 
ems_öt
 
pög_evt_run
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

59 
ems_void
 
pög_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
);

60 
ems_void
 
pög_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

62 
ems_öt
 
	$fw_ªdúe˘
(
ems_öt
 
ª
, 
ems_cch¨
 *
gw
,Éms_cch¨ *
¥o
,Éms_öà
s_p‹t
,Éms_öà
d_p‹t
)

64 
ems_ch¨
 *
ac
 = 
NULL
;

65 
ems_öt
 
πn
 = 
EMS_OK
;

67 
ems_ch¨
 *
buf
 = 
	`buf_wr
(
	`c‹e_buf„r
());

68 
ems_öt
 
Àn
 = 
	`buf_À·
(
	`c‹e_buf„r
());

70 
ac
 = "-I";

71 i‡(!
ª
)

72 
ac
 = "-D";

74 
	`¢¥ötf
(
buf
, 
Àn
,

76 
	`c‹e_gw_i‚ame
(), 
ac
, 
¥o
, 
gw
, 
s_p‹t
, gw, 
d_p‹t
);

78 
πn
 = 
	`ems_sy°emcmd
(
buf
);

81 i‡(
ª
)

82 
	`ems_sy°emcmd
("uci -p /tmp/state set ykwifi.base.status=1");

84 
	`ems_sy°emcmd
("uci -p /tmp/state del ykwifi.base.status");

87  
πn
;

88 
	}
}

90 
ems_öt
 
	$fw_ªdúe˘_v2
(
ems_öt
 
ª
, 
ems_cch¨
 *
gw
,Éms_cch¨ *
¥o
,Éms_öà
s_p‹t
,Éms_öà
d_p‹t
)

92 
ems_ch¨
 *
ac
 = 
NULL
;

93 
ems_öt
 
πn
 = 
EMS_OK
;

94 
ems_ch¨
 *
buf
 = 
	`buf_wr
(
	`c‹e_buf„r
());

95 
ems_öt
 
Àn
 = 
	`buf_À·
(
	`c‹e_buf„r
());

97 
ac
 = "-I";

98 i‡(!
ª
)

99 
ac
 = "-D";

101 
	`¢¥ötf
(
buf
, 
Àn
,

103 
	`c‹e_gw_i‚ame
(), 
ac
, 
¥o
, 
s_p‹t
, 
gw
, 
d_p‹t
);

105 
πn
 = 
	`ems_sy°emcmd
(
buf
);

107  
πn
;

108 
	}
}

110 
ems_öt
 
	$fw_ªdúe˘_web
(
ems_öt
 
ª
, 
ems_cch¨
 *
gw
)

112  
	`fw_ªdúe˘
(
ª
, 
gw
, "t˝", 80, 
EMS_PORT
);

113 
	}
}

115 
ems_öt
 
	$fw_ªdúe˘_dns
(
ems_öt
 
ª
, 
ems_cch¨
 *
gw
)

117 
ems_uöt
 
evt
 = 
EMS_APP_DNS_INTERCEPT_START
;

119 i‡(!
ª
)

120 
evt
 = 
EMS_APP_DNS_INTERCEPT_STOP
;

122 
	`ems_≠p_¥o˚ss
(
ty_√t
,Åy_√t, 
evt
, 
NULL
);

124  
	`fw_ªdúe˘_v2
(
ª
, 
gw
, "udp", 53, 
DNS_INTERCEPT_PORT
);

125 
	}
}

127 
ems_öt
 
	$pög_fw_ªdúe˘
(
√tcheck
 *
pög
, 
ems_öt
 
ªdúe˘
)

129 
ems_öt
 
ª
 = -1;

130 
ems_ch¨
 
buf
[256] = {0};

131 
ems_cch¨
 *
gw
 = 
NULL
;

133 i‡((
ª
 =
ªdúe˘
Ë|| 
	`ems_Êag_like
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
))

134  
EMS_OK
;

137 
ems_ch¨
 
cmd
[256] = {0};

138 
	`¢¥ötf
(
cmd
, (cmd),

139 "ùÑouã | gª∞%†|áwk '{¥öà$5}'", 
	`c‹e_gw_i‚ame
());

141 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`ems_p›í_gë
(
cmd
));

142 i‡(
	`°æí
(
buf
) <= 0)

143  
EMS_OK
;

146 
gw
 = 
	`c‹e_gw_addr
();

148 i‡(
	`°rcmp
(
gw
, 
buf
)) {

149 
	`ems_l_åa˚
("gw ch™ged from : %†öto: %s", 
gw
, 
buf
);

151 i‡(
ª
) {

152 
	`fw_ªdúe˘_web
(
EMS_NO
, 
gw
);

153 
	`fw_ªdúe˘_dns
(
EMS_NO
, 
gw
);

156 
	`cfg_£t
(
	`emscfg
(), 
CFG_œn_addr
, 
buf
);

157 
	`c‹e_gw_addr_˛ór
();

158 
gw
 = 
	`c‹e_gw_addr
();

159 
	`ems_as£π
(
gw
 !
NULL
);

162 
ª
 = 
ªdúe˘
;

164 
	`fw_ªdúe˘_web
(
ª
, 
gw
);

165 
	`fw_ªdúe˘_dns
(
ª
, 
gw
);

167  
EMS_OK
;

168 
	}
}

171 
u_sh‹t
 
	$pög_chksum
(
u_sh‹t
 *
addr
, 
ems_öt
 
Àn
)

173 
u_sh‹t
 
™swî
, *
w
 = 
addr
;

174 
ems_öt
 
sum
 = 0, 
∆e·
 = 
Àn
;

182  
∆e·
 > 1 ) {

183 
sum
 +*
w
++;

184 
∆e·
 -= 2;

188 if–
∆e·
 == 1 ) {

189 
u_sh‹t
 
u
 = 0;

191 *(
u_ch¨
 *)(&
u
Ë*(u_ch¨ *)
w
 ;

192 
sum
 +
u
;

198 
sum
 = (sum >> 16) + (sum & 0xffff);

199 
sum
 += (sum >> 16);

200 
™swî
 = ~
sum
;

202  
™swî
;

203 
	}
}

206 
ems_öt
 
	$pög_°_öto_pög
(
√tcheck
 *
pög
)

208 
i
, 
cc
, 
Àn
;;

209 
icmp
 *
i˝
;

210 
timevÆ
 *
ç
;

211 
ems_ch¨
 *
wr
;

212 
ems_£ssi⁄
 *
£ss
;

214 
	`ems_as£π
(
pög
 &&Öög->
£ss
);

216 
£ss
 = 
pög
->sess;

217 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

219 
i˝
 = (
icmp
 *Ë(
	`buf_wr
(&
£ss
->
buf
));

220 
ç
 = (
timevÆ
 *Ë(
	`buf_wr
(&
£ss
->
buf
) + 8);

221 
wr
 = (
ems_ch¨
 *Ë(
	`buf_wr
(&
£ss
->
buf
Ë+ 8 + (
timevÆ
));

223 
i˝
->
icmp_ty≥
 = 
ICMP_ECHO
;

224 
i˝
->
icmp_code
 = 0;

225 
i˝
->
icmp_cksum
 = 0;

226 
i˝
->
icmp_£q
 = 
	`ht⁄s
(
pög
->
¡øns
++);

227 
i˝
->
icmp_id
 = 
pög
->
idít
;

229 
Àn
 = 56;

230 
cc
 = 
Àn
 + 8;

231 
	`gëtimeofday
(
ç
, 
NULL
);

233 
i
 = 8; i < 
Àn
; i++)

234 *
wr
++ = 
i
;

236 
i˝
->
icmp_cksum
 = 
	`pög_chksum
((
u_sh‹t
 *)i˝, 
cc
);

238 
pög
->
ªåy
 = 3;

239 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf
, 
cc
, 
EMS_BUFFER_SEEK_CUR
);

240 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
pög_evt_cb
);

241 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_SEND_TIMEOUT
, 
pög_timeout_cb
);

243  
EMS_OK
;

244 
	}
}

246 
ems_öt
 
	$pög_ch™ge_°©us
(
√tcheck
 *
pög
, 
ems_°©us
 
°
)

248 
pög
->
°
 = st;

250 
pög
->
°
) {

251 
°_°¨t
:

252 
°_°›≥d
:

253 
°_îr
:

254  
	`pög_evt_run
(
pög
, 
NULL
, 0);

257 
°_hb
:

258  
	`pög_°_öto_pög
(
pög
);

266  
EMS_OK
;

267 
	}
}

269 
ems_öt
 
	$pög_evt_run
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

271 
	`ems_as£π
(
pög_evt_h™dÀr
[
pög
->
°
]);

272  
pög_evt_h™dÀr
[
pög
->
°
]’ög, 
£ss
, 
Êg
);

273 
	}
}

275 
ems_void
 
	$pög_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

277 
√tcheck
 *
pög
 = (√tcheck *)
	`£ss_cb¨g
(
£ss
);

279 
	`ems_as£π
(
pög
->
°
 > 
°_mö
 &&Öög->° < 
°_max
);

281 i‡(
îr
) {

282 
	`ems_l_åa˚
("[ping]ÉvtÉrr, sess: %d %s",

283 
	`ems_sock_fd
(&
£ss
->
sock
),

284 
	`ems_sock_addr
(&
£ss
->
sock
));

285 
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

289 
	`pög_evt_run
(
pög
, 
£ss
, 
Êg
);

290 
	}
}

292 
ems_void
 
	$pög_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

294 
√tcheck
 *
pög
 = (√tcheck *)
	`£ss_cb¨g
(
£ss
);

296 
	`ems_as£π
(
pög
->
°
 > 
°_mö
 &&Öög->° < 
°_max
);

298 
	`ems_as£π
(
pög_timeout_h™dÀr
[
pög
->
°
]);

300 i‡(
pög_timeout_h™dÀr
[
pög
->
°
])

301 
pög_timeout_h™dÀr
[
pög
->
°
]’ög, 
£ss
, 
to
);

302 
	}
}

305 
ems_öt
 
	$pög_gw_addr
(
ems_£ssi⁄
 *
£ss
)

307 
ems_ch¨
 
buf
[64] = {0};

309 
	`¢¥ötf
(
buf
, (buf), "%s",

310 
	`ems_p›í_gë
("ipÑoute | grep default | head -1 |áwk '{print $3}'"));

312 i‡(
	`°æí
(
buf
) <= 0)

313  
EMS_ERR
;

315 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
buf
);

317  
EMS_OK
;

318 
	}
}

320 
ems_öt
 
	$pög_gw_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

322 
¥Ÿ€¡
 *
¥Ÿo
;

323 
ems_sock
 *
sock
 = &
£ss
->sock;

324 
sockÀn_t
 
Àn
;

325 
sockaddr_ö
 
addr
;

326 
ems_öt
 
fd
;

328 
	`mem£t
(&
addr
, 0, (addr));

330 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

331 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

332 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

333  
EMS_ERR
;

336 i‡((
¥Ÿo
 = 
	`gë¥Ÿoby«me
("icmp")Ë=
NULL
) {

337 
	`ems_l_åa˚
("getprotobyname failed %s : %s",

338 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

339  
EMS_ERR
;

342 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
¥Ÿo
->
p_¥Ÿo
)) < 0) {

343 
	`ems_l_åa˚
("sockëÉº‹: %s", 
	`ems_œ°îrmsg
());

344  
EMS_ERR
;

347 
addr
.
sö_Ámûy
 = 
AF_INET
;

348 
Àn
 = (
sockaddr_ö
);

350 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

351 
	`˛o£
(
fd
);

352 
	`ems_l_åa˚
("c⁄√˘Éº‹: %s", 
	`ems_œ°îrmsg
());

353  
EMS_ERR
;

356 
	`ems_sock_£tfd
(&
£ss
->
sock
, 
fd
);

358  
EMS_OK
;

359 
	}
}

361 
ems_öt
 
	$pög_°¨t
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

363 i‡(!
pög
->
£ss
) {

364 
pög
->
£ss
 = 
	`ems_£ssi⁄_√w
();

365 i‡(!
pög
->
£ss
)

366  
EMS_ERR
;

368 
	`£ss_cb¨g_£t
(
pög
->
£ss
,Öing);

371 
£ss
 = 
pög
->sess;

372 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

373 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

375 
pög
->
idít
 = 
	`øndom
() & 0xFFFF;

376 
pög
->
¡øns
 = 0;

377 
pög
->
id
 = 0;

378 
pög
->
ªåy
 = 3;

380 i‡(
	`pög_gw_addr
(
£ss
Ë!
EMS_OK
)

381  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

383 
ems_cch¨
 *
w™
 = 
	`cfg_gë
(
	`emscfg
(), 
CFG_w™_addr
);

385 i‡(!
w™
 || 
	`°rcmp
(
	`ems_sock_addr
(&
£ss
->
sock
), wan))

387 
	`°r_˛ór
(&
	`emsc‹î
()->
gw
);

388 
	`°r_˛ór
(&
	`emsc‹î
()->
i‚ame
);

389 
	`°r_˛ór
(&
	`emsc‹î
()->
ac_mac
);

390 
	`°r_˛ór
(&
	`emsc‹î
()->
ssid
);

391 
	`ems_Êush_sy°em_öfo
();

395 i‡(
	`pög_gw_c⁄√˘
(
£ss
Ë!
EMS_OK
)

396  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

398 
	`ems_l_åa˚
("[ping] sess: %d gwáddr: %s",

399 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

401  
	`pög_ch™ge_°©us
(
pög
, 
°_hb
);

402 
	}
}

404 
ems_öt
 
	$pög_°›≥d
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

406 
£ss
 = 
pög
->sess;

408 i‡(
£ss
) {

409 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

410 
pög
->
£ss
 = 
NULL
;

413 
	`pög_fw_ªdúe˘
(
pög
, 
EMS_NO
);

415  
EMS_OK
;

416 
	}
}

418 
ems_öt
 
	$pög_n‹mÆ
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

420 
	`ems_as£π
(0 && "shouldÇever be here");

421  
EMS_OK
;

422 
	}
}

424 
ems_öt


425 
	$pög_£nd
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

427 
ems_öt
 
ªt
;

429 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

431 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

433 i‡(
ªt
 <= 0) {

434 
ªt
) {

436 -
EAGAIN
:

440  
EMS_ERR
;

444 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0)

445 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
pög_evt_cb
);

447  
EMS_OK
;

448 
	}
}

450 
ems_öt
 
	$pög_ªcv_h™dÀ
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
)

452 
ù
 *ip;

453 
icmp
 *
i˝
;

454 
hÀn
, 
cc
 = 
	`buf_Àn
(&
£ss
->
buf_ö
);

456 
ù
 = (ù *Ë
	`buf_rd
(&
£ss
->
buf_ö
);

457 
hÀn
 = 
ù
->
ù_hl
 << 2;

459 i‡(
cc
 < 
hÀn
 + 
ICMP_MINLEN
)

460  
EMS_OK
;

462 
cc
 -
hÀn
;

463 
i˝
 = (
icmp
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
hÀn
);

465 if(
i˝
->
icmp_ty≥
 !
ICMP_ECHOREPLY
) {

466 
	`ems_l_åa˚
("[pög] %d byã†icm∞nŸÉchÿª∂y, %d", 
cc
, 
i˝
->
icmp_ty≥
);

467 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

468  
EMS_OK
;

471 if–
i˝
->
icmp_id
 !
pög
->
idít
) {

472 
	`ems_l_åa˚
("[pög] %d byã†icm∞idít: %d !%d", 
cc
, 
i˝
->
icmp_id
, 
pög
->
idít
);

473 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

474  
EMS_OK
;

477 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

479 
	`£ss_evít_ˇn˚l
(
£ss
);

480 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_IDLE_TIMEOUT
, 
pög_timeout_cb
);

482 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_READY
);

484 
	`pög_fw_ªdúe˘
(
pög
, 
EMS_NO
);

486 i‡(
	`ems_Êag_u∆ike
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE_RUN
)) {

487 
	`ems_Êag_£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE_RUN
);

489 i‡(
	`ems_Êag_u∆ike
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
))

490 
	`ems_≠p_¥o˚ss
(
ty_√t
, 
ty_bridge
, 
EMS_APP_START
, 
NULL
);

494  
	`pög_ch™ge_°©us
(
pög
, 
°_n‹mÆ
);

495 
	}
}

497 
ems_öt


498 
	$pög_ªcv
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
)

500 
ems_öt
 
ªt
;

501 
ems_ch¨
 *
wr
 = 
	`buf_wr
(&
£ss
->
buf_ö
);

502 
ems_öt
 
Àn
 = 
	`buf_À·
(&
£ss
->
buf_ö
);

504 
agaö
:

505 
ªt
 = 
	`ªcv
(
	`ems_sock_fd
(&
£ss
->
sock
), 
wr
, 
Àn
, 0);

507 i‡(
ªt
 <= 0) {

508 
î∫o
) {

510 
EAGAIN
:

511 
EINTR
:

512  
EMS_OK
;

515 
	`ems_l_åa˚
("[pög]ÖögÉº‹: %s", 
	`ems_œ°îrmsg
());

516  
EMS_ERR
;

520 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_ö
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

522 
ªt
 = 
	`pög_ªcv_h™dÀ
(
pög
, 
£ss
);

524 
agaö
;

526  
EMS_OK
;

527 
	}
}

530 
ems_öt
 
	$pög_pög
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

532 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

533 i‡(
	`pög_ªcv
(
pög
, 
£ss
Ë!
EMS_OK
)

534  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

536  
EMS_OK
;

539 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

540 i‡(
	`pög_£nd
(
pög
, 
£ss
, 
Êg
Ë!
EMS_OK
)

541  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

544  
EMS_OK
;

545 
	}
}

547 
ems_öt
 
	$pög_îr
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

549 
	`ems_as£π
(
pög
->
£ss
 !
NULL
);

551 
£ss
 = 
pög
->sess;

553 i‡(
£ss
) {

554 
	`£ss_evít_ˇn˚l
(
£ss
);

555 
	`ems_l_åa˚
("[ping]shutdown session(%d) with [%s]",

556 
	`ems_sock_fd
(&
£ss
->
sock
),

557 
	`ems_sock_addr
(&
£ss
->
sock
));

558 
	`ems_sock_˛o£
(&
£ss
->
sock
);

559 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_IDLE_TIMEOUT
, 
pög_timeout_cb
);

562 
	`ems_Êag_un£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_READY
);

563 
	`pög_fw_ªdúe˘
(
pög
, 
EMS_YES
);

565 i‡(
	`ems_Êag_u∆ike
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE
)) {

566 i‡(!
	`ems_≠p_run
(
ty_dow∆ök
))

567 
	`ems_Êag_un£t
(
	`emsc‹î
()->
Êg
, 
FLG_NETWORK_BRIDGE_RUN
);

568 
	`ems_≠p_¥o˚ss
(
ty_√t
, 
ty_bridge
, 
EMS_APP_STOP
, 
NULL
);

571  
EMS_OK
;

572 
	}
}

575 
ems_öt
 
	$pög_to_n‹mÆ
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

577  
	`pög_ch™ge_°©us
(
pög
, 
°_hb
);

578 
	}
}

580 
ems_öt
 
	$pög_to_pög
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

582 
ems_cch¨
 *
addr
 = 
NULL
;

584 
	`ems_l_åa˚
("[pög]Åimeout...,ÑëryÅimes: %d", 
pög
->
ªåy
);

586 
pög
->
ªåy
--;

588 
	`£ss_evít_ˇn˚l
(
£ss
);

590 i‡(
pög
->
ªåy
) {

591 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf
, 0, 
EMS_BUFFER_SEEK_SET
);

592 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
pög_evt_cb
);

593 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_SEND_TIMEOUT
, 
pög_timeout_cb
);

594  
EMS_OK
;

597 
addr
 = 
√t_addrs
[
pög
->
id
++];

599 i‡(
addr
) {

600 
	`£ss_evít_ˇn˚l
(
£ss
);

601 
	`ems_l_åa˚
("[ping]shutdown session(%d) with [%s]",

602 
	`ems_sock_fd
(&
£ss
->
sock
),

603 
	`ems_sock_addr
(&
£ss
->
sock
));

604 
	`ems_sock_˛o£
(&
£ss
->
sock
);

606 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
addr
);

608 i‡(
	`pög_gw_c⁄√˘
(
£ss
Ë!
EMS_OK
)

609  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

611 
	`ems_l_åa˚
("[ping] sess: %dáddr: %s",

612 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

614  
	`pög_ch™ge_°©us
(
pög
, 
°_hb
);

617  
	`pög_ch™ge_°©us
(
pög
, 
°_îr
);

618 
	}
}

620 
ems_öt
 
	$pög_to_îr
(
√tcheck
 *
pög
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

622  
	`pög_ch™ge_°©us
(
pög
, 
°_°¨t
);

623 
	}
}

	@src/core/ems_netcheck.h

2 #i‚de‡
EMS_CLIENT_NET_CHECK_____


3 
	#EMS_CLIENT_NET_CHECK_____


	)

5 
	#DNS_INTERCEPT_PORT
 9112

	)

7 
_√tcheck_s
 
	t√tcheck
;

9 
	s_√tcheck_s


11 
ems_°©us
 
	m°
;

14 
ems_uöt
 
	m¡øns
;

15 
ems_öt
 
	midít
;

16 
ems_öt
 
	mid
;

17 
ems_öt
 
	mªåy
;

18 
ems_£ssi⁄
 *
	m£ss
;

19 
ems_£ssi⁄
 *
	m£ss_dns
;

22 
ems_öt
 
pög_ch™ge_°©us
(
√tcheck
 *
pög
, 
ems_°©us
 
°
);

	@src/core/ems_portal.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_fw.h
"

6 
	~"ems_p‹èl.h
"

7 
	~"ems_ødius.h
"

9 
	#PORTAL_RETRY_TIMES
 3

	)

10 
	#PORTAL_RETRY_TIMEOUT
 9

	)

11 
	#PORTAL_ERROR_TIMEOUT
 30000

	)

13 
	#ERR_PORTAL_NETWORK
 0x3000

	)

14 
	#ERR_PORTAL_RESPONSE
 0x3001

	)

17 
ems_öt
 
p‹èl_°¨t
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

18 
ems_öt
 
p‹èl_ªg
 (
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

19 
ems_öt
 
p‹èl_n‹mÆ
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

20 
ems_öt
 
p‹èl_hb
 (
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

21 
ems_öt
 
p‹èl_°›≥d
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

22 
ems_öt
 
p‹èl_îr
 (
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

24 
	$ems_öt
 (*
	tp‹èl_evt_func
)(
	tems_p‹èl
 *
	t±l
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

25 
p‹èl_evt_func
 
p‹èl_evt_h™dÀr
[] =

27 [
°_°¨t
] = 
p‹èl_°¨t
,

28 [
°_ªg
] = 
p‹èl_ªg
,

29 [
°_n‹mÆ
] = 
p‹èl_n‹mÆ
,

30 [
°_hb
] = 
p‹èl_hb
,

31 [
°_îr
] = 
p‹èl_îr
,

32 [
°_°›≥d
] = 
p‹èl_°›≥d


33 
	}
};

35 
ems_öt
 
p‹èl_to_ªg
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

36 
ems_öt
 
p‹èl_to_n‹mÆ
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

37 
ems_öt
 
p‹èl_to_hb
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

38 
ems_öt
 
p‹èl_to_îr
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

40 
	$ems_öt
 (*
	tp‹èl_timeout_func
)(
	tems_p‹èl
 *
	t±l
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_timeout
 *
	tto
);

41 
p‹èl_timeout_func
 
p‹èl_timeout_h™dÀr
[] =

43 [
°_°¨t
] = 
NULL
,

44 [
°_ªg
] = 
p‹èl_to_ªg
,

45 [
°_n‹mÆ
] = 
p‹èl_to_n‹mÆ
,

46 [
°_hb
] = 
p‹èl_to_hb
,

47 [
°_îr
] = 
p‹èl_to_îr
,

48 [
°_°›≥d
] = 
NULL


49 
	}
};

51 
	$ems_öt
 (*
	t±l_ªcv_cb
)(
	tems_p‹èl
 *
	t±l
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_queue
 *
	tli°
);

55 
ems_öt
 
©å
;

56 
ems_öt
 
id
;

57 
ems_öt
 
ty
;

58 } 
	tp‹èl_di˘
;

61 
ems_uch¨
 
ty
;

62 
ems_uch¨
 
Àn
;

63 
ems_ch¨
 
vÆ
[2];

64 } 
	tp‹èl_©å
;

67 
p‹èl_ty_ªq_chÆÀnge
 = 0x01,

68 
p‹èl_ty_ack_chÆÀnge
 = 0x02,

69 
p‹èl_ty_ªq_auth
 = 0x03,

70 
p‹èl_ty_ack_auth
 = 0x04,

71 
p‹èl_ty_ªq_logout
 = 0x05,

72 
p‹èl_ty_ack_logout
 = 0x06,

73 
p‹èl_ty_aff_ack_auth
 = 0x07,

74 
p‹èl_ty_¡f_logout
 = 0x08,

75 
p‹èl_ty_ªq_öfo
 = 0x09,

76 
p‹èl_ty_ack_öfo
 = 0x0a

80 
p‹èl_u£r_°_n‹mÆ
 = 0x00,

81 
p‹èl_u£r_°_ªq_chÆÀnge
 = 0x01,

82 
p‹èl_u£r_°_ack_chÆÀnge
 = 0x02,

83 
p‹èl_u£r_°_ªq_auth
 = 0x03,

84 
p‹èl_u£r_°_ack_auth
 = 0x04,

85 
p‹èl_u£r_°_ªq_logout
 = 0x05,

86 
p‹èl_u£r_°_ack_logout
 = 0x06,

87 
p‹èl_u£r_°_aff_ack_auth
 = 0x07,

88 
p‹èl_u£r_°_¡f_logout
 = 0x08

91 
	#PORTAL_AUTH_TYPE
 "PAP,CHAP"

	)

93 
	#TYPE_INT
 0

	)

94 
	#TYPE_STRING
 1

	)

96 
	#ATTR_PKGTYPE
 0x01

	)

97 
	#ATTR_AUTHTYPE
 0x02

	)

98 
	#ATTR_NASNAME
 0x03

	)

99 
	#ATTR_RESPONSE
 0x04

	)

100 
	#ATTR_USERNAME
 0x05

	)

101 
	#ATTR_PASSWORD
 0x06

	)

102 
	#ATTR_CHALLENGE
 0x07

	)

103 
	#ATTR_CHAPPASS
 0x08

	)

104 
	#ATTR_USERMAC
 0x09

	)

105 
	#ATTR_ONLINE
 0x0a

	)

108 
p‹èl_di˘
 
g_di˘
[] = {

109 {
ATTR_PKGTYPE
, 0x0b, 
TYPE_INT
},

110 {
ATTR_AUTHTYPE
, 0x02, 
TYPE_STRING
},

111 {
ATTR_NASNAME
, 0x03, 
TYPE_STRING
},

112 {
ATTR_RESPONSE
, 0x12, 
TYPE_STRING
},

113 {
ATTR_USERNAME
, 0x01, 
TYPE_STRING
},

114 {
ATTR_PASSWORD
, 0x02, 
TYPE_STRING
},

115 {
ATTR_CHALLENGE
, 0x03, 
TYPE_STRING
},

116 {
ATTR_CHAPPASS
, 0x04, 
TYPE_STRING
},

117 {
ATTR_USERMAC
, 0xc9, 
TYPE_STRING
},

118 {
ATTR_ONLINE
, 0x09, 
TYPE_STRING
}

119 
	}
};

121 
p‹èl_di˘
 *
	$±l_di˘_lﬂd
(
ems_öt
 
©å
)

123 
ems_öt
 
i
, 
Àn
;

124 
p‹èl_di˘
 *
di˘
 = 
NULL
;

126 
Àn
 = (
g_di˘
Ë/ (
p‹èl_di˘
);

128 
i
 = 0; i < 
Àn
; i++) {

129 
di˘
 = &
g_di˘
[
i
];

131 i‡(
di˘
->
©å
 ==áttr)

132  
di˘
;

135  
NULL
;

136 
	}
}

139 
ems_void
 
	$±l_vp_de°roy
(
p‹èl_vÆue_∑ú
 *
vp
)

141 i‡(
vp
) {

142 i‡(
vp
->
vÆ
) {

143 
	`ems_‰ì
(
vp
->
vÆ
);

144 
vp
->
vÆ
 = 
NULL
;

147 
	`ems_‰ì
(
vp
);

149 
	}
}

151 
p‹èl_vÆue_∑ú
 *
	$±l_vp_√w
()

153 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

155 
vp
 = (
p‹èl_vÆue_∑ú
 *)
	`ems_mÆloc
((portal_value_pair));

156 i‡(
vp
) {

157 
	`mem£t
(
vp
, 0, (
p‹èl_vÆue_∑ú
));

158 
vp
->
vÆ
 = 
NULL
;

159 
	`ems_queue_öô
(&
vp
->
íåy
);

162  
vp
;

163 
	}
}

166 
p‹èl_vÆue_∑ú
 *

167 
	$±l_vp_≠≥nd
(
ems_queue
 *
hód
, 
ems_öt
 
©å
, 
ems_cch¨
 *
vÆ
,Éms_öà
lvÆ
)

169 
p‹èl_di˘
 *
di˘
 = 
NULL
;

170 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

172 
di˘
 = 
	`±l_di˘_lﬂd
(
©å
);

173 i‡(!
di˘
) {

174 
	`ems_as£π
(0 && "shouldÇever be here");

175 
	`ems_l_åa˚
("[p‹èl] didÇŸ födányáâribuã : %d", 
©å
);

176  
NULL
;

179 
vp
 = 
	`±l_vp_√w
();

180 i‡(!
vp
)

181  
NULL
;

183 
vp
->
©å
 = 
di˘
->attr;

184 
vp
->
id
 = 
di˘
->id;

185 
vp
->
ty
 = 
di˘
->ty;

187 
di˘
->
ty
) {

188 
TYPE_STRING
:

190 i‡(
vÆ
) {

191 i‡(
lvÆ
 < 0)

192 
lvÆ
 = 
	`°æí
((
ems_ch¨
 *)
vÆ
);

194 
vp
->
lvÆ
 =Üval;

195 i‡(
vp
->
lvÆ
 > 253) {

196 
	`ems_l_åa˚
("[p‹èl] vÆuêÀngthÅoÿl⁄g: %d", 
vp
->
lvÆ
);

197 
	`±l_vp_de°roy
(
vp
);

198  
NULL
;

201 
vp
->
vÆ
 = 
	`ems_mÆloc
(
lvÆ
 + 1);

202 i‡(!
vp
->
vÆ
) {

203 
	`±l_vp_de°roy
(
vp
);

204  
NULL
;

207 
	`mem˝y
(
vp
->
vÆ
, vÆ, 
lvÆ
);

208 
vp
->
vÆ
[vp->
lvÆ
] = '\0';

210 
vp
->
vÆ
 = 
NULL
;

211 
vp
->
lvÆ
 = 0;

216 
TYPE_INT
:

218 
vp
->
lvÆ
 = *(
ems_öt
 *)
vÆ
;

223 
	`ems_as£π
(0 && "never be here");

224 
	`±l_vp_de°roy
(
vp
);

225  
NULL
;

228 
	`ems_queue_ö£π_èû
(
hód
, &
vp
->
íåy
);

230  
vp
;

231 
	}
}

233 
ems_öt
 
	$±l_∑ck_li°
(
ems_queue
 *
li°
, 
ems_buf„r
 *
buff
)

235 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

236 
p‹èl_©å
 *
©å
;

237 
ems_queue
 *
q
;

238 
ems_ch¨
 *
buf
 = 
	`buf_wr
(
buff
);

239 
ems_öt
 
lbuf
 = 
	`buf_À·
(
buff
);

241 
	`ems_queue_f‹óch
(
li°
, 
q
) {

242 
vp
 = 
	`ems_c⁄èöî_of
(
q
, 
p‹èl_vÆue_∑ú
, 
íåy
);

243 
©å
 = (
p‹èl_©å
 *Ë
buf
;

245 i‡(
lbuf
 <= 0)

246  
EMS_BUFFER_INSUFFICIENT
;

248 
vp
->
ty
) {

249 
TYPE_STRING
:

251 
©å
->
ty
 = 
vp
->
id
;

252 
©å
->
Àn
 = 
vp
->
lvÆ
 + 2;

254 i‡(
lbuf
 <
©å
->
Àn
)

255  
EMS_BUFFER_INSUFFICIENT
;

257 i‡(
vp
->
vÆ
) {

258 
	`ems_as£π
(
vp
->
lvÆ
 > 0);

259 
	`mem˝y
(
©å
->
vÆ
, 
vp
->vÆ, vp->
lvÆ
);

264 
TYPE_INT
:

266 
©å
->
ty
 = 
vp
->
id
;

267 
©å
->
Àn
 = 6;

269 i‡(
lbuf
 <
©å
->
Àn
)

270  
EMS_BUFFER_INSUFFICIENT
;

272 
vp
->
lvÆ
 = 
	`ht⁄l
(vp->lval);

274 
	`mem˝y
(
©å
->
vÆ
, &
vp
->
lvÆ
, 4);

279 
	`ems_as£π
(0 && "never be here");

280  
EMS_ERR
;

283 
buf
 +
©å
->
Àn
;

284 
lbuf
 -
©å
->
Àn
;

287 
	`ems_buf„r_£ek_wr
(
buff
, 
	`abs
(
	`buf_wr
(buffË- 
buf
), 
EMS_BUFFER_SEEK_CUR
);

289  
EMS_OK
;

290 
	}
}

292 
ems_öt


293 
	$±l_∑r£_˘x
(
ems_queue
 *
li°
, 
ems_cch¨
 *
buf
, 
ems_öt
 
lbuf
,Éms_öà
n
,Éms_öà
evt
)

295 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

296 
p‹èl_©å
 *
©å
 = 
NULL
;

297 
ems_cch¨
 *
p
;

298 
ems_öt
 
©åibuã
;

300 
p
 = 
buf
;

301 
n
 !0 && 
lbuf
 > 0) {

302 
©å
 = (
p‹èl_©å
 *)
buf
;

303 i‡(
lbuf
 < 
©å
->
Àn
)

304  
EMS_CONTINUE
;

306 
buf
 +
©å
->
Àn
;

307 
lbuf
 -
©å
->
Àn
;

308 
n
--;

310 
©å
->
ty
) {

312 
©åibuã
 = 
ATTR_USERNAME
;

315 
©åibuã
 = 
ATTR_PKGTYPE
;

318 
©åibuã
 = 
ATTR_AUTHTYPE
;

319 i‡(
evt
)

320 
©åibuã
 = 
ATTR_PASSWORD
;

323 
©åibuã
 = 
ATTR_NASNAME
;

324 i‡(
evt
)

325 
©åibuã
 = 
ATTR_CHALLENGE
;

328 
©åibuã
 = 
ATTR_CHAPPASS
;

331 
©åibuã
 = 
ATTR_USERMAC
;

334 
©åibuã
 = 
ATTR_RESPONSE
;

337 
©åibuã
 = 
ATTR_ONLINE
;

341 
©åibuã
 = 0;

342 
	`ems_l_åa˚
("[p‹èl] unkow¿ty: %d,Üígth: %d", 
©å
->
ty
,áâr->
Àn
);

343 i‡(
©å
->
Àn
 <= 0) {

344 
	`ems_l_åa˚
("[p‹èl]∑r£ st›≥d", 
©å
->
ty
,áâr->
Àn
);

345  
	`abs
(
buf
 -
p
);

350 i‡(
©åibuã
 == 0)

353 
vp
 = 
	`±l_vp_≠≥nd
(
li°
, 
©åibuã
, 
©å
->
vÆ
,áâr->
Àn
 - 2);

355 i‡(
vp
 && (vp->
ty
 =
TYPE_INT
)) {

356 
vp
->
lvÆ
 = 
	`¡ohl
(vp->lval);

359 #ifde‡
DEBUG


360 i‡(
vp
) {

361 i‡(
vp
->
ty
 =
TYPE_INT
)

362 
	`ems_l_åa˚
("[portal] gotáttr: %d, id: %d, value: %x",

363 
vp
->
©å
, vp->
id
, vp->
lvÆ
);

366 i‡(
©åibuã
 =
ATTR_USERMAC
) {

367 
ems_ch¨
 
u£rmac
[12];

368 
	`ems_bö2°r
(
vp
->
vÆ
, vp->
lvÆ
, 
u£rmac
, 12);

369 
	`ems_l_åa˚
("[portal] gotáttr: %d, id: %d value: %s",

370 
vp
->
©å
, vp->
id
, 
u£rmac
);

373 
	`ems_l_åa˚
("[portal] gotáttr: %d, id: %d, value: %s",

374 
vp
->
©å
, vp->
id
, vp->
vÆ
?vp->val:"no ctx");

380  
	`abs
(
buf
 - 
p
);

381 
	}
}

383 
p‹èl_vÆue_∑ú
 *
	$±l_vp_föd
(
ems_queue
 *
li°
, 
ems_öt
 
©å
)

385 
ems_queue
 *
p
;

386 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

388 
	`ems_queue_f‹óch
(
li°
, 
p
) {

389 
vp
 = 
	`ems_c⁄èöî_of
(
p
, 
p‹èl_vÆue_∑ú
, 
íåy
);

391 i‡(
vp
->
©å
 ==áttr)

392  
vp
;

395  
NULL
;

396 
	}
}

400 
p‹èl_u£r
 *
	$±l_u£r_√w
()

402 
p‹èl_u£r
 *
u£r
 = 
NULL
;

404 
u£r
 = (
p‹èl_u£r
 *)
	`ems_mÆloc
((portal_user));

405 i‡(
u£r
) {

406 
	`mem£t
(
u£r
, 0, (
p‹èl_u£r
));

407 
	`°r_öô
(&
u£r
->
«me
);

408 
	`°r_öô
(&
u£r
->
∑ss
);

409 
	`°r_öô
(&
u£r
->
mac
);

410 
	`°r_öô
(&
u£r
->
ù
);

412 
u£r
->
£rül
 = 0;

413 
u£r
->
ªqid
 = 0;

414 
u£r
->
Êg
 = 0;

416 
	`ems_timeout_öô
(&
u£r
->
to
);

417 
	`ems_buf„r_öô
(&
u£r
->
buf_out
, 
EMS_BUFFER_1K
);

418 
u£r
->
°
 = 
p‹èl_u£r_°_n‹mÆ
;

419 
u£r
->
ªåy_times
 = 0;

420 
u£r
->
ªåy_timeout
 = 0;

422 
	`ems_queue_öô
(&
u£r
->
íåy
);

425  
u£r
;

426 
	}
}

428 
ems_void
 
	$±l_u£r_de°roy
(
p‹èl_u£r
 *
u£r
)

430 i‡(
u£r
) {

431 
	`ems_l_åa˚
("destroy user(%s, %s, %s, %s),Éxit st: 0x%x",

432 
	`°r_ãxt
(&
u£r
->
«me
),

433 
	`°r_ãxt
(&
u£r
->
∑ss
),

434 
	`°r_ãxt
(&
u£r
->
mac
),

435 
	`°r_ãxt
(&
u£r
->
ù
),

436 
u£r
->
°


438 
	`°r_˛ór
(&
u£r
->
«me
);

439 
	`°r_˛ór
(&
u£r
->
∑ss
);

440 
	`°r_˛ór
(&
u£r
->
mac
);

441 
	`°r_˛ór
(&
u£r
->
ù
);

444 
	`ems_buf„r_unöô
(&
u£r
->
buf_out
);

445 
	`ems_‰ì
(
u£r
);

447 
	}
}

450 
p‹èl_u£r
 *
	$±l_u£r_föd
(
ems_p‹èl
 *
±l
, 
ems_cch¨
 *
ù
)

452 
ems_queue
 *
p
;

453 
p‹èl_u£r
 *
u£r
;

455 
	`ems_as£π
(
±l
 && 
ù
);

457 
	`ems_queue_f‹óch
(&
±l
->
u£rs
, 
p
) {

459 
u£r
 = 
	`ems_c⁄èöî_of
(
p
, 
p‹èl_u£r
, 
íåy
);

461 
	`ems_as£π
(
	`°r_Àn
(&
u£r
->
ù
) > 0);

463 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
u£r
->
ù
), ip))

464  
u£r
;

467  
NULL
;

468 
	}
}

472 
ems_öt
 
	$±l_evt_run
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

474 
	`ems_as£π
(
p‹èl_evt_h™dÀr
[
±l
->
°
] !
NULL
);

476  
p‹èl_evt_h™dÀr
[
±l
->
°
]’é, 
£ss
, 
Êg
);

477 
	}
}

479 
ems_öt


480 
	$±l_timeout_run
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

482 
	`ems_as£π
(
p‹èl_timeout_h™dÀr
[
±l
->
°
] !
NULL
);

484 i‡(
p‹èl_timeout_h™dÀr
[
±l
->
°
])

485  
p‹èl_timeout_h™dÀr
[
±l
->
°
]’é, 
£ss
, 
to
);

487  
EMS_OK
;

488 
	}
}

490 
ems_void
 
	$±l_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

492 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
	`£ss_cb¨g
(
£ss
);

494 
	`ems_as£π
(
±l
->
°
 > 
°_mö
 &&Öé->° < 
°_max
);

496 i‡(
îr
) {

497 
	`ems_l_åa˚
("[portal]ÉvtÉrr, sess: %d %s",

498 
	`ems_sock_fd
(&
£ss
->
sock
),

499 
	`ems_sock_addr
(&
£ss
->
sock
));

500 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

501 
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

505 
	`±l_evt_run
(
±l
, 
£ss
, 
Êg
);

506 
	}
}

508 
ems_void
 
	$±l_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

510 
ems_p‹èl
 *
±l
 = (ems_p‹è»*)
	`£ss_cb¨g
(
£ss
);

512 
	`ems_as£π
(
±l
->
°
 > 
°_mö
 &&Öé->° < 
°_max
);

514 
	`±l_timeout_run
(
±l
, 
£ss
, 
to
);

515 
	}
}

517 
ems_öt
 
	$p‹èl_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

519 
ems_öt
 
fd
;

520 
sockÀn_t
 
Àn
;

521 
sockaddr_ö
 
addr
;

522 
ems_sock
 *
sock
 = &
£ss
->sock;

523 
	`ems_as£π
(
£ss
);

525 
	`mem£t
(&
addr
, 0, (addr));

526 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

527 
	`ems_l_åa˚
("[portal]gethostbyename failed %s : %s",

528 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

529  
EMS_ERR
;

532 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

533 i‡(
fd
 <= 0)

534  
EMS_ERR
;

536 
	`ems_l_åa˚
("[portal] sess(%d) connectÅo: %s(%s): %d...",

537 
fd
,

538 
	`ems_sock_addr
(
sock
),

539 
	`öë_¡ﬂ
(
addr
.
sö_addr
),

540 
	`ems_sock_p‹t
(
sock
));

542 
addr
.
sö_Ámûy
 = 
AF_INET
;

543 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

545 
	`ems_£ä⁄blockög
(
fd
, 
YES
);

546 
Àn
 = (
sockaddr_ö
);

547 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

548 
	`ems_l_åa˚
("[portal] connectÅo: %s:%d: failed: %s",

549 
	`ems_sock_addr
(
sock
),

550 
	`ems_sock_p‹t
(
sock
),

551 
	`ems_œ°îrmsg
());

552 
	`˛o£
(
fd
);

553  
EMS_ERR
;

556 
	`ems_sock_£tfd
(
sock
, 
fd
);

557  
EMS_OK
;

558 
	}
}

560 
ems_öt
 
	$p‹èl_°¨t
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

562 i‡–!
±l
->
£ss
) {

563 
±l
->
£ss
 = 
	`ems_£ssi⁄_√w
();

564 i‡(!
±l
->
£ss
) {

565 
	`ems_as£π
(0 && "never be here");

566 
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

567  
EMS_ERR
;

570 
	`ems_buf„r_ö¸ó£
(&
±l
->
£ss
->
buf_ö
, 
EMS_BUFFER_1K
);

571 
	`ems_buf„r_ö¸ó£
(&
±l
->
£ss
->
buf_out
, 
EMS_BUFFER_1K
);

574 
£ss
 = 
±l
->sess;

575 
±l
->
œ°îr
 = 0;

576 
	`£ss_cb¨g_£t
(
£ss
, 
±l
);

578 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
±l
->
addr
));

579 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
±l
->
p‹t
);

580 i‡(
	`p‹èl_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

581 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

582 
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

583  
EMS_ERR
;

586 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_RADIUS_START
, 
NULL
);

588  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_ªg
);

589 
	}
}

591 
ems_cch¨
 *
	$±l_mac_to_ødius
(
ems_°r
 *
mac
)

593 
ems_ch¨
 
buff
[32], *
p
;

594 
ems_cch¨
 *
buf
;

595 
ems_öt
 
i
;

597 
i
 = 0;

598 
buf
 = 
	`°r_ãxt
(
mac
);

599 
p
 = 
buff
;

601 *
buf
) {

602 *
p
++ = *
buf
++;

604 i‡(
i
++ % 2)

605 *
p
++ = ':';

608 
p
--;

609 *
p
 = '\0';

611  
buff
;

612 
	}
}

614 
ems_cch¨
 *
	$ødius_mac_to_±l
(
ems_cch¨
 *
mac
)

616 
ems_ch¨
 
buf
[32] = {0};

617 
ems_ch¨
 
ch
, *
p
;

619 
p
 = 
buf
;

621 
	`mem£t
(
buf
, 0, (buf));

622 *
mac
) {

623 
ch
 = *
mac
++;

624 i‡(
ch
 == ':')

626 *
p
++ = 
ch
;

629  
buf
;

630 
	}
}

633 
ems_void
 
	$u£r_timeout_cb
(
ems_timeout
 *
timeout
)

635 
p‹èl_u£r
 *
u£r
 = 
	`ems_c⁄èöî_of
(
timeout
,Ö‹èl_u£r, 
to
);

636 
ems_p‹èl
 *
±l
 = 
u£r
->ptl;

638 
	`ems_l_åa˚
("timî u£r(°: 0x%x, %s, %s),ÑëryÅimes: %d", 
u£r
->
°
,

639 
	`°r_ãxt
(&
u£r
->
ù
), så_ãxt(&u£r->
«me
), u£r->
ªåy_times
);

641 
u£r
->
ªåy_times
--;

642 i‡(
u£r
->
ªåy_times
 > 0) {

643 
ems_£ssi⁄
 *
£ss
 = 
±l
->sess;

645 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf
);

646 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, 
	`buf_rd
(&
u£r
->
buf_out
), 
	`buf_Àn
(&user->buf_out));

647 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
±l_evt_cb
);

648 
	`ems_timeout_ö£π_s‹ãd
(
	`timeouãr
(), &
u£r
->
to
, u£r->
ªåy_timeout
 * 1000, 
u£r_timeout_cb
);

652 
u£r
->
°
) {

653 
p‹èl_u£r_°_ack_auth
:

655 i‡(
	`ems_Êag_like
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
))

658 
js⁄_obje˘
 *
jobj
;

659 
jobj
 = 
	`js⁄_obje˘_√w_obje˘
();

660 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
«me
)));

661 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
ù
)));

662 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`±l_mac_to_ødius
(&
u£r
->
mac
)));

663 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_CMD_RADIUS_LOGOUT
, 
jobj
);

665 
	`js⁄_obje˘_put
(
jobj
);

667 
	`±l_u£r_¡f_logout
(
±l
, 
u£r
);

669 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

670 
	`±l_u£r_de°roy
(
u£r
);

675 
p‹èl_u£r_°_¡f_logout
:

676 
p‹èl_u£r_°_ack_logout
:

677 
p‹èl_u£r_°_ack_chÆÀnge
:

679 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

680 
	`±l_u£r_de°roy
(
u£r
);

687 
	}
}

690 
ems_öt
 
	$±l_evt_ack
(

691 
ems_p‹èl
 *
±l
,

692 
p‹èl_u£r
 *
u£r
,

693 
p‹èl_auth_hdr
 *
auth
,

694 
ems_queue
 *
©å
)

696 
ems_ch¨
 *
wr
;

697 
ems_£ssi⁄
 *
£ss
 = 
±l
->sess;

699 
	`ems_as£π
(
±l
 && 
auth
 && "never show upÅhisÜine");

701 i‡(
©å
) {

702 
	`ems_queue_Àn
(
©å
, 
auth
->
n_©å
);

704 
auth
->
n_©å
 = 0;

706 
wr
 = 
	`buf_wr
(&
£ss
->
buf
);

707 
	`ems_buf„r_wrôe
(&
£ss
->
buf
, (
ems_ch¨
 *)
auth
->
vÆ
, (
p‹èl_auth_hdr
));

708 i‡(
©å
)

709 
	`±l_∑ck_li°
(
©å
, &
£ss
->
buf
);

711 
	`ems_l_åa˚
("[p‹èl]±l,áck 0x%x,Éº: %d", 
auth
->
ty
,áuth->
îr
);

712 i‡(
u£r
) {

713 
	`ems_l_åa˚
("[portal]ptl (%s: %s),áck 0x%x,Érr: %d",

714 
	`°r_ãxt
(&
u£r
->
ù
), så_ãxt(&u£r->
«me
), 
auth
->
ty
,áuth->
îr
);

716 
	`ems_buf„r_˛ór
(&
u£r
->
buf_out
);

717 
	`ems_buf„r_wrôe
(&
u£r
->
buf_out
, 
wr
, 
	`abs
(
	`buf_wr
(&
£ss
->
buf
) - wr));

719 
u£r
->
ªåy_times
 = 
PORTAL_RETRY_TIMES
;

720 
u£r
->
ªåy_timeout
 = 
PORTAL_RETRY_TIMEOUT
;

722 
	`ems_timeout_ö£π_s‹ãd
(
	`timeouãr
(), &
u£r
->
to
, u£r->
ªåy_timeout
 * 1000, 
u£r_timeout_cb
);

725 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
±l_evt_cb
);

727  
EMS_OK
;

728 
	}
}

730 
ems_öt


731 
	$±l_evt_ªq_auth
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

733 
p‹èl_u£r
 *
u£r
;

734 
p‹èl_vÆue_∑ú
 *
vp
;

735 
ems_ch¨
 
ù
[32];

736 
ems_ch¨
 
mac
[32];

737 
ö_addr
 
addr
;

739 
	`mem£t
(&
addr
, 0, (addr));

740 
	`mem˝y
(&
addr
.
s_addr
, &
auth
->
ù
, 4);

742 
	`¢¥ötf
(
ù
, (ù), "%s", 
	`öë_¡ﬂ
(
addr
));

744 
u£r
 = 
	`±l_u£r_föd
(
±l
, 
ù
);

746 i‡(!
u£r
) {

747 
vp
 = 
	`±l_vp_föd
(
©å
, 
ATTR_USERNAME
);

748 i‡(!(
vp
 && vp->
vÆ
)Ë
îr_out
;

750 
u£r
 = 
	`±l_u£r_√w
();

751 i‡(!
u£r
Ë
îr_out
;

753 
u£r
->
±l
 =Ötl;

754 
	`°r_£t
(&
u£r
->
«me
, 
vp
->
vÆ
);

755 
	`°r_£t
(&
u£r
->
ù
, ip);

756 
	`ems_queue_ö£π_èû
(&
±l
->
u£rs
, &
u£r
->
íåy
);

759 
	`ems_l_åa˚
("(curent(0x%04x, 0x%04x), user(0x%04x, 0x%04x)",

760 
auth
->
£rül
,áuth->
ªqid
, 
u£r
->serial, user->reqid);

762 i‡(
	`ems_Êag_like
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
)) {

763 
u£r
->
£rül
 = 
auth
->serial;

764 
auth
->
îr
 = 2;

765 
îr_out_1
;

768 i‡(
u£r
->
°
 =
p‹èl_u£r_°_ªq_auth
) {

769 
auth
->
îr
 = 3;

770 
îr_out_1
;

773 i‡(
u£r
->
°
 =
p‹èl_u£r_°_ack_chÆÀnge
) {

774 i‡(
u£r
->
ªqid
 !
auth
->reqid) {

775 
auth
->
îr
 = 4;

776 
îr_out_1
;

781 
	`ems_Êag_un£t
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
);

782 
u£r
->
°
 = 
p‹èl_u£r_°_ªq_auth
;

783 
u£r
->
£rül
 = 
auth
->serial;

784 
u£r
->
ªqid
 = 
auth
->reqid;

785 
u£r
->
auth_ty
 = 
auth
->auth_ty;

787 i‡(
auth
->
auth_ty
 == 0) {

789 
vp
 = 
	`±l_vp_föd
(
©å
, 
ATTR_CHAPPASS
);

790 i‡(!(
vp
 && vp->
vÆ
)Ë
îr_out
;

791 
	`°r_£t
(&
u£r
->
∑ss
, 
vp
->
vÆ
);

793 } i‡(
auth
->
auth_ty
 == 1) {

795 
vp
 = 
	`±l_vp_föd
(
©å
, 
ATTR_PASSWORD
);

796 i‡(!(
vp
 && vp->
vÆ
)Ë
îr_out
;

797 
	`°r_£t
(&
u£r
->
∑ss
, 
vp
->
vÆ
);

800 
	`ems_as£π
(0 && "server'sÉrror");

801 
îr_out
;

804 
vp
 = 
	`±l_vp_föd
(
©å
, 
ATTR_USERMAC
);

805 i‡(
vp
 && vp->
vÆ
)

806 
	`ems_bö2°r
(
vp
->
vÆ
, vp->
lvÆ
, 
mac
, 32);

808 
	`¢¥ötf
(
mac
, (mac), "%s", 
	`ødius_mac_to_±l
(
	`ems_u£rmac
(
ù
)));

809 i‡(
	`°æí
(
mac
) <= 0)

810 
îr_out
;

813 
	`°r_£t
(&
u£r
->
mac
, mac);

815 
js⁄_obje˘
 *
jobj
;

816 
jobj
 = 
	`js⁄_obje˘_√w_obje˘
();

817 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
«me
)));

818 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£Ωass", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
∑ss
)));

819 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
ù
)));

820 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`±l_mac_to_ødius
(&
u£r
->
mac
)));

821 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_CMD_RADIUS_AUTH
, 
jobj
);

823 
	`js⁄_obje˘_put
(
jobj
);

826  
EMS_OK
;

828 
îr_out_1
:

829 
auth
->
£rül
 = 
	`ht⁄s
(auth->serial);

830 
auth
->
ªqid
 = 
	`ht⁄s
(auth->reqid);

831 
auth
->
ty
 = 
p‹èl_ty_ack_auth
;

832  
	`±l_evt_ack
(
±l
, 
NULL
, 
auth
, NULL);

834 
îr_out
:

835 
auth
->
£rül
 = 
	`ht⁄s
(auth->serial);

836 
auth
->
ªqid
 = 
	`ht⁄s
(auth->reqid);

837 i‡(
u£r
)

838 
u£r
->
°
 = 
p‹èl_u£r_°_ack_auth
;

839 
auth
->
ty
 = 
p‹èl_ty_ack_auth
;

840 
auth
->
îr
 = 1;

841  
	`±l_evt_ack
(
±l
, 
u£r
, 
auth
, 
NULL
);

842 
	}
}

844 
ems_öt


845 
	$±l_evt_ªq_öfo
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

847 
auth
->
ty
 = 
p‹èl_ty_ack_öfo
;

848 
auth
->
îr
 = 0;

849  
	`±l_evt_ack
(
±l
, 
NULL
, 
auth
, NULL);

850 
	}
}

852 
ems_öt


853 
	$±l_evt_ªq_logout
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

855 
p‹èl_u£r
 *
u£r
;

856 
ems_ch¨
 
ù
[32];

857 
ö_addr
 
addr
;

859 
	`mem£t
(&
addr
, 0, (addr));

860 
	`mem˝y
(&
addr
.
s_addr
, &
auth
->
ù
, 4);

862 
	`¢¥ötf
(
ù
, (ù), "%s", 
	`öë_¡ﬂ
(
addr
));

864 
auth
->
ty
 = 
p‹èl_ty_ack_logout
;

865 
auth
->
îr
 = 0;

866 
auth
->
£rül
 = 
	`ht⁄s
(auth->serial);

867 
auth
->
ªqid
 = 
	`ht⁄s
(auth->reqid);

869 
u£r
 = 
	`±l_u£r_föd
(
±l
, 
ù
);

871 i‡(
u£r
) {

872 
js⁄_obje˘
 *
jobj
;

874 
u£r
->
°
 = 
p‹èl_u£r_°_ack_logout
;

875 
u£r
->
£rül
 = 
auth
->serial;

876 
u£r
->
ªqid
 = 
auth
->reqid;

877 
	`ems_Êag_un£t
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
);

879 
jobj
 = 
	`js⁄_obje˘_√w_obje˘
();

880 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
«me
)));

881 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
ù
)));

882 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`±l_mac_to_ødius
(&
u£r
->
mac
)));

883 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_CMD_RADIUS_LOGOUT
, 
jobj
);

885 
	`js⁄_obje˘_put
(
jobj
);

888  
	`±l_evt_ack
(
±l
, 
u£r
, 
auth
, 
NULL
);

889 
	}
}

891 
ems_öt


892 
	$±l_evt_aff_ack_auth
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

894 
p‹èl_u£r
 *
u£r
;

895 
ems_ch¨
 
ù
[32];

896 
ö_addr
 
addr
;

898 
	`mem£t
(&
addr
, 0, (addr));

899 
	`mem˝y
(&
addr
.
s_addr
, &
auth
->
ù
, 4);

901 
	`¢¥ötf
(
ù
, (ù), "%s", 
	`öë_¡ﬂ
(
addr
));

903 
u£r
 = 
	`±l_u£r_föd
(
±l
, 
ù
);

905 i‡(
u£r
) {

906 
	`ems_Êag_£t
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
);

907 
u£r
->
°
 = 
p‹èl_u£r_°_aff_ack_auth
;

908 
	`ems_timeout_ˇn˚l
(&
u£r
->
to
);

911  
EMS_OK
;

912 
	}
}

914 
ems_öt


915 
	$±l_evt_ªq_chÆÀnge
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

917 
p‹èl_u£r
 *
u£r
;

918 
ems_ch¨
 
ù
[32];

919 
ö_addr
 
addr
;

921 
	`mem£t
(&
addr
, 0, (addr));

922 
	`mem˝y
(&
addr
.
s_addr
, &
auth
->
ù
, 4);

924 
	`¢¥ötf
(
ù
, (ù), "%s", 
	`öë_¡ﬂ
(
addr
));

926 
u£r
 = 
	`±l_u£r_föd
(
±l
, 
ù
);

928 i‡(!
u£r
) {

929 
p‹èl_vÆue_∑ú
 *
vp
;

930 
vp
 = 
	`±l_vp_föd
(
©å
, 
ATTR_USERNAME
);

931 i‡(!(
vp
 && vp->
vÆ
)Ë
îr_out
;

933 
u£r
 = 
	`±l_u£r_√w
();

934 i‡(!
u£r
Ë
îr_out
;

936 
u£r
->
±l
 =Ötl;

937 
	`°r_£t
(&
u£r
->
«me
, 
vp
->
vÆ
);

938 
	`°r_£t
(&
u£r
->
ù
, ip);

939 
u£r
->
£rül
 = 
auth
->serial;

940 
u£r
->
ªqid
 = 
	`øndom
() & 0xffff;

941 
	`ems_queue_ö£π_èû
(&
±l
->
u£rs
, &
u£r
->
íåy
);

943 
îr_out
;

946 
ems_queue
 
vp
;

948 
	`ems_queue_öô
(&
vp
);

950 
ems_ch¨
 
ve˘‹
[32] = {0};

951 
	`rc_øndom_ve˘‹
((
ems_uch¨
 *)
ve˘‹
);

952 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_CHALLENGE
,
ve˘‹
, 16);

955 
u£r
->
°
 = 
p‹èl_u£r_°_ack_chÆÀnge
;

956 
u£r
->
auth_ty
 = 
auth
->auth_ty;

957 
auth
->
£rül
 = 
	`ht⁄s
(
u£r
->serial);

958 
auth
->
ªqid
 = 
	`ht⁄s
(
u£r
->reqid);

960 
auth
->
ty
 = 
p‹èl_ty_ack_chÆÀnge
;

961 
auth
->
îr
 = 0;

963 
	`±l_evt_ack
(
±l
, 
u£r
, 
auth
, &
vp
);

964 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

967  
EMS_OK
;

969 
îr_out
:

970 i‡(
u£r
)

971 
u£r
->
°
 = 
p‹èl_u£r_°_ack_chÆÀnge
;

973 
auth
->
£rül
 = 
	`ht⁄s
(auth->serial);

974 
auth
->
ªqid
 = 
	`ht⁄s
(auth->reqid);

975 
auth
->
ty
 = 
p‹èl_ty_ack_chÆÀnge
;

976 
auth
->
îr
 = 1;

977  
	`±l_evt_ack
(
±l
, 
u£r
, 
auth
, 
NULL
);

978 
	}
}

980 
ems_öt


981 
	$±l_¥o˚ss_evt
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
p‹èl_auth_hdr
 *
auth
, 
ems_queue
 *
©å
)

983 
	`ems_as£π
(
±l
 && 
£ss
 && 
auth
);

985 
auth
->
ty
) {

986 
p‹èl_ty_ªq_chÆÀnge
:

987  
	`±l_evt_ªq_chÆÀnge
(
±l
, 
£ss
, 
auth
, 
©å
);

989 
p‹èl_ty_ªq_auth
:

990  
	`±l_evt_ªq_auth
(
±l
, 
£ss
, 
auth
, 
©å
);

992 
p‹èl_ty_ªq_logout
:

993  
	`±l_evt_ªq_logout
(
±l
, 
£ss
, 
auth
, 
©å
);

995 
p‹èl_ty_aff_ack_auth
:

996  
	`±l_evt_aff_ack_auth
(
±l
, 
£ss
, 
auth
, 
©å
);

998 
p‹èl_ty_ªq_öfo
:

999  
	`±l_evt_ªq_öfo
(
±l
, 
£ss
, 
auth
, 
©å
);

1002 
	`ems_as£π
(0 && "never show upÅhisÜine");

1003 
	`ems_l_åa˚
("[p‹èl]nŸ h™dÀ—y: 0x%x,Éº: 0x%xËf‹Çow", 
auth
->
ty
,áuth->
îr
);

1007  
EMS_OK
;

1008 
	}
}

1010 
ems_öt


1011 
	$±l_¥o˚ss_r•
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
±l_ªcv_cb
 
h
)

1013 
p‹èl_auth_hdr
 
auth
;

1014 
ems_cch¨
 *
buf
 = 
NULL
;

1015 
ems_queue
 
vp
;

1016 
ems_öt
 
tŸÆ
, 
πn
 = 
EMS_OK
;

1017 
ems_öt
 
Àn
 = (
auth
);

1019 
	`ems_queue_öô
(&
vp
);

1021 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) <= 0)

1022  
EMS_CONTINUE
;

1024 
buf
 = 
	`buf_rd
(&
£ss
->
buf_ö
);

1026 i‡((*
buf
 & 0x00ff) == 0x01) {

1027 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
Àn
)

1028  
EMS_CONTINUE
;

1030 
	`ems_buf„r_¥e„tch
(&
£ss
->
buf_ö
, (
ems_ch¨
 *)&
auth
, 
Àn
);

1032 
auth
.
£rül
 = 
	`¡ohs
(auth.serial);

1033 
auth
.
ªqid
 = 
	`¡ohs
(auth.reqid);

1035 #ifde‡
DEBUG


1037 
ö_addr
 
addr
;

1038 
	`mem£t
(&
addr
, 0, (addr));

1040 
	`mem˝y
(&
addr
.
s_addr
, &
auth
.
ù
, 4);

1042 
	`ems_l_åa˚
("[portal]evtÅy: %d, serial: 0x%x,Ñeqid:0x%x, ip: %sÉrr: %d,Çattr: %d",

1043 
auth
.
ty
,áuth.
£rül
,áuth.
ªqid
, 
	`öë_¡ﬂ
(
addr
),áuth.
îr
,áuth.
n_©å
);

1046 
tŸÆ
 = (
auth
);

1048 
πn
 = 
	`±l_∑r£_˘x
(&
vp
, 
buf
 + 
Àn
, 
	`buf_Àn
(&
£ss
->
buf_ö
Ë-Üí, 
auth
.
n_©å
, 
EMS_YES
);

1049 i‡(
πn
 < 0) {

1050 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1051  
πn
;

1053 
tŸÆ
 +
πn
;

1055 
πn
 = 
	`±l_¥o˚ss_evt
(
±l
, 
£ss
, &
auth
, &
vp
);

1057 
πn
 = 
	`±l_∑r£_˘x
(&
vp
, 
buf
, 
	`buf_Àn
(&
£ss
->
buf_ö
), -1, 
EMS_NO
);

1058 i‡(
πn
 <= 0) {

1059 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1060  
πn
;

1063 
tŸÆ
 = 
πn
;

1065 
	`ems_as£π
(
h
);

1066 
	`h
(
±l
, 
£ss
, &
vp
);

1069 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_ö
, 
tŸÆ
, 
EMS_BUFFER_SEEK_CUR
);

1070 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

1072 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1074  
πn
;

1075 
	}
}

1077 
ems_öt


1078 
	$±l_ªcv_msg
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
, 
±l_ªcv_cb
 
h
)

1080 
ems_öt
 
ªt
, 
agaö
;

1082 
agaö
 = 
EMS_YES
;

1083 
ªcv_agaö
:

1084 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

1085 i‡(
ªt
 <= 0) {

1086 
ªt
) {

1087 -
EAGAIN
:

1088 
agaö
 = 
EMS_NO
;

1091 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) > 0)

1092 
	`±l_¥o˚ss_r•
(
±l
, 
£ss
, 
h
);

1094  
EMS_ERR
;

1099 
ªt
 = 
	`±l_¥o˚ss_r•
(
±l
, 
£ss
, 
h
);

1101 
ªt
) {

1102 
EMS_BUFFER_INSUFFICIENT
:

1103 
EMS_ERR
:

1104  
EMS_ERR
;

1106 
EMS_OK
:

1107 
EMS_CONTINUE
:

1111 } 
ªt
 !
EMS_CONTINUE
);

1113 i‡(
agaö
)

1114 
ªcv_agaö
;

1116  
EMS_OK
;

1117 
	}
}

1119 
ems_öt


1120 
	$±l_£nd_msg
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1122 
ems_öt
 
ªt
;

1124 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

1125 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

1126 i‡(
ªt
 <= 0) {

1127 
ªt
) {

1128 -
EAGAIN
:

1132  
EMS_ERR
;

1136 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0)

1137 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
±l_evt_cb
);

1139  
EMS_OK
;

1140 
	}
}

1143 
ems_öt
 
	$±l_ªg_r•
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_queue
 *
li°
)

1145 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

1147 
vp
 = 
	`±l_vp_föd
(
li°
, 
ATTR_RESPONSE
);

1149 i‡(
vp
 && vp->
vÆ
 && !
	`°rcmp
(vp->val, "register")) {

1150  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_n‹mÆ
);

1153 
±l
->
œ°îr
 = 
ERR_PORTAL_RESPONSE
;

1154  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1155 
	}
}

1157 
ems_öt
 
	$p‹èl_ªg
 (
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1159 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

1160 i‡(
	`±l_ªcv_msg
(
±l
, 
£ss
, 
Êg
, 
±l_ªg_r•
Ë!
EMS_OK
) {

1161 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1162  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1165  
EMS_OK
;

1168 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1169 i‡(
	`±l_£nd_msg
(
±l
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1170 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1171  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1174  
EMS_OK
;

1177 
	`ems_as£π
(0 && "never be here");

1178  
EMS_OK
;

1179 
	}
}

1181 
ems_öt
 
	$±l_n‹mÆ_r•
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_queue
 *
li°
)

1183  
EMS_OK
;

1184 
	}
}

1186 
ems_öt
 
	$p‹èl_n‹mÆ
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1188 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

1189 i‡(
	`±l_ªcv_msg
(
±l
, 
£ss
, 
Êg
, 
±l_n‹mÆ_r•
Ë!
EMS_OK
) {

1190 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1191  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1194  
EMS_OK
;

1197 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1198 i‡(
	`±l_£nd_msg
(
±l
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1199 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1200  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1203  
EMS_OK
;

1206 
	`ems_as£π
(0 && "never be here");

1207  
EMS_OK
;

1208 
	}
}

1210 
ems_öt
 
	$±l_hb_r•
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_queue
 *
li°
)

1212 
p‹èl_vÆue_∑ú
 *
vp
 = 
NULL
;

1214 
vp
 = 
	`±l_vp_föd
(
li°
, 
ATTR_RESPONSE
);

1216 i‡(
vp
 && vp->
vÆ
 && !
	`°rcmp
(vp->val, "active")) {

1217  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_n‹mÆ
);

1220 
±l
->
œ°îr
 = 
ERR_PORTAL_RESPONSE
;

1221  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1222 
	}
}

1224 
ems_öt
 
	$p‹èl_hb
 (
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1226 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

1227 i‡(
	`±l_ªcv_msg
(
±l
, 
£ss
, 
Êg
, 
±l_hb_r•
Ë!
EMS_OK
) {

1228 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1229  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1232  
EMS_OK
;

1235 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

1236 i‡(
	`±l_£nd_msg
(
±l
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

1237 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1238  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1241  
EMS_OK
;

1244 
	`ems_as£π
(0 && "never be here");

1245  
EMS_OK
;

1246 
	}
}

1248 
ems_öt
 
	$±l_˛ór_Æl_u£rs
(
ems_p‹èl
 *
±l
)

1250 
ems_queue
 *
p
, *
q
;

1251 
p‹èl_u£r
 *
u£r
;

1253 
	`ems_queue_f‹óch_ß„
(&
±l
->
u£rs
, 
p
, 
q
) {

1255 
u£r
 = 
	`ems_c⁄èöî_of
(
p
, 
p‹èl_u£r
, 
íåy
);

1256 i‡(
	`ems_Êag_like
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
))

1258 
js⁄_obje˘
 *
jobj
;

1259 
jobj
 = 
	`js⁄_obje˘_√w_obje˘
();

1260 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
«me
)));

1261 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
u£r
->
ù
)));

1262 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`±l_mac_to_ødius
(&
u£r
->
mac
)));

1263 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_CMD_RADIUS_LOGOUT
, 
jobj
);

1265 
	`js⁄_obje˘_put
(
jobj
);

1268 
	`ems_queue_ªmove
(&
u£r
->
íåy
);

1269 
	`±l_u£r_de°roy
(
u£r
);

1272  
EMS_OK
;

1273 
	}
}

1275 
ems_öt
 
	$p‹èl_°›≥d
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1277 
£ss
 = 
±l
->sess;

1278 i‡(
£ss
) {

1279 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
£ss
);

1280 
±l
->
£ss
 = 
NULL
;

1283  
	`±l_˛ór_Æl_u£rs
(
±l
);

1284 
	}
}

1286 
ems_öt
 
	$p‹èl_îr
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

1288 
£ss
 = 
±l
->sess;

1290 i‡(
£ss
) {

1291 
	`£ss_evít_ˇn˚l
(
£ss
);

1292 
	`£ss_timeout_ˇn˚l
(
£ss
);

1293 
	`ems_l_åa˚
("[portal]shutdown session(%d) with [%s]",

1294 
	`ems_sock_fd
(&
£ss
->
sock
),

1295 
	`ems_sock_addr
(&
£ss
->
sock
));

1296 
	`ems_sock_˛o£
(&
£ss
->
sock
);

1297 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PORTAL_ERROR_TIMEOUT
, 
±l_timeout_cb
);

1300 
	`ems_£nd_mesßge
(
ty_p‹èl
, 
ty_ødius
, 
EMS_APP_RADIUS_STOP
, 
NULL
);

1302  
	`±l_˛ór_Æl_u£rs
(
±l
);

1303 
	}
}

1305 
ems_öt
 
	$p‹èl_ªåy_£nd
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

1307 
±l
->
ªåy_times
--;

1308 i‡(
±l
->
ªåy_times
) {

1309 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_out
, 0, 
EMS_BUFFER_SEEK_SET
);

1310 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
±l_evt_cb
);

1311 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
±l
->
ªåy_timeout
 * 1000, 
±l_timeout_cb
);

1312  
EMS_OK
;

1315 
±l
->
œ°îr
 = 
ERR_PORTAL_NETWORK
;

1316  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_îr
);

1317 
	}
}

1319 
ems_öt
 
	$p‹èl_to_ªg
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

1321  
	`p‹èl_ªåy_£nd
(
±l
, 
£ss
, 
to
);

1322 
	}
}

1324 
ems_öt
 
	$p‹èl_to_n‹mÆ
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

1326 
±l
->
ªg
--;

1327 i‡(
±l
->
ªg
 > 0)

1328  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_hb
);

1330  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_ªg
);

1331 
	}
}

1333 
ems_öt
 
	$p‹èl_to_hb
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

1335  
	`p‹èl_ªåy_£nd
(
±l
, 
£ss
, 
to
);

1336 
	}
}

1338 
ems_öt
 
	$p‹èl_to_îr
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

1340  
	`p‹èl_ch™ge_°©us
(
±l
, 
°_°¨t
);

1341 
	}
}

1343 
ems_öt
 
	$p‹èl_fûl_ªg_öfo
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
)

1345 
ems_queue
 
vp
;

1346 
ems_uöt
 
tmp
;

1348 
	`ems_queue_öô
(&
vp
);

1350 
tmp
 = 2;

1351 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_PKGTYPE
, (
ems_cch¨
 *)&
tmp
, -1);

1352 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_AUTHTYPE
, 
PORTAL_AUTH_TYPE
, -1);

1353 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_NASNAME
, 
	`c‹e_¢
(), -1);

1355 
	`±l_∑ck_li°
(&
vp
, &
£ss
->
buf
);

1357 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1359  
EMS_OK
;

1360 
	}
}

1362 
ems_öt
 
	$±l_°©us_öto_ªg
(
ems_p‹èl
 *
±l
)

1364 
ems_£ssi⁄
 *
£ss
 = 
±l
->sess;

1366 
	`ems_as£π
(
±l
 &&Öé->
£ss
 && sess);

1368 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_out
);

1369 
	`p‹èl_fûl_ªg_öfo
(
±l
, 
£ss
);

1371 
±l
->
ªåy_times
 = 
PORTAL_RETRY_TIMES
;

1372 
±l
->
ªåy_timeout
 = 
PORTAL_RETRY_TIMEOUT
;

1373 
±l
->
œ°îr
 = 0;

1375 
±l
->
ªg
 =Öé->
ªg_≥riod
 /Öé->
hb_≥riod
;

1377 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
±l_evt_cb
);

1378 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
±l
->
ªåy_timeout
 * 1000, 
±l_timeout_cb
);

1380  
EMS_OK
;

1381 
	}
}

1383 
ems_öt
 
	$±l_°©us_öto_n‹mÆ
(
ems_p‹èl
 *
±l
)

1385 
ems_£ssi⁄
 *
£ss
 = 
±l
->sess;

1387 
	`£ss_evít_ˇn˚l
(
£ss
);

1388 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
±l_evt_cb
);

1390 i‡(
±l
->
ªg
 > 0) {

1391 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
±l
->
hb_≥riod
 * 1000, 
±l_timeout_cb
);

1393 
ems_öt
 
m£cs
;

1394 
m£cs
 = 
±l
->
ªg_≥riod
 %Öé->
hb_≥riod
;

1395 i‡(
m£cs
 <= 0)

1396 
m£cs
 = 
±l
->
hb_≥riod
;

1398 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
m£cs
 * 1000, 
±l_timeout_cb
);

1401  
EMS_OK
;

1402 
	}
}

1404 
ems_öt
 
	$p‹èl_fûl_hb_öfo
(
ems_p‹èl
 *
±l
, 
ems_£ssi⁄
 *
£ss
)

1406 
ems_queue
 
vp
;

1407 
ems_uöt
 
tmp
;

1409 
	`ems_queue_öô
(&
vp
);

1411 
tmp
 = 1;

1412 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_PKGTYPE
, (
ems_cch¨
 *)&
tmp
, -1);

1413 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_AUTHTYPE
, 
PORTAL_AUTH_TYPE
, -1);

1414 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_NASNAME
, 
	`c‹e_¢
(), -1);

1416 
	`±l_∑ck_li°
(&
vp
, &
£ss
->
buf
);

1417 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1419  
EMS_OK
;

1420 
	}
}

1423 
ems_öt
 
	$±l_°©us_öto_hb
(
ems_p‹èl
 *
±l
)

1425 
ems_£ssi⁄
 *
£ss
 = 
±l
->sess;

1427 
	`ems_as£π
(
±l
 &&Öé->
£ss
 && sess);

1429 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_out
);

1430 
	`p‹èl_fûl_hb_öfo
(
±l
, 
£ss
);

1432 
±l
->
ªåy_times
 = 
PORTAL_RETRY_TIMES
;

1433 
±l
->
ªåy_timeout
 = 
PORTAL_RETRY_TIMEOUT
;

1434 
±l
->
œ°îr
 = 0;

1436 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
±l_evt_cb
);

1437 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
±l
->
ªåy_timeout
 * 1000, 
±l_timeout_cb
);

1439  
EMS_OK
;

1440 
	}
}

1442 
ems_öt
 
	$p‹èl_ch™ge_°©us
(
ems_p‹èl
 *
±l
, 
ems_°©us
 
°
)

1444 
	`ems_l_åa˚
("[portal] change status: %s >> %s",

1445 
	`ems_°©us_°r
(
±l
->
°
),Éms_status_str(st));

1447 
±l
->
°
 = st;

1449 
±l
->
°
) {

1450 
°_°¨t
:

1451 
°_°›≥d
:

1452 
°_îr
:

1453  
	`±l_evt_run
(
±l
, 
NULL
, 0);

1455 
°_ªg
:

1456  
	`±l_°©us_öto_ªg
(
±l
);

1458 
°_n‹mÆ
:

1459  
	`±l_°©us_öto_n‹mÆ
(
±l
);

1461 
°_hb
:

1462  
	`±l_°©us_öto_hb
(
±l
);

1468  
EMS_OK
;

1469 
	}
}

1471 
ems_öt
 
	$±l_u£r_¡f_logout
(
ems_p‹èl
 *
±l
, 
p‹èl_u£r
 *
u£r
)

1473 
ems_queue
 
vp
;

1474 
p‹èl_auth_hdr
 
auth
;

1476 i‡(
u£r
) {

1477 
	`ems_queue_öô
(&
vp
);

1479 
	`ems_l_åa˚
("¡‡logout: cuºíà°: 0x%x", 
u£r
->
°
);

1481 
u£r
->
°
) {

1482 
p‹èl_u£r_°_aff_ack_auth
:

1483 
p‹èl_u£r_°_ack_auth
:

1487  
EMS_OK
;

1491 
	`mem£t
(&
auth
, 0, (auth));

1493 
	`ems_Êag_un£t
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
);

1494 
u£r
->
°
 = 
p‹èl_u£r_°_¡f_logout
;

1495 
auth
.
vî
 = 1;

1496 
auth
.
ty
 = 
p‹èl_ty_¡f_logout
;

1497 
auth
.
£rül
 = 
	`ht⁄s
(
u£r
->serial);

1498 
auth
.
ªqid
 = 
	`ht⁄s
(
u£r
->reqid);

1499 
auth
.
auth_ty

u£r
->auth_ty;

1500 
auth
.
ù
 = (
ems_uöt
Ë
	`öë_addr
(
	`°r_ãxt
(&
u£r
->ip));

1501 
auth
.
p‹t
 = 
	`ht⁄s
(0);

1502 
auth
.
n_©å
 = 0;

1503 
auth
.
îr
 = 0;

1505 
ems_ch¨
 
mac
[8];

1506 
	`ems_°r2bö
(
	`°r_ãxt
(&
u£r
->
mac
), mac, 8);

1507 
	`±l_vp_≠≥nd
(&
vp
, 
ATTR_USERMAC
, 
mac
, 6);

1510 
	`±l_evt_ack
(
±l
, 
u£r
, &
auth
, &
vp
);

1511 
	`ems_queue_˛ór
(&
vp
, 
p‹èl_vÆue_∑ú
, 
íåy
, 
±l_vp_de°roy
);

1514  
EMS_OK
;

1515 
	}
}

1517 
ems_öt
 
	$±l_u£r_auth_r•
(
ems_p‹èl
 *
±l
, 
p‹èl_u£r
 *
u£r
, 
ems_öt
 
îr
)

1519 
p‹èl_auth_hdr
 
auth
;

1521 i‡(
u£r
) {

1522 
	`mem£t
(&
auth
, 0, (auth));

1524 
	`ems_l_åa˚
("authÑ•: cuºíà°: 0x%x", 
u£r
->
°
);

1526 i‡(
u£r
->
°
 !
p‹èl_u£r_°_ªq_auth
)

1527  
EMS_OK
;

1529 
auth
.
vî
 = 1;

1530 
auth
.
ty
 = 
p‹èl_ty_ack_auth
;

1531 
auth
.
£rül
 = 
	`ht⁄s
(
u£r
->serial);

1532 
auth
.
ªqid
 = 
	`ht⁄s
(
u£r
->reqid);

1533 
auth
.
auth_ty

u£r
->auth_ty;

1534 
auth
.
ù
 = (
ems_uöt
Ë
	`öë_addr
(
	`°r_ãxt
(&
u£r
->ip));

1535 
auth
.
p‹t
 = 
	`ht⁄s
(0);

1536 
auth
.
n_©å
 = 0;

1537 
auth
.
îr
 =Érr;

1538 i‡(
îr
Ë
auth
.err = 4;

1540 
u£r
->
°
 = 
p‹èl_u£r_°_ack_auth
;

1541 i‡(!
îr
)

1542 
	`ems_Êag_£t
(
u£r
->
Êg
, 
EMS_FLG_ONLINE
);

1544  
	`±l_evt_ack
(
±l
, 
u£r
, &
auth
, 
NULL
);

1547  
EMS_OK
;

1548 
	}
}

1550 
ems_öt
 
	$±l_cuºít_addªss
(
ems_p‹èl
 *
±l
)

1552 
sockÀn_t
 
Àn
;

1553 
sockaddr_ö
 
addr
;

1555 i‡(!
±l
->
£ss
)

1558 
Àn
 = (
addr
);

1559 
	`mem£t
(&
addr
, 0, (addr));

1561 i‡(
	`ems_sock_fd
(&
±l
->
£ss
->
sock
) <= 0)

1564 i‡(
	`gë≥î«me
(
	`ems_sock_fd
(&
±l
->
£ss
->
sock
), (
sockaddr
 *)&
addr
, &
Àn
))

1567  (
ems_öt
Ë
addr
.
sö_addr
.
s_addr
;

1568 
	}
}

	@src/core/ems_portal.h

1 #i‚de‡
__PORTAL_H__


2 
	#__PORTAL_H__


	)

4 #¥agm®
∑ck
(
push
, 1)

6 
_p‹èl_auth_hódî_s
 
	tp‹èl_auth_hdr
;

7 
_ems_p‹èl_
 
	tems_p‹èl
;

9 
	u_p‹èl_auth_hódî_s
 {

10 
ems_uch¨
 
	mvÆ
[16];

12 
ems_uch¨
 
	mvî
;

13 
ems_uch¨
 
	mty
;

14 
ems_uch¨
 
	mauth_ty
;

15 
ems_uch¨
 
	mr§v
;

16 
ems_ush‹t
 
	m£rül
;

17 
ems_ush‹t
 
	mªqid
;

18 
ems_uöt
 
	mù
;

19 
ems_ush‹t
 
	mp‹t
;

20 
ems_uch¨
 
	mîr
;

21 
ems_uch¨
 
	mn_©å
;

25 #¥agm®
∑ck
(
p›
)

27 
	s_p‹èl_vÆue_∑ú_s
 {

28 
ems_öt
 
	m©å
;

29 
ems_öt
 
	mid
;

30 
ems_öt
 
	mty
;

31 
ems_uöt
 
	mlvÆ
;

32 
ems_ch¨
 *
	mvÆ
;

33 
ems_queue
 
	míåy
;

34 } 
	tp‹èl_vÆue_∑ú
;

36 
	s_p‹èl_u£r_s
 {

37 
ems_°r
 
	m«me
;

38 
ems_°r
 
	m∑ss
;

39 
ems_°r
 
	mmac
;

40 
ems_°r
 
	mù
;

42 
ems_ush‹t
 
	m£rül
;

43 
ems_ush‹t
 
	mªqid
;

44 
ems_uch¨
 
	mauth_ty
;

45 
ems_uöt
 
	mÊg
;

47 
ems_öt
 
	m°
;

48 
ems_timeout
 
	mto
;

49 
ems_buf„r
 
	mbuf_out
;

50 
ems_öt
 
	mªåy_times
;

51 
ems_öt
 
	mªåy_timeout
;

52 
ems_p‹èl
 *
	m±l
;

54 
ems_queue
 
	míåy
;

55 } 
	tp‹èl_u£r
;

57 
	s_ems_p‹èl_


59 
ems_queue
 
	mu£rs
;

60 
ems_£ssi⁄
 *
	m£ss
;

62 
ems_°r
 
	maddr
;

63 
ems_öt
 
	mp‹t
;

64 
ems_öt
 
	mªg_≥riod
;

65 
ems_öt
 
	mhb_≥riod
;

66 
ems_öt
 
	mªg
;

68 
ems_öt
 
	mªåy_times
;

69 
ems_öt
 
	mªåy_timeout
;

70 
ems_°©us
 
	m°
;

71 
ems_öt
 
	mœ°îr
;

75 
ems_öt
 
p‹èl_ch™ge_°©us
(
ems_p‹èl
 *
±l
, 
ems_°©us
 
°
);

76 
p‹èl_u£r
 *
±l_u£r_föd
(
ems_p‹èl
 *
±l
, 
ems_cch¨
 *
ù
);

77 
ems_void
 
±l_u£r_de°roy
(
p‹èl_u£r
 *
u£r
);

79 
ems_öt
 
±l_u£r_¡f_logout
(
ems_p‹èl
 *
±l
, 
p‹èl_u£r
 *
u£r
);

80 
ems_öt
 
±l_u£r_auth_r•
(
ems_p‹èl
 *
±l
, 
p‹èl_u£r
 *
u£r
,Éms_öà
îr
);

81 
ems_öt
 
±l_cuºít_addªss
(
ems_p‹èl
 *
±l
);

	@src/core/ems_radius.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_˛õ¡.h
"

4 
	~"≠p.h
"

5 
	~"ems_ødius.h
"

6 
	~"ems_fw.h
"

8 
	~<√töë/ö_sy°m.h
>

9 
	~<√töë/ö.h
>

10 
	~<√töë/ù.h
>

11 
	~<√töë/ù_icmp.h
>

12 
	~<√tdb.h
>

14 
	#PING_TIMEOUT
 2000

	)

15 
	#PING_RETRYTIMES
 3

	)

17 
ems_ch¨
 *
ems_mac_upd©e
”ms_ch¨ *
d°
, 
ems_cch¨
 *
§c
);

19 
ems_öt
 
ø_°¨t
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

20 
ems_öt
 
ø_auth
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

21 
ems_öt
 
ø_ac˘
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

22 
ems_öt
 
ø_n‹mÆ
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

23 
ems_öt
 
ø_pög
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

24 
ems_öt
 
ø_ac˘_°›≥d
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

25 
ems_öt
 
ø_îr
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
);

27 
	$ems_öt
 (*
	tø_evt_func
)(
	tems_devi˚
 *
	tdev
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_uöt
 
	tÊg
);

28 
ø_evt_func
 
ø_evt_h™dÀr
[] =

30 [
°_°¨t
] = 
ø_°¨t
,

31 [
°_auth
] = 
ø_auth
,

32 [
°_ac˘
] = 
ø_ac˘
,

33 [
°_n‹mÆ
] = 
ø_n‹mÆ
,

34 [
°_hb
] = 
ø_pög
,

35 [
°_ac˘_°›
] = 
ø_ac˘_°›≥d
,

36 [
°_îr
] = 
ø_îr
,

37 [
°_max
] = 
NULL


38 
	}
};

40 
ems_öt
 
ø_to_auth
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

41 
ems_öt
 
ø_to_ac˘
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

42 
ems_öt
 
ø_to_n‹mÆ
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

43 
ems_öt
 
ø_to_pög
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

44 
ems_öt
 
ø_to_ac˘_°›≥d
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
);

46 
	$ems_öt
 (*
	tø_timeout_func
)(
	tems_devi˚
 *
	tdev
, 
	tems_£ssi⁄
 *
	t£ss
, 
	tems_timeout
 *
	tto
);

47 
ø_timeout_func
 
ø_timeout_h™dÀr
[] =

49 [
°_°¨t
] = 
NULL
,

50 [
°_auth
] = 
ø_to_auth
,

51 [
°_ac˘
] = 
ø_to_ac˘
,

52 [
°_n‹mÆ
] = 
ø_to_n‹mÆ
,

53 [
°_hb
] = 
ø_to_pög
,

54 [
°_ac˘_°›
] = 
ø_to_ac˘_°›≥d
,

55 [
°_îr
] = 
NULL
,

56 [
°_max
] = 
NULL


57 
	}
};

59 
	$ems_öt
 (*
	tdev_ªcv_cb
)(
	tems_devi˚
 *
	tdev
, 
	tems_£ssi⁄
 *
	t£ss
);

61 
ems_öt
 
	$dev_evt_run
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

63 
	`ems_as£π
(
ø_evt_h™dÀr
[
dev
->
°
] !
NULL
);

65  
ø_evt_h™dÀr
[
dev
->
°
](dev, 
£ss
, 
Êg
);

66 
	}
}

68 
ems_öt
 
	$dev_timeout_run
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

70 
	`ems_as£π
(
ø_timeout_h™dÀr
[
dev
->
°
] !
NULL
);

72 i‡(
ø_timeout_h™dÀr
[
dev
->
°
])

73  
ø_timeout_h™dÀr
[
dev
->
°
](dev, 
£ss
, 
to
);

75  
EMS_OK
;

76 
	}
}

78 
ems_void
 
	$dev_evt_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_öt
 
îr
,Éms_öà
Êg
)

80 
ems_devi˚
 *
dev
 = (ems_devi˚ *)
	`£ss_cb¨g
(
£ss
);

82 
	`ems_as£π
(
dev
->
°
 > 
°_mö
 && dev->° < 
°_max
);

84 i‡(
îr
) {

85 
	`ems_l_åa˚
("[dev]ÉvtÉrr, sess: %d %s",

86 
	`ems_sock_fd
(&
£ss
->
sock
),

87 
	`ems_sock_addr
(&
£ss
->
sock
));

88 
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

92 
	`dev_evt_run
(
dev
, 
£ss
, 
Êg
);

93 
	}
}

95 
ems_void
 
	$dev_timeout_cb
(
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

97 
ems_devi˚
 *
dev
 = (ems_devi˚ *)
	`£ss_cb¨g
(
£ss
);

99 
	`ems_as£π
(
dev
->
°
 > 
°_mö
 && dev->° < 
°_max
);

101 
	`dev_timeout_run
(
dev
, 
£ss
, 
to
);

102 
	}
}

104 
	#ems_rc_av∑ú_add
(
rh
, 
out
, 
key
, 
vÆ
, 
vÆ_Àn
, 
ví
) \

105 
	`rc_av∑ú_add
(
rh
, 
out
, 
key
, (
ems_void
 *)
vÆ
, 
vÆ_Àn
, 
ví
)

	)

108 
ems_öt
 
	$ø_fûl_auth_av∑ús
(
ems_devi˚
 *
dev
, 
ems_ødius
 *
ø
)

110 
ems_ch¨
 
buf
[253];

111 
ems_ch¨
 
mac
[32] = {0};

112 
ems_uöt
 
tmp
;

113 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

115 
	`ems_as£π
(
dev
 && 
£ss
 !
NULL
);

117 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_USER_NAME
,

118 
	`°r_ãxt
(&
dev
->
u£r
.
«me
), 
	`°r_Àn
(&dev->user.name), 0);

120 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_USER_PASSWORD
,

121 
	`°r_ãxt
(&
dev
->
u£r
.
∑ss
), 
	`°r_Àn
(&dev->user.pass), 0);

123 i‡(
£ss
) {

124 
sockaddr_ö
 
addr
;

125 
sockÀn_t
 
Àn
;

127 
	`mem£t
(&
addr
, 0, (addr));

128 
Àn
 = (
addr
);

129 
	`gësock«me
(
	`ems_sock_fd
(&
£ss
->
sock
), (
sockaddr
 *)&
addr
, &
Àn
);

131 
tmp
 = 
	`¡ohl
(
addr
.
sö_addr
.
s_addr
);

132 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_IP_ADDRESS
, &
tmp
, 0, 0);

135 
tmp
 = 0;

136 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_PORT
, &
tmp
, -1, 0);

139 
tmp
 = 19;

140 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_PORT_TYPE
, &
tmp
, -1, 0);

142 
tmp
 = 
	`¡ohl
(
	`öë_addr
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

143 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_FRAMED_IP_ADDRESS
, &
tmp
, 0, 0);

146 
	`ems_mac_upd©e
(
mac
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_mac
));

147 
	`¢¥ötf
(
buf
, (buf), "%s:%s", 
mac
,

148 
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_ssid
));

149 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_CALLED_STATION_ID
, 
buf
, 
	`°æí
(buf), 0);

151 
	`mem£t
(
mac
, 0, 32);

152 
	`ems_mac_upd©e
(
mac
, 
	`°r_ãxt
(&
dev
->
u£r
.mac));

153 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_CALLING_STATION_ID
, 
mac
, 
	`°æí
(mac), 0);

156 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_CALLING_STATION_ID
,

157 
	`°r_ãxt
(&
dev
->
u£r
.
mac
), 
	`°r_Àn
(&dev->user.mac), 0);

160 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_¢
));

161 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_IDENTIFIER
, 
buf
, 
	`°æí
(buf), 0);

164 
	`mem£t
(
buf
, 0, (buf));

165 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_MESSAGE_AUTHENTICATOR
, 
buf
, 16, 0);

167  
EMS_OK
;

168 
	}
}

174 
ems_öt
 
	$ø_fûl_auth_ªque°_öfo
(
ems_devi˚
 *
dev
)

176 
ems_öt
 
tŸÆ_Àn
;

177 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

178 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

179 
AUTH_HDR
 *
auth
;

180 
ems_uch¨
 
buf_sign
[
AUTH_VECTOR_LEN
];

182 
	`ems_buf„r_˛ór
(&
£ss
->
buf_out
);

184 
auth
 = (
AUTH_HDR
 *)
	`buf_wr
(&
£ss
->
buf_out
);

186 
auth
->
code
 = 
PW_ACCESS_REQUEST
;

187 
auth
->
id
 = 
ø
->
£q_nbr
++;

189 
dev
->
auth_out
 = 
auth
;

191 
	`rc_øndom_ve˘‹
(
dev
->
ve˘‹
);

192 
	`mem˝y
(
auth
->
ve˘‹
, 
dev
->ve˘‹, 
AUTH_VECTOR_LEN
);

194 
	`ø_fûl_auth_av∑ús
(
dev
, 
ø
);

196 
tŸÆ_Àn
 = 
	`rc_∑ck_li°
(
dev
->
vp_out
, 
	`°r_ãxt
(&
ø
->
£¸ë
), 
auth
Ë+ 
AUTH_HDR_LEN
;

198 
auth
->
Àngth
 = 
	`¡ohs
((Ë
tŸÆ_Àn
);

200 
	`rc_hmac_md5_ˇlc
((
ems_uch¨
 *)
auth
, 
tŸÆ_Àn
,

201 (
ems_uch¨
 *)(
	`°r_ãxt
(&
ø
->
£¸ë
)), 
	`°r_Àn
(&ø->£¸ë), 
buf_sign
);

202 
	`mem˝y
((
ems_ch¨
 *)
auth
 + 
tŸÆ_Àn
 - 
AUTH_VECTOR_LEN
, 
buf_sign
, AUTH_VECTOR_LEN);

204 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_out
, 
tŸÆ_Àn
, 
EMS_BUFFER_SEEK_CUR
);

206 
dev
->
tŸÆ_Àn
 =Åotal_len;

208  
EMS_OK
;

209 
	}
}

211 
ems_öt
 
	$ø_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

213 
ems_öt
 
fd
;

214 
sockÀn_t
 
Àn
;

215 
sockaddr_ö
 
addr
;

216 
ems_sock
 *
sock
 = &
£ss
->sock;

218 
	`ems_as£π
(
£ss
);

220 
	`mem£t
(&
addr
, 0, (addr));

221 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

222 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

223 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

224  
EMS_ERR
;

227 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

228 i‡(
fd
 <= 0)

229  
EMS_ERR
;

231 
	`ems_l_åa˚
("[dev] sess(%d) connectÅo: %s(%s): %d...",

232 
fd
,

233 
	`ems_sock_addr
(
sock
),

234 
	`öë_¡ﬂ
(
addr
.
sö_addr
),

235 
	`ems_sock_p‹t
(
sock
));

237 
addr
.
sö_Ámûy
 = 
AF_INET
;

238 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`ems_sock_p‹t
(
sock
));

240 
	`ems_£ä⁄blockög
(
fd
, 
YES
);

241 
Àn
 = (
sockaddr_ö
);

242 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

243 
	`ems_l_åa˚
("[dev] connectÅo: %s:%d: failed: %s",

244 
	`ems_sock_addr
(
sock
),

245 
	`ems_sock_p‹t
(
sock
),

246 
	`ems_œ°îrmsg
());

247 
	`˛o£
(
fd
);

248  
EMS_ERR
;

251 
	`ems_sock_£tfd
(
sock
, 
fd
);

252  
EMS_OK
;

253 
	}
}

255 
ems_öt
 
	$ø_°¨t
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

257 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

258 i‡(!
dev
->
£ss
) {

259 
dev
->
£ss
 = 
	`ems_£ssi⁄_√w
();

260 i‡(!
dev
->
£ss
) {

261 
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

262  
EMS_ERR
;

265 
	`ems_buf„r_ö¸ó£
(&
dev
->
£ss
->
buf_ö
, 
EMS_BUFFER_2K
);

266 
	`ems_buf„r_ö¸ó£
(&
dev
->
£ss
->
buf_out
, 
EMS_BUFFER_2K
);

269 
£ss
 = 
dev
->sess;

270 
	`£ss_cb¨g_£t
(
£ss
, 
dev
);

272 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
ø
->
auth_addr
));

273 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
ø
->
auth_p‹t
);

274 i‡(
	`ø_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

275  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

278 
	`ø_fûl_auth_ªque°_öfo
(
dev
);

280 
dev
->
ªåy_times
 = 
ø
->retry_times;

281 
dev
->
ªåy_timeout
 = 
ø
->retry_timeout;

282 
dev
->
ªas⁄
 = 0;

284 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

285 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

287  
	`dev_ch™ge_°©us
(
dev
, 
°_auth
);

288 
	}
}

290 
ems_öt


291 
	$ø_£nd_msg
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

293 
ems_öt
 
ªt
;

295 
	`ems_as£π
(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
));

297 
	`ems_l_åa˚
("[radius] send(%d): (%s,Üength: %d)",

298 
	`ems_sock_fd
(&
£ss
->
sock
),

299 
	`ems_sock_addr
(&
£ss
->
sock
),

300 
	`buf_Àn
(&
£ss
->
buf
));

302 
ªt
 = 
	`£ss_£nd
(
£ss
, &£ss->
buf
);

303 i‡(
ªt
 <= 0) {

304 
ªt
) {

305 -
EAGAIN
:

309  
EMS_ERR
;

313 i‡(
	`buf_Àn
(&
£ss
->
buf
) <= 0)

314 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
dev_evt_cb
);

316  
EMS_OK
;

317 
	}
}

320 
ems_öt


321 
	$dev_¥o˚ss_r•
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
AUTH_HDR
 *
auth
, 
dev_ªcv_cb
 
h
)

323 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

324 
ems_öt
 
πn
 = 
EMS_OK
;

325 
ems_öt
 
Àngth
 = 0;

327 
dev
->
auth_ö
 = (
AUTH_HDR
 *)
	`buf_rd
(&
£ss
->
buf_ö
);

329 
πn
 = 
	`rc_check_ª∂y
(
dev
->
auth_ö
, 
	`buf_size
(&
£ss
->
buf_ö
),

330 (
ems_ch¨
 *)
	`°r_ãxt
(&
ø
->
£¸ë
),

331 
dev
->
ve˘‹
, dev->
auth_out
->
id
);

333 
Àngth
 = 
	`¡ohs
(
dev
->
auth_ö
->ÀngthË- 
AUTH_HDR_LEN
;

334 i‡(
Àngth
 > 0) {

335 
dev
->
vp_ö
 = 
	`rc_av∑ú_gí
(
ø
->
rh
, 
NULL
, dev->
auth_ö
->
d©a
, 
Àngth
, 0);

337 
dev
->
vp_ö
 = 
NULL
;

339 i‡(
πn
 !
OK_RC
)

340  
EMS_ERR
;

342 i‡(
h
) {

343 
	`h
(
dev
, 
£ss
);

344 
πn
 = 
EMS_OK
;

347 
πn
 = 
EMS_ERR
;

349  
πn
;

350 
	}
}

353 
ems_öt


354 
	$dev_¥ïro˚ss
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
dev_ªcv_cb
 
h
)

356 
AUTH_HDR
 
auth
;

357 
ems_öt
 
Àn
 = (
auth
) - 2;

358 
ems_öt
 
πn
;

360 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
Àn
)

361  
EMS_CONTINUE
;

363 
	`ems_buf„r_¥e„tch
(&
£ss
->
buf_ö
, (
ems_ch¨
 *)&
auth
, 
Àn
);

365 
auth
.
Àngth
 = 
	`¡ohs
(auth.length);

367 i‡(
auth
.
Àngth
 >
	`buf_size
(&
£ss
->
buf_ö
))

368  
EMS_BUFFER_INSUFFICIENT
;

370 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
Ë< 
auth
.
Àngth
)

371  
EMS_CONTINUE
;

373 
πn
 = 
	`dev_¥o˚ss_r•
(
dev
, 
£ss
, &
auth
, 
h
);

375 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_ö
, 
auth
.
Àngth
, 
EMS_BUFFER_SEEK_CUR
);

376 
	`ems_buf„r_ª‰esh
(&
£ss
->
buf_ö
);

378  
πn
;

379 
	}
}

381 
ems_öt


382 
	$ø_ªcv_msg
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
, 
dev_ªcv_cb
 
h
)

384 
ems_öt
 
ªt
, 
agaö
;

386 
agaö
 = 
EMS_YES
;

387 
ªcv_agaö
:

388 
ªt
 = 
	`£ss_ªcv
(
£ss
, &£ss->
buf_ö
);

389 i‡(
ªt
 <= 0) {

390 
ªt
) {

391 -
EAGAIN
:

392 
agaö
 = 
EMS_NO
;

395 i‡(
	`buf_Àn
(&
£ss
->
buf_ö
) > 0)

396  
	`dev_¥ïro˚ss
(
dev
, 
£ss
, 
h
);

401 
ªt
 = 
	`dev_¥ïro˚ss
(
dev
, 
£ss
, 
h
);

403 
ªt
) {

404 
EMS_BUFFER_INSUFFICIENT
:

405 
EMS_ERR
:

406  
EMS_ERR
;

408 
EMS_OK
:

409 
EMS_CONTINUE
:

413 } 
ªt
 !
EMS_CONTINUE
);

415 i‡(
agaö
)

416 
ªcv_agaö
;

418  
EMS_OK
;

419 
	}
}

421 
ems_öt
 
	$ø_devi˚_fúewÆl_£t_ruÀs
(
ems_devi˚
 *
dev
, 
ems_öt
 
£t
)

423 
js⁄_obje˘
 *
obj
;

425 
obj
 = 
	`js⁄_obje˘_√w_obje˘
();

427 
	`js⁄_obje˘_obje˘_add
(
obj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

428 
	`js⁄_obje˘_obje˘_add
(
obj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

429 
	`js⁄_obje˘_obje˘_add
(
obj
, "add", 
	`js⁄_obje˘_√w_öt
(
£t
));

431 
	`ems_≠p_¥o˚ss
(
ty_ødius
, 
ty_fw
, 
EMS_APP_FW_RADIUS_DEVICE_FREE
, 
obj
);

433 
	`js⁄_obje˘_put
(
obj
);

434  
EMS_OK
;

435 
	}
}

437 
ems_öt
 
	$ø_c⁄√˘_to_ac˘_£rvî
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_ødius
 *
ø
)

439 
js⁄_obje˘
 *
r•
;

440 
	`ems_as£π
(
dev
 && 
£ss
 && dev->sess == sess);

442 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
ø
->
ac˘_addr
));

443 
	`ems_sock_£ç‹t
(&
£ss
->
sock
, 
ø
->
ac˘_p‹t
);

445 i‡(
	`ø_c⁄√˘
(
£ss
Ë!
EMS_OK
) {

446 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

447  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

450 
ø
->
œ°îr
 = 
RADIUS_ERR_SUCCESS
;

451 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

453 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£∫ame",
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
«me
)));

454 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

455 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

456 
	`js⁄_obje˘_obje˘_add
(
r•
, "îr‹_code",
	`js⁄_obje˘_√w_öt
(0));

458 
	`ems_£nd_mesßge
(
ty_ødius
, 
ty_p‹èl
, 
EMS_APP_CMD_RADIUS_AUTH_RSP
, 
r•
);

459 
	`js⁄_obje˘_put
(
r•
);

461 
	`ø_devi˚_fúewÆl_£t_ruÀs
(
dev
, 
EMS_YES
);

464 
dev
->
ªas⁄
 = 1;

465  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘
);

466 
	}
}

468 
ems_öt
 
	$ø_°¨t_to_ac˘_u£r
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

470 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

472 
	`ems_as£π
(
dev
 && 
£ss
 && dev->sess == sess);

473 
	`ems_l_åa˚
("[radius]shutdown session(%d) [%s: %d]",

474 
	`ems_sock_fd
(&
£ss
->
sock
),

475 
	`ems_sock_addr
(&
£ss
->
sock
),

476 
	`ems_sock_p‹t
(&
£ss
->
sock
));

478 
	`£ss_evít_ˇn˚l
(
£ss
);

479 
	`£ss_timeout_ˇn˚l
(
£ss
);

480 
	`ems_sock_˛o£
(&
£ss
->
sock
);

482 i‡(
dev
->
vp_out
) {

483 
	`rc_av∑ú_‰ì
(
dev
->
vp_out
);

484 
dev
->
vp_out
 = 
NULL
;

487 i‡(
dev
->
vp_ö
) {

488 
	`rc_av∑ú_‰ì
(
dev
->
vp_ö
);

489 
dev
->
vp_ö
 = 
NULL
;

492 
dev
->
auth_out
 = 
NULL
;

493 
dev
->
auth_ö
 = 
NULL
;

494 
	`ems_buf„r_˛ór
(&
£ss
->
buf_out
);

495 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

497  
	`ø_c⁄√˘_to_ac˘_£rvî
(
dev
, 
£ss
, 
ø
);

498 
	}
}

500 
ems_öt
 
	$ø_auth_r•
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

502 
AUTH_HDR
 *
auth
 = 
dev
->
auth_ö
;

504 
	`ems_as£π
(
auth
 !
NULL
);

506 
	`ems_l_åa˚
("[ødius]áuth->code: %d", 
auth
->
code
);

508 i‡(
auth
->
code
 =
PW_ACCESS_ACCEPT
) {

509 
	`ems_l_åa˚
("user: %s@%sÜogin success",

510 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

511 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

514  
	`ø_°¨t_to_ac˘_u£r
(
dev
, 
£ss
);

516 i‡(
auth
->
code
 =
PW_ACCESS_CHALLENGE
) {

517 
	`ems_l_åa˚
("*******serverÇeed user: %s@%sáccess challenge",

518 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

519 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

520 
dev
->
ªas⁄
 = 
auth
->
code
;

521 
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

524 
	`ems_l_åa˚
("user: %s@%s failed",

525 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

526 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

527 
dev
->
ªas⁄
 = 
RADIUS_ERR_REJECT
;

528 
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

530  
EMS_OK
;

531 
	}
}

533 
ems_öt
 
	$ø_auth
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

535 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

536 i‡(
	`ø_ªcv_msg
(
dev
, 
£ss
, 
Êg
, 
ø_auth_r•
Ë!
EMS_OK
) {

537 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

538  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

541  
EMS_OK
;

544 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

545 i‡(
	`ø_£nd_msg
(
dev
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

546 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

547  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

550  
EMS_OK
;

553 
	`ems_as£π
(0 && "never be here");

554  
EMS_OK
;

555 
	}
}

557 
ems_öt
 
	$ø_ac˘_r•
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

559 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

560 
AUTH_HDR
 *
auth
 = 
dev
->
auth_ö
;

562 
	`ems_as£π
(
auth
 !
NULL
);

564 
	`ems_l_åa˚
("[ødius]ác˘->code: %d", 
auth
->
code
);

566 i‡(
auth
->
code
 =
PW_ACCOUNTING_RESPONSE
) {

567 
	`ems_l_åa˚
("user: %s@%sáccounting success",

568 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

569 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

571 
dev
->
ªp‹t_≥riod
 = 
ø
->report_period;

573 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_READ
, 
dev_evt_cb
);

574 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªp‹t_≥riod
 * 1000, 
dev_timeout_cb
);

576 
	`dev_ch™ge_°©us
(
dev
, 
°_n‹mÆ
);

579 
	`ems_l_åa˚
("[radius]ácct failed");

580 
dev
->
îr
 = 6;

581 
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

584  
EMS_OK
;

585 
	}
}

587 
ems_öt
 
	$ø_ac˘
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

589 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

590 i‡(
	`ø_ªcv_msg
(
dev
, 
£ss
, 
Êg
, 
ø_ac˘_r•
Ë!
EMS_OK
) {

591 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

592  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

595  
EMS_OK
;

598 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

599 i‡(
	`ø_£nd_msg
(
dev
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

600 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

601  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

604  
EMS_OK
;

607 
	`ems_as£π
(0 && "never be here");

608  
EMS_OK
;

609 
	}
}

611 
ems_öt
 
	$ø_n‹mÆ_r•
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

613 
	`ems_l_åa˚
("[radius]Çormal got message fromÑadius server, drop it sliently");

614  
EMS_OK
;

615 
	}
}

617 
ems_öt
 
	$ø_n‹mÆ
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

619 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

620 i‡(
	`ø_ªcv_msg
(
dev
, 
£ss
, 
Êg
, 
ø_n‹mÆ_r•
Ë!
EMS_OK
) {

621 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

622  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

625  
EMS_OK
;

628 
	`ems_as£π
(0 && "never be here");

629  
EMS_OK
;

630 
	}
}

632 
ems_öt
 
	$ø_pög_ªcv_h™dÀ
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

634 
ù
 *ip;

635 
icmp
 *
i˝
;

636 
hÀn
, 
cc
 = 
	`buf_Àn
(&
£ss
->
buf_ö
);

638 
ù
 = (ù *Ë
	`buf_rd
(&
£ss
->
buf_ö
);

639 
hÀn
 = 
ù
->
ù_hl
 << 2;

641 i‡(
cc
 < 
hÀn
 + 
ICMP_MINLEN
)

642  
EMS_OK
;

644 
cc
 -
hÀn
;

645 
i˝
 = (
icmp
 *)(
	`buf_rd
(&
£ss
->
buf_ö
Ë+ 
hÀn
);

647 if(
i˝
->
icmp_ty≥
 !
ICMP_ECHOREPLY
) {

648 
	`ems_l_åa˚
("[dev] %d bytes from: %s icmpÇotÑeply(%d)",

649 
cc
, 
	`ems_sock_addr
(&
£ss
->
sock
), 
i˝
->
icmp_ty≥
);

650 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

651  
EMS_CONTINUE
;

654 if–
i˝
->
icmp_id
 !
dev
->
idít
) {

655 
	`ems_l_åa˚
("[dev] %d byã†icm∞idít: %dÉº‹,ÇŸ : %d", 
cc
, 
i˝
->
icmp_id
, 
dev
->
idít
);

656 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

657  
EMS_CONTINUE
;

660 
	`ems_l_åa˚
("icm∞ª∂õd by (%s),Üígth: %d", 
	`ems_sock_addr
(&
£ss
->
sock
), 
cc
);

663 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

664 
dev
->
disc⁄√˘
 = 
ø
->disc⁄√˘ / (ø->
ªp‹t_≥riod
 + 6) + 1;

667 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

669 
	`£ss_evít_ˇn˚l
(
£ss
);

670 
	`£ss_timeout_ˇn˚l
(
£ss
);

673 
dev
->
ªas⁄
 = 3;

674  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘
);

675 
	}
}

677 
ems_öt


678 
	$ø_pög_ªcv
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

680 
ems_öt
 
ªt
;

681 
ems_ch¨
 *
wr
 = 
	`buf_wr
(&
£ss
->
buf_ö
);

682 
ems_öt
 
Àn
 = 
	`buf_À·
(&
£ss
->
buf_ö
);

684 
agaö
:

685 
ªt
 = 
	`ªcv
(
	`ems_sock_fd
(&
£ss
->
sock
), 
wr
, 
Àn
, 0);

687 i‡(
ªt
 <= 0) {

688 
î∫o
) {

690 
EAGAIN
:

691 
EINTR
:

692  
EMS_OK
;

695 
	`ems_l_åa˚
("[dev]ÖögÉº‹: %s", 
	`ems_œ°îrmsg
());

696  
EMS_ERR
;

700 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_ö
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

702 
ªt
 = 
	`ø_pög_ªcv_h™dÀ
(
dev
, 
£ss
);

704 
agaö
;

706  
EMS_OK
;

707 
	}
}

710 
ems_öt
 
	$ø_pög
 (
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

712 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

713 i‡(
	`ø_pög_ªcv
(
dev
, 
£ss
Ë!
EMS_OK
) {

714 
dev
->
îr
 = 2;

715  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

718  
EMS_OK
;

721 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

722 i‡(
	`ø_£nd_msg
(
dev
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

723 
dev
->
îr
 = 2;

724  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

728  
EMS_OK
;

729 
	}
}

731 
ems_öt
 
	$ø_ac˘_°›≥d_r•
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
)

733 
AUTH_HDR
 *
auth
 = 
dev
->
auth_ö
;

735 
	`ems_as£π
(
auth
 !
NULL
);

737 
	`ems_l_åa˚
("[ødius]ác˘->code: %d", 
auth
->
code
);

739 i‡(
auth
->
code
 =
PW_ACCOUNTING_RESPONSE
) {

740 
	`ems_l_åa˚
("user: %s@%sáccounting stopped success",

741 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

742 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

745 
	`ems_l_åa˚
("[radius]áccounting stopped failed");

748 
dev
->
ªas⁄
 = 0;

749  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

750 
	}
}

752 
ems_öt
 
	$ø_ac˘_°›≥d
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

754 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_READ
)) {

755 i‡(
	`ø_ªcv_msg
(
dev
, 
£ss
, 
Êg
, 
ø_ac˘_°›≥d_r•
Ë!
EMS_OK
) {

756 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

757  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

760  
EMS_OK
;

763 i‡(
	`ems_Êag_like
(
Êg
, 
EMS_EVT_WRITE
)) {

764 i‡(
	`ø_£nd_msg
(
dev
, 
£ss
, 
Êg
Ë!
EMS_OK
) {

765 
dev
->
ªas⁄
 = 
RADIUS_ERR_NETWORK
;

766  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

769  
EMS_OK
;

772 
	`ems_as£π
(0 && "never be here");

773  
EMS_OK
;

774 
	}
}

776 
ems_öt
 
	$ø_îr
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_uöt
 
Êg
)

778 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

779 
	`ems_as£π
(
dev
);

781 
ø
->
œ°îr
 = 
dev
->
ªas⁄
;

783 
js⁄_obje˘
 *
r•
;

784 
r•
 = 
	`js⁄_obje˘_√w_obje˘
();

786 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£∫ame", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
«me
)));

787 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

788 
	`js⁄_obje˘_obje˘_add
(
r•
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

789 
	`js⁄_obje˘_obje˘_add
(
r•
, "îr‹_code",
	`js⁄_obje˘_√w_öt
(
dev
->
ªas⁄
));

791 
	`ems_£nd_mesßge
(
ty_ødius
, 
ty_p‹èl
, 
EMS_APP_CMD_RADIUS_AUTH_RSP
, 
r•
);

792 
	`js⁄_obje˘_put
(
r•
);

796 
	`ems_l_åa˚
("shutdown device: %s, %s, %s, %s",

797 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

798 
	`°r_ãxt
(&
dev
->
u£r
.
∑ss
),

799 
	`°r_ãxt
(&
dev
->
u£r
.
ù
),

800 
	`°r_ãxt
(&
dev
->
u£r
.
mac
));

802 
	`ems_queue_ªmove
(&
dev
->
íåy
);

803 
	`ems_devi˚_de°roy
(
dev
);

805  
EMS_OK
;

806 
	}
}

808 
ems_öt
 
	$ø_to_auth
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

810 
dev
->
ªåy_times
--;

811 i‡(
dev
->
ªåy_times
) {

812 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_out
, 0, 
EMS_BUFFER_SEEK_SET
);

813 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

814 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

815  
EMS_OK
;

818 
dev
->
ªas⁄
 = 
RADIUS_ERR_CANNOT_CONNECT
;

819  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

820 
	}
}

822 
ems_öt
 
	$ø_to_ac˘
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

824 
dev
->
ªåy_times
--;

825 i‡(
dev
->
ªåy_times
) {

826 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_out
, 0, 
EMS_BUFFER_SEEK_SET
);

827 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

828 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

829  
EMS_OK
;

832 
dev
->
ªas⁄
 = 
RADIUS_ERR_CANNOT_CONNECT
;

833  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

834 
	}
}

836 
ems_öt
 
	$ø_to_n‹mÆ
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

838 
	`ems_l_åa˚
("[radius]ÅimeÅoÑeport status: %s@%s",

839 
	`°r_ãxt
(&
dev
->
u£r
.
«me
),

840 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

841  
	`dev_ch™ge_°©us
(
dev
, 
°_hb
);

842 
	}
}

844 
ems_öt
 
	$ø_to_pög
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

846 
	`ems_l_åa˚
("[ødius]Åimeouàde˘e˘ÖögÑëryÅimes: %d, disc⁄√˘: %d", 
dev
->
ªåy_times
, dev->
disc⁄√˘
);

848 
	`£ss_evít_ˇn˚l
(
£ss
);

850 i‡(
dev
->
ªåy_times
 > 0) {

851 
dev
->
ªåy_times
--;

852 
	`ems_l_åa˚
("ªåy sídÖög: %d", 
dev
->
ªåy_times
);

853 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf
, 0, 
EMS_BUFFER_SEEK_SET
);

854 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

855 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_TIMEOUT
, 
dev_timeout_cb
);

856  
EMS_OK
;

859 
dev
->
disc⁄√˘
--;

860 i‡(
dev
->
disc⁄√˘
 <= 0) {

861 
	`ems_l_åa˚
("[ødius]Üo° u£r: %s@%s", 
	`°r_ãxt
(&
dev
->
u£r
.
«me
), så_ãxt(&dev->u£r.
ù
));

863 
dev
->
îr
 = 2;

864  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

868 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

869 
	`£ss_evít_ˇn˚l
(
£ss
);

870 
	`£ss_timeout_ˇn˚l
(
£ss
);

873 
dev
->
ªas⁄
 = 3;

874  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘
);

875 
	}
}

877 
ems_öt
 
	$ø_to_ac˘_°›≥d
(
ems_devi˚
 *
dev
, 
ems_£ssi⁄
 *
£ss
, 
ems_timeout
 *
to
)

879 
dev
->
ªåy_times
--;

880 i‡(
dev
->
ªåy_times
) {

881 
	`ems_buf„r_£ek_rd
(&
£ss
->
buf_out
, 0, 
EMS_BUFFER_SEEK_SET
);

882 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

883 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

884  
EMS_OK
;

887 
dev
->
ªas⁄
 = 
RADIUS_ERR_CANNOT_CONNECT
;

888  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

889 
	}
}

891 
ems_öt
 
	$ø_upd©e_u£r_åaffic
(
ems_devi˚
 *
dev
)

893 
off_t
 
§c_pkgs
, 
§c_byãs
, 
d°_pkgs
, 
d°_byãs
;

894 
ems_ch¨
 
buf
[256] = {0};

895 
ems_ch¨
 
cmd
[256] = {0};

898 
	`¢¥ötf
(
cmd
, (cmd), "iptaccount -s -f -lÜocus_%s | grep %s | cut -d';' -f2-",

899 
	`°r_ãxt
(&
dev
->
u£r
.
mac
), så_ãxt(&dev->u£r.
ù
));

901 
	`mem£t
(
buf
, 0, (buf));

902 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`ems_p›í_gë
(
cmd
));

904 i‡(
	`°æí
(
buf
) > 0) {

905 #i‚de‡
GENERIC_LINUX


906 
	`ssˇnf
(
buf
, "%Œd;%Œd;%Œd;%Œd", &
§c_pkgs
, &
§c_byãs
, &
d°_pkgs
, &
d°_byãs
);

908 
	`ssˇnf
(
buf
, "%ld;%ld;%ld;%ld", &
§c_pkgs
, &
§c_byãs
, &
d°_pkgs
, &
d°_byãs
);

911 
dev
->
u£r
.
ö_byãs
 +
d°_byãs
;

912 
dev
->
u£r
.
ö_pkgs
 +
d°_pkgs
;

913 
dev
->
u£r
.
out_byãs
 +
§c_byãs
;

914 
dev
->
u£r
.
out_pkgs
 +
§c_pkgs
;

917  
EMS_OK
;

918 
	}
}

920 
ems_öt
 
	$ø_fûl_ac˘_av∑ús
(
ems_devi˚
 *
dev
, 
ems_ødius
 *
ø
)

922 
ems_ch¨
 
buf
[253] = {0};

923 
ems_ch¨
 
mac
[32] = {0};

924 
ems_uöt
 
tmp
;

925 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

927 
	`ems_as£π
(
dev
 && 
£ss
 !
NULL
);

929 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_USER_NAME
,

930 
	`°r_ãxt
(&
dev
->
u£r
.
«me
), 
	`°r_Àn
(&dev->user.name), 0);

932 i‡(
£ss
) {

933 
sockaddr_ö
 
addr
;

934 
sockÀn_t
 
Àn
;

936 
	`mem£t
(&
addr
, 0, (addr));

937 
Àn
 = (
addr
);

938 
	`gësock«me
(
	`ems_sock_fd
(&
£ss
->
sock
), (
sockaddr
 *)&
addr
, &
Àn
);

940 
tmp
 = 
	`¡ohl
(
addr
.
sö_addr
.
s_addr
);

941 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_IP_ADDRESS
, &
tmp
, 0, 0);

944 
tmp
 = 0;

945 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_PORT
, &
tmp
, -1, 0);

948 
tmp
 = 19;

949 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_PORT_TYPE
, &
tmp
, -1, 0);

951 
tmp
 = 
	`¡ohl
(
	`öë_addr
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

952 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_FRAMED_IP_ADDRESS
, &
tmp
, 0, 0);

955 
	`ems_mac_upd©e
(
mac
, 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_mac
));

956 
	`¢¥ötf
(
buf
, (buf), "%s:%s", 
mac
,

957 
	`cfg_gë
(
	`emscfg
(), 
CFG_wúñess_ssid
));

958 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_CALLED_STATION_ID
, 
buf
, 
	`°æí
(buf), 0);

960 
	`mem£t
(
mac
, 0, 32);

961 
	`ems_mac_upd©e
(
mac
, 
	`°r_ãxt
(&
dev
->
u£r
.mac));

962 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_CALLING_STATION_ID
, 
mac
, 
	`°æí
(mac), 0);

964 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`cfg_gë
(
	`emscfg
(), 
CFG_ems_¢
));

965 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_NAS_IDENTIFIER
, 
buf
, 
	`°æí
(buf), 0);

967 i‡(
	`°r_Àn
(&
dev
->
u£r
.
£ssid
) <= 0) {

968 
	`gëtimeofday
(&
dev
->
u£r
.
°¨t
, 
NULL
);

970 
	`¢¥ötf
(
buf
, (buf), "locus%u%ld%ld",

971 
	`ems_gëpid
(), 
dev
->
u£r
.
°¨t
.
tv_£c
, dev->u£r.°¨t.
tv_u£c
);

972 
	`°r_£t
(&
dev
->
u£r
.
£ssid
, 
buf
);

974 
	`¢¥ötf
(
buf
, (buf), "%s", 
	`°r_ãxt
(&
dev
->
u£r
.
£ssid
));

976 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_SESSION_ID
, 
buf
, 
	`°æí
(buf), 0);

978 
tmp
 = 
dev
->
ªas⁄
;

979 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_STATUS_TYPE
, &
tmp
, 0, 0);

981 
dev
->
ªas⁄
) {

987 
timevÆ
 
tv
;

988 
	`gëtimeofday
(&
tv
, 
NULL
);

990 
tmp
 = 
	`abs
(
tv
.
tv_£c
 - 
dev
->
u£r
.
°¨t
.tv_sec);

991 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_SESSION_TIME
, &
tmp
, 0, 0);

993 
tmp
 = 
dev
->
ªas⁄
;

994 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_TERMINATE_CAUSE
, &
tmp
, 0, 0);

999 
ems_uöt
 
b
, 
g
;

1001 
	`ø_upd©e_u£r_åaffic
(
dev
);

1003 
b
 = (
dev
->
u£r
.
ö_byãs
 & 0x00ffffffff);

1004 
g
 = (
dev
->
u£r
.
ö_byãs
 >> 32);

1005 
tmp
 = 
dev
->
u£r
.
ö_pkgs
;

1006 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_INPUT_OCTETS
, &
b
, 0, 0);

1007 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_INPUT_GIGAWORDS
, &
g
, 0, 0);

1008 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_INPUT_PACKETS
, &
tmp
, 0, 0);

1010 
b
 = (
dev
->
u£r
.
out_byãs
 & 0x00ffffffff);

1011 
g
 = (
dev
->
u£r
.
out_byãs
 >> 32);

1012 
tmp
 = 
dev
->
u£r
.
out_pkgs
;

1013 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_OUTPUT_OCTETS
, &
b
, 0, 0);

1014 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_OUTPUT_GIGAWORDS
,&
g
, 0, 0);

1015 
	`ems_rc_av∑ú_add
(
ø
->
rh
, &
dev
->
vp_out
, 
PW_ACCT_OUTPUT_PACKETS
, &
tmp
, 0, 0);

1023  
EMS_OK
;

1024 
	}
}

1026 
ems_öt
 
	$ø_fûl_ac˘_öfo
(
ems_devi˚
 *
dev
, 
ems_ødius
 *
ø
)

1028 
ems_öt
 
tŸÆ_Àn
;

1029 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

1030 
AUTH_HDR
 *
auth
;

1032 
	`ems_buf„r_˛ór
(&
£ss
->
buf_out
);

1034 
auth
 = (
AUTH_HDR
 *)
	`buf_wr
(&
£ss
->
buf_out
);

1035 
auth
->
code
 = 
PW_ACCOUNTING_REQUEST
;

1036 
auth
->
id
 = 
ø
->
£q_nbr
++;

1037 
dev
->
auth_out
 = 
auth
;

1039 i‡(
dev
->
vp_out
) {

1040 
	`rc_av∑ú_‰ì
(
dev
->
vp_out
);

1041 
dev
->
vp_out
 = 
NULL
;

1044 i‡(
dev
->
vp_ö
) {

1045 
	`rc_av∑ú_‰ì
(
dev
->
vp_ö
);

1046 
dev
->
vp_ö
 = 
NULL
;

1049 
	`ø_fûl_ac˘_av∑ús
(
dev
, 
ø
);

1051 
tŸÆ_Àn
 = 
	`rc_∑ck_li°
(
dev
->
vp_out
, 
	`°r_ãxt
(&
ø
->
£¸ë
), 
auth
Ë+ 
AUTH_HDR_LEN
;

1052 
auth
->
Àngth
 = 
	`¡ohs
((Ë
tŸÆ_Àn
);

1055 
	`mem£t
(
auth
->
ve˘‹
, 0, 
AUTH_VECTOR_LEN
);

1056 
	`mem˝y
((
ems_ch¨
 *)
auth
 + 
tŸÆ_Àn
, 
	`°r_ãxt
(&
ø
->
£¸ë
), 
	`°r_Àn
(&ra->secret));

1058 
	`rc_md5_ˇlc
(
dev
->
ve˘‹
, (
ems_uch¨
 *)
auth
, 
tŸÆ_Àn
 + 
	`°r_Àn
(&
ø
->
£¸ë
));

1059 
	`mem˝y
(
auth
->
ve˘‹
, 
dev
->ve˘‹, 
AUTH_VECTOR_LEN
);

1061 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf_out
, 
tŸÆ_Àn
, 
EMS_BUFFER_SEEK_CUR
);

1062 
dev
->
tŸÆ_Àn
 =Åotal_len;

1064  
EMS_OK
;

1065 
	}
}

1067 
ems_öt
 
	$°_öto_ac˘
(
ems_devi˚
 *
dev
)

1069 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

1070 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

1072 
	`ems_as£π
(
dev
 && 
ø
 && dev->
£ss
);

1074 
	`ø_fûl_ac˘_öfo
(
dev
, 
ø
);

1076 
dev
->
ªåy_timeout
 = 
ø
->retry_timeout;

1077 
dev
->
ªåy_times
 = 
ø
->retry_times;

1079 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

1080 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

1082  
EMS_OK
;

1083 
	}
}

1085 
ems_öt
 
	$°_öto_ac˘_°›
(
ems_devi˚
 *
dev
)

1087 
ems_ødius
 *
ø
 = (ems_ødiu†*)
dev
->
˘x
;

1088 
ems_£ssi⁄
 *
£ss
 = 
dev
->sess;

1090 
	`ems_as£π
(
dev
 && 
ø
 && dev->
£ss
);

1092 
dev
->
ªas⁄
) {

1093 
RADIUS_ERR_NETWORK
:

1094 
RADIUS_ERR_CANNOT_CONNECT
:

1099 
dev
->
ªas⁄
 = 2;

1100 
	`ø_fûl_ac˘_öfo
(
dev
, 
ø
);

1102 
dev
->
ªåy_timeout
 = 
ø
->retry_timeout;

1103 
dev
->
ªåy_times
 = 
ø
->retry_times;

1105 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

1106 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
dev
->
ªåy_timeout
 * 1000, 
dev_timeout_cb
);

1113 
js⁄_obje˘
 *
jobj
;

1114 
jobj
 = 
	`js⁄_obje˘_√w_obje˘
();

1116 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£∫ame",
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
«me
)));

1117 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rù", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
ù
)));

1118 
	`js⁄_obje˘_obje˘_add
(
jobj
, "u£rmac", 
	`js⁄_obje˘_√w_°rög
(
	`°r_ãxt
(&
dev
->
u£r
.
mac
)));

1119 
	`js⁄_obje˘_obje˘_add
(
jobj
, "îr‹_code",
	`js⁄_obje˘_√w_öt
(
dev
->
ªas⁄
));

1121 
	`ems_£nd_mesßge
(
ty_ødius
, 
ty_p‹èl
, 
EMS_APP_CMD_PORTAL_LOGOUT
, 
jobj
);

1122 
	`js⁄_obje˘_put
(
jobj
);

1125 
	`ø_devi˚_fúewÆl_£t_ruÀs
(
dev
, 
EMS_NO
);

1127 i‡(
dev
->
ªas⁄
 != 2)

1128  
	`dev_ch™ge_°©us
(
dev
, 
°_îr
);

1130  
EMS_OK
;

1131 
	}
}

1133 
ems_öt
 
	$ø_pög_c⁄√˘
(
ems_£ssi⁄
 *
£ss
)

1135 
¥Ÿ€¡
 *
¥Ÿo
;

1136 
ems_sock
 *
sock
 = &
£ss
->sock;

1137 
sockÀn_t
 
Àn
;

1138 
sockaddr_ö
 
addr
;

1139 
ems_öt
 
fd
;

1141 
	`mem£t
(&
addr
, 0, (addr));

1143 i‡(
	`ems_gëho°by«me
(
	`ems_sock_addr
(
sock
), &
addr
Ë!
OK
) {

1144 
	`ems_l_åa˚
("gethostbyename failed %s : %s",

1145 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

1146  
EMS_ERR
;

1149 i‡((
¥Ÿo
 = 
	`gë¥Ÿoby«me
("icmp")Ë=
NULL
) {

1150 
	`ems_l_åa˚
("getprotobyname failed %s : %s",

1151 
	`ems_sock_addr
(
sock
), 
	`ems_œ°îrmsg
());

1152  
EMS_ERR
;

1155 i‡((
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
¥Ÿo
->
p_¥Ÿo
)) < 0) {

1156 
	`ems_l_åa˚
("sockëÉº‹: %s", 
	`ems_œ°îrmsg
());

1157  
EMS_ERR
;

1160 
addr
.
sö_Ámûy
 = 
AF_INET
;

1161 
Àn
 = (
sockaddr_ö
);

1163 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, 
Àn
)) {

1164 
	`˛o£
(
fd
);

1165 
	`ems_l_åa˚
("c⁄√˘Éº‹: %s", 
	`ems_œ°îrmsg
());

1166  
EMS_ERR
;

1169 
	`ems_sock_£tfd
(&
£ss
->
sock
, 
fd
);

1171 
	`ems_l_åa˚
("[ra] sess: %d hostáddr: %s",

1172 
	`ems_sock_fd
(&
£ss
->
sock
), 
	`ems_sock_addr
(&sess->sock));

1174  
EMS_OK
;

1175 
	}
}

1178 
ems_öt
 
	$°_pög_¥ï¨e_£ss
(
ems_devi˚
 *
dev
)

1180 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

1182 i‡(!
dev
->
£ss_dev
) {

1183 
dev
->
£ss_dev
 = 
	`ems_£ssi⁄_√w
();

1184 i‡(!
dev
->
£ss_dev
) {

1185 
dev
->
îr
 = 2;

1186  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

1189 
	`£ss_cb¨g_£t
(
dev
->
£ss_dev
, dev);

1192 
£ss
 = 
dev
->
£ss_dev
;

1194 
	`ems_buf„r_˛ór
(&
£ss
->
buf
);

1195 
	`ems_buf„r_˛ór
(&
£ss
->
buf_ö
);

1197 
dev
->
idít
 = 
	`øndom
() & 0xFFFF;

1198 
dev
->
¡øns
 = 0;

1200 
	`ems_sock_£èddr
(&
£ss
->
sock
, 
	`°r_ãxt
(&
dev
->
u£r
.
ù
));

1202  
	`ø_pög_c⁄√˘
(
£ss
);

1203 
	}
}

1205 
u_sh‹t
 
	$ø_pög_chksum
(
u_sh‹t
 *
addr
, 
ems_öt
 
Àn
)

1207 
u_sh‹t
 
™swî
, *
w
 = 
addr
;

1208 
ems_öt
 
sum
 = 0, 
∆e·
 = 
Àn
;

1216  
∆e·
 > 1 ) {

1217 
sum
 +*
w
++;

1218 
∆e·
 -= 2;

1222 if–
∆e·
 == 1 ) {

1223 
u_sh‹t
 
u
 = 0;

1225 *(
u_ch¨
 *)(&
u
Ë*(u_ch¨ *)
w
 ;

1226 
sum
 +
u
;

1232 
sum
 = (sum >> 16) + (sum & 0xffff);

1233 
sum
 += (sum >> 16);

1234 
™swî
 = ~
sum
;

1236  
™swî
;

1237 
	}
}

1239 
ems_öt
 
	$°_öto_pög
(
ems_devi˚
 *
dev
)

1241 
i
, 
cc
, 
Àn
;;

1242 
icmp
 *
i˝
;

1243 
timevÆ
 *
ç
;

1244 
ems_ch¨
 *
wr
;

1245 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

1248 i‡(!
dev
->
£ss_dev
) {

1249 i‡(
	`°_pög_¥ï¨e_£ss
(
dev
Ë!
EMS_OK
) {

1250 
dev
->
îr
 = 2;

1251  
	`dev_ch™ge_°©us
(
dev
, 
°_ac˘_°›
);

1255 
£ss
 = 
dev
->
£ss_dev
;

1256 
	`ems_as£π
(
£ss
 !
NULL
);

1258 
	`ems_buf„r_ª£t
(&
£ss
->
buf
);

1260 
i˝
 = (
icmp
 *Ë(
	`buf_wr
(&
£ss
->
buf
));

1261 
ç
 = (
timevÆ
 *Ë(
	`buf_wr
(&
£ss
->
buf
) + 8);

1262 
wr
 = (
ems_ch¨
 *Ë(
	`buf_wr
(&
£ss
->
buf
Ë+ 8 + (
timevÆ
));

1264 
i˝
->
icmp_ty≥
 = 
ICMP_ECHO
;

1265 
i˝
->
icmp_code
 = 0;

1266 
i˝
->
icmp_cksum
 = 0;

1267 
i˝
->
icmp_£q
 = 
	`ht⁄s
(
dev
->
¡øns
++);

1268 
i˝
->
icmp_id
 = 
dev
->
idít
;

1270 
Àn
 = 56;

1271 
cc
 = 
Àn
 + 8;

1272 
	`gëtimeofday
(
ç
, 
NULL
);

1274 
i
 = 8; i < 
Àn
; i++)

1275 *
wr
++ = 
i
;

1277 
i˝
->
icmp_cksum
 = 
	`ø_pög_chksum
((
u_sh‹t
 *)i˝, 
cc
);

1279 
dev
->
ªåy_times
 = 
PING_RETRYTIMES
;

1281 
	`ems_buf„r_£ek_wr
(&
£ss
->
buf
, 
cc
, 
EMS_BUFFER_SEEK_CUR
);

1282 
	`£ss_evít_£t
(
£ss
, 
EMS_EVT_WRITE
, 
dev_evt_cb
);

1283 
	`£ss_timeout_£t_s‹ãd
(
£ss
, 
PING_TIMEOUT
, 
dev_timeout_cb
);

1285  
EMS_OK
;

1286 
	}
}

1288 
ems_öt
 
	$dev_ch™ge_°©us
(
ems_devi˚
 *
dev
, 
ems_°©us
 
°
)

1290 i‡(
dev
->
°
 == st)

1291  
EMS_OK
;

1293 
	`ems_l_åa˚
("[radius] dev(%s) change status: %s --> %s",

1294 
	`°r_ãxt
(&
dev
->
u£r
.
ù
),

1295 
	`ems_°©us_°r
(
dev
->
°
),

1296 
	`ems_°©us_°r
(
°
));

1298 
dev
->
°
 = st;

1300 
dev
->
°
) {

1301 
°_°¨t
:

1302 
°_îr
:

1303  
	`dev_evt_run
(
dev
, 
NULL
, 0);

1306 
°_ac˘
:

1307  
	`°_öto_ac˘
(
dev
);

1309 
°_ac˘_°›
:

1310  
	`°_öto_ac˘_°›
(
dev
);

1312 
°_hb
:

1313 
	`°_öto_pög
(
dev
);

1320  
EMS_OK
;

1321 
	}
}

	@src/core/ems_radius.h

2 #i‚de‡
EMS_HEADER_FOR_RADIUS_____


3 
	#EMS_HEADER_FOR_RADIUS_____


	)

5 
	~<r_c⁄fig.h
>

6 
	~<ö˛udes.h
>

7 
	~<‰ìødius-˛õ¡.h
>

10 
	#RADIUS_ERR_SUCCESS
 0

	)

11 
	#RADIUS_ERR_CANNOT_CONNECT
 0x4000

	)

12 
	#RADIUS_ERR_REJECT
 0x4001

	)

13 
	#RADIUS_ERR_NETWORK
 0x4002

	)

16 
_ems_devi˚_s
 
	tems_devi˚
;

17 
_ems_ødius_s
 
	tems_ødius
;

18 
	s_ems_devi˚_s
 {

19 
ems_queue
 
	míåy
;

20 
ems_£ssi⁄
 *
	m£ss_dev
;

21 
ems_£ssi⁄
 *
	m£ss
;

22 
ems_void
 *
	m˘x
;

25 
ems_°r
 
	m«me
;

26 
ems_°r
 
	m∑ss
;

27 
ems_°r
 
	mmac
;

28 
ems_°r
 
	mù
;

29 
ems_°r
 
	m£ssid
;

30 
timevÆ
 
	m°¨t
;

32 
off_t
 
	mö_byãs
;

33 
off_t
 
	mout_byãs
;

34 
off_t
 
	mö_pkgs
;

35 
off_t
 
	mout_pkgs
;

36 } 
	mu£r
;

38 
ems_öt
 
	mªåy_times
;

39 
ems_öt
 
	mªåy_timeout
;

40 
ems_öt
 
	mªp‹t_≥riod
;

41 
ems_öt
 
	mdisc⁄√˘
;

42 
ems_uch¨
 
	mve˘‹
[
AUTH_VECTOR_LEN
];

43 
ems_öt
 
	mtŸÆ_Àn
;

44 
ems_öt
 
	mªas⁄
;

45 
ems_öt
 
	mîr
;

48 
ems_uöt
 
	m¡øns
;

49 
ems_öt
 
	midít
;

51 
VALUE_PAIR
 *
	mvp_out
;

52 
VALUE_PAIR
 *
	mvp_ö
;

53 
AUTH_HDR
 *
	mauth_out
;

54 
AUTH_HDR
 *
	mauth_ö
;

55 
ems_°©us
 
	m°
;

58 
	s_ems_ødius_s


60 
ems_queue
 
	mdev_íåy
;

61 
rc_h™dÀ
 *
	mrh
;

62 
ems_uöt
 
	m£q_nbr
;

64 
ems_öt
 
	mœ°îr
;

65 
ems_°r
 
	m£¸ë
;

66 
ems_°r
 
	mauth_addr
;

67 
ems_öt
 
	mauth_p‹t
;

68 
ems_°r
 
	mac˘_addr
;

69 
ems_öt
 
	mac˘_p‹t
;

71 
ems_öt
 
	mªåy_times
;

72 
ems_öt
 
	mªåy_timeout
;

73 
ems_öt
 
	mªp‹t_≥riod
;

74 
ems_öt
 
	mdisc⁄√˘
;

78 
ems_öt
 
dev_ch™ge_°©us
(
ems_devi˚
 *
dev
, 
ems_°©us
 
°
);

79 
ems_devi˚
 *
ems_devi˚_√w
();

80 
ems_void
 
ems_devi˚_de°roy
(
ems_devi˚
 *
dev
);

	@src/core/main.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
	~<libgí.h
>

7 
	$ems_öt
 (*
	tems_cmd_íåy
)(
	tems_öt
 
	tcmd
,Éms_öà
	t¨gc
, 
	tems_ch¨
 **
	t¨gv
);

10 
ems_öt
 
id
;

11 
ems_°r
 
cmd
;

12 
ems_cmd_íåy
 
íåy
;

13 } 
	tems_cmd
;

16 
ems_öt
 
	`ems_maö
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

17 
ems_öt
 
	`cmd_maö
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

18 
ems_öt
 
	`maö_c
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

19 
ems_öt
 
	`maö_˘æ
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

20 
ems_öt
 
	`maö_°©us
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

21 
ems_öt
 
	`maö_bwli°
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

22 
ems_öt
 
	`maö_ødius
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

23 
ems_öt
 
	`maö_p‹èl
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

24 
ems_öt
 
	`maö_qos
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

25 
ems_öt
 
	`maö_fw
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

26 
ems_öt
 
	`maö_≠p
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

27 
ems_öt
 
	`maö_u£r
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

28 
ems_öt
 
	`maö_wúñess
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

29 
ems_öt
 
	`maö_√tw‹k
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

30 
ems_öt
 
	`maö_c⁄fig
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

32 
ems_öt
 
	`maö_ã°_ødius
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

33 #ifde‡
FOR_TEST_INM


34 
ems_öt
 
	`maö_ã°_nm
”ms_öà
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
);

37 
ems_cmd
 
ems_cmd_èbÀ
[] =

39 {
CMD_EMS
, 
	`ems_°rög
("ems"), 
ems_maö
},

40 {
CMD_EMS_C
, 
	`ems_°rög
("ems_c"), 
maö_c
},

41 {
CMD_EMS_CTRL
, 
	`ems_°rög
("ems_˘æ"), 
maö_˘æ
},

42 {
CMD_EMS_STATUS
, 
	`ems_°rög
("ems_°©us"), 
maö_°©us
},

43 {
CMD_EMS_BWLIST
, 
	`ems_°rög
("ems_bwli°"), 
maö_bwli°
},

44 {
CMD_EMS_RADIUS
, 
	`ems_°rög
("ems_ødius"), 
maö_ødius
},

45 {
CMD_EMS_PORTAL
, 
	`ems_°rög
("ems_p‹èl"), 
maö_p‹èl
},

46 {
CMD_EMS_QOS
, 
	`ems_°rög
("ems_qos"), 
maö_qos
},

47 {
CMD_EMS_FW
, 
	`ems_°rög
("ems_fw"), 
maö_fw
},

48 {
CMD_EMS_APP
, 
	`ems_°rög
("ems_≠p"), 
maö_≠p
},

49 {
CMD_EMS_USER
, 
	`ems_°rög
("ems_u£r"), 
maö_u£r
},

50 {
CMD_EMS_WIRELESS
,
	`ems_°rög
("ems_wúñess"), 
maö_wúñess
},

51 {
CMD_EMS_NETWORK
,
	`ems_°rög
("ems_√tw‹k"),
maö_√tw‹k
},

52 {
CMD_EMS_CONFIG
, 
	`ems_°rög
("ems_c⁄fig"), 
maö_c⁄fig
},

53 {
CMD_EMS_TEST_RADIUS
, 
	`ems_°rög
("ems_ã°_ødius"), 
maö_ã°_ødius
}

54 
	}
};

56 
	#SIZE_TABLE
 (
ems_cmd_èbÀ
)/(
ems_cmd
)

	)

58 
ems_loggî
 
	g_glog
;

60 
ems_loggî
 *
	$loggî
()

62  &
_glog
;

63 
	}
}

65 #ifde‡
DEBUG


66 
ems_öt


67 
	$do_ã°
(
ems_öt
 
¨gc
, 
ems_ch¨
 **
¨gv
)

69 
ems_öt
 
i
;

71 
i
 = 0; i < 
¨gc
; i++)

73 
	`¥ötf
("¨gv[%d] = %s\n", 
i
, 
	`ba£«me
(
¨gv
[i]));

76  
EMS_OK
;

77 
	}
}

80 
ems_void
 
	$ems_¥öt_ußge
()

82 
ems_öt
 
i
;

83 
ems_cmd
 *
cmd
;

85 
	`¥ötf
("help EMS CmdÜists:\n");

87 
i
 = 0; i < 
SIZE_TABLE
; i++) {

88 
cmd
 = &
ems_cmd_èbÀ
[
i
];

90 
	`¥ötf
("\¿%s", 
	`°r_ãxt
(&
cmd
->cmd));

93 
	`¥ötf
("\n");

94 
	}
}

97 
ems_öt
 
	$maö
(
ems_öt
 
¨gc
, 
ems_ch¨
 **
¨gv
)

99 
ems_öt
 
πn
;

100 
ems_öt
 
i
;

101 
ems_cmd
 *
cmd
;

103 #ifde‡
DEBUG


104 
	`ems_ª£t_æimô
();

105 
	`do_ã°
(
¨gc
, 
¨gv
);

108 
i
 = 0; i < 
SIZE_TABLE
; i++) {

109 
cmd
 = &
ems_cmd_èbÀ
[
i
];

111 i‡(!
	`°rcmp
(
	`°r_ãxt
(&
cmd
->cmd), 
	`ba£«me
(
¨gv
[0])))

113 
	`ems_°¨t_mem‹y_åa˚
(
EMS_YES
);

114 
	`ems_loggî_öô
(&
_glog
, 
°dout
, 
EMS_LOG_TRACE
);

115 
πn
 = 
cmd
->
	`íåy
(cmd->
id
, 
¨gc
, 
¨gv
);

116 
	`ems_loggî_unöô
(&
_glog
);

117 
	`ems_°›_mem‹y_åa˚
();

118 
	`exô
(
πn
);

122 
	`ems_¥öt_ußge
();

125 
	}
}

	@src/core/main_app.c

3 
	~"ems_c‹e.h
"

4 
	~"ems_cmd.h
"

6 
ems_öt
 
	$maö_≠p
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

8 
ems_öt
 
πn
;

9 
js⁄_obje˘
 *
ªq
, *
obj
;

11 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

13 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

16 
πn
 = 
MSG_ST_REQUEST_ERR
;

18 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

19 i‡(!
obj
) ;

21 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

24 
	`js⁄_obje˘_put
(
ªq
);

26 
	`ems_l_åa˚
("maö_≠p: %d,Ñä%d\n", 
cmd
, 
πn
);

27  
πn
;

28 
	}
}

	@src/core/main_bwlist.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

7 
ems_öt
 
	$bwli°_upd©e_fõld
(
ems_cch¨
 *
key
, 
js⁄_obje˘
 *
roŸ
)

9 
ems_buf„r
 
buf
;

10 
ems_cch¨
 *
˘x
;

11 
ems_öt
 
Àn
;

12 
js⁄_obje˘
 *
obj
, *
¨y
;

14 
¨y
 = 
	`js⁄_obje˘_√w_¨øy
();

16 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
roŸ
, 
key
);

17 i‡(!(
obj
 && 
	`js⁄_obje˘_is_ty≥
(obj, 
js⁄_ty≥_°rög
))) {

19 
	`js⁄_obje˘_obje˘_add
(
roŸ
, 
key
, 
¨y
);

20  
EMS_ERR
;

23 
˘x
 = 
	`js⁄_obje˘_gë_°rög
(
obj
);

25 
Àn
 = 
	`ems_°æí
(
˘x
);

26 i‡(
Àn
 > 0) {

27 
	`ems_buf„r_öô
(&
buf
, 
Àn
 + 2);

29 
	`¢¥ötf
(
	`buf_wr
(&
buf
), 
	`buf_À·
(&buf), "%s", 
˘x
);

31 
ems_ch¨
 *
p
, *
q
;

33 
p
 = 
	`buf_rd
(&
buf
);

36 *
p
 && (
NULL
 !(
q
 = 
	`°rchr
(p, ',')))) {

37 *
q
++ = '\0';

38 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
p
));

39 
p
 = 
q
;

42 i‡(*
p
)

43 
	`js⁄_obje˘_¨øy_add
(
¨y
, 
	`js⁄_obje˘_√w_°rög
(
p
));

47 
	`ems_buf„r_unöô
(&
buf
);

50 
	`js⁄_obje˘_obje˘_add
(
roŸ
, 
key
, 
¨y
);

52  
EMS_OK
;

53 
	}
}

57 
ems_öt
 
	$bwli°_∑r£_‰om_fûe
(
js⁄_obje˘
 *
roŸ
, 
ems_cch¨
 *
Ê
)

59 
ems_buf„r
 
buff
;

60 
ems_ch¨
 *
buf
;

61 
ems_öt
 
Àn
, 
size
;

62 
FILE
 *
Â
 = 
NULL
;

63 
js⁄_tokíî
 *
tok
;

64 
js⁄_obje˘
 *
jobj
, *
obj
;

65 
js⁄_tokíî_îr‹
 
jîr
;

67 
Â
 = 
	`f›í
(
Ê
, "r");

68 i‡(!
Â
)

69  
MSG_ST_REQUEST_ERR
;

71 
tok
 = 
	`js⁄_tokíî_√w
();

72 i‡(!
tok
) {

73 
	`f˛o£
(
Â
);

74  
EMS_ERR
;

77 
	`ems_buf„r_öô
(&
buff
, 
EMS_BUFFER_1K
);

79 
buf
 = 
	`buf_wr
(&
buff
);

80 
size
 = 
	`buf_À·
(&
buff
);

82 
jobj
 = 
NULL
;

84 
Àn
 = 
	`‰ód
(
buf
, 1, 
size
, 
Â
);

85 i‡(
Àn
 <= 0)

88 
jobj
 = 
	`js⁄_tokíî_∑r£_ex
(
tok
, 
buf
, 
Àn
);

90 } (
jîr
 = 
	`js⁄_tokíî_gë_îr‹
(
tok
)Ë=
js⁄_tokíî_c⁄töue
);

92 
	`js⁄_tokíî_‰ì
(
tok
);

93 
	`ems_buf„r_unöô
(&
buff
);

94 
	`f˛o£
(
Â
);

96 i‡(!(
jobj
 && (
jîr
 =
js⁄_tokíî_suc˚ss
))) {

97 
	`ems_l_åa˚
("∑r£Éº: %s, fûe: %s", 
	`js⁄_tokíî_îr‹_desc
(
jîr
), 
Ê
);

98 i‡(
jobj
)

99 
	`js⁄_obje˘_put
(
jobj
);

100  
MSG_ST_REQUEST_ERR
;

103 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
jobj
, "url");

104 i‡(
obj
) {

105 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "url",

106 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(
obj
)));

109 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
jobj
, "whitemac");

110 i‡(
obj
) {

111 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "whitemac",

112 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(
obj
)));

115 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
jobj
, "blackmac");

116 i‡(
obj
) {

117 
	`js⁄_obje˘_obje˘_add
(
roŸ
, "blackmac",

118 
	`ems_js⁄_tokíî_∑r£
(
	`js⁄_obje˘_to_js⁄_°rög
(
obj
)));

121 
	`js⁄_obje˘_put
(
jobj
);

123  
EMS_OK
;

124 
	}
}

126 
ems_öt
 
	$maö_bwli°
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

128 
ems_öt
 
πn
;

129 
js⁄_obje˘
 *
ªq
, *
obj
;

130 
ems_uöt
 
Êg
;

132 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

134 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

137 
πn
 = 
MSG_ST_REQUEST_ERR
;

139 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "flag");

140 i‡(!
obj
) ;

142 
Êg
 = 
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
));

143 
	`js⁄_obje˘_obje˘_add
(
ªq
, "Êag", 
	`js⁄_obje˘_√w_öt
(
Êg
));

145 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

146 i‡(!
obj
) ;

148 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

151 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 0)) {

152 
	`bwli°_upd©e_fõld
("uæ", 
ªq
);

155 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 1)) {

156 
	`bwli°_upd©e_fõld
("whôemac", 
ªq
);

159 i‡(
	`ems_Êag_like
(
Êg
, 0x01 << 2)) {

160 
	`bwli°_upd©e_fõld
("bœckmac", 
ªq
);

164 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "path");

165 i‡(!
obj
) ;

167 
πn
 = 
	`bwli°_∑r£_‰om_fûe
(
ªq
, 
	`js⁄_obje˘_gë_°rög
(
obj
));

168 i‡(
πn
 !
EMS_OK
) ;

170 
	`js⁄_obje˘_obje˘_dñ
(
ªq
, "path");

174 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

177 
	`js⁄_obje˘_put
(
ªq
);

179 
	`ems_l_åa˚
("maö_c: %d,Ñä%d\n", 
cmd
, 
πn
);

180  
πn
;

181 
	}
}

	@src/core/main_c.c

1 
	~"ems_c‹e.h
"

2 
	~"ems_cmd.h
"

4 
ems_öt
 
	$maö_c
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

6 
ems_öt
 
πn
;

7 
js⁄_obje˘
 *
ªq
, *
obj
;

9 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

11 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

14 
πn
 = 
MSG_ST_REQUEST_ERR
;

16 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

17 i‡(!
obj
) ;

19 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

21 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "addr");

22 i‡(!
obj
) ;

24 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "port");

27 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

30 
	`js⁄_obje˘_put
(
ªq
);

32 
	`ems_l_åa˚
("maö_c: %d,Ñä%d\n", 
cmd
, 
πn
);

33  
πn
;

34 
	}
}

	@src/core/main_config.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_c⁄fig
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

22 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "firstconfig");

23 i‡(!
obj
) ;

24 
	`js⁄_obje˘_obje˘_add
(
ªq
, "firstconfig",

25 
	`js⁄_obje˘_√w_öt
(

26 
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
))

31 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

34 
	`js⁄_obje˘_put
(
ªq
);

36 
	`ems_l_åa˚
("maö_c⁄fig: %d,Ñä%d\n", 
cmd
, 
πn
);

37  
πn
;

38 
	}
}

	@src/core/main_ctrl.c

1 
	~"ems_c‹e.h
"

2 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_˘æ
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

22 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "auto");

23 i‡(!
obj
) ;

24 
	`js⁄_obje˘_obje˘_add
(
ªq
, "auto",

25 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
))));

27 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "run");

28 i‡(!
obj
) ;

30 
	`js⁄_obje˘_obje˘_add
(
ªq
, "run",

31 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
))));

35 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

38 
	`js⁄_obje˘_put
(
ªq
);

40 
	`ems_l_åa˚
("maö_c: %d,Ñä%d\n", 
cmd
, 
πn
);

41  
πn
;

42 
	}
}

	@src/core/main_fw.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_fw
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

23 
	`js⁄_obje˘_put
(
ªq
);

25 
	`ems_l_åa˚
("maö_fw: %d,Ñä%d\n", 
cmd
, 
πn
);

26  
πn
;

27 
	}
}

	@src/core/main_network_flush.c

1 
	~"ems_c‹e.h
"

2 
	~"ems_cmd.h
"

4 
ems_öt
 
	$maö_√tw‹k
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

6 
ems_öt
 
πn
;

7 
js⁄_obje˘
 *
ªq
, *
obj
;

9 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

11 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

14 
πn
 = 
MSG_ST_REQUEST_ERR
;

16 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

17 i‡(!
obj
) ;

19 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

22 
	`js⁄_obje˘_put
(
ªq
);

24 
	`ems_l_åa˚
("maö_√tw‹k: %d,Ñä%d\n", 
cmd
, 
πn
);

25  
πn
;

26 
	}
}

	@src/core/main_portal.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_p‹èl
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

23 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "auto");

24 i‡(!
	`js⁄_obje˘_gë_öt
(
	`js⁄_obje˘_obje˘_gë
(
ªq
, "auto")))

26 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "addr");

27 i‡(!
obj
) ;

29 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "port");

30 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "redirect_port");

31 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "reg_period");

32 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "hb_period");

36 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

39 
	`js⁄_obje˘_put
(
ªq
);

41 
	`ems_l_åa˚
("maö_p‹èl: %d,Ñä%d\n", 
cmd
, 
πn
);

42  
πn
;

43 
	}
}

	@src/core/main_qos.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_qos
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

22 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "enable");

25 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

28 
	`js⁄_obje˘_put
(
ªq
);

30 
	`ems_l_åa˚
("maö_qos: %d,Ñä%d\n", 
cmd
, 
πn
);

31  
πn
;

32 
	}
}

	@src/core/main_radius.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_ødius
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "set"))

22 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "auto");

24 i‡(!
	`js⁄_obje˘_gë_öt
(
	`js⁄_obje˘_obje˘_gë
(
ªq
, "auto")))

26 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "addr");

27 i‡(!
obj
) ;

29 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "secret");

30 i‡(!
obj
) ;

32 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "authport");

33 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "acctport");

34 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "rp_period");

35 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "retry_times");

36 
	`ems_js⁄_ª£t_key
(
obj
, 
ªq
, "retry_timeout");

40 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

43 
	`js⁄_obje˘_put
(
ªq
);

45 
	`ems_l_åa˚
("maö_ødius: %d,Ñä%d\n", 
cmd
, 
πn
);

46  
πn
;

47 
	}
}

	@src/core/main_status.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_°©us
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "flag");

18 i‡(!
obj
) ;

20 
	`js⁄_obje˘_obje˘_add
(
ªq
, "flag",

21 
	`js⁄_obje˘_√w_öt
(
	`ems_©oi
(
	`js⁄_obje˘_gë_°rög
(
obj
))));

23 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

26 
	`js⁄_obje˘_put
(
ªq
);

28 
	`ems_l_åa˚
("maö_c: %d,Ñä%d\n", 
cmd
, 
πn
);

29  
πn
;

30 
	}
}

	@src/core/main_test_nm.c

2 #ifde‡
FOR_TEST_INM


4 
	~"ems_c‹e.h
"

5 
	~"ems_cmd.h
"

7 
ems_öt
 
	$maö_ã°_nm
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

9 
ems_öt
 
πn
;

10 
js⁄_obje˘
 *
ªq
, *
obj
;

12 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

14 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

17 
πn
 = 
MSG_ST_REQUEST_ERR
;

19 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

20 i‡(!
obj
) ;

22 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

25 
	`js⁄_obje˘_put
(
ªq
);

27 
	`ems_l_åa˚
("maö_ã°_nm: %d,Ñä%d\n", 
cmd
, 
πn
);

28  
πn
;

29 
	}
}

	@src/core/main_test_radius.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_ã°_ødius
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "username");

21 i‡(!
obj
) ;

23 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "userpass");

24 i‡(!
obj
) ;

26 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "userip");

27 i‡(!
obj
) ;

29 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "usermac");

30 i‡(!
obj
) ;

32 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

35 
	`js⁄_obje˘_put
(
ªq
);

37 
	`ems_l_åa˚
("maö_ã°_ødius: %d,Ñä%d\n", 
cmd
, 
πn
);

38  
πn
;

39 
	}
}

	@src/core/main_user.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_u£r
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 i‡(!
	`°rˇ£cmp
(
	`js⁄_obje˘_gë_°rög
(
obj
), "kickout"))

22 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "userip");

23 i‡(!
obj
) ;

26 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

29 
	`js⁄_obje˘_put
(
ªq
);

31 
	`ems_l_åa˚
("maö_u£r: %d,Ñä%d\n", 
cmd
, 
πn
);

32  
πn
;

33 
	}
}

	@src/core/main_wireless.c

2 
	~"ems_c‹e.h
"

3 
	~"ems_cmd.h
"

5 
ems_öt
 
	$maö_wúñess
(
ems_öt
 
cmd
,Éms_öà
¨gc
, 
ems_ch¨
 **
¨gv
)

7 
ems_öt
 
πn
;

8 
js⁄_obje˘
 *
ªq
, *
obj
;

10 
ªq
 = 
	`js⁄_obje˘_√w_obje˘
();

12 
	`cmd_∑r£_cmd
(
¨gc
, 
¨gv
, 
ªq
);

15 
πn
 = 
MSG_ST_REQUEST_ERR
;

17 
obj
 = 
	`js⁄_obje˘_obje˘_gë
(
ªq
, "method");

18 i‡(!
obj
) ;

20 
πn
 = 
	`exec_cmd
(
cmd
, 
ªq
);

23 
	`js⁄_obje˘_put
(
ªq
);

25 
	`ems_l_åa˚
("maö_wúñess: %d,Ñä%d\n", 
cmd
, 
πn
);

26  
πn
;

27 
	}
}

	@src/event/ems_event.c

2 
	~"ems_evít.h
"

3 
	~"ems_maö.h
"

4 
	~"evt_ïﬁl.h
"

7 
ems_drivî_evít
 *
	gevt_drvs
[] =

9 &
evt_drivî_ïﬁl
,

10 
NULL


13 
ems_drivî_evít
 *
	$ems_evít_lﬂd_drivî
(
ems_uöt
 
evtid
)

15 
ems_drivî_evít
 *
drv
;

17 
drv
 = 
evt_drvs
[0]; drv !
NULL
; drv++) {

18 i‡(
drv
->
id
 =
evtid
)

19  
drv
;

22  
NULL
;

23 
	}
}

25 
ems_öt
 
	$ems_evít_öô
(
ems_evít
 *
evt
, 
ems_uöt
 
evtid
)

27 
ems_drivî_evít
 *
drv
;

28 
	`ems_as£π
(
evt
 !
NULL
);

30 
	`mem£t
(
evt
, 0, (
ems_evít
));

32 
drv
 = 
	`ems_evít_lﬂd_drivî
(
evtid
);

34 i‡(!
drv
)

35  -
ERR_EVT_NOT_FOUND_DRIVER
;

37 
	`ems_as£π
(
drv
->
öô
 && drv->
unöô
 && drv->
h™dÀ
 && drv->
subs¸ibe
 && drv->
unsubs¸ibe
);

39 
	`ems_l_åa˚
("evíàdrivî: %x: %s", 
drv
->
id
, 
	`°r_ãxt
(&drv->
desc
));

41 i‡(
drv
->
	`öô
(drv)) {

42 
	`ems_l_åa˚
("evít: %†öô faûed", 
	`°r_ãxt
(&
drv
->
desc
));

43  
EMS_ERR
;

46 
	`ems_queue_öô
(&
evt
->
timeout
);

47 
evt
->
run
 = 
YES
;

48 
evt
->
drv
 = drv;

50  
EMS_OK
;

51 
	}
}

53 
ems_öt
 
	$ems_evít_d⁄e
(
ems_evít
 *
evt
)

55 
ems_drivî_evít
 *
drv
;

57 
evt
->
run
 = 
NO
;

58 
drv
 = 
evt
->drv;

60 i‡(
drv
 && drv->
unöô
) {

61 
drv
->
	`unöô
(drv);

62 
evt
->
drv
 = 
NULL
;

65  
EMS_OK
;

66 
	}
}

68 
ems_öt
 
	$ems_evít_run
(
ems_evít
 *
evt
, 
ems_evít_h™dÀ_exåa_cb
 
¥oc
)

70 
ems_drivî_evít
 *
drv
;

71 
timevÆ
 
tv
;

73 
evt
->
run
 = 
YES
;

74 
drv
 = 
evt
->drv;

76 
	`ems_as£π
(
drv
 && drv->
h™dÀ
 && "never show upÅhisÜine");

78 
evt
->
run
) {

80 i‡(
¥oc
Ë{ 
	`¥oc
(
evt
); }

82 i‡(
evt
->
run
) {

83 
	`gëtimeofday
(&
tv
, 
NULL
);

84 
	`ems_timeout_h™dÀ
(&
evt
->
timeout
, &
tv
);

85 
drv
->
	`h™dÀ
(drv, 
	`ems_timeout_√xt
(&
evt
->
timeout
, &
tv
));

89  
EMS_OK
;

90 
	}
}

93 
ems_öt
 
	$ems_evít_add
(
ems_evít
 *
evt
,

94 
ems_evít_fd
 *
fd
,

95 
ems_uöt
 
Êgs
,

96 
ems_evít_cb
 
cb
)

98 
ems_uöt
 
Ê
;

99 
ems_drivî_evít
 *
drv
 = 
evt
->drv;

101 i‡(!
fd
->
ªg
 && !(
Êgs
 & 
EMS_EVT_BLOCKING
)) {

102 
Ê
 = 
	`f˙é
(
fd
->fd, 
F_GETFL
, 0);

103 
Ê
 |
O_NONBLOCK
;

104 
	`f˙é
(
fd
->fd, 
F_SETFL
, 
Ê
);

107 i‡(
fd
->
ªg
) {

108 i‡(
fd
->
Êg
 =
Êgs
)

109  
EMS_OK
;

112 
fd
->
cb
 = cb;

113 i‡(
drv
->
	`subs¸ibe
(drv, 
fd
, 
Êgs
))

114  
EMS_ERR
;

116 
fd
->
ªg
 = 
YES
;

117 
fd
->
eof
 = 
NO
;

118 
fd
->
Êg
 = 
Êgs
;

119 
fd
->
îr‹
 = 
NO
;

121  
EMS_OK
;

122 
	}
}

125 
ems_öt
 
	$ems_evít_dñ
(
ems_evít
 *
evt
, 
ems_evít_fd
 *
fd
)

127 
	`ems_as£π
(
evt
 && 
fd
 && "never show upÅhisÜine");

129  
evt
->
drv
->
	`unsubs¸ibe
”vt->drv, 
fd
);

130 
	}
}

132 
ems_öt
 
	$ems_evít_íd
(
ems_evít
 *
evt
)

134  
evt
->
run
 = 
NO
;

135 
	}
}

137 
ems_öt
 
	$ems_evít_fd_öô
(
ems_evít_fd
 *
fd
)

139 
	`mem£t
(
fd
, 0, (
ems_evít_fd
));

140  
EMS_OK
;

141 
	}
}

	@src/event/ems_event.h

2 #i‚de‡
EMS_EVENT_HANDLER__HEADER___AAAA


3 
	#EMS_EVENT_HANDLER__HEADER___AAAA


	)

5 
	~"ems_comm⁄.h
"

6 
	~"ems_timî.h
"

7 
	~"ems_buf„r.h
"

10 
	#EMS_EVT_READ
 (1 << 0)

	)

11 
	#EMS_EVT_WRITE
 (1 << 1)

	)

12 
	#EMS_EVT_EDGE_TRIGGER
 (1 << 2)

	)

13 
	#EMS_EVT_BLOCKING
 (1 << 3)

	)

15 
	#EVT_DRIVER_EPOLL
 (1 << 0)

	)

16 
	#EVT_DRIVER_SELECT
 (1 << 1)

	)

19 
_ems_evít_fd_s
 
	tems_evít_fd
;

20 
_ems_evít_s
 
	tems_evít
;

22 
	$ems_void
 (*
	tems_evít_cb
)(
	tems_evít_fd
 *
	tevt
, 
	tems_öt
 
	tevíts
);

23 
	$ems_void
 (*
	tems_evít_h™dÀ_exåa_cb
)(
	tems_evít
 *
	tevt
);

25 
_drivî_evít_s
 
	tems_drivî_evít
;

27 
	s_drivî_evít_s
 {

28 
ems_uöt
 
id
;

29 
ems_°r
 
desc
;

30 
ems_void
 *
˘x
;

32 
	`ems_öt
 (*
öô
)(
ems_drivî_evít
 *
drv
);

33 
	`ems_öt
 (*
unöô
)(
ems_drivî_evít
 *
drv
);

34 
	`ems_öt
 (*
h™dÀ
)(
ems_drivî_evít
 *
drv
, 
ems_öt
 
timeout
);

35 
	`ems_öt
 (*
subs¸ibe
)(
ems_drivî_evít
 *
drv
, 
ems_evít_fd
 *
fd
, 
ems_uöt
 
Êg
);

36 
	`ems_öt
 (*
unsubs¸ibe
)(
ems_drivî_evít
 *
drv
, 
ems_evít_fd
 *
fd
);

39 
	s_ems_evít_fd_s


41 
ems_öt
 
fd
;

42 
ems_öt
 
eof
;

43 
ems_öt
 
ªg
;

44 
ems_uöt
 
Êg
;

45 
ems_öt
 
îr‹
;

46 
ems_evít_cb
 
cb
;

49 
	s_ems_evít_s


51 
ems_queue
 
timeout
;

52 
ems_drivî_evít
 *
drv
;

53 
ems_öt
 
run
;

56 
ems_öt
 
	`ems_evít_öô
(
ems_evít
 *
evt
, 
ems_uöt
 
evtid
);

57 
ems_öt
 
	`ems_evít_d⁄e
(
ems_evít
 *
evt
);

58 
ems_öt
 
	`ems_evít_run
(
ems_evít
 *
evt
, 
ems_evít_h™dÀ_exåa_cb
 
exåa
);

59 
ems_öt
 
	`ems_evít_íd
(
ems_evít
 *
evt
);

61 
ems_öt
 
	`ems_evít_add
(
ems_evít
 *
evt
,

62 
ems_evít_fd
 *
fd
,

63 
ems_uöt
 
Êags
,

64 
ems_evít_cb
 
cb
);

65 
ems_öt
 
	`ems_evít_dñ
(
ems_evít
 *
evt
, 
ems_evít_fd
 *
fd
);

67 
ems_öt
 
	`ems_evít_fd_öô
(
ems_evít_fd
 *
fd
);

	@src/event/evt_epoll.c

2 
	~"ems_comm⁄.h
"

3 
	~"evt_ïﬁl.h
"

5 
	~<sys/ïﬁl.h
>

6 
	~<sys/waô.h
>

9 #i‚de‡
EPOLLRDHUP


10 
	#EPOLLRDHUP
 0x2000

	)

13 
	#EMS_EVT_SIZE
 1024

	)

16 
evt_ïﬁl_s
 
	tevt_ïﬁl
;

19 
	sevt_ïﬁl_s
 {

20 
ems_öt
 
	mfd
;

21 
ems_öt
 
	mcur_fd
;

22 
ems_öt
 
	mcur_nfds
;

23 
ems_öt
 
	mn_evt
;

24 
ïﬁl_evít
 *
	mevt
;

27 
ems_öt
 
	$evt_dñ
(
evt_ïﬁl
 *
evt
, 
ems_evít_fd
 *
fd
)

29 
ems_öt
 
i
;

31 
	`ems_as£π
(
evt
 && 
fd
);

33 i‡(!
fd
->
ªg
)

34  
EMS_OK
;

36 
i
 = 
evt
->
cur_fd
 + 1; i <Évt->
cur_nfds
; i++) {

37 i‡(
evt
->evt[
i
].
d©a
.
±r
 !
fd
)

40 
evt
->evt[
i
].
d©a
.
±r
 = 
NULL
;

43 
fd
->
ªg
 = 
NO
;

44 
fd
->
Êg
 = 0;

46  
	`ïﬁl_˘l
(
evt
->
fd
, 
EPOLL_CTL_DEL
, fd->fd, 
NULL
);

47 
	}
}

50 
ems_öt
 
	$evt_öô
(
ems_drivî_evít
 *
drv
)

52 
evt_ïﬁl
 *
evt
 = 
NULL
;

53 
	`ems_as£π
(
drv
 !
NULL
);

55 
evt
 = (
evt_ïﬁl
 *)
	`ems_mÆloc
((evt_epoll));

56 i‡(!
evt
)

57  
EMS_ERR
;

59 
evt
->
fd
 = 
	`ïﬁl_¸óã1
(
EPOLL_CLOEXEC
);

60 i‡(
evt
->
fd
 <= 0) {

61 
	`ems_‰ì
(
evt
);

62  
EMS_ERR
;

65 
evt
->
n_evt
 = 
EMS_EVT_SIZE
;

67 
evt
->evà(
ïﬁl_evít
 *)

68 
	`ems_mÆloc
((
ïﬁl_evít
Ë* 
evt
->
n_evt
);

69 i‡(!
evt
->evt) {

70 
	`˛o£
(
evt
->
fd
);

71 
	`ems_‰ì
(
evt
);

72  
EMS_ERR
;

75 
evt
->
cur_fd
 = 0;

76 
evt
->
cur_nfds
 = 0;

77 
drv
->
˘x
 = (
ems_void
 *)
evt
;

79  
EMS_OK
;

80 
	}
}

82 
ems_öt
 
	$evt_unöô
(
ems_drivî_evít
 *
drv
)

84 
evt_ïﬁl
 *
evt
 = (evt_ïﬁ»*)
drv
->
˘x
;

86 
evt
->
cur_fd
 = 0;

87 
evt
->
cur_nfds
 = 0;

89 i‡(
evt
->
fd
 > 0) {

90 
	`˛o£
(
evt
->
fd
);

91 
evt
->
fd
 = 0;

94 i‡(
evt
->evt) {

95 
	`ems_‰ì
(
evt
->evt);

96 
evt
->evà
NULL
;

99 
	`ems_‰ì
(
evt
);

100 
drv
->
˘x
 = 
NULL
;

102  
EMS_OK
;

103 
	}
}

105 
ems_öt
 
	$evt_h™dÀ
(
ems_drivî_evít
 *
drv
, 
ems_öt
 
timeout
)

107 
ems_uöt
 
Êg
, 
evíts
;

108 
ems_evít_fd
 *
fd
 = 
NULL
;

109 
evt_ïﬁl
 *
evt
 = (evt_ïﬁ»*)
drv
->
˘x
;

111 
	`ems_as£π
(
drv
 && drv->
˘x
 && "never show upÅhisÜine");

114 
evt
->
cur_nfds
 = 
	`ïﬁl_waô
”vt->
fd
,Évt->evt,Évt->
n_evt
, 
timeout
);

116 
evt
->
cur_fd
 = 0;Évt->cur_fd <Évt->
cur_nfds
;Évt->cur_fd++) {

118 
Êg
 = 0;

119 
fd
 = 
evt
->evt[evt->
cur_fd
].
d©a
.
±r
;

120 
evíts
 = 
evt
->evt[evt->
cur_fd
].events;

122 i‡(!
fd
)

125 i‡(
evíts
 & (
EPOLLERR
 | 
EPOLLHUP
)) {

126 
fd
->
îr‹
 = 
YES
;

127 
	`evt_dñ
(
evt
, 
fd
);

130 i‡(!(
evíts
 & (
EPOLLRDHUP
 | 
EPOLLIN
 | 
EPOLLOUT
 | 
EPOLLERR
 | 
EPOLLHUP
)))

133 i‡(
evíts
 & 
EPOLLRDHUP
)

134 
fd
->
eof
 = 
YES
;

136 i‡(
evíts
 & 
EPOLLIN
)

137 
Êg
 |
EMS_EVT_READ
;

139 i‡(
evíts
 & 
EPOLLOUT
)

140 
Êg
 |
EMS_EVT_WRITE
;

142 i‡(
fd
->
cb
)

143 
fd
->
	`cb
(fd, 
Êg
);

146  
EMS_OK
;

147 
	}
}

150 
ems_öt


151 
	$evt_subs¸ibe
(
ems_drivî_evít
 *
drv
, 
ems_evít_fd
 *
fd
, 
ems_uöt
 
Êg
)

153 
evt_ïﬁl
 *
evt
;

154 
ïﬁl_evít
 
ev
;

155 
›
 = 
fd
->
ªg
 ? 
EPOLL_CTL_MOD
: 
EPOLL_CTL_ADD
;

157 
evt
 = (
evt_ïﬁl
 *)
drv
->
˘x
;

159 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

161 i‡(
Êg
 & 
EMS_EVT_READ
)

162 
ev
.
evíts
 |(
EPOLLIN
 | 
EPOLLRDHUP
);

164 i‡(
Êg
 & 
EMS_EVT_WRITE
)

165 
ev
.
evíts
 |
EPOLLOUT
;

167 i‡(
Êg
 & 
EMS_EVT_EDGE_TRIGGER
)

168 
ev
.
evíts
 |
EPOLLET
;

170 
ev
.
d©a
.
fd
 = fd->fd;

171 
ev
.
d©a
.
±r
 = 
fd
;

173  
	`ïﬁl_˘l
(
evt
->
fd
, 
›
, fd->fd, &
ev
);

174 
	}
}

176 
ems_öt


177 
	$evt_unsubs¸ibe
(
ems_drivî_evít
 *
drv
, 
ems_evít_fd
 *
fd
)

179 
evt_ïﬁl
 *
evt
;

181 
	`ems_as£π
(
drv
 && drv->
˘x
 && "never show upÅhisÜine");

182 
evt
 = 
drv
->
˘x
;

184  
	`evt_dñ
(
evt
, 
fd
);

185 
	}
}

188 
ems_drivî_evít
 
	gevt_drivî_ïﬁl
 = {

189 .
id
 = 
EVT_DRIVER_EPOLL
,

190 .
	gdesc
 = 
ems_°rög
("epoll"),

191 .
	g˘x
 = 
NULL
,

193 .
	göô
 = 
evt_öô
,

194 .
	gunöô
 = 
evt_unöô
,

195 .
	gh™dÀ
 = 
evt_h™dÀ
,

196 .
	gsubs¸ibe
 = 
evt_subs¸ibe
,

197 .
	gunsubs¸ibe
 = 
evt_unsubs¸ibe


	@src/event/evt_epoll.h

2 #i‚de‡
EMS_EVENT_EPOLL_HEADER___


3 
	#EMS_EVENT_EPOLL_HEADER___


	)

5 
	~"ems_evít.h
"

7 
ems_drivî_evít
 
evt_drivî_ïﬁl
;

	@src/utils/ems_block.c

2 
	~"ems.h
"

3 
	~"ems_block.h
"

4 
	~"ems_utûs.h
"

6 #i‚de‡
DEBUG


7 
	$°¨tMem‹yTø˚
(
u£_thªad_ß„
)

9  
OK
;

10 
	}
}

12 
	$°›Mem‹yTø˚
()

14  
OK
;

15 
	}
}

17 
	$checkMem‹yLók
()

19 
	}
}

21 *
	$m_mÆloc
(
u32_t
 
sz
)

23  (*)
	`mÆloc
(
sz
);

24 
	}
}

26 *
	$m_ªŒoc
(*
bOld
, 
u32_t
 
sz
)

28  (*)
	`ªÆloc
(
bOld
, 
sz
);

29 
	}
}

31 
	$m_‰ì
(*
b
)

33 i‡–
b
)

34 
	`‰ì
(
b
);

35 
	}
}

37 *
	$m_memdup
(
u8block_t
 *
s
, 
u32_t
 
Àn
)

39 *
b
 = 
NULL
;

41 i‡–!
s
)

42  
NULL
;

44 
b
 = 
	`m_mÆloc
(
Àn
 + 2);

45 i‡–
b
) {

46 
	`mem˝y
(
b
, 
s
, 
Àn
);

47 
b
[
Àn
] = '\0';

50  
b
;

51 
	}
}

58 
	#MAX_MALLOC_SIZE
 ((1 << 23Ë| (1 << 21))

	)

60 
	s_mem‹y_m≠
 {

61 
u8block_t
 *
	m_°¨t
;

62 
u32_t
 
	m_sz
;

63 *
	m_desc
;

64 
	m_ªf
;

65 
_mem‹y_m≠
 *
	m_√xt
;

66 } 
	tblock_t
, *
	tPBLOCK
;

68 
	s_mem‹y_block_
{

69 
block_t
 *
	m_hód
;

70 
block_t
 *
	m_èû
;

71 
	m_u£_lock
;

72 
ems_mtx
 
	m_mtx
;

73 } 
	tmem‹y_block_t
;

75 
mem‹y_block_t
 *
	gg_block
 = 
NULL
;

77 
	$lockMem‹yBlock
(
mem‹y_block_t
 *
mb
)

79 i‡–
mb
 && mb->
_u£_lock
) {

80 
	`ems_mtx_lock
(
mb
->
_mtx
);

82 
	}
}

84 
	$u∆ockMem‹yBlock
(
mem‹y_block_t
 *
mb
)

86 i‡–
mb
 && mb->
_u£_lock
) {

87 
	`ems_mtx_u∆ock
(
mb
->
_mtx
);

89 
	}
}

91 
block_t
 *
	$√wBlock
(
u8block_t
 *
pb
, 
u32_t
 
sz
, c⁄° *
desc
)

93 
block_t
 *
pBlock
 = 
NULL
;

95 
	`As£π
(
pb
 && 
desc
 && 
sz
 > 0 && "Never show upÅhis");

96 
pBlock
 = (
block_t
 *Ë
	`mÆloc
((block_t));

97 i‡–
pBlock
) {

98 
pBlock
->
_°¨t
 = 
pb
;

99 
pBlock
->
_sz
 = 
sz
;

100 
pBlock
->
_desc
 = 
	`Sådup
(
desc
);

101 
pBlock
->
_ªf
 = 
NO
;

102 
pBlock
->
_√xt
 = 
NULL
;

105  
pBlock
;

106 
	}
}

108 
	$ªÀa£Block
(
block_t
 *
pBlock
)

110 i‡–
pBlock
) {

111 i‡–
pBlock
->
_desc
) {

112 
	`‰ì
(
pBlock
->
_desc
);

113 
pBlock
->
_desc
 = 
NULL
;

116 
	`‰ì
(
pBlock
);

117 
pBlock
 = 
NULL
;

119 
	}
}

121 
block_t
 *
	$gëBlock
(
mem‹y_block_t
 *
mb
, 
u8block_t
 *
b
)

123 
block_t
 *
h
 = 
NULL
;

124 
u8block_t
 *
íd
 = 
NULL
;

126 i‡–
mb
 =
NULL
) {

127  
NULL
;

130  
h
 = 
mb
->
_hód
; h !
NULL
; h=h->
_√xt
) {

131 
íd
 = 
h
->
_°¨t
 + h->
_sz
;

132 i‡–(
b
 >
h
->
_°¨t
Ë&& (b < 
íd
) ) {

137  
h
;

138 
	}
}

140 
	$vÆidNode
(
u8block_t
 *
b
, 
u32_t
 
sz
)

142 
block_t
 *
h
 = 
NULL
;

143 
u8block_t
 *
íd
 = 
NULL
;

145  
h
 = 
g_block
->
_hód
; h !
NULL
; h=h->
_√xt
) {

146 
íd
 = 
h
->
_°¨t
 + h->
_sz
;

147 i‡–!((
b
 >
íd
Ë|| (b + 
sz
 <
h
->
_°¨t
))) {

148 
	`Ârötf
(
°dîr
, "\033[01;32m invalid: b: %p, size: %u, b+size: %p "

150 
b
, 
sz
, b+sz, 
íd
, 
h
->
_°¨t
, h->
_sz
, h->
_desc
);

155  
h
 ? 
NO
:
YES
;

156 
	}
}

158 
	$addBlock
(
u8block_t
 *
pb
, 
u32_t
 
sz
, c⁄° *
desc
)

160 
πn
 = 0;

161 
block_t
 *
b
 = 
NULL
;

163 i‡–
g_block
 =
NULL
) {

164  
ERR
;

167 
	`As£π
(
sz
 > 0);

168 
	`lockMem‹yBlock
(
g_block
);

170 
πn
 = 
ERR
;

171 
	`As£π
(
pb
 && (
sz
 > 0Ë&& (sz < 
MAX_MALLOC_SIZE
Ë&& 
desc
);

172 
	`As£π
(
	`vÆidNode
(
pb
, 
sz
));

174 
b
 = 
	`√wBlock
(
pb
, 
sz
, 
desc
);

175 i‡–
b
) {

176 i‡–
g_block
->
_hód
 =
NULL
) {

177 
	`As£π
(
g_block
->
_èû
 =
NULL
);

178 
g_block
->
_hód
 = g_block->
_èû
 = 
b
;

180 
	`As£π
(
g_block
->
_èû
 !
NULL
 );

181 
b
->
_√xt
 = 
g_block
->
_èû
->_next;

182 
g_block
->
_èû
->
_√xt
 = 
b
;

183 
g_block
->
_èû
 = 
b
;

186 
πn
 = 
OK
;

189 
	`u∆ockMem‹yBlock
(
g_block
);

191  
πn
;

192 
	}
}

194 
	$dñëeBlock
(
mem‹y_block_t
 *
mb
, 
block_t
 *
b
)

196 
block_t
 *
¥ev
 = 
NULL
;

197 
πn
 = 
ERR
;

199 
	`As£π
(
mb
 && 
b
 && "Never show upÅhisÜine");

201 i‡–
mb
->
_hód
 =
b
) {

202 
mb
->
_hód
 = mb->_hód->
_√xt
;

203 i‡–
b
 =
mb
->
_èû
)

204 
mb
->
_èû
 = 
NULL
;

205 
b
->
_√xt
 = 
NULL
;

207 
¥ev
 = 
mb
->
_hód
;Öªv !
NULL
;Öªv =Öªv->
_√xt
) {

208 i‡–
¥ev
->
_√xt
 =
b
) {

209 i‡–
b
 =
mb
->
_èû
)

210 
mb
->
_èû
 = 
¥ev
;

211 
¥ev
->
_√xt
 = 
b
->_next;

212 
b
->
_√xt
 = 
NULL
;

219 
	`ªÀa£Block
(
b
);

221  
πn
;

222 
	}
}

224 
	$dñBlock
(
u8block_t
 *
b
)

226 
πn
 = 
ERR
;

227 
block_t
 *
bk
 = 
NULL
;

229 i‡–
g_block
 =
NULL
) {

230  
ERR
;

233 
	`lockMem‹yBlock
(
g_block
);

235 
πn
 = 
ERR
;

236 
bk
 = 
	`gëBlock
(
g_block
, 
b
);

237 i‡–
bk
) {

238 
πn
 = 
	`dñëeBlock
(
g_block
, 
bk
);

241 
	`u∆ockMem‹yBlock
(
g_block
);

243  
πn
;

244 
	}
}

246 
	$m_vÆid_block
(*
pb
, c⁄° *
func
, 
löe
)

248 
πn
 = 
YES
;

249 
block_t
 *
b
 = 
NULL
;

251 
	`lockMem‹yBlock
(
g_block
);

252 
πn
 = 
YES
;

253 
b
 = 
	`gëBlock
(
g_block
, 
pb
);

254 i‡–!
b
) {

255 
	`As£π
(0 && "Call startMemoryTrace firstly");

256 
	`Ârötf
(
°dîr
, "\033[01;32mInvalid block: [%s: %u], blockáddress: %p\033[00m",

257 
func
, 
löe
, 
pb
);

258 
πn
 = 
NO
;

260 
	`u∆ockMem‹yBlock
(
g_block
);

262  
πn
;

263 
	}
}

265 
u32_t
 
	$sizeofBlock
(*
pb
)

267 
u32_t
 
sz
 = 0;

268 
block_t
 *
b
 = 
NULL
;

270 
	`lockMem‹yBlock
(
g_block
);

271 
b
 = 
	`gëBlock
(
g_block
, 
pb
);

272 i‡–
b
) {

273 
sz
 = 
b
->
_sz
;

275 
	`u∆ockMem‹yBlock
(
g_block
);

277  
sz
;

278 
	}
}

280 
	$£tRefBlock
(*
pb
)

282 
block_t
 *
b
 = 
NULL
;

284 
	`lockMem‹yBlock
(
g_block
);

285 
b
 = 
	`gëBlock
(
g_block
, 
pb
);

286 i‡–
b
) {

287 
b
->
_ªf
 = 
YES
;

289 
	`u∆ockMem‹yBlock
(
g_block
);

290  
OK
;

291 
	}
}

293 c⁄° *
	$descBlock
(*
pb
)

295 
buf
[1024] = {0};

296 
block_t
 *
b
 = 
NULL
;

298 
	`lockMem‹yBlock
(
g_block
);

299 
b
 = 
	`gëBlock
(
g_block
, 
pb
);

300 i‡–
b
)

301 
	`¢¥ötf
(
buf
, 1024, "%s", 
b
->
_desc
);

302 
	`u∆ockMem‹yBlock
(
g_block
);

304  
buf
;

305 
	}
}

307 #ifde‡
WIN32


308 
	$USHORT
 (
	tWINAPI
 *
	tC≠tuªSèckBackTø˚Ty≥
)(
	tULONG
,ULONG,
	tPVOID
*,
	tPULONG
);

309 
C≠tuªSèckBackTø˚Ty≥
 
_gC≠tuª
 = 
NULL
;

313 
	$°¨tMem‹yTø˚
(
u£_thªad_ß„
)

315 i‡–!
g_block
) {

316 
g_block
 = (
mem‹y_block_t
 *Ë
	`mÆloc
((memory_block_t));

317 i‡(
g_block
) {

318 
	`mem£t
(
g_block
, 
G¨bage
, (
mem‹y_block_t
));

319 
g_block
->
_hód
 = 
NULL
;

320 
g_block
->
_èû
 = 
NULL
;

321 
g_block
->
_u£_lock
 = 
u£_thªad_ß„
?
YES
:
NO
;

322 
	`ems_mtx_öô
(
g_block
->
_mtx
);

326 #ifde‡
WIN32


327 i‡–!
_gC≠tuª
) {

328 
_gC≠tuª
 = (
C≠tuªSèckBackTø˚Ty≥
)

329 (
	`GëProcAddªss
(
	`LﬂdLibøry
("kernel32.dll"),

334  
OK
;

335 
	}
}

337 
	$°›Mem‹yTø˚
()

339 
block_t
 *
tmp
 = 
NULL
;

340 
mem‹y_block_t
 *
tmp_mb
 = 
NULL
;

342 i‡–
g_block
 ) {

343 
	`checkMem‹yLók
();

344 
	`lockMem‹yBlock
(
g_block
);

345 
tmp_mb
 = 
g_block
;

346 
g_block
 = 
NULL
;

348  
NULL
 !(
tmp
 = 
tmp_mb
->
_hód
) ) {

349 
tmp_mb
->
_hód
 = 
tmp
->
_√xt
;

350 
tmp
->
_√xt
 = 
NULL
;

351 
	`ªÀa£Block
(
tmp
);

354 
tmp_mb
->
_hód
 =Åmp_mb->
_èû
 = 
NULL
;

355 
	`u∆ockMem‹yBlock
(
tmp_mb
);

357 
	`ems_mtx_de°roy
(
tmp_mb
->
_mtx
);

358 
	`mem£t
(
tmp_mb
, 
G¨bage
, (
mem‹y_block_t
));

359 
	`‰ì
(
tmp_mb
);

360 
tmp_mb
 = 
NULL
;

363  
OK
;

364 
	}
}

366 
	$checkMem‹yLók
()

368 
block_t
 *
tmp
 = 
NULL
;

370 
	`lockMem‹yBlock
(
g_block
);

371 i‡–
g_block
) {

372  
tmp
 = 
g_block
->
_hód
;Åm∞!
NULL
;Åm∞tmp->
_√xt
) {

373 i‡–
tmp
->
_ªf
 =
NO
) {

374 
	`Ârötf
(
°dîr
,

375 "\033[01;32m**mem‹yÜók***[%s]\033[00m", 
tmp
->
_desc
);

379 
	`u∆ockMem‹yBlock
(
g_block
);

380 
	}
}

383 #ifde‡
WIN32


384 
	~<wödows.h
>

386 #i‡
deföed
 (
_MSC_VER
) && (_MSC_VER >= 1500)

387 
	~<DbgHñp.h
>

389 #¥agm®
commít
(
lib
, "Dbghelp.lib")

391 
	#gëBackTø˚
(
A
,
B
Ëdÿ{ \

	)

392 
	gi
; \

393 * 
	g°ack
[16]; \

394 
	g‰ames
; \

395 
SYMBOL_INFO
 * 
	gsymbﬁ
; \

396 
HANDLE
 
	g¥o˚ss
; \

397 
	gπn
 = 0; \

398 *
	gpch
 = 
NULL
; \

399 
	g∆e·
 = 0; \

401 i‡–!
	g_gC≠tuª
Ë{
	gpch
 = 
A
; *pch ='\0';;} \

403 
	g¥o˚ss
 = 
GëCuºítPro˚ss
(); \

405 
SymInôülize
–
¥o˚ss
, 
NULL
, 
TRUE
 ); \

407 
	g‰ames
 = 
_gC≠tuª
–0, 16, 
°ack
, 
NULL
 ); \

408 
	gsymbﬁ
 = (
SYMBOL_INFO
*)
ˇŒoc
((SYMBOL_INFO)+256*(),1);\

409 i‡–
	gsymbﬁ
) { \

410 
	gsymbﬁ
->
	gMaxNameLí
 = 255; \

411 
	gsymbﬁ
->
	gSizeOfSåu˘
 = –
SYMBOL_INFO
 ); \

413 
	g∆e·
 = 
B
; \

414 
	gpch
 = 
A
; \

416  
	gi
 = 0; i < 
	g‰ames
; i++ ) { \

417 
SymFromAddr
–
¥o˚ss
, (
DWORD64
)(
°ack
[
i
]), 0, 
symbﬁ
);\

418 
	gπn
 = 
¢¥ötf
(
pch
, 
∆e·
, "###%i: %s-0x%0X\n", \

419 
‰ames
 - 
i
 - 1, 
symbﬁ
->
Name
, \

420 
symbﬁ
->
Addªss
); \

421 
	gpch
 +
πn
; \

422 
	g∆e·
 -
πn
; \

424 
‰ì
–
symbﬁ
 ); \

429 
	#gëBackTø˚
(
A
,
B
)

	)

434 #ifde‡
GENERIC_LINUX


435 
	~<execöfo.h
>

437 
	#gëBackTø˚
(
A
, 
B
Ëdÿ{ \

	)

438 *
¨øy
[16]; \

439 
size_t
 
size
; \

440 **
åa˚Såög
; \

441 
size_t
 
i
; \

442 
∆e·
 = 0; \

443 *
pch
 = 
NULL
; \

444 
πn
 = 0; \

446 
size
 = 
	`backåa˚
 (
¨øy
, 16); \

447 
åa˚Såög
 = 
	`backåa˚_symbﬁs
 (
¨øy
, 
size
); \

449 
pch
 = 
A
; \

450 
∆e·
 = 
B
; \

452 i‡–
åa˚Såög
) { \

453 
i
 = 0; i < 
size
 && 
∆e·
 >0; i++) { \

454 
πn
 = 
	`¢¥ötf
(
pch
, 
∆e·
, \

456 
åa˚Såög
[
i
]); \

457 
pch
 +
πn
; \

458 
∆e·
 -
πn
; \

461 
	`‰ì
 (
åa˚Såög
); \

463 
	}

	$}whûe
(0)

466 
	#gëBackTø˚
(
A
,
B
)

	)

471 
	#_Æig√dSize
(
sz
Ëdÿ{ \

	)

472 
u32_t
 
n
 = 0, 
öt_s
; \

473 
öt_s
 = (); \

474 
n
 = 
sz
 % 
öt_s
; \

475 i‡–
n
) { \

476 
sz
 +
öt_s
 - 
n
; \

478 
	}
} 0)

480 *
	$m_mÆloc
(
u32_t
 
sz
, c⁄° *
Ê
, 
l
)

482 *
b
 = 
NULL
;

483 
desc
[1024] = {0};

484 
åa˚
[1024] = {0};

486 
	`As£π
((
sz
 > 0Ë&& (sz < 
MAX_MALLOC_SIZE
));

487 
	`_Æig√dSize
(
sz
);

488 
b
 = (*)
	`mÆloc
(
sz
);

489 i‡–
b
) {

490 
	`mem£t
(
b
, 
G¨bage
, 
sz
);

491 
	`gëBackTø˚
(
åa˚
, 1024);

493 
	`¢¥ötf
(
desc
, 1024, "threadid: 0x%08lx file: %s, "

495 
	`ems_gëtid
(), 
Ê
, 
l
, 
sz
, 
b
, 
åa˚
);

496 
	`addBlock
(
b
, 
sz
, 
desc
);

499  (*)
b
;

500 
	}
}

502 *
	$m_ªŒoc
(*
bOld
, 
u32_t
 
sz
, c⁄° *
Ê
, 
l
)

504 
u8block_t
 *
b
 = 
NULL
;

506 
	`As£π
(
	`m_vÆid_block
(
bOld
, 
Ê
, 
l
Ë&& (
sz
<
MAX_MALLOC_SIZE
));

507 i‡–
sz
 > 0 && sz >
	`sizeofBlock
(
bOld
)) {

508 
b
 = 
	`m_mÆloc
(
sz
, 
Ê
, 
l
);

509 i‡–!
b
)

510  
NULL
;

511 
	`mem˝y
(
b
, 
bOld
, 
	`sizeofBlock
(bOld));

512 
	`m_‰ì
(
bOld
, 
Ê
, 
l
);

515  
b
;

516 
	}
}

518 
	$m_‰ì
(*
b
, c⁄° *
Ê
, 
l
)

520 i‡–
b
) {

521 
	`As£π
(
	`m_vÆid_block
(
b
, 
Ê
, 
l
) && "Never show upÅhis");

523 
	`mem£t
(
b
, 
G¨bage
, 
	`sizeofBlock
(b));

524 
	`dñBlock
(
b
);

525 
	`‰ì
(
b
);

526 
b
 = 
NULL
;

528 
	}
}

530 *
	$m_°rdup
(c⁄° *
s
, c⁄° *
Ê
, 
l
)

532 i‡–!
s
)

533  
NULL
;

535  
	`m_memdup
((
u8block_t
 *)
s
, 
	`°æí
(s), 
Ê
, 
l
);

536 
	}
}

538 *
	$m_memdup
(
u8block_t
 *
s
, 
u32_t
 
Àn
, c⁄° *
Ê
, 
l
)

540 
u8block_t
 *
b
 = 
NULL
;

542 i‡–!
s
)

543  
NULL
;

545 
b
 = (
u8block_t
 *)
	`m_mÆloc
(
Àn
 + 2, 
Ê
, 
l
);

546 i‡–
b
) {

547 
	`mem˝y
(
b
, 
s
, 
Àn
);

548 ((*)
b
)[
Àn
] = '\0';

551  
b
;

552 
	}
}

554 
	$m_as£π
(c⁄° *
func
, 
l
)

556 
åa˚
[1024] = {0};

558 
	`gëBackTø˚
(
åa˚
, 1024);

560 
	`Ârötf
(
°dîr
,

562 
func
, 
l
, 
åa˚
);

563 
	}
}

	@src/utils/ems_buffer.c

2 
	~"ems_comm⁄.h
"

3 
	~"ems_buf„r.h
"

5 
ems_buf„r
 *
	$ems_buf„r_√w
(
ems_uöt
 
sz
)

7 
ems_buf„r
 *
buf
 = 
NULL
;

9 
buf
 = (
ems_buf„r
 *)
	`ems_mÆloc
((ems_buffer));

11 i‡(
buf
) {

13 i‡(
	`ems_buf„r_öô
(
buf
, 
sz
Ë!
EMS_OK
) {

14 
	`ems_‰ì
(
buf
);

15 
buf
 = 
NULL
;

19  
buf
;

20 
	}
}

22 
ems_öt
 
	$ems_buf„r_öô
(
ems_buf„r
 *
buf
, 
ems_uöt
 
sz
)

24 
	`ems_as£π
(
buf
 !
NULL
);

26 i‡(!
buf
)

27  
EMS_ERR
;

29 
	`buf_hód
(
buf
Ë
	`buf_èû
(bufË
	`buf_rd
(bufË
	`buf_wr
(bufË
NULL
;

31 
	`buf_hód
(
buf
Ë(
ems_ch¨
 *)
	`ems_mÆloc
(”ms_ch¨Ë* 
sz
);

33 i‡(!
	`buf_hód
(
buf
))

34  
EMS_ERR
;

36 
	`buf_èû
(
buf
Ë
	`buf_hód
(bufË+ 
sz
;

37 
	`buf_wr
(
buf
Ë
	`buf_rd
(bufË
	`buf_hód
(buf);

39  
EMS_OK
;

40 
	}
}

42 
ems_void
 
	$ems_buf„r_unöô
(
ems_buf„r
 *
buf
)

44 
	`ems_as£π
(
buf
 !
NULL
);

45 i‡(
buf
) {

46 i‡(
	`buf_hód
(
buf
))

47 
	`ems_‰ì
(
	`buf_hód
(
buf
));

48 
	`buf_hód
(
buf
Ë
	`buf_èû
(bufË
	`buf_rd
(bufË
	`buf_wr
(bufË
NULL
;

50 
	}
}

52 
ems_void
 
	$ems_buf„r_de°roy
(
ems_buf„r
 *
buf
)

54 i‡(
buf
) {

55 
	`ems_buf„r_unöô
(
buf
);

56 
	`ems_‰ì
(
buf
);

58 
	}
}

60 
ems_öt
 
	$ems_buf„r_£ek_rd
(
ems_buf„r
 *
buf
, 
ems_öt
 
off
,Éms_öà
pos
)

62 
	`ems_as£π
(
buf
 !
NULL
);

64 i‡(!
buf
)

65  
EMS_ERR
;

67 
pos
) {

69 
EMS_BUFFER_SEEK_SET
:

70 i‡((
off
 < 0Ë|| (of‡> (
	`buf_Àn
(
buf
Ë+ 
	`buf_åash
(buf))))

71  
EMS_ERR
;

73 
	`buf_rd
(
buf
Ë
	`buf_hód
(bufË+ 
off
;

76 
EMS_BUFFER_SEEK_CUR
:

77 i‡((
off
 > 
	`buf_Àn
(
buf
)Ë|| (of‡< -
	`buf_åash
(buf))) {

78  
EMS_ERR
;

81 
	`buf_rd
(
buf
Ëbuf_rd(bufË+ 
off
;

84 
EMS_BUFFER_SEEK_END
:

85 i‡((
off
 > 0Ë|| (of‡< - (
	`buf_Àn
(
buf
Ë+ 
	`buf_åash
(buf)))) {

86  
EMS_ERR
;

89 
	`buf_rd
(
buf
Ë
	`buf_wr
(bufË+ 
off
;

93 
	`ems_as£π
(0 && "argÉrror");

94  
EMS_ERR
;

97  
EMS_OK
;

98 
	}
}

100 
ems_öt
 
	$ems_buf„r_£ek_wr
(
ems_buf„r
 *
buf
, 
ems_öt
 
off
,Éms_öà
pos
)

102 
	`ems_as£π
(
buf
 !
NULL
);

104 i‡(!
buf
)

105  
EMS_ERR
;

107 
pos
) {

109 
EMS_BUFFER_SEEK_SET
:

111 i‡(
off
 < 0 || of‡> (
	`buf_Àn
(
buf
Ë+ 
	`buf_À·
(buf)))

112  
EMS_ERR
;

114 
	`buf_wr
(
buf
Ë
	`buf_rd
(bufË+ 
off
;

118 
EMS_BUFFER_SEEK_CUR
:

120 i‡(
off
 < -
	`buf_Àn
(
buf
Ë|| of‡> 
	`buf_À·
(buf))

121  
EMS_ERR
;

123 
	`buf_wr
(
buf
Ëbuf_wr(bufË+ 
off
;

127 
EMS_BUFFER_SEEK_END
:

129 i‡(
off
 > 0 || (of‡< - (
	`buf_Àn
(
buf
Ë+ 
	`buf_À·
(buf))))

130  
EMS_ERR
;

132 
	`buf_wr
(
buf
Ë
	`buf_èû
(bufË+ 
off
;

137 
	`ems_as£π
(0 && "argÉrror");

141  
EMS_OK
;

142 
	}
}

144 
ems_öt
 
	$ems_buf„r_ª‰esh
(
ems_buf„r
 *
buf
)

146 
ems_öt
 
Àn
;

148 
	`ems_as£π
(
buf
 && "argÉrror");

150 i‡(!
buf
)

151  
EMS_ERR
;

153 i‡(
	`buf_åash
(
buf
) > 0) {

155 
Àn
 = 
	`buf_Àn
(
buf
);

157 
	`ems_as£π
(
	`buf_hód
(
buf
Ë!
	`buf_rd
(buf));

158 
	`mem˝y
(
	`buf_hód
(
buf
), 
	`buf_rd
(buf), 
Àn
);

159 
	`buf_rd
(
buf
Ë
	`buf_hód
(buf);

160 
	`buf_wr
(
buf
Ë
	`buf_rd
(bufË+ 
Àn
;

162 #ifde‡
DEBUG


163 
	`mem£t
(
	`buf_wr
(
buf
), 
G¨bage
, 
	`buf_À·
(buf));

167 
	`ems_as£π
(
	`buf_åash
(
buf
) == 0);

169  
EMS_OK
;

170 
	}
}

172 
ems_öt


173 
	$buf„r_„tch
(
ems_buf„r
 *
buf
, 
ems_ch¨
 *
de°
, 
ems_öt
 
Àn
,Éms_öà
døö
)

175 i‡(!(
buf
 && 
de°
 && 
Àn
 > 0))

176  
EMS_ERR
;

178 i‡(
	`buf_Àn
(
buf
Ë< 
Àn
)

179 
Àn
 = 
	`buf_Àn
(
buf
);

181 
	`mem˝y
(
de°
, 
	`buf_rd
(
buf
), 
Àn
);

183 i‡(
døö
) {

184 #ifde‡
DEBUG


185 
ems_öt
 
ªt
 =

188 
	`ems_buf„r_£ek_rd
(
buf
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

190 #ifde‡
DEBUG


191 
	`ems_as£π
((
ªt
 =
EMS_OK
) && "bug inÉms_buffer_seek_rd");

195  
Àn
;

196 
	}
}

199 
ems_öt
 
	$ems_buf„r_ªad
(
ems_buf„r
 *
buf
, 
ems_ch¨
 *
de°
, 
ems_öt
 
Àn
)

201 
	`ems_as£π
(
buf
 && 
de°
 && 
Àn
 > 0);

203  
	`buf„r_„tch
(
buf
, 
de°
, 
Àn
, 1);

204 
	}
}

206 
ems_öt
 
	$ems_buf„r_¥e„tch
(
ems_buf„r
 *
buf
, 
ems_ch¨
 *
de°
, 
ems_öt
 
Àn
)

208 
	`ems_as£π
(
buf
 && 
de°
 && 
Àn
 > 0);

210  
	`buf„r_„tch
(
buf
, 
de°
, 
Àn
, 0);

211 
	}
}

213 
ems_öt
 
	$ems_buf„r_wrôe
(
ems_buf„r
 *
buf
, 
ems_cch¨
 *
§c
, 
ems_öt
 
Àn
)

215 #ifde‡
DEBUG


216 
ems_öt
 
ªt
;

218 
	`ems_as£π
(
buf
 && 
§c
 && 
Àn
 >= 0);

220 i‡(!(
buf
 && 
§c
 && 
Àn
 >= 0))

221  
EMS_ERR
;

223 i‡(
Àn
 > 
	`buf_À·
(
buf
))

224 
Àn
 = 
	`buf_À·
(
buf
);

226 
	`mem˝y
(
	`buf_wr
(
buf
), 
§c
, 
Àn
);

228 #ifde‡
DEBUG


229 
ªt
 =

231 
	`ems_buf„r_£ek_wr
(
buf
, 
Àn
, 
EMS_BUFFER_SEEK_CUR
);

232 #ifde‡
DEBUG


233 
	`ems_as£π
((
ªt
 =
EMS_OK
) && "bug inÉms_buffer_seek_wr");

236  
Àn
;

237 
	}
}

240 
ems_void
 
	$ems_buf„r_˛ór
(
ems_buf„r
 *
buf
)

242 
	`ems_as£π
(
buf
 && "invlaidárg");

244 
	`buf_rd
(
buf
Ë
	`buf_wr
(bufË
	`buf_hód
(buf);

245 #i‚de‡
DEBUG


246 
	`mem£t
(
	`buf_rd
(
buf
), 
G¨bage
, 
	`buf_À·
(buf));

248 
	}
}

250 
ems_öt
 
	$ems_buf„r_ö¸ó£
(
ems_buf„r
 *
buf
, 
ems_uöt
 
öc
)

252 
ems_uöt
 
tŸÆ
;

253 
ems_ch¨
 *
tmp
 = 
NULL
;

254 
ems_uöt
 
Àn
;

255 
	`ems_as£π
(
buf
);

257 
	`ems_buf„r_ª‰esh
(
buf
);

259 i‡(
	`buf_À·
(
buf
Ë> 
öc
)

260  
EMS_OK
;

262 
Àn
 = 
	`buf_Àn
(
buf
);

263 
tŸÆ
 = 
	`buf_size
(
buf
Ë+ 
öc
;

265 
tmp
 = (
ems_ch¨
 *)
	`ems_ªÆloc
(
	`buf_hód
(
buf
), 
tŸÆ
);

266 i‡(
tmp
) {

267 
	`buf_hód
(
buf
Ë
	`buf_rd
(bufË
tmp
;

268 
	`buf_èû
(
buf
Ë
	`buf_hód
(bufË+ 
tŸÆ
;

269 
	`buf_wr
(
buf
Ë
	`buf_rd
(bufË+ 
Àn
;

271  
EMS_OK
;

274  
EMS_ERR
;

275 
	}
}

	@src/utils/ems_buffer.h

2 #i‚de‡
EMS_BUFFER_HEADER____


3 
	#EMS_BUFFER_HEADER____


	)

5 
	#EMS_BUFFER_1K
 1024

	)

6 
	#EMS_BUFFER_2K
 2048

	)

7 
	#EMS_BUFFER_4k
 4096

	)

8 
	#EMS_BUFFER_8k
 8192

	)

9 
	#EMS_BUFFER_16k
 16384

	)

10 
	#EMS_BUFFER_DEFAULT_SIZE
 
EMS_BUFFER_4k


	)

12 
_ems_buf„r_s
 
	tems_buf„r
;

14 
	s_ems_buf„r_s


16 
ems_ch¨
 *
	mhód
;

17 
ems_ch¨
 *
	mèû
;

18 
ems_ch¨
 *
	mrd
;

19 
ems_ch¨
 *
	mwr
;

23 
	#buf_hód
(
buf
Ë((buf)->
hód
)

	)

24 
	#buf_èû
(
buf
Ë((buf)->
èû
)

	)

25 
	#buf_rd
(
buf
Ë((buf)->
rd
)

	)

26 
	#buf_wr
(
buf
Ë((buf)->
wr
)

	)

28 
	#buf_size
(
buf
Ë
	`abs
(
	`buf_èû
(bufË- 
	`buf_hód
(buf))

	)

29 
	#buf_À·
(
buf
Ë
	`abs
(
	`buf_èû
(bufË- 
	`buf_wr
(buf))

	)

30 
	#buf_Àn
(
buf
Ë
	`abs
(
	`buf_wr
(bufË- 
	`buf_rd
(buf))

	)

31 
	#buf_åash
(
buf
Ë
	`abs
(
	`buf_rd
(bufË- 
	`buf_hód
(buf))

	)

33 
	#EMS_BUFFER_SEEK_SET
 1

	)

34 
	#EMS_BUFFER_SEEK_CUR
 2

	)

35 
	#EMS_BUFFER_SEEK_END
 3

	)

37 
ems_buf„r
 *
ems_buf„r_√w
(
ems_uöt
 
sz
);

38 
ems_öt
 
ems_buf„r_öô
(
ems_buf„r
 *, 
ems_uöt
 
sz
);

39 
ems_void
 
ems_buf„r_unöô
(
ems_buf„r
 *);

40 
ems_void
 
ems_buf„r_de°roy
(
ems_buf„r
 *);

42 
ems_öt
 
ems_buf„r_£ek_rd
(
ems_buf„r
 *,Éms_öà
off
,Éms_öà
pos
);

43 
ems_öt
 
ems_buf„r_£ek_wr
(
ems_buf„r
 *,Éms_öà
off
,Éms_öà
pos
);

45 
ems_öt
 
ems_buf„r_ª‰esh
(
ems_buf„r
 *);

47 
ems_öt
 
ems_buf„r_ªad
(
ems_buf„r
 *, 
ems_ch¨
 *,Éms_öà
Àn
);

48 
ems_öt
 
ems_buf„r_¥e„tch
(
ems_buf„r
 *, 
ems_ch¨
 *,Éms_öà
Àn
);

49 
ems_öt
 
ems_buf„r_wrôe
(
ems_buf„r
 *, 
ems_cch¨
 *,Éms_öà
Àn
);

51 
ems_void
 
ems_buf„r_˛ór
(
ems_buf„r
 *);

53 
	#ems_buf„r_≠≥nd
 
ems_buf„r_wrôe


	)

54 
	#ems_buf„r_≠≥nd_°r
(
buf
, 
°r
Ë
	`ems_buf„r_wrôe
(buf, så, 
	`°æí
(°r))

	)

55 
	#ems_buf„r_døö
(
buf
, 
Àn
Ë
	`ems_buf„r_£ek_rd
(buf,Üí, 
EMS_BUFFER_SEEK_CUR
)

	)

56 
	#ems_buf„r_ª£t
 
ems_buf„r_˛ór


	)

58 
ems_öt
 
ems_buf„r_ö¸ó£
(
ems_buf„r
 *, 
ems_uöt
 
sz
);

59 
	#ems_buf„r_ex∑nd
(
buf
Ë
	`ems_buf„r_ö¸ó£
(buf, 
EMS_BUFFER_4k
)

	)

	@src/utils/ems_common.h

2 #i‚de‡
EMS_HEADER___ALL_____


3 
	#EMS_HEADER___ALL_____


	)

5 
	~"ems.h
"

7 #ifde‡
_LIBC


8 
	~<ídün.h
>

9 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


10 
	#WORDS_BIGENDIAN
 1

	)

15 #¥agm®
∑ck
(
push
, 1)

17 
_ems_ªque°_s
 
	tems_ªque°
;

18 
_ems_ª•⁄£_s
 
	tems_ª•⁄£
;

21 
	u_ems_ªque°_s
 {

22 
ems_uch¨
 
	mvÆ
[8];

25 
ems_uöt
 
	mvÆ
;

27 #ifde‡
WORDS_BIGENDIAN


29 
	mmod
;

31 
	mems_uch¨
 :7;

32 
ems_uch¨
 
	mty
:1;

35 
ems_ush‹t
 
	mmsg
;

37 
ems_ush‹t
 
	mmsg
;

39 
	mmod
;

41 
	mems_uch¨
 :7;

42 
ems_uch¨
 
	mty
:1;

47 } 
	mèg
;

48 
ems_uöt
 
	mÀn
;

52 
	u_ems_ª•⁄£_s
 {

53 
ems_uch¨
 
	mvÆ
[12];

56 
ems_uöt
 
	mvÆ
;

58 #ifde‡
WORDS_BIGENDIAN


60 
	mmod
;

62 
	mems_uöt
 :7;

63 
ems_uöt
 
	mty
:1;

66 
ems_ush‹t
 
	mmsg
;

68 
ems_ush‹t
 
	mmsg
;

70 
	mmod
;

72 
	mems_uöt
 :7;

73 
ems_uöt
 
	mty
:1;

78 } 
	mèg
;

79 
ems_uöt
 
	mÀn
;

80 
ems_uöt
 
	m°
;

85 
	#EMS_CONTINUE
 0xff11Øbb

	)

86 
	#EMS_BUFFER_FULL
 0xff11Øbc

	)

87 
	#EMS_BUFFER_INSUFFICIENT
 0xff11Øbd

	)

88 
	#EMS_REQUEST
 0

	)

89 
	#EMS_RESPONSE
 1

	)

91 
	#SIZE_REQUEST
 (
ems_ªque°
)

	)

92 
	#SIZE_RESPONSE
 (
ems_ª•⁄£
)

	)

94 
	#INTSIZE
 4

	)

95 
	#ALIGNLEN
(
l
Ë(÷)%
INTSIZE
==0)?÷):((÷)/INTSIZE + 1Ë* INTSIZE);

	)

97 
	#gëw‹d
(
buf
, 
w
) do { \

98 
w
 = ()
	`¡ohl
(*(*)
buf
); \

99 
buf
 +
INTSIZE
; \

100 } 0)

	)

102 
	#putw‹d
(
buf
, 
w
) do { \

103 *(*)
buf
 = 
	`ht⁄l
(
w
); \

104 
buf
 +
INTSIZE
; \

105 } 0)

	)

107 
	#putmem
(
buf
, 
m
, 
l
) do { \

108 
	`putw‹d
(
buf
, 
l
); \

109 
	`mem˝y
(
buf
, 
m
, 
l
); \

110 
buf
 +
	`ALIGNLEN
(
l
); \

111 } 0)

	)

113 
	#gëmem
(
buf
, 
m
, 
l
) do { \

114 
	`gëw‹d
(
buf
, 
l
); \

115 
	`mem˝y
(
m
, 
buf
, 
l
); \

116 
buf
 +
	`ALIGNLEN
(
l
); \

117 } 0)

	)

119 
	#put°r
(
buf
, 
°r
) do { \

120 
l
 = (
°r
 =
NULL
?0:
	`°æí
(str)); \

121 
	`putmem
(
buf
, 
°r
, 
l
); \

122 } 0)

	)

124 
	#gë°r
(
buf
, 
°r
) do { \

125 
l
; \

126 
	`gëmem
(
buf
, 
°r
, 
l
); \

127 } 0)

	)

130 #¥agm®
∑ck
(
p›
)

132 
	#ems_°¨t_mem‹y_åa˚
 
°¨tMem‹yTø˚


	)

133 
	#ems_°›_mem‹y_åa˚
 
°›Mem‹yTø˚


	)

135 
	#ems_°æí
(
a
Ë◊?
	`°æí
◊):0)

	)

137 #i‚de‡
EMS_YES


138 
	#EMS_YES
 1

	)

141 #i‚de‡
EMS_NO


142 
	#EMS_NO
 0

	)

145 
	#EMS_FLG_DEFAULT
 (1 << 0)

	)

146 
	#EMS_FLG_ENABLE
 (1 << 1)

	)

147 
	#EMS_FLG_INHERIET
 (1 << 2)

	)

148 
	#EMS_FLG_KICKOFF
 (1 << 3)

	)

149 
	#EMS_FLG_ONLINE
 (1 << 31)

	)

152 
	#ems_Êag_like
(
Êd
, 
Êg
Ë((ÊdË& (Êg))

	)

153 
	#ems_Êag_u∆ike
(
Êd
, 
Êg
Ë!
	`ems_Êag_like
(Êd, flg)

	)

154 
	#ems_Êag_£t
(
Êd
, 
Êg
Ë((ÊdË|(Êg))

	)

155 
	#ems_Êag_un£t
(
Êd
, 
Êg
Ëif(
	`ems_Êag_like
(Êd, flg)Ë((ÊdË^(Êg))

	)

156 
	#ems_Êag_ã°
 
ems_Êg_like


	)

159 
	#EMS_MODULE_WEB
 0x01

	)

160 
	#EMS_MODULE_AC
 0x02

	)

161 
	#EMS_MODULE_LOGIC
 0x03

	)

162 
	#EMS_MODULE_AAA
 0x04

	)

165 
	#EMS_TICKET_LEN
 20

	)

	@src/utils/ems_getopt.c

2 #ifde‡
WIN32


4 
	~<°rög.h
>

5 
	~<°dio.h
>

7 
	~"ems_gë›t.h
"

9 
	#BADCH
 ()'?'

	)

10 
	#BADARG
 ()':'

	)

11 
	#EMSG
 ""

	)

13 
	g›ãº
 = 1,

14 
	g›töd
 = 1,

15 
	g›t›t
,

16 
	g›åe£t
;

19 
	$ems_gë›t
(
«rgc
, * c⁄° 
«rgv
[], c⁄° *
o°r
)

21 *
∂a˚
 = 
EMSG
;

22 c⁄° *
ﬁi
;

24 i‡(
›åe£t
 || !*
∂a˚
) {

25 
›åe£t
 = 0;

26 i‡(
›töd
 >
«rgc
 || *(
∂a˚
 = 
«rgv
[optind]) != '-') {

27 
∂a˚
 = 
EMSG
;

30 i‡(
∂a˚
[1] && *++place == '-') {

31 ++
›töd
;

32 
∂a˚
 = 
EMSG
;

36 i‡((
›t›t
 = ()*
∂a˚
++) == ()':' ||

37 !(
ﬁi
 = 
	`°rchr
(
o°r
, 
›t›t
))) {

42 i‡(
›t›t
 == ()'-')

44 i‡(!*
∂a˚
)

45 ++
›töd
;

46 i‡(
›ãº
 && *
o°r
 != ':')

47 ()
	`¥ötf
("ûÀgÆ o±i⁄ -- %c\n", 
›t›t
);

48  (
BADCH
);

50 i‡(*++
ﬁi
 != ':') {

51 
›èrg
 = 
NULL
;

52 i‡(!*
∂a˚
)

53 ++
›töd
;

56 i‡(*
∂a˚
)

57 
›èrg
 = 
∂a˚
;

58 i‡(
«rgc
 <++
›töd
) {

59 
∂a˚
 = 
EMSG
;

60 i‡(*
o°r
 == ':')

61  (
BADARG
);

62 i‡(
›ãº
)

63 ()
	`¥ötf
("›ti⁄Ñequúe†™árgumíà-- %c\n", 
›t›t
);

64  (
BADCH
);

67 
›èrg
 = 
«rgv
[
›töd
];

68 
∂a˚
 = 
EMSG
;

69 ++
›töd
;

71  (
›t›t
);

72 
	}
}

	@src/utils/ems_hash.c

2 
	~"ems_comm⁄.h
"

3 
	~"ems_hash.h
"

6 
ems_öt


7 
	$hash_¸c
(
ems_cch¨
 *
§c
)

9 
ems_ch¨
 
ch
;

10 
ems_öt
 
ems_¸c
 = 0;

12 *
§c
) {

13 
ch
 = *
§c
++;

15 
ems_¸c
 ^((
ch
 << 8) ^ ch);

18  
ems_¸c
;

19 
	}
}

21 
ems_hash_fd
 *
	$hash_föd
(
ems_queue
 *
hód
, 
ems_cch¨
 *
key
)

23 
ems_queue
 *
p
;

24 
ems_hash_fd
 *
fd
;

26 
	`ems_as£π
(
hód
 && 
key
);

28 i‡(!(
hód
 && 
key
))

29  
NULL
;

31 
	`ems_queue_f‹óch
(
hód
, 
p
) {

33 
fd
 = 
	`ems_queue_d©a
(
p
, 
ems_hash_fd
, 
li°
);

35 
	`ems_as£π
(
	`°r_ãxt
(&
fd
->
key
));

37 i‡(
	`°rcmp
(
	`°r_ãxt
(&
fd
->
key
), key) == 0)

38  
fd
;

41  
NULL
;

42 
	}
}

46 
ems_hash
 *
	$ems_hash_¸óã
(
ems_öt
 
n_ba£
)

48 
ems_hash
 *
hash
 = 
NULL
;

50 
hash
 = (
ems_hash
 *)
	`ems_mÆloc
((ems_hash));

52 i‡(
hash
) {

53 i‡(
	`ems_hash_öô
(
hash
, 
n_ba£
Ë!
EMS_OK
) {

54 
	`ems_‰ì
(
hash
);

55 
hash
 = 
NULL
;

59  
hash
;

60 
	}
}

62 
ems_öt
 
	$ems_hash_öô
(
ems_hash
 *
hash
, 
ems_öt
 
ba£
)

64 
ems_öt
 
i
;

66 
	`ems_as£π
(
hash
 && 
ba£
 > 0 && "invalidárg");

68 
	`mem£t
(
hash
, 0, (
ems_hash
));

70 
hash
->
ba£
 = (
ems_queue
 *)
	`ems_mÆloc
((ems_queue) * base);

71 i‡(!
hash
->
ba£
)

72  
EMS_ERR
;

74 
hash
->
n_ba£
 = 
ba£
;

76 
i
 = 0; i < 
hash
->
n_ba£
; i++) {

77 
	`ems_queue_öô
(&(
hash
->
ba£
[
i
]));

80  
EMS_OK
;

81 
	}
}

83 
ems_void
 
	$ems_hash_unöô
(
ems_hash
 *
hash
)

85 
	`ems_as£π
(
hash
);

87 i‡(
hash
->
ba£
) {

88 
	`ems_‰ì
(
hash
->
ba£
);

89 
hash
->
ba£
 = 
NULL
;

92 
hash
->
n_ba£
 = 0;

93 
	}
}

95 
ems_void
 
	$ems_hash_de°roy
(
ems_hash
 *
hash
)

97 
	`ems_as£π
(
hash
);

99 i‡(
hash
) {

100 
	`ems_hash_unöô
(
hash
);

101 
	`ems_‰ì
(
hash
);

103 
	}
}

106 
ems_öt
 
	$ems_hash_ö£π
(
ems_hash
 *
hash
, 
ems_hash_fd
 *
fd
)

108 
ems_hash_fd
 *
tmp
;

109 
ems_queue
 *
hód
;

111 
	`ems_as£π
(
hash
 && 
fd
);

113 
fd
->
¸c
 = fd->¸¯% 
hash
->
n_ba£
;

115 
	`ems_as£π
(
fd
->
¸c
 >0 && fd->¸¯< 
hash
->
n_ba£
);

117 
hód
 = &(
hash
->
ba£
[
fd
->
¸c
]);

119 
tmp
 = 
	`hash_föd
(
hód
, 
	`°r_ãxt
(&
fd
->
key
));

120 i‡(
tmp
)

121  
EMS_ERR_TICKET_EXIST
;

123 
	`ems_queue_ö£π_hód
(
hód
, &
fd
->
li°
);

124  
EMS_OK
;

125 
	}
}

127 
ems_hash_fd
 *
	$ems_hash_ªmove
(
ems_hash_fd
 *
fd
)

129 
	`ems_queue_ªmove
(&
fd
->
li°
);

130  
fd
;

131 
	}
}

133 
ems_hash_fd
 *
	$ems_hash_föd
(
ems_hash
 *
hash
, 
ems_cch¨
 *
key
)

135 
ems_öt
 
¸c
;

136 
ems_queue
 *
hód
;

138 
¸c
 = 
	`hash_¸c
(
key
);

140 
	`ems_as£π
(
hash
->
n_ba£
 > 2 && hash->
ba£
);

142 
¸c
 = cr¯% 
hash
->
n_ba£
;

143 
	`ems_as£π
(
¸c
 >0 && cr¯< 
hash
->
n_ba£
);

145 
hód
 = &
hash
->
ba£
[
¸c
];

147  
	`hash_föd
(
hód
, 
key
);

148 
	}
}

150 
ems_öt
 
	$ems_hash_fd_öô
(
ems_hash_fd
 *
fd
)

152 
	`ems_as£π
(
fd
);

154 
	`mem£t
(
fd
, 0, (
ems_hash_fd
));

156 
	`°r_öô
(&
fd
->
key
);

157 
	`ems_queue_öô
(&
fd
->
li°
);

159  
EMS_OK
;

160 
	}
}

162 
ems_öt
 
	$ems_hash_fd_£t_key
(
ems_hash_fd
 *
fd
, 
ems_cch¨
 *
key
)

164 
	`ems_as£π
(
fd
 && 
key
);

166 
fd
->
¸c
 = 
	`hash_¸c
(
key
);

167 
	`°r_£t
(&
fd
->
key
, key);

169  
EMS_OK
;

170 
	}
}

172 
ems_void
 
	$ems_hash_fd_unöô
(
ems_hash_fd
 *
fd
)

174 
	`ems_as£π
(
fd
);

176 
	`°r_unöô
(&
fd
->
key
);

178 
	`mem£t
(
fd
, 0, (
ems_hash_fd
));

179 
	}
}

182 
ems_öt
 
	$ems_hash_˛ón
(
ems_hash
 *
hash
)

184 
ems_öt
 
i
;

186 
i
 = 0; i < 
hash
->
n_ba£
; i++) {

187 
	`ems_queue_˛ón
(&
hash
->
ba£
[
i
]);

190  
EMS_OK
;

191 
	}
}

193 
ems_öt
 
	$ems_hash_wÆk
(
ems_hash
 *
hash
, 
ems_hash_íum_cb
 
cb
, 
ems_void
 *
¨g
)

195 
ems_öt
 
i
, 
ªt
;

196 
ems_queue
 *
p
, *
n
;

197 
ems_hash_fd
 *
fd
;

199 
	`ems_as£π
(
hash
 && 
cb
);

201 i‡(!(
hash
 && 
cb
))

202  
EMS_ERR
;

204 
i
 = 0; i < 
hash
->
n_ba£
; i++) {

206 
	`ems_queue_f‹óch_ß„
(&
hash
->
ba£
[
i
], 
p
, 
n
) {

208 
fd
 = 
	`ems_queue_d©a
(
p
, 
ems_hash_fd
, 
li°
);

210 
ªt
 = 
	`cb
(
fd
, 
¨g
);

212 i‡(
ªt
 !
EMS_OK
)

213  
ªt
;

217  
EMS_OK
;

218 
	}
}

220 
ems_cch¨
 *
	$ems_hash_key
(
ems_uöt
 
n
)

222 
ems_ch¨
 
tmp_buf
[128] = {0};

224 
	`¢¥ötf
(
tmp_buf
, 128, "%x", 
n
);

225  
tmp_buf
;

226 
	}
}

	@src/utils/ems_hash.h

2 #i‚de‡
EMS_HASH_TABLES___HEADER____


3 
	#EMS_HASH_TABLES___HEADER____


	)

5 
	#EMS_HASH_BASE_SIZE
 4096

	)

6 
	#EMS_HASH_BASE_SMALL
 128

	)

7 
	#EMS_HASH_BASE_TINY
 64

	)

8 
	#EMS_HASH_BASE_DEFAULT
 4096

	)

10 
_ems_hash_fd_s
 
	tems_hash_fd
;

11 
_ems_hash_s
 
	tems_hash
;

13 
	$ems_öt
 (*
	tems_hash_íum_cb
)(
	tems_hash_fd
 *
	tfd
, 
	tems_void
 *
	t¨g
);

16 
	s_ems_hash_fd_s
 {

17 
ems_queue
 
li°
;

18 
ems_öt
 
¸c
;

19 
ems_°r
 
key
;

23 
	s_ems_hash_s
 {

24 
ems_öt
 
n_ba£
;

25 
ems_queue
 *
ba£
;

29 
ems_hash
 *
	`ems_hash_¸óã
(
ems_öt
 
n_ba£
);

30 
ems_öt
 
	`ems_hash_öô
(
ems_hash
 *
hash
,Éms_öà
ba£
);

31 
ems_void
 
	`ems_hash_unöô
(
ems_hash
 *
hash
);

32 
ems_void
 
	`ems_hash_de°roy
(
ems_hash
 *
hash
);

35 
ems_öt
 
	`ems_hash_ö£π
(
ems_hash
 *
hash
, 
ems_hash_fd
 *
fd
);

36 
ems_hash_fd
 *
	`ems_hash_ªmove
”ms_hash_fd *
fd
);

37 
ems_hash_fd
 *
	`ems_hash_föd
(
ems_hash
 *
hash
, 
ems_cch¨
 *
key
);

39 
ems_öt
 
	`ems_hash_fd_öô
(
ems_hash_fd
 *
fd
);

40 
ems_öt
 
	`ems_hash_fd_£t_key
(
ems_hash_fd
 *
fd
, 
ems_cch¨
 *
key
);

41 
ems_void
 
	`ems_hash_fd_unöô
(
ems_hash_fd
 *
fd
);

43 
ems_cch¨
 *
	`ems_hash_key
(
ems_uöt
 
n
);

45 
ems_öt
 
	`ems_hash_wÆk
(
ems_hash
 *
hash
, 
ems_hash_íum_cb
 
cb
, 
ems_void
 *
¨g
);

46 
	#ems_hash_íum
 
ems_hash_wÆk


	)

48 
ems_öt
 
	`ems_hash_˛ón
(
ems_hash
 *
hash
);

	@src/utils/ems_logger.c

2 
	~"ems_comm⁄.h
"

3 
	~"ems_buf„r.h
"

4 
	~"ems_loggî.h
"

5 
	~<°d¨g.h
>

7 #ifde‡
WIN32


8 
	#NEWLINE
 "\r\n"

	)

10 
	#NEWLINE
 "\n"

	)

13 
ems_öt
 
	$ems_loggî_öô
(
ems_loggî
 *
log
, 
FILE
 *
Â
, 
ems_öt
 
Àvñ
)

15 
	`mem£t
(
log
, 0, (
ems_loggî
));

17 i‡(
Àvñ
 < 0)

18 
Àvñ
 = 0;

20 
log
->
Â
 = fp;

21 i‡(!
log
->
Â
)

22 
log
->
Â
 = 
°dout
;

24 
log
->
Àvñ
 =Üevel;

26 
	`ems_buf„r_öô
(&
log
->
buf
, 
EMS_BUFFER_1K
);

28  
EMS_OK
;

29 
	}
}

31 
ems_öt
 
	$ems_loggî_ª£t
(
ems_loggî
 *
log
)

33 
	`ems_as£π
(
log
 !
NULL
);

35 i‡(
log
->
Â
)

36 
log
->
Â
 = 
°dout
;

38 
	`ems_buf„r_ª£t
(&
log
->
buf
);

40 
log
->
Àvñ
 = 0;

42  
EMS_OK
;

43 
	}
}

45 
ems_void
 
	$ems_loggî_unöô
(
ems_loggî
 *
log
)

47 
	`ems_loggî_ª£t
(
log
);

48 
	`ems_buf„r_unöô
(&
log
->
buf
);

49 
	}
}

51 #ifde‡
DEBUG


52 
ems_void
 
	$_ems_loggî
(

53 
ems_öt
 
Àvñ
,

54 
ems_cch¨
 *
Ê
,

55 
ems_uöt
 
l
,

56 
ems_loggî
 *
log
,

57 
ems_cch¨
 *
fmt
, ...)

59 
ems_void
 
	$_ems_loggî
(
ems_öt
 
Àvñ
, 
ems_loggî
 *
log
, 
ems_cch¨
 *
fmt
, ...)

63 
ems_ch¨
 *
p
;

64 
ems_öt
 
À·
;

65 
ems_öt
 
ªt
;

66 
va_li°
 
¨gs
;

67 
time_t
 
tm
;

69 i‡(
Àvñ
 > 
log
->level)

72 
p
 = 
	`buf_wr
(&
log
->
buf
);

73 
À·
 = 
	`buf_À·
(&
log
->
buf
);

75 
	`time
(&
tm
);

76 
ªt
 = 
	`¢¥ötf
(
p
, 
À·
, "%s", 
	`˘ime
(&
tm
));

78 
À·
 -
ªt
 -1;

79 
p
 +
ªt
 -1;

81 #ifde‡
DEBUG


82 
ªt
 = 
	`¢¥ötf
(
p
, 
À·
, "[%s:%d]==%u==\t", 
Ê
, 
l
, 
	`ems_gëpid
());

84 
À·
 -
ªt
;

85 
p
 +
ªt
;

88 
	`va_°¨t
(
¨gs
, 
fmt
);

89 
ªt
 = 
	`v¢¥ötf
(
p
, 
À·
, 
fmt
, 
¨gs
);

90 
	`va_íd
(
¨gs
);

92 i‡(
log
->
Â
) {

93 
	`fwrôe
(
	`buf_rd
(&
log
->
buf
), 
	`°æí
(buf_rd(&log->buf)), 1,Üog->
Â
);

94 
	`fwrôe
(
NEWLINE
, 
	`°æí
(NEWLINE), 1, 
log
->
Â
);

95 
	`fÊush
(
log
->
Â
);

97 
	`Ârötf
(
°dout
, "%s\n", 
	`buf_rd
(&
log
->
buf
));

98 
	`fÊush
(
°dout
);

100 
	}
}

	@src/utils/ems_logger.h

2 #i‚de‡
EMS_LOGGER_LOGGER_HEADER___


3 
	#EMS_LOGGER_LOGGER_HEADER___


	)

5 
ems_loggî_s_
 
	tems_loggî
;

7 
	sems_loggî_s_


9 
FILE
 *
	mÂ
;

10 
ems_öt
 
	mÀvñ
;

11 
ems_buf„r
 
	mbuf
;

14 
	#EMS_LOG_TRACE
 5

	)

15 
	#EMS_LOG_INFO
 4

	)

16 
	#EMS_LOG_WARN
 3

	)

17 
	#EMS_LOG_ERR
 2

	)

18 
	#EMS_LOG_FAULT
 1

	)

21 #ifde‡
DEBUG


22 
ems_void
 
_ems_loggî
(

23 
ems_öt
 
Àvñ
,

24 
ems_cch¨
 *
Ê
,

25 
ems_uöt
 
l
,

26 
ems_loggî
 *
log
,

27 
ems_cch¨
 *
fmt
, ...);

30 
	#ems_loggî_åa˚
(
log
, 
fmt
, 
¨gs
...) \

31 
	`_ems_loggî
(
EMS_LOG_TRACE
, 
__FUNCTION__
, 
__LINE__
, 
log
, 
fmt
, ##
¨gs
)

	)

33 
	#ems_loggî_öfo
(
log
, 
fmt
, 
¨gs
...) \

34 
	`_ems_loggî
(
EMS_LOG_INFO
, 
__FUNCTION__
, 
__LINE__
, 
log
, 
fmt
, ##
¨gs
)

	)

36 
	#ems_loggî_w¨n
(
log
, 
fmt
, 
¨gs
...) \

37 
	`_ems_loggî
(
EMS_LOG_WARN
, 
__FUNCTION__
, 
__LINE__
, 
log
, 
fmt
, ##
¨gs
)

	)

39 
	#ems_loggî_îr‹
(
log
, 
fmt
, 
¨gs
...) \

40 
	`_ems_loggî
(
EMS_LOG_ERR
, 
__FUNCTION__
, 
__LINE__
, 
log
,
fmt
, ##
¨gs
)

	)

42 
	#ems_loggî_Áu…
(
log
, 
fmt
, 
¨gs
...) \

43 
	`_ems_loggî
(
EMS_LOG_FAULT
, 
__FUNCTION__
, 
__LINE__
, 
log
, 
fmt
, ##
¨gs
)

	)

47 
ems_void
 
_ems_loggî
(
ems_öt
 
Àvñ
, 
ems_loggî
 *
log
, 
ems_cch¨
 *
fmt
, ...);

48 
	#ems_loggî_åa˚
(...)

	)

49 
	#ems_loggî_öfo
(
log
, 
fmt
, 
¨gs
...Ë
	`_ems_loggî
(
EMS_LOG_INFO
,Üog, fmt, ##¨gs)

	)

50 
	#ems_loggî_w¨n
(
log
, 
fmt
, 
¨gs
...Ë
	`_ems_loggî
(
EMS_LOG_WARN
,Üog, fmt, ##¨gs)

	)

51 
	#ems_loggî_îr‹
(
log
, 
fmt
, 
¨gs
...Ë
	`_ems_loggî
(
EMS_LOG_ERR
,Üog, fmt, ##¨gs)

	)

52 
	#ems_loggî_Áu…
(
log
, 
fmt
, 
¨gs
...Ë
	`_ems_loggî
(
EMS_LOG_FAULT
,log, fmt, ##¨gs)

	)

57 
ems_öt
 
ems_loggî_öô
(
ems_loggî
 *
log
, 
FILE
 *
Â
,Éms_öà
Àvñ
);

58 
ems_öt
 
ems_loggî_ª£t
(
ems_loggî
 *
log
);

59 
ems_void
 
ems_loggî_unöô
(
ems_loggî
 *
log
);

61 
	#ems_loggî_£t_Â
(
log
, 
f
Ë(÷og)->
Â
=(f))

	)

62 
	#ems_loggî_£t_Àvñ
(
log
, 
l
Ë(÷og)->
Àvñ
 = (l))

	)

	@src/utils/ems_main.h

2 #i‚de‡
EMS_CHILD_PROCESS_MAIN__HEADER__


3 
	#EMS_CHILD_PROCESS_MAIN__HEADER__


	)

5 
	~"ems_comm⁄.h
"

6 
	~"ems_timî.h
"

7 
	~"ems_hash.h
"

8 
	~"ems_buf„r.h
"

9 
	~"ems_sock.h
"

10 
	~"ems_evít.h
"

11 
	~"ems_loggî.h
"

12 
	~"ems_msg.h
"

13 
	~"ems_£ssi⁄.h
"

15 
_ems_time_s
 
	tems_time
;

16 
_ems_≠p_ty≥_s
 
	tems_≠p_ty≥
;

18 
	e_ems_≠p_ty≥_s


20 
	mty_mö
 = -1,

21 
	mty_fw
 = 0,

22 
	mty_p‹èl
,

23 
	mty_ødius
,

24 
	mty_bwli°
,

25 
	mty_dow∆ök
,

26 
	mty_bridge
,

27 
	mty_˘æ
,

28 
	mty_√t
,

29 
	mty_˛õ¡
,

30 
	mty_max


33 
	s_ems_time_s


35 
timevÆ
 
	m¸óã
;

36 
timevÆ
 
	mmodify
;

37 
timevÆ
 
	mexpúe
;

42 
	#EMS_TIMEOUT_SESSION_INIT
 (12000)

43 
	#EMS_TIMEOUT_USER_ACCEPTED
 (3000)

44 
	#EMS_TIMEOUT_WAITTING
 (1500)

45 
	#EMS_TIMEOUT_ESTABLISHED
 (12000)

46 
	#EMS_TIMEOUT_SENDMSG
 (3000)

47 
	#EMS_TIMEOUT_RETRY
 (6000)

48 
	#EMS_TIMEOUT_HEARTBEAT
 (3000)

49 
	#EMS_TIMEOUT_AUTH
 (3000)

50 

	)

51 
	#EMS_LOGIC_PORT
 8196

	)

52 
	#EMS_AAA_PORT
 6918

	)

53 
	#EMS_MAX_NOFILE
 61000

	)

59 
ems_loggî
 *
loggî
();

60 
ems_evít
 *
evíãr
();

61 
ems_queue
 *
timeouãr
();

64 
	#ems_l_åa˚
(
fmt
, 
¨gs
...Ë
	`ems_loggî_åa˚
(
	`loggî
(), fmt, ##¨gs)

	)

65 
	#ems_l_öfo
(
fmt
, 
¨gs
...Ë
	`ems_loggî_öfo
(
	`loggî
(), fmt, ##¨gs)

	)

66 
	#ems_l_w¨n
(
fmt
, 
¨gs
...Ë
	`ems_loggî_w¨n
(
	`loggî
(), fmt, ##¨gs)

	)

67 
	#ems_l_îr‹
(
fmt
, 
¨gs
...Ë
	`ems_loggî_îr‹
(
	`loggî
(), fmt, ##¨gs)

	)

68 
	#ems_l_Áu…
(
fmt
, 
¨gs
...Ë
	`ems_loggî_Áu…
(
	`loggî
(), fmt, ##¨gs)

	)

70 
	#ems_åa˚löe
(Ë
	`ems_l_åa˚
("fûe: %s,Üöe: %u", 
__FILE__
, 
__LINE__
)

	)

	@src/utils/ems_md5.c

2 
	~<°dio.h
>

3 
	~<°döt.h
>

5 
	~<°dÆign.h
>

8 
	~<°döt.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

12 
	~"ems_md5.h
"

14 #ifde‡
_LIBC


15 
	~<ídün.h
>

16 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


17 
	#WORDS_BIGENDIAN
 1

	)

21 #ifde‡
WORDS_BIGENDIAN


22 
	#SWAP
(
n
) \

23 (((
n
Ë<< 24Ë| ((“Ë& 0xff00Ë<< 8Ë| ((“Ë>> 8Ë& 0xff00Ë| (“Ë>> 24))

	)

25 
	#SWAP
(
n
Ë“)

	)

28 
	#BLOCKSIZE
 32768

	)

29 #i‡
BLOCKSIZE
 % 64 != 0

33 
	smd5_˘x


35 
uöt32_t
 
	mA
;

36 
uöt32_t
 
	mB
;

37 
uöt32_t
 
	mC
;

38 
uöt32_t
 
	mD
;

40 
uöt32_t
 
	mtŸÆ
[2];

41 
uöt32_t
 
	mbuÊí
;

42 
uöt32_t
 
	mbuf„r
[32];

46 c⁄° 
	gfûlbuf
[64] = { 0x80, 0 };

49 
md5_¥o˚ss_block
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
);

52 
md5_¥o˚ss_byãs
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
);

58 
	$md5_öô_˘x
 (
md5_˘x
 *
˘x
)

60 
˘x
->
A
 = 0x67452301;

61 
˘x
->
B
 = 0xefcdab89;

62 
˘x
->
C
 = 0x98badcfe;

63 
˘x
->
D
 = 0x10325476;

65 
˘x
->
tŸÆ
[0] = ctx->total[1] = 0;

66 
˘x
->
buÊí
 = 0;

67 
	}
}

73 
	$£t_uöt32
 (*
˝
, 
uöt32_t
 
v
)

75 
	`mem˝y
 (
˝
, &
v
,  v);

76 
	}
}

81 
	$md5_ªad_˘x
 (c⁄° 
md5_˘x
 *
˘x
, *
ªsbuf
)

83 *
r
 = 
ªsbuf
;

84 
	`£t_uöt32
 (
r
 + 0 *  
˘x
->
A
, 
	`SWAP
 (ctx->A));

85 
	`£t_uöt32
 (
r
 + 1 *  
˘x
->
B
, 
	`SWAP
 (ctx->B));

86 
	`£t_uöt32
 (
r
 + 2 *  
˘x
->
C
, 
	`SWAP
 (ctx->C));

87 
	`£t_uöt32
 (
r
 + 3 *  
˘x
->
D
, 
	`SWAP
 (ctx->D));

89  
ªsbuf
;

90 
	}
}

95 
	$md5_föish_˘x
 (
md5_˘x
 *
˘x
, *
ªsbuf
)

98 
uöt32_t
 
byãs
 = 
˘x
->
buÊí
;

99 
size_t
 
size
 = (
byãs
 < 56) ? 64 / 4 : 64 * 2 / 4;

102 
˘x
->
tŸÆ
[0] +
byãs
;

103 i‡(
˘x
->
tŸÆ
[0] < 
byãs
)

104 ++
˘x
->
tŸÆ
[1];

107 
˘x
->
buf„r
[
size
 - 2] = 
	`SWAP
 (˘x->
tŸÆ
[0] << 3);

108 
˘x
->
buf„r
[
size
 - 1] = 
	`SWAP
 ((˘x->
tŸÆ
[1] << 3) | (ctx->total[0] >> 29));

110 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
byãs
], 
fûlbuf
, (
size
 - 2) * 4 - bytes);

113 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, 
size
 * 4, ctx);

115  
	`md5_ªad_˘x
 (
˘x
, 
ªsbuf
);

116 
	}
}

120 
	$md5_¥o˚ss_byãs
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
)

124 i‡(
˘x
->
buÊí
 != 0)

126 
size_t
 
À·_ovî
 = 
˘x
->
buÊí
;

127 
size_t
 
add
 = 128 - 
À·_ovî
 > 
Àn
 ?Üen : 128 -Üeft_over;

129 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
À·_ovî
], buf„r, 
add
);

130 
˘x
->
buÊí
 +
add
;

132 i‡(
˘x
->
buÊí
 > 64)

134 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, ctx->
buÊí
 & ~63, ctx);

136 
˘x
->
buÊí
 &= 63;

138 
	`mem˝y
 (
˘x
->
buf„r
,

139 &((*Ë
˘x
->
buf„r
)[(
À·_ovî
 + 
add
) & ~63],

140 
˘x
->
buÊí
);

143 
buf„r
 = (c⁄° *Ëbuf„∏+ 
add
;

144 
Àn
 -
add
;

148 i‡(
Àn
 >= 64)

150 #i‡!
_STRING_ARCH_u«lig√d


151 
	#UNALIGNED_P
(
p
Ë((
uöçå_t
Ë’Ë% 
	`Æignof
 (
uöt32_t
Ë!0)

	)

152 i‡(
	`UNALIGNED_P
 (
buf„r
))

153 
Àn
 > 64)

155 
	`md5_¥o˚ss_block
 (
	`mem˝y
 (
˘x
->
buf„r
, buffer, 64), 64, ctx);

156 
buf„r
 = (const *) buffer + 64;

157 
Àn
 -= 64;

162 
	`md5_¥o˚ss_block
 (
buf„r
, 
Àn
 & ~63, 
˘x
);

163 
buf„r
 = (c⁄° *Ëbuf„∏+ (
Àn
 & ~63);

164 
Àn
 &= 63;

169 i‡(
Àn
 > 0)

171 
size_t
 
À·_ovî
 = 
˘x
->
buÊí
;

173 
	`mem˝y
 (&((*Ë
˘x
->
buf„r
)[
À·_ovî
], buf„r, 
Àn
);

174 
À·_ovî
 +
Àn
;

175 i‡(
À·_ovî
 >= 64)

177 
	`md5_¥o˚ss_block
 (
˘x
->
buf„r
, 64, ctx);

178 
À·_ovî
 -= 64;

179 
	`mem˝y
 (
˘x
->
buf„r
, &˘x->buf„r[16], 
À·_ovî
);

181 
˘x
->
buÊí
 = 
À·_ovî
;

183 
	}
}

190 
	#FF
(
b
, 
c
, 
d
Ë(d ^ (b & (¯^ d)))

	)

191 
	#FG
(
b
, 
c
, 
d
Ë
	`FF
 (d, b, c)

	)

192 
	#FH
(
b
, 
c
, 
d
Ë(b ^ c ^ d)

	)

193 
	#FI
(
b
, 
c
, 
d
Ë(¯^ (b | ~d))

	)

199 
	$md5_¥o˚ss_block
 (c⁄° *
buf„r
, 
size_t
 
Àn
, 
md5_˘x
 *
˘x
)

201 
uöt32_t
 
c‹ª˘_w‹ds
[16];

202 c⁄° 
uöt32_t
 *
w‹ds
 = 
buf„r
;

203 
size_t
 
nw‹ds
 = 
Àn
 /  (
uöt32_t
);

204 c⁄° 
uöt32_t
 *
ídp
 = 
w‹ds
 + 
nw‹ds
;

205 
uöt32_t
 
A
 = 
˘x
->A;

206 
uöt32_t
 
B
 = 
˘x
->B;

207 
uöt32_t
 
C
 = 
˘x
->C;

208 
uöt32_t
 
D
 = 
˘x
->D;

209 
uöt32_t
 
lﬁí
 = 
Àn
;

214 
˘x
->
tŸÆ
[0] +
lﬁí
;

215 
˘x
->
tŸÆ
[1] +(
Àn
 >> 31 >> 1Ë+ (˘x->tŸÆ[0] < 
lﬁí
);

219 
w‹ds
 < 
ídp
)

221 
uöt32_t
 *
cwp
 = 
c‹ª˘_w‹ds
;

222 
uöt32_t
 
A_ßve
 = 
A
;

223 
uöt32_t
 
B_ßve
 = 
B
;

224 
uöt32_t
 
C_ßve
 = 
C
;

225 
uöt32_t
 
D_ßve
 = 
D
;

234 
	#OP
(
a
, 
b
, 
c
, 
d
, 
s
, 
T
) \

237 
a
 +
	`FF
 (
b
, 
c
, 
d
Ë+ (*
cwp
++ = 
	`SWAP
 (*
w‹ds
)Ë+ 
T
; \

238 ++
w‹ds
; \

239 
	`CYCLIC
 (
a
, 
s
); \

240 
a
 +
b
; \

242 0)

	)

246 
	#CYCLIC
(
w
, 
s
Ë(w = (w << sË| (w >> (32 - s)))

	)

259 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0xd76aa478);

260 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0xe8c7b756);

261 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0x242070db);

262 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0xc1bdceee);

263 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0xf57c0faf);

264 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0x4787c62a);

265 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xa8304613);

266 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0xfd469501);

267 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0x698098d8);

268 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0x8b44f7af);

269 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xffff5bb1);

270 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0x895cd7be);

271 
	`OP
 (
A
, 
B
, 
C
, 
D
, 7, 0x6b901122);

272 
	`OP
 (
D
, 
A
, 
B
, 
C
, 12, 0xfd987193);

273 
	`OP
 (
C
, 
D
, 
A
, 
B
, 17, 0xa679438e);

274 
	`OP
 (
B
, 
C
, 
D
, 
A
, 22, 0x49b40821);

279 #unde‡
OP


280 
	#OP
(
f
, 
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
T
) \

283 
a
 +
	`f
 (
b
, 
c
, 
d
Ë+ 
c‹ª˘_w‹ds
[
k
] + 
T
; \

284 
	`CYCLIC
 (
a
, 
s
); \

285 
a
 +
b
; \

287 0)

	)

290 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 1, 5, 0xf61e2562);

291 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 6, 9, 0xc040b340);

292 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 11, 14, 0x265e5a51);

293 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 0, 20, 0xe9b6c7aa);

294 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 5, 5, 0xd62f105d);

295 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 10, 9, 0x02441453);

296 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 15, 14, 0xd8a1e681);

297 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 4, 20, 0xe7d3fbc8);

298 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 9, 5, 0x21e1cde6);

299 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 14, 9, 0xc33707d6);

300 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 3, 14, 0xf4d50d87);

301 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 8, 20, 0x455a14ed);

302 
	`OP
 (
FG
, 
A
, 
B
, 
C
, 
D
, 13, 5, 0xa9e3e905);

303 
	`OP
 (
FG
, 
D
, 
A
, 
B
, 
C
, 2, 9, 0xfcefa3f8);

304 
	`OP
 (
FG
, 
C
, 
D
, 
A
, 
B
, 7, 14, 0x676f02d9);

305 
	`OP
 (
FG
, 
B
, 
C
, 
D
, 
A
, 12, 20, 0x8d2a4c8a);

308 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 5, 4, 0xfffa3942);

309 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 8, 11, 0x8771f681);

310 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 11, 16, 0x6d9d6122);

311 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 14, 23, 0xfde5380c);

312 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 1, 4, 0xa4beea44);

313 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 4, 11, 0x4bdecfa9);

314 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 7, 16, 0xf6bb4b60);

315 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 10, 23, 0xbebfbc70);

316 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 13, 4, 0x289b7ec6);

317 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 0, 11, 0xeaa127fa);

318 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 3, 16, 0xd4ef3085);

319 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 6, 23, 0x04881d05);

320 
	`OP
 (
FH
, 
A
, 
B
, 
C
, 
D
, 9, 4, 0xd9d4d039);

321 
	`OP
 (
FH
, 
D
, 
A
, 
B
, 
C
, 12, 11, 0xe6db99e5);

322 
	`OP
 (
FH
, 
C
, 
D
, 
A
, 
B
, 15, 16, 0x1fa27cf8);

323 
	`OP
 (
FH
, 
B
, 
C
, 
D
, 
A
, 2, 23, 0xc4ac5665);

326 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 0, 6, 0xf4292244);

327 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 7, 10, 0x432aff97);

328 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 14, 15, 0xab9423a7);

329 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 5, 21, 0xfc93a039);

330 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 12, 6, 0x655b59c3);

331 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 3, 10, 0x8f0ccc92);

332 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 10, 15, 0xffeff47d);

333 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 1, 21, 0x85845dd1);

334 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 8, 6, 0x6fa87e4f);

335 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 15, 10, 0xfe2ce6e0);

336 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 6, 15, 0xa3014314);

337 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 13, 21, 0x4e0811a1);

338 
	`OP
 (
FI
, 
A
, 
B
, 
C
, 
D
, 4, 6, 0xf7537e82);

339 
	`OP
 (
FI
, 
D
, 
A
, 
B
, 
C
, 11, 10, 0xbd3af235);

340 
	`OP
 (
FI
, 
C
, 
D
, 
A
, 
B
, 2, 15, 0x2ad7d2bb);

341 
	`OP
 (
FI
, 
B
, 
C
, 
D
, 
A
, 9, 21, 0xeb86d391);

344 
A
 +
A_ßve
;

345 
B
 +
B_ßve
;

346 
C
 +
C_ßve
;

347 
D
 +
D_ßve
;

351 
˘x
->
A
 = A;

352 
˘x
->
B
 = B;

353 
˘x
->
C
 = C;

354 
˘x
->
D
 = D;

355 
	}
}

362 
	$md5_°ªam
 (
FILE
 *
°ªam
, *
ªsblock
)

364 
md5_˘x
 
˘x
;

365 
size_t
 
sum
;

367 *
buf„r
 = 
	`mÆloc
 (
BLOCKSIZE
 + 72);

368 i‡(!
buf„r
)

372 
	`md5_öô_˘x
 (&
˘x
);

380 
size_t
 
n
;

381 
sum
 = 0;

386 
n
 = 
	`‰ód
 (
buf„r
 + 
sum
, 1, 
BLOCKSIZE
 - sum, 
°ªam
);

388 
sum
 +
n
;

390 i‡(
sum
 =
BLOCKSIZE
)

393 i‡(
n
 == 0)

398 i‡(
	`„º‹
 (
°ªam
))

400 
	`‰ì
 (
buf„r
);

403 
¥o˚ss_∑πül_block
;

409 i‡(
	`„of
 (
°ªam
))

410 
¥o˚ss_∑πül_block
;

416 
	`md5_¥o˚ss_block
 (
buf„r
, 
BLOCKSIZE
, &
˘x
);

419 
¥o˚ss_∑πül_block
:

422 i‡(
sum
 > 0)

423 
	`md5_¥o˚ss_byãs
 (
buf„r
, 
sum
, &
˘x
);

426 
	`md5_föish_˘x
 (&
˘x
, 
ªsblock
);

427 
	`‰ì
 (
buf„r
);

429 
	}
}

436 
	$md5_buf„r
 (c⁄° *
buf„r
, 
size_t
 
Àn
, *
ªsblock
)

438 
md5_˘x
 
˘x
;

441 
	`md5_öô_˘x
 (&
˘x
);

444 
	`md5_¥o˚ss_byãs
 (
buf„r
, 
Àn
, &
˘x
);

447  
	`md5_föish_˘x
 (&
˘x
, 
ªsblock
);

448 
	}
}

450 
	$ems_md5_°ªam
 (
FILE
 *
°ªam
, *
ªsblock
)

452  
	`md5_°ªam
(
°ªam
, 
ªsblock
);

453 
	}
}

455 *
	$ems_md5_buf„r
 (c⁄° *
buf„r
, 
size_t
 
Àn
, *
ªsblock
)

457  
	`md5_buf„r
(
buf„r
, 
Àn
, 
ªsblock
);

458 
	}
}

461 
	$maö
()

463 #i‚de‡
MD5_DIGEST_LENGTH


464 
	#MD5_DIGEST_LENGTH
 16

	)

466 
n
;

467 
buf
[512];

468 
ssize_t
 
byãs
;

469 
out
[
MD5_DIGEST_LENGTH
];

472 
MD5_CTX
 
c
;

474 
	`MD5_Inô
(&
c
);

476 
byãs
=
	`ªad
(
STDIN_FILENO
, 
buf
, 512);

478 
byãs
 > 0)

480 
	`MD5_Upd©e
(&
c
, 
buf
, 
byãs
);

481 
byãs
=
	`ªad
(
STDIN_FILENO
, 
buf
, 512);

484 
	`MD5_FöÆ
(
out
, &
c
);

486 
	`md5_buf„r
("m¥oŸ", 
	`°æí
("m¥oŸ"), 
out
);

489 
n
=0;Ç<
MD5_DIGEST_LENGTH
;Ç++)

490 
	`¥ötf
("%02x", ()(0xf‡& 
out
[
n
]));

493 
	}
}

	@src/utils/ems_md5.h

2 #i‚de‡
EMS_MD5_HEADER_FOR_CRYPT____


3 
	#EMS_MD5_HEADER_FOR_CRYPT____


	)

7 #i‚de‡
MD5_DIGEST_SIZE


8 
	#MD5_DIGEST_SIZE
 16

	)

11 #i‚de‡
MD5_BLOCK_SIZE


12 
	#MD5_BLOCK_SIZE
 64

	)

15 
ems_md5_°ªam
 (
FILE
 *
°ªam
, *
ªsblock
);

16 *
ems_md5_buf„r
 (c⁄° *
buf„r
, 
size_t
 
Àn
, *
ªsblock
);

	@src/utils/ems_msg.c

2 #ifde‡
WIN32


3 
	~<wösock2.h
>

4 
	~<ws2t˝ù.h
>

5 
	~<Pßpi.h
>

8 
	~"ems.h
"

11 #ifde‡
WIN32


12 #¥agm®
commít
(
lib
, "ws2_32.lib")

15 
	~"ems_maö.h
"

16 
	~"ems_msg.h
"

18 
ems_öt
 
	$ems_sock_£nd
(
ems_sock
 *
sock
, 
ems_buf„r
 *
buf
)

20 
ems_ch¨
 *
p
;

21 
ems_öt
 
À·
;

22 
ems_öt
 
ªt
;

23 
ems_öt
 
fd
 = 
	`ems_sock_fd
(
sock
);

25 i‡(
	`ems_sock_fd
(
sock
) <= 0)

26  
EMS_ERR
;

28 
p
 = 
	`buf_rd
(
buf
);

29 
À·
 = 
	`buf_Àn
(
buf
);

31 
À·
 > 0) {

32 
ªt
 = 
	`£nd
(
fd
, 
p
, 
À·
, 0);

33 i‡(
ªt
 <= 0) {

34 
î∫o
) {

36 
EAGAIN
:

37 
EINTR
:

38 
	`ems_buf„r_£ek_rd
(
buf
, 
	`abs
(
p
-
	`buf_rd
(buf)), 
EMS_BUFFER_SEEK_CUR
);

39  -
EAGAIN
;

42 
	`ems_l_åa˚
("£ssi⁄[%d]£ndÉº‹: %s", 
fd
, 
	`ems_œ°îrmsg
());

43 
	`ems_sock_˛o£
(
sock
);

44  
EMS_ERR
;

49 
p
 +
ªt
;

50 
À·
 -
ªt
;

53 
ªt
 = 
	`abs
(
p
 - 
	`buf_rd
(
buf
));

54 
	`ems_buf„r_£ek_rd
(
buf
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

56  
ªt
;

57 
	}
}

59 
ems_öt
 
	$ems_sock_ªad
(
ems_sock
 *
sock
, 
ems_buf„r
 *
buf
)

61 
ems_öt
 
ªt
;

62 
ems_öt
 
fd
, 
À·
;

63 
ems_ch¨
 *
wr
 = 
	`buf_wr
(
buf
);

65 i‡(
	`ems_sock_fd
(
sock
) <= 0)

66  
EMS_ERR
;

68 
	`ems_as£π
(
	`buf_À·
(
buf
) > 0);

69 
fd
 = 
	`ems_sock_fd
(
sock
);

70 
À·
 = 
	`buf_À·
(
buf
);

72 
À·
 > 0) {

73 
ªt
 = 
	`ªcv
(
fd
, 
wr
, 
À·
, 0);

75 i‡(
ªt
 > 0) {

76 
wr
 +
ªt
;

77 
À·
 -
ªt
;

78 } i‡(
ªt
 == 0) {

79 
	`ems_buf„r_£ek_wr
(
buf
, 
	`abs
(
wr
-
	`buf_wr
(buf)), 
EMS_BUFFER_SEEK_CUR
);

80 
	`ems_l_åa˚
("£ssi⁄[%d] down", 
fd
);

83 
î∫o
) {

85 
EAGAIN
:

86 
EINTR
:

87 
	`ems_buf„r_£ek_wr
(
buf
, 
	`abs
(
wr
-
	`buf_wr
(buf)), 
EMS_BUFFER_SEEK_CUR
);

88  -
EAGAIN
;

91 
	`ems_sock_˛o£
(
sock
);

92 
	`ems_l_åa˚
("£ssi⁄[%d]ªcvÉº‹ %s", 
fd
, 
	`ems_œ°îrmsg
());

93  
ªt
;

100 
ªt
 = 
	`abs
(
wr
 - 
	`buf_wr
(
buf
));

101 
	`ems_buf„r_£ek_wr
(
buf
, 
ªt
, 
EMS_BUFFER_SEEK_CUR
);

103  
ªt
;

104 
	}
}

107 
ems_void
 
	$ems_¥öthex
(
ems_cch¨
 *
s
, 
ems_öt
 
Àn
)

109 
ems_öt
 
n
, 
ªt
;

110 
ems_ch¨
 
buf
[64], *
p
;

112 
n
 = 16;

113 
p
 = 
buf
;

114 
Àn
 > 0) {

116 i‡–
n
 == 0 ) {

117 
	`ems_l_åa˚
("%s", 
buf
);

118 
n
 = 16;

119 
p
 = 
buf
;

123 i‡(
n
 == 8)

124 
ªt
 = 
	`¢¥ötf
(
p
, 64, " %02x", *
s
 & 0xff);

126 
ªt
 = 
	`¢¥ötf
(
p
, 64, " %02x", *
s
 & 0xff);

128 
n
--;

129 
p
 +
ªt
;

130 
s
++;

131 
Àn
 --;

134 
	`ems_l_åa˚
("%s", 
buf
);

135 
	}
}

138 
ems_öt
 
	$ems_∑ck_ªq
(
ems_uöt
 
èg
, 
ems_cch¨
 *
˘x
, 
ems_öt
 
Àn
, 
ems_buf„r
 *
buf
)

140 
ems_uöt
 
tŸÆ
;

141 
ems_ªque°
 *
ªq
;

142 
ems_ch¨
 *
p
;

144 i‡(
Àn
 + 
SIZE_REQUEST
 > 
	`buf_À·
(
buf
)) {

145 
	`ems_as£π
(
Àn
 < 2 * 
EMS_BUFFER_16k
 * 64);

146 i‡(
	`ems_buf„r_ö¸ó£
(
buf
, 
Àn
 + 
SIZE_REQUEST
Ë=
EMS_ERR
)

147  
EMS_ERR
;

150 
ªq
 = (
ems_ªque°
 *)
	`buf_wr
(
buf
);

151 
p
 = (
ems_ch¨
 *Ë(
	`buf_wr
(
buf
Ë+ 
SIZE_REQUEST
);

153 i‡(
˘x
)

154 
	`putmem
(
p
, 
˘x
, 
Àn
);

156 
tŸÆ
 = 
	`abs
(
p
 - 
	`buf_wr
(
buf
));

157 
	`ems_buf„r_£ek_wr
(
buf
, 
tŸÆ
, 
EMS_BUFFER_SEEK_CUR
);

159 
ªq
->
èg
.
vÆ
 = 
	`¡ohl
(tag);

160 
ªq
->
Àn
 = 
	`¡ohl
(
tŸÆ
);

162  
EMS_OK
;

163 
	}
}

165 
ems_öt
 
	$ems_∑ck_r•
(
ems_uöt
 
èg
, 
ems_öt
 
°
, 
ems_cch¨
 *
˘x
,Éms_öà
Àn
, 
ems_buf„r
 *
buf
)

167 
ems_öt
 
tŸÆ
;

168 
ems_ª•⁄£
 *
r•
;

169 
ems_ch¨
 *
p
;

171 i‡((
Àn
 + 
SIZE_RESPONSE
Ë> 
	`buf_À·
(
buf
)) {

172 
	`ems_as£π
(
Àn
 < 2 * 
EMS_BUFFER_16k
 * 64);

173 i‡(
	`ems_buf„r_ö¸ó£
(
buf
, 
Àn
 + 
SIZE_RESPONSE
Ë=
EMS_ERR
)

174  
EMS_ERR
;

177 
r•
 = (
ems_ª•⁄£
 *)
	`buf_wr
(
buf
);

178 
p
 = (
ems_ch¨
 *Ë(
	`buf_wr
(
buf
Ë+ 
SIZE_RESPONSE
);

180 i‡(
˘x
)

181 
	`putmem
(
p
, 
˘x
, 
Àn
);

183 
tŸÆ
 = 
	`abs
(
p
 - 
	`buf_wr
(
buf
));

184 
	`ems_buf„r_£ek_wr
(
buf
, 
tŸÆ
, 
EMS_BUFFER_SEEK_CUR
);

186 
r•
->
èg
.
vÆ
 = 
	`¡ohl
(tag | 0x80000000);

187 
r•
->
Àn
 = 
	`¡ohl
(
tŸÆ
);

188 
r•
->
°
 = 
	`¡ohl
(st);

190  
EMS_OK
;

191 
	}
}

194 
ems_öt
 
	$ems_gëho°by«me
(
ems_cch¨
 *
domaö
, 
sockaddr_ö
 *
d°
)

196 
ho°ít
 *
ªmŸe
;

197 
ö_addr
 
addr
;

199 
	`ems_as£π
(
domaö
 && 
d°
);

201 
ªmŸe
 = 
	`gëho°by«me
(
domaö
);

202 i‡(!
ªmŸe
 && !
	`ißÕha
(
domaö
[0])) {

203 
addr
.
s_addr
 = 
	`öë_addr
(
domaö
);

204 i‡(
addr
.
s_addr
 !
INADDR_NONE
)

205 
ªmŸe
 = 
	`gëho°byaddr
((*Ë&
addr
, 4, 
AF_INET
);

208 i‡(!
ªmŸe
)

209  
ERR
;

211 
d°
->
sö_addr
.
s_addr
 = *(
u_l⁄g
 *Ë
ªmŸe
->
h_addr_li°
[0];

212 
	`mem˝y
(&
d°
->
sö_addr
, 
ªmŸe
->
h_addr
,ÑemŸe->
h_Àngth
);

214  
OK
;

215 
	}
}

217 #ifde‡
WIN32


218 
ems_öt
 
	$ems_£ä⁄blockög
(
ems_öt
 
sockfd
,Éms_öà
yes
)

220 
ems_ul⁄g
 
›ts
 = 1;

222 i‡(!
yes
)

223 
›ts
 = 0;

225 i‡(
SOCKET_ERROR
 =
	`io˘lsockë
(
sockfd
, 
FIONBIO
, (
ems_ul⁄g
 *)&
›ts
))

226  
ERR
;

228  
OK
;

229 
	}
}

231 
ems_öt
 
	$ems_£ä⁄blockög
(
ems_öt
 
sockfd
,Éms_öà
yes
)

233 
›ts
;

235 
›ts
 = 
	`f˙é
(
sockfd
, 
F_GETFL
);

237 
›ts
 = (›t†| 
O_NONBLOCK
);

238 i‡–!
yes
 )

239 
›ts
 = (›t†^ 
O_NONBLOCK
);

241 i‡(
	`f˙é
(
sockfd
, 
F_SETFL
,
›ts
) < 0)

242  
ERR
;

244  
OK
;

245 
	}
}

255 
ems_öt
 
	$ems_£tsock_rw_timeout
(
ems_öt
 
sockfd
,Éms_öà
m£cs
)

257 #ifde‡
WIN32


258 
ems_öt
 
to
 = 
m£cs
;

259 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (
ems_ch¨
*)&
to
, (to));

260 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (
ems_ch¨
*)&
to
, (to));

262 
timevÆ
 
to
 = {
m£cs
/1000, 0};

264 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
to
, (to));

265 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, &
to
, (to));

268  
OK
;

269 
	}
}

272 
ems_cch¨
 *
	$ems_public_addr
()

274 
sockaddr_ö
 
£rv
;

275 
sockaddr_ö
 
«me
;

276 
ems_ch¨
 
buf„r
[100];

277 
sockÀn_t
 
«mñí
;

279 
ems_cch¨
 *
googÀ_dns_£rvî
 = "8.8.8.8";

280 
ems_öt
 
googÀ_dns_p‹t
 = 53;

281 
ems_öt
 
sock
;

283 
sock
 = 
	`sockë
 (
AF_INET
, 
SOCK_DGRAM
, 0);

285 
	`mem£t
–&
£rv
, 0, (serv) );

286 
£rv
.
sö_Ámûy
 = 
AF_INET
;

287 
£rv
.
sö_addr
.
s_addr
 = 
	`öë_addr
–
googÀ_dns_£rvî
 );

288 
£rv
.
sö_p‹t
 = 
	`ht⁄s
(
googÀ_dns_p‹t
);

290 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
*Ë&
£rv
, (serv)) == -1) {

291 
	`˛o£
(
sock
);

292  
NULL
;

295 
«mñí
 = (
«me
);

296 
	`gësock«me
(
sock
, (
sockaddr
*Ë&
«me
, &
«mñí
);

298 
	`mem£t
(
buf„r
, 0, (buffer));

299 
	`öë_¡›
(
AF_INET
, &
«me
.
sö_addr
, 
buf„r
, 100);

301 
	`˛o£
(
sock
);

303  
buf„r
;

304 
	}
}

306 
ems_öt


307 
	$ems_sock_£t›t_böd
(
ems_öt
 
fd
)

309 
ems_öt
 
⁄
;

310 
lögî
 
so_lögî
;

312 
⁄
 = 1;

313 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (
ems_cch¨
 *)&
⁄
, (on));

315 
so_lögî
.
l_⁄off
 = 1;

316 
so_lögî
.
l_lögî
 = 30;

317 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_LINGER
, (
ems_cch¨
 *)&
so_lögî
, (so_linger));

319  
EMS_OK
;

320 
	}
}

323 
ems_öt
 
	$ems_sock_be_£rvî
(
ems_sock
 *
sock
)

325 
ems_öt
 
ªt
;

326 
ems_öt
 
fd
;

327 
sockaddr_ö
 
addr
;

329 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

330 i‡(
fd
 <= 0)

331  
EMS_ERR
;

333 
	`ems_sock_£t›t_böd
(
fd
);

335 
	`mem£t
(&
addr
, 0, (addr));

336 
addr
.
sö_Ámûy
 = 
AF_INET
;

337 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
	`ems_sock_addr
(
sock
));

338 
addr
.
sö_p‹t
 = 
	`ht⁄s
(()
	`ems_sock_p‹t
(
sock
));

340 
ªt
 = 
	`böd
(
fd
, (
sockaddr
 *)&
addr
, (sockaddr));

342 i‡(
ªt
 == -1) {

343 
	`ems_l_w¨n
("[böd]bödÉº‹:%d, %s", 
ªt
, 
	`ems_œ°îrmsg
());

344 
	`˛o£
(
fd
);

345  
EMS_ERR
;

348 i‡(
	`li°í
(
fd
, 
SOMAXCONN
)) {

349 
	`ems_l_w¨n
("[böd]li°íÉº‹: %s", 
	`ems_œ°îrmsg
());

350 
	`˛o£
(
fd
);

351  
EMS_ERR
;

354 
	`ems_sock_£tfd
(
sock
, 
fd
);

356 
	`ems_l_åa˚
("[bind] socket: %d bind @address %s:%dÑeady",

357 
	`ems_sock_fd
(
sock
),

358 
	`ems_sock_addr
(
sock
),

359 
	`ems_sock_p‹t
(
sock
));

360  
EMS_OK
;

361 
	}
}

	@src/utils/ems_msg.h

2 #i‚de‡
EMS_MSG_HEADER___


3 
	#EMS_MSG_HEADER___


	)

6 
	#ERR_EVT_BASE
 0x0100

	)

7 
	#ERR_EVT_NOT_FOUND_DRIVER
 (
ERR_EVT_BASE
 + 0x01)

	)

10 
	#EMS_WEB_TICKET_TIMEOUT
 120000

	)

11 
	#EMS_AC_TICKET_TIMEOUT
 120000

	)

13 
	#EMS_SYNC_TIMEOUT_AAA_HB
 60000

	)

14 
	#EMS_SYNC_TIMEOUT_LOGIC_HB
 5000

	)

17 
	#MSG_ST_BASE_ERR
 -0x0000

	)

18 
	#MSG_ST_ERR
 -0x0001

	)

19 
	#MSG_ST_UPDATING
 -0x0002

	)

20 
	#MSG_ST_MEM_ERR
 -0x0003

	)

21 
	#MSG_ST_DB_ERR
 -0x0004

	)

22 
	#MSG_ST_CANNOT_CONNECT_TO_AAA
 -0x0005

	)

23 
	#MSG_ST_INVALID_ARG
 -0x0006

	)

24 
	#MSG_ST_TICKET_INVALID
 -0x0007

	)

25 
	#MSG_ST_MSG_UNKNOWN
 -0x0008

	)

26 
	#MSG_ST_USER_OR_PASSWORD_ERROR
 -0x0009

	)

27 
	#MSG_ST_PERMIT_DENIED
 -0x000a

	)

28 
	#MSG_ST_VERIFY_TIMEOUT
 -0x000b

	)

29 
	#MSG_ST_VERIFY_ERROR
 -0x000c

	)

32 
	#MSG_ST_GRP_ERR
 -0x0100

	)

33 
	#MSG_ST_GRP_NOT_FOUND
 -0x0101

	)

34 
	#MSG_ST_GRP_DUP
 -0x0102

	)

35 
	#MSG_ST_GRP_GRP_NOT_NULL
 -0x0103

	)

36 
	#MSG_ST_GRP_AC_NOT_NULL
 -0x0104

	)

37 
	#MSG_ST_GRP_ACTIVE_CODE_NOT_NULL
 -0x0105

	)

38 
	#MSG_ST_GRP_APP_NOT_NULL
 -0x0106

	)

39 
	#MSG_ST_GRP_PROP_NOT_NULL
 -0x0107

	)

41 
	#MSG_ST_AC_ERR
 -0x0200

	)

42 
	#MSG_ST_AC_NOT_FOUND
 -0x0201

	)

43 
	#MSG_ST_AC_MAC_ERROR
 -0x0202

	)

45 
	#MSG_ST_ACTV_ERR
 -0x0300

	)

46 
	#MSG_ST_ACTV_TOO_MUCH
 -0x0301

	)

47 
	#MSG_ST_ACTV_NOT_FOUND
 -0x0302

	)

49 
	#MSG_ST_APP_ERR
 -0x0400

	)

50 
	#MSG_ST_APP_NOT_FOUND
 -0x0401

	)

51 
	#MSG_ST_APP_TYPE_ERROR
 -0x0402

	)

52 
	#MSG_ST_APP_DUP_NICK
 -0x0403

	)

53 
	#MSG_ST_APP_GRP_NOT_NULL
 -0x0404

	)

54 
	#MSG_ST_APP_AC_NOT_NULL
 -0x0405

	)

55 
	#MSG_ST_APP_FILE_MISS
 -0x0406

	)

56 
	#MSG_ST_APP_FILE_COULD_NOT_OPEN
 -0x0407

	)

58 
	#MSG_ST_PROP_ERR
 -0x0500

	)

59 
	#MSG_ST_PROP_NOT_FOUND
 -0x0501

	)

60 
	#MSG_ST_PROP_DUP_NICK
 -0x0502

	)

61 
	#MSG_ST_PROP_GRP_NOT_NULL
 -0x0503

	)

62 
	#MSG_ST_PROP_AC_NOT_NULL
 -0x0504

	)

69 
	#AC_MSG_BASE
 0x0000

	)

70 
	#AC_MSG_REGISTER
 0x0001

	)

71 
	#AC_MSG_LOGOUT
 0x0002

	)

72 
	#AC_MSG_TRYUSING
 0x0003

	)

73 
	#AC_MSG_HB
 0x0004

	)

74 
	#AC_MSG_APPLIST
 0x0005

	)

75 
	#AC_MSG_DOWNLOAD
 0x0006

	)

78 
ems_öt
 
ems_sock_£nd
(
ems_sock
 *, 
ems_buf„r
 *
buf
);

79 
ems_öt
 
ems_sock_ªad
(
ems_sock
 *, 
ems_buf„r
 *
buf
);

80 
ems_öt
 
ems_∑ck_r•
(
ems_uöt
 
èg
,Éms_öà
°
, 
ems_cch¨
 *
˘x
,Éms_öà
Àn
, 
ems_buf„r
 *
buf
);

81 
ems_öt
 
ems_∑ck_ªq
(
ems_uöt
 
èg
, 
ems_cch¨
 *
˘x
,Éms_öà
Àn
, 
ems_buf„r
 *
buf
);

82 
ems_öt
 
ems_sock_be_£rvî
(
ems_sock
 *
sock
);;

83 
ems_öt
 
ems_£tsock_rw_timeout
”ms_öà
sockfd
,Éms_öà
m£cs
);

	@src/utils/ems_session.c

2 
	~"ems_maö.h
"

3 
	~"ems_£ssi⁄.h
"

9 
ems_öt
 
	$ems_£ssi⁄_öô
(
ems_£ssi⁄
 *
£ss
)

11 
	`ems_as£π
(
£ss
 && "never show upÅhisÜine");

13 
	`mem£t
(
£ss
, 0, (
ems_£ssi⁄
));

15 
	`ems_sock_öô
(&
£ss
->
sock
);

16 
£ss
->
obj
 = 
NULL
;

17 
£ss
->
r§v
 = 
NULL
;

19 
	`ems_buf„r_öô
(&
£ss
->
buf_ö
, 
EMS_BUFFER_1K
);

20 
	`ems_buf„r_öô
(&
£ss
->
buf_out
, 
EMS_BUFFER_1K
);

22 
	`ems_timeout_öô
(&
£ss
->
to
);

23 
	`ems_evít_fd_öô
(&
£ss
->
evt
);

25 
	`ems_queue_öô
(&
£ss
->
íåy
);

27 
£ss
->
evt_cb
 = 
NULL
;

28 
£ss
->
timeout_cb
 = 
NULL
;

29 
£ss
->
cb¨g
 = 
NULL
;

31  
EMS_OK
;

32 
	}
}

34 
ems_void
 
	$ems_£ssi⁄_unöô
(
ems_£ssi⁄
 *
£ss
)

36 
	`ems_as£π
(
£ss
 && "never show upÅhisÜine");

38 
	`ems_sock_˛ór
(&
£ss
->
sock
);

39 
£ss
->
r§v
 = 
NULL
;

41 
	`ems_buf„r_unöô
(&
£ss
->
buf_ö
);

42 
	`ems_buf„r_unöô
(&
£ss
->
buf_out
);

44 #ifde‡
DEBUG


45 
	`ems_as£π
(!
£ss
->
to
.
≥ndög
 && !£ss->
evt
.
ªg
);

47 i‡(
£ss
->
to
.
≥ndög
)

48 
	`ems_l_w¨n
("session'sÅimer didÇot cancel... seg fault");

50 i‡(
£ss
->
evt
.
ªg
)

51 
	`ems_l_w¨n
("session'sÉvent didÇot cancel... seg fault");

53 
£ss
->
evt_cb
 = 
NULL
;

54 
£ss
->
timeout_cb
 = 
NULL
;

55 
£ss
->
cb¨g
 = 
NULL
;

56 
	}
}

58 
ems_£ssi⁄
 *
	$ems_£ssi⁄_√w
()

60 
ems_£ssi⁄
 *
£ss
 = 
NULL
;

62 
£ss
 = (
ems_£ssi⁄
 *)
	`ems_mÆloc
((ems_session));

63 i‡(
£ss
)

64 
	`ems_£ssi⁄_öô
(
£ss
);

66  
£ss
;

67 
	}
}

70 
ems_void
 
	$ems_£ssi⁄_de°roy
(
ems_£ssi⁄
 *
£ss
)

72 
	`ems_£ssi⁄_unöô
(
£ss
);

73 
	`ems_‰ì
(
£ss
);

74 
	}
}

76 
ems_öt
 
	$ems_£ssi⁄_shutdown_™d_de°roy
(
ems_£ssi⁄
 *
£ss
)

78 
	`ems_as£π
(
£ss
);

80 
	`ems_l_åa˚
("session(%d) [%s: %d] down",

81 
	`ems_sock_fd
(&
£ss
->
sock
),

82 
	`ems_sock_addr
(&
£ss
->
sock
),

83 
	`ems_sock_p‹t
(&
£ss
->
sock
));

85 
	`£ss_evít_ˇn˚l
(
£ss
);

86 
	`£ss_timeout_ˇn˚l
(
£ss
);

87 
	`ems_sock_˛o£
(&
£ss
->
sock
);

89 
	`ems_£ssi⁄_de°roy
(
£ss
);

90  
EMS_OK
;

91 
	}
}

93 
ems_void
 
	$£ss_evít
(
ems_evít_fd
 *
evít
, 
ems_öt
 
Êg
)

95 
ems_£ssi⁄
 *
£ss
 = 
	`ems_c⁄èöî_of
(
evít
,Éms_£ssi⁄, 
evt
);

96 
	`ems_as£π
(
£ss
->
evt_cb
);

97 
£ss
->
	`evt_cb
(£ss, 
evít
->
îr‹
, 
Êg
);

98 
	}
}

100 
ems_void
 
	$£ss_timeout
(
ems_timeout
 *
timeout
)

102 
ems_£ssi⁄
 *
£ss
 = 
	`ems_c⁄èöî_of
(
timeout
,Éms_£ssi⁄, 
to
);

103 
	`ems_as£π
(
£ss
->
timeout_cb
);

104 
£ss
->
	`timeout_cb
(£ss, 
timeout
);

105 
	}
}

	@src/utils/ems_session.h

2 #i‚de‡
EMS_SESSION_HEADER___


3 
	#EMS_SESSION_HEADER___


	)

6 
_ems_£ssi⁄_s
 
	tems_£ssi⁄
;

8 
	$ems_void
 (*
	t£ss_evt_cb
)(
	tems_£ssi⁄
 *
	t£ss
, 
	tems_öt
 
	t°
,Éms_öà
	tÊgs
);

9 
	$ems_void
 (*
	t£ss_timeout_cb
)(
	tems_£ssi⁄
 *
	t£ss
, 
	tems_timeout
 *
	tto
);

12 
	s_ems_£ssi⁄_s


14 
ems_sock
 
sock
;

15 
ems_void
 *
obj
;

16 
ems_void
 *
r§v
;

17 
ems_uöt
 
Êg
;

19 
ems_buf„r
 
buf_ö
;

20 
ems_buf„r
 
buf_out
;

21 
	#buf
 
buf_out


	)

23 
ems_timeout
 
to
;

24 
ems_evít_fd
 
evt
;

26 
ems_queue
 
íåy
;

29 
£ss_evt_cb
 
evt_cb
;

30 
£ss_timeout_cb
 
timeout_cb
;

31 
ems_uch¨
 *
cb¨g
;

40 
ems_öt
 
	`ems_£ssi⁄_öô
(
ems_£ssi⁄
 *
£ss
);

41 
ems_void
 
	`ems_£ssi⁄_unöô
(
ems_£ssi⁄
 *
£ss
);

42 
ems_£ssi⁄
 *
	`ems_£ssi⁄_√w
();

43 
ems_void
 
	`ems_£ssi⁄_de°roy
(
ems_£ssi⁄
 *
£ss
);

44 
ems_öt
 
	`ems_£ssi⁄_shutdown_™d_de°roy
(
ems_£ssi⁄
 *
£ss
);

46 
ems_void
 
	`£ss_evít
(
ems_evít_fd
 *
evít
, 
ems_öt
 
Êg
);

47 
ems_void
 
	`£ss_timeout
(
ems_timeout
 *
timeout
);

49 
	#£ss_evít_£t
(
£ss
, 
Êg
, 
cb
) do {\

50 (
£ss
)->
evt_cb
 = 
cb
; \

51 (
£ss
)->
evt
.
fd
 = 
	`ems_sock_fd
(&(£ss)->
sock
); \

52 
	`ems_evít_add
(
	`evíãr
(), &(
£ss
)->
evt
, 
Êg
|
EMS_EVT_EDGE_TRIGGER
, 
£ss_evít
); \

53 
	}

	`}whûe
(0)

	)

55 
	#£ss_evít_ˇn˚l
(
£ss
) \

56 
	`ems_evít_dñ
(
	`evíãr
(), &(
£ss
)->
evt
)

	)

58 
	#£ss_timeout_£t_ex
(
£ss
, 
m£cs
, 
cb
, 
pos
) \

60 (
£ss
)->
timeout_cb
 = 
cb
; \

61 
	`ems_timeout_£t
(
	`timeouãr
(), &(
£ss
)->
to
, 
m£cs
, 
£ss_timeout
, 
pos
); \

62 } 0)

	)

64 
	#£ss_timeout_£t
(
£ss
, 
m£cs
, 
cb
) \

65 
	`£ss_timeout_£t_ex
((
£ss
), 
m£cs
, 
cb
, 
EMS_TIMEOUT_TAIL
)

	)

67 
	#£ss_timeout_£t_s‹ãd
(
£ss
, 
m£cs
, 
cb
) \

68 
	`£ss_timeout_£t_ex
((
£ss
), 
m£cs
, 
cb
, 
EMS_TIMEOUT_SORT
)

	)

70 
	#£ss_timeout_ˇn˚l
(
£ss
Ë
	`ems_timeout_ˇn˚l
(&(£ss)->
to
)

	)

72 
	#£ss_cb¨g_£t
(
£ss
, 
¨g
Ë((£ss)->
cb¨g
 = (
ems_uch¨
 *)◊rg))

	)

73 
	#£ss_cb¨g
(
£ss
Ë((£ss)->
cb¨g
)

	)

77 #ifde‡
DEBUG


78 
	#EMS_SESSION_ACCEPTED_TIMEOUT
 10000

	)

79 
	#EMS_SESSION_NORMAL_TIMEOUT
 10000

	)

81 
	#EMS_SESSION_ACCEPTED_TIMEOUT
 5000

	)

82 
	#EMS_SESSION_NORMAL_TIMEOUT
 5000

	)

85 
	#£ss_ªcv
(
£ss
, 
buf
Ë
	`ems_sock_ªad
(&(£ss)->
sock
, buf)

	)

86 
	#£ss_£nd
(
£ss
, 
buf
Ë
	`ems_sock_£nd
(&(£ss)->
sock
, buf)

	)

88 
	#£ss_≥î
(
£ss
Ë(
ems_£ssi⁄
 *)((£ss)->
r§v
)

	)

89 
	#£ss_≥î_£t
(
£lf
, 
£ss
Ë((£lf)->
r§v
=(
ems_void
 *)(£ss))

	)

91 
	#£ss_∑ª¡
(
£ss
, 
ty≥
Ë—y≥ *)((£ss)->
obj
)

	)

92 
	#£ss_∑ª¡_£t
(
£ss
, 
∑ª¡
Ë((£ss)->
obj
 = (
ems_void
 *)’¨ít))

	)

94 
	#SESSION_FLAG_DIE_AFTER_SEND
 (0x01 << 30)

	)

96 
	#£ss_ª•⁄£_£t
(
£ss
, 
r•
Ë((£ss)->
r§v
 = (
ems_void
 *)‘•))

	)

97 
	#£ss_ª•⁄£
(
£ss
Ë((£ss)->
r§v
)

	)

99 
	#£ss_ªque°_£t
 
£ss_ª•⁄£_£t


	)

100 
	#£ss_ªque°
 
£ss_ª•⁄£


	)

	@src/utils/ems_sock.c

2 
	~"ems_comm⁄.h
"

3 
	~"ems_buf„r.h
"

4 
	~"ems_sock.h
"

6 
ems_öt
 
	$ems_sock_öô
(
ems_sock
 *
s
)

8 
	`mem£t
(
s
, 0, (
ems_sock
));

9 
	`°r_öô
(&
s
->
addr
);

10  
EMS_OK
;

11 
	}
}

13 
ems_void
 
	$ems_sock_˛ór
(
ems_sock
 *
s
)

15 
	`ems_as£π
(
s
 !
NULL
);

17 
	`°r_˛ór
(&
s
->
addr
);

18 
	`ems_sock_öô
(
s
);

19 
	}
}

21 
ems_öt
 
	$ems_sock_£èddr
(
ems_sock
 *
s
, 
ems_cch¨
 *
addr
)

23 
	`ems_as£π
(
s
 !
NULL
);

24 
	`°r_£t
(&
s
->
addr
,áddr);

25  
EMS_OK
;

26 
	}
}

28 
ems_öt
 
	$ems_sock_£ç‹t
(
ems_sock
 *
s
, 
ems_öt
 
p‹t
)

30 
	`ems_as£π
(
s
 !
NULL
);

32 
s
->
p‹t
 =Öort;

34  
p‹t
;

35 
	}
}

37 
ems_öt
 
	$ems_sock_£tfd
(
ems_sock
 *
s
, 
ems_öt
 
fd
)

39 
	`ems_as£π
(
s
 !
NULL
);

41 
s
->
fd
 = fd;

43  
fd
;

44 
	}
}

46 
ems_cch¨
 *
	$ems_sock_addr
(
ems_sock
 *
s
)

48  
	`°r_ãxt
(&
s
->
addr
);

49 
	}
}

51 
ems_öt
 
	$ems_sock_p‹t
(
ems_sock
 *
s
)

53  
s
->
p‹t
;

54 
	}
}

56 
ems_öt
 
	$ems_sock_fd
(
ems_sock
 *
s
)

58  
s
->
fd
;

59 
	}
}

61 
ems_öt
 
	$ems_sock_˛o£
(
ems_sock
 *
s
)

63 i‡(
s
->
fd
 > 0) {

64 
	`˛o£
(
s
->
fd
);

65 
s
->
fd
 = 0;

68  
EMS_OK
;

69 
	}
}

	@src/utils/ems_sock.h

2 #i‚de‡
EMS_SOCK_ADDR_HEADER___


3 
	#EMS_SOCK_ADDR_HEADER___


	)

5 
_ems_sock_s
 
	tems_sock
;

6 
	s_ems_sock_s
 {

7 
ems_°r
 
	maddr
;

8 
ems_öt
 
	mp‹t
;

9 
ems_öt
 
	mfd
;

12 
ems_öt
 
ems_sock_öô
(
ems_sock
 *
s
);

13 
ems_void
 
ems_sock_˛ór
(
ems_sock
 *
s
);

15 
ems_öt
 
ems_sock_£èddr
(
ems_sock
 *
s
, 
ems_cch¨
 *
addr
);

16 
ems_öt
 
ems_sock_£ç‹t
(
ems_sock
 *
s
,Éms_öà
p‹t
);

17 
ems_öt
 
ems_sock_£tfd
(
ems_sock
 *
s
,Éms_öà
fd
);

19 
ems_cch¨
 *
ems_sock_addr
(
ems_sock
 *);

20 
ems_öt
 
ems_sock_p‹t
(
ems_sock
 *);

21 
ems_öt
 
ems_sock_fd
(
ems_sock
 *);

23 
ems_öt
 
ems_sock_˛o£
(
ems_sock
 *);

25 
	#ems_sock_ª£t
 
ems_sock_˛ór


	)

	@src/utils/ems_str.c

2 
	~"ems.h
"

4 
ems_öt
 
	$°r_£t
(
ems_°r
 *
°r
, 
ems_cch¨
 *
ãxt
)

6 i‡(
°r
) {

7 i‡(
°r
->
d©a
)

8 
	`ems_‰ì
(
°r
->
d©a
);

10 i‡(
ãxt
) {

11 
°r
->
Àn
 = 
	`°æí
(
ãxt
);

12 
°r
->
d©a
 = (
ems_uch¨
*)
	`ems_°rdup
(
ãxt
);

14 
°r
->
Àn
 = 0;

15 
°r
->
d©a
 = 
NULL
;

19  
OK
;

20 
	}
}

22 
ems_void
 
	$°r_˛ór
(
ems_°r
 *
°r
)

24 
	`°r_£t
(
°r
, 
NULL
);

25 
	}
}

	@src/utils/ems_timer.c

2 
	~"ems_comm⁄.h
"

3 
	~"ems_timî.h
"

5 
ems_öt
 
	$ems_time_diff
(
timevÆ
 *
t1
, timevÆ *
t2
)

8 (
t1
->
tv_£c
 - 
t2
->tv_sec) * 1000 +

9 (
t1
->
tv_u£c
 - 
t2
->tv_usec) / 1000;

10 
	}
}

12 
ems_öt


13 
	$ems_timeout_add
(
ems_queue
 *
timeout
, 
ems_timeout
 *
to
, 
ems_uöt
 
pos
)

15 i‡(
to
->
≥ndög
)

16  
EMS_ERR
;

18 
to
->
≥ndög
 = 
YES
;

20 
pos
) {

22 
EMS_TIMEOUT_SORT
:

24 
ems_queue
 *
p
;

25 
ems_timeout
 *
tmp
;

27 
	`ems_queue_f‹óch
(
timeout
, 
p
) {

28 
tmp
 = 
	`ems_queue_d©a
(
p
, 
ems_timeout
, 
íåy
);

30 i‡(
	`ems_time_diff
(&
tmp
->
time
, &
to
->time) > 0)

34 i‡(!
p
)

35 
p
 = 
timeout
;

37 
	`ems_queue_ö£π_èû
(
p
, &
to
->
íåy
);

41 
EMS_TIMEOUT_HEAD
:

42 
	`ems_queue_ö£π_hód
(
timeout
, &
to
->
íåy
);

46 
	`ems_queue_ö£π_èû
(
timeout
, &
to
->
íåy
);

50  
EMS_OK
;

51 
	}
}

53 
ems_öt
 
	$ems_timeout_öô
(
ems_timeout
 *
to
)

55 
	`mem£t
(
to
, 0, (
ems_timeout
));

56 
to
->
≥ndög
 = 
NO
;

57  
EMS_OK
;

58 
	}
}

60 
ems_öt
 
	$ems_timeout_£t
(

61 
ems_queue
 *
timeout
,

62 
ems_timeout
 *
to
,

63 
ems_öt
 
m£cs
,

64 
ems_timeout_cb
 
cb
,

65 
ems_uöt
 
pos
)

67 
timevÆ
 *
t
 = &
to
->
time
;

69 i‡(
to
->
≥ndög
)

70 
	`ems_timeout_ˇn˚l
(
to
);

72 
	`gëtimeofday
(&
to
->
time
, 
NULL
);

74 
t
->
tv_£c
 +
m£cs
 / 1000;

75 
t
->
tv_u£c
 +(
m£cs
 % 1000) * 1000;

77 i‡(
t
->
tv_u£c
 > 1000000) {

78 
t
->
tv_£c
++;

79 
t
->
tv_u£c
 %= 1000000;

81 
to
->
cb
 = cb;

83  
	`ems_timeout_add
(
timeout
, 
to
, 
pos
);

84 
	}
}

86 
ems_öt


87 
	$ems_timeout_ˇn˚l
(
ems_timeout
 *
to
)

89 i‡(!
to
->
≥ndög
)

90  
EMS_ERR
;

92 
	`ems_queue_ªmove
(&
to
->
íåy
);

93 
to
->
≥ndög
 = 
NO
;

95  
EMS_OK
;

96 
	}
}

98 
ems_void


99 
	$ems_timeout_h™dÀ
(
ems_queue
 *
timeout
, 
timevÆ
 *
tv
)

101 
ems_queue
 *
p
, *
q
;

102 
ems_timeout
 *
to
;

104 
	`ems_queue_f‹óch_ß„
(
timeout
, 
p
, 
q
) {

105 
to
 = 
	`ems_queue_d©a
(
p
, 
ems_timeout
, 
íåy
);

107 i‡(
	`ems_time_diff
(&
to
->
time
, 
tv
) > 0)

110 
	`ems_timeout_ˇn˚l
(
to
);

111 i‡(
to
->
cb
)

112 
to
->
	`cb
(to);

114 
	}
}

117 
ems_öt
 
	$ems_timeout_√xt
(
ems_queue
 *
timeout
, 
timevÆ
 *
tv
)

119 
ems_queue
 *
p
;

120 
ems_timeout
 *
to
;

121 
ems_öt
 
diff
;

124 i‡(
	`ems_queue_em±y
(
timeout
))

125  
TIMEOUT_TICK
;

127 
p
 = 
	`ems_queue_hód
(
timeout
);

128 
to
 = 
	`ems_queue_d©a
(
p
, 
ems_timeout
, 
íåy
);

130 
diff
 = 
	`ems_time_diff
(&
to
->
time
, 
tv
);

131 i‡(
diff
 <= 0)

134  
diff
 > 
TIMEOUT_TICK
? TIMEOUT_TICK:diff;

135 
	}
}

	@src/utils/ems_timer.h

2 #i‚de‡
EMS_TIMEOUT_TIMER_HEADER___


3 
	#EMS_TIMEOUT_TIMER_HEADER___


	)

5 
	#TIMEOUT_TICK
 1000

	)

7 
_ems_timeout_s
 
	tems_timeout
;

8 
	$ems_void
 (*
	tems_timeout_cb
)(
	tems_timeout
 *
	tto
);

11 
	s_ems_timeout_s


13 
ems_queue
 
íåy
;

14 
ems_öt
 
≥ndög
;

15 
ems_timeout_cb
 
cb
;

16 
timevÆ
 
time
;

20 
	#EMS_TIMEOUT_TAIL
 0

	)

21 
	#EMS_TIMEOUT_SORT
 1

	)

22 
	#EMS_TIMEOUT_HEAD
 2

	)

24 
ems_öt
 
	`ems_timeout_öô
(
ems_timeout
 *
to
);

26 
ems_öt
 
	`ems_timeout_£t
(

27 
ems_queue
 *
li°
,

28 
ems_timeout
 *
to
,

29 
ems_öt
 
m£cs
,

30 
ems_timeout_cb
 
cb
,

31 
ems_uöt
 
pos
);

33 
ems_öt
 
	`ems_timeout_ˇn˚l
(
ems_timeout
 *
to
);

35 
	#ems_timeout_ö£π_èû
(
l
, 
to
, 
m£cs
, 
cb
) \

36 
	`ems_timeout_£t
(
l
, 
to
, 
m£cs
, 
cb
, 
EMS_TIMEOUT_TAIL
)

	)

42 
	#ems_timeout_ö£π_hód
(
l
, 
to
, 
m£cs
, 
cb
) \

43 
	`ems_timeout_£t
(
l
, 
to
, 
m£cs
, 
cb
, 
EMS_TIMEOUT_HEAD
)

	)

45 
	#ems_timeout_ö£π_s‹ãd
(
l
, 
to
, 
m£cs
, 
cb
) \

46 
	`ems_timeout_£t
(
l
, 
to
, 
m£cs
, 
cb
, 
EMS_TIMEOUT_SORT
)

	)

48 
	#ems_timeuŸ_ö£π
 
ems_timeout_ö£π_s‹ãd


	)

49 
	#ems_timeout_≠≥nd
 
ems_timeout_ö£π_èû


	)

51 
ems_öt
 
	`ems_time_diff
(
timevÆ
 *
t1
, timevÆ *
t2
);

52 
ems_void
 
	`ems_timeout_h™dÀ
(
ems_queue
 *
timeout
, 
timevÆ
 *
tv
);

53 
ems_öt
 
	`ems_timeout_√xt
(
ems_queue
 *
timeout
, 
timevÆ
 *
tv
);

	@src/utils/ems_urlcode.c

2 
	~"ems.h
"

5 
ems_ch¨
 
	$‰om_hex
(
ems_ch¨
 
ch
)

7  
	`isdigô
(
ch
Ë? ch - '0' : 
	`tﬁowî
(ch) - 'a' + 10;

8 
	}
}

11 
ems_ch¨
 
	$to_hex
(
ems_ch¨
 
code
)

13 
ems_ch¨
 
hex
[] = "0123456789abcdef";

14  
hex
[
code
 & 15];

15 
	}
}

17 
ems_ch¨
 *
	$uæ_ícode
(
ems_cch¨
 *
°r
, 
ems_öt
 
l°r
)

19 
ems_ch¨
 *
buf
 = 
NULL
, *
pbuf
, 
ch
;

21 
buf
 = (
ems_ch¨
 *)
	`ems_mÆloc
(
l°r
 * 3 + 1);

22 i‡(!
buf
)

23  
NULL
;

25 
pbuf
 = 
buf
;

27 *
°r
 && 
l°r
-- > 0) {

28 
ch
 = *
°r
;

29 
°r
++;

31 i‡(
	`iß um
(
ch
) || ch == '-' || ch == '_' || ch == '.' || ch == '~')

32 *
pbuf
++ = 
ch
;

33 i‡(
ch
 == ' ')

34 *
pbuf
++ = '+';

36 *
pbuf
++ = '%', *pbuf++ = 
	`to_hex
(
ch
 >> 4), *pbuf++ =Åo_hex(ch & 15);

38 *
pbuf
 = '\0';

40  
buf
;

41 
	}
}

44 
ems_ch¨
 *
	$uæ_decode
(
ems_cch¨
 *
°r
, 
ems_ch¨
 *
buf
)

46 
ems_ch¨
 *
p°r
 = 
°r
, *
pbuf
 = 
buf
;

48 *
p°r
) {

49 i‡(*
p°r
 == '%') {

50 i‡(
p°r
[1] &&Östr[2]) {

51 *
pbuf
++ = 
	`‰om_hex
(
p°r
[1]) << 4 | from_hex(pstr[2]);

52 
p°r
 += 2;

54 } i‡(*
p°r
 == '+') {

55 *
pbuf
++ = ' ';

57 *
pbuf
++ = *
p°r
;

60 
p°r
++;

62 *
pbuf
 = '\0';

64  
buf
;

65 
	}
}

	@src/utils/ems_utils.c

1 
	~"ems.h
"

2 
	~<sys/ty≥s.h
>

3 
	~<sys/sysöfo.h
>

4 
	~<sys/ªsour˚.h
>

10 #ifde‡
WIN32


11 #¥agm®
commít
(
lib
, "Psapi.lib")

12 
HANDLE
 
	$thªadH™dÀ
(
ems_thªadid
 
tid
)

14 
HANDLE
 
h
 = 
NULL
;

15 
	`HANDLE
 (
	tWINAPI
 *
	tp‚O≥nThªad
)(
	tDWORD
, 
	tBOOL
, DWORD);

16 
p‚O≥nThªad
 
‚O≥nThªad
 = 
NULL
;

18 
‚O≥nThªad
 = (
p‚O≥nThªad
)

19 
	`GëProcAddªss
(
	`LﬂdLibøry
("kernel32.dll"), "OpenThread");

20 i‡–!
‚O≥nThªad
)

21  
NULL
;

23 
h
 = 
	`‚O≥nThªad
(
SYNCHRONIZE
, 0, 
tid
);

24  
h
;

25 
	}
}

27 
HANDLE
 
	$¥o˚ssH™dÀ
(
ems_¥o˚ssid
 
pid
)

29  
	`O≥nPro˚ss
–
SYNCHRONIZE


30 | 
PROCESS_QUERY_INFORMATION


31 | 
PROCESS_VM_READ
,

32 0, 
pid
);

33 
	}
}

35 
ems_¥o˚ssid
 
	$°¨tPro˚ss
(c⁄° *
cmd
, c⁄° *
¨g
)

37 
DWORD
 
ªt
 = 0;

38 
buf
[1024] = {0};

39 
PROCESS_INFORMATION
 
pöfo
;

40 
STARTUPINFO
 
si
;

41 
	`ZîoMem‹y
–&
si
, (si) );

42 
si
.
cb
 = (si);

43 
	`ZîoMem‹y
–&
pöfo
, (pinfo) );

45 
	`¢¥ötf
(
buf
, 1024, "%†%s", 
cmd
, 
¨g
 ?árg: "");

46 
ªt
 = 
	`Cª©ePro˚ss
(
NULL
, 
buf
,

47 
NULL
,

48 
NULL
,

49 
FALSE
,

51 
NULL
,

52 
NULL
,

53 &
si
,

54 &
pöfo
);

55 i‡(!
ªt
)

58  
pöfo
.
dwPro˚ssId
;

59 
	}
}

61 
ems_¥o˚ssid
 
	$°¨tPro˚ss
(c⁄° *
cmd
, c⁄° *
¨g
)

63 
pid
;

64 *
¨gs
[10];

66 
¨gs
[0] = (*)
cmd
;

67 
¨gs
[1] = (*)
¨g
;

69 
pid
 = 
	`vf‹k
();

70 i‡(
pid
 == 0) {

71 
	`£tsid
();

72 i‡–
	`execvp
(
cmd
, 
¨gs
) == -1) {

73 
	`exô
(-1);

76 
	`exô
(0);

79  
pid
;

80 
	}
}

84 
	$waôF‹Pro˚ssSt›
(
ems_¥o˚ssid
 
pid
)

86 #ifde‡
WIN32


87 
HANDLE
 
hC t
 = 
NULL
;

88 
hC t
 = 
	`O≥nPro˚ss
(
SYNCHRONIZE


89 | 
PROCESS_QUERY_INFORMATION


90 | 
PROCESS_VM_READ
, 0, 
pid
);

91 i‡–!
hC t
)

92  
ERR
;

94 
	`WaôF‹SögÀObje˘
(
hC t
, -1);

96 
	`waôpid
(
pid
, 
NULL
, 0);

98  
OK
;

99 
	}
}

101 
	$ãrmö©ePro˚ss
(
ems_¥o˚ssid
 
pid
)

103 #ifde‡
WIN32


104 
HANDLE
 
hPro˚ss
;

105 
hPro˚ss
 = 
	`O≥nPro˚ss
(
PROCESS_TERMINATE
,0, 
pid
);

106 
	`Tîmö©ePro˚ss
(
hPro˚ss
,0);

107 
	`Clo£H™dÀ
(
hPro˚ss
);

109 
	`kûl
(
pid
, 9);

111  
OK
;

112 
	}
}

114 #ifde‡
WIN32


116 
BOOL
 
	$uQuîyFuŒPro˚ssImageName
(

117 
HANDLE
 
hPro˚ss
,

118 
DWORD
 
Êg
,

119 
LPTSTR
 
ÕExeName
,

120 
PDWORD
 
ÕdwSize
)

122 
BOOL
 
bπn
 = 0;

123 
¥oc
[
MAX_PATH
] = {0};

124 *
pch
 = 
NULL
;

125 
DWORD
 
sz
 = 0;

127 
	`BOOL
 (
	tWINAPI
 *
	tfuncQuîyFuŒPro˚ssImageName
)(
	tHANDLE
,
	tDWORD
, 
	tLPTSTR
, 
	tPDWORD
);

129 
funcQuîyFuŒPro˚ssImageName
 
QuîyFuŒPro˚ssImageName


130 (
funcQuîyFuŒPro˚ssImageName
)

131 
	`GëProcAddªss
(
	`GëModuÀH™dÀA
("kernel32"),

134 
bπn
 = 0;

135 
sz
 = *
ÕdwSize
;

136 i‡–
QuîyFuŒPro˚ssImageName
)

137 
bπn
 = 
	`QuîyFuŒPro˚ssImageName
(
hPro˚ss
, 
Êg
, 
¥oc
, &
sz
);

139 i‡–
bπn
 ) {

140 
pch
 = 
	`°ºchr
(
¥oc
, '\\');

141 i‡–
pch
)

142 *
ÕdwSize
 = 
	`¢¥ötf
(
ÕExeName
, *ÕdwSize, "%s", 
pch
+1);

144 *
ÕdwSize
 = 
	`¢¥ötf
(
ÕExeName
, *ÕdwSize, "%s", 
¥oc
);

147  
bπn
;

148 
	}
}

150 
	$gëPro˚ssName
(
HANDLE
 
hPro˚ss
, *
szPro˚ssName
, 
l_d°
)

152 
HMODULE
 
hMod
;

153 
DWORD
 
sz
 = 0;

155 
sz
 = 
l_d°
;

156 i‡–!
	`uQuîyFuŒPro˚ssImageName
(

157 
hPro˚ss
,

159 
szPro˚ssName
,

160 &
sz
)) {

161 i‡(
	`EnumPro˚ssModuÀs
–
hPro˚ss
, &
hMod
, (hMod), &
sz
)) {

162 i‡(!
	`GëModuÀBa£Name
(
hPro˚ss
, 
hMod
, 
szPro˚ssName
, 
sz
))

163  
ERR
;

165  
ERR
;

168  
OK
;

169 
	}
}

171 
	$¥o˚ssNameByPid
(
DWORD
 
pid
, *
d°
, 
l_d°
)

173 
HANDLE
 
hPro˚ss
;

174 
πn
 = 
ERR
;

176 
hPro˚ss
 = 
	`O≥nPro˚ss
–
PROCESS_QUERY_INFORMATION
 |

177 
PROCESS_VM_READ
,

178 
FALSE
, 
pid
 );

179 i‡(
NULL
 !
hPro˚ss
 ) {

180 
πn
 = 
	`gëPro˚ssName
(
hPro˚ss
, 
d°
, 
l_d°
);

181 
	`Clo£H™dÀ
–
hPro˚ss
 );

184  
πn
;

185 
	}
}

188 
	$Pro˚ssIs
(c⁄° *
¥ocName
, 
DWORD
 
¥o˚ssID
)

190 
πn
 = 0;

191 
TCHAR
 
szPro˚ssName
[
MAX_PATH
] ={0};

192 
DWORD
 
sz
;

194 
sz
 = (
szPro˚ssName
Ë/ (
TCHAR
);

195 i‡(
	`¥o˚ssNameByPid
(
¥o˚ssID
, 
szPro˚ssName
, 
sz
Ë!
OK
) {

196  
πn
;

199 i‡(
	`_°ricmp
(
¥ocName
, 
szPro˚ssName
)) {

200 
πn
 = 1;

203  
πn
;

204 
	}
}

206 
	$ãrmö©ePro˚ssByName
(*
¥oc
)

208 
DWORD
 
aPro˚s£s
[1024], 
cbNìded
, 
cPro˚s£s
;

209 
i
;

211 i‡–!
	`EnumPro˚s£s
–
aPro˚s£s
, ◊Pro˚s£s), &
cbNìded
 ) ) {

215 
cPro˚s£s
 = 
cbNìded
 / (
DWORD
);

217  
i
 = 0; i < 
cPro˚s£s
; i++ ) {

218 if–
aPro˚s£s
[
i
] != 0 ) {

219 i‡–
	`Pro˚ssIs
(
¥oc
, 
aPro˚s£s
[
i
])) {

220 
	`ãrmö©ePro˚ss
(
aPro˚s£s
[
i
]);

224 
	}
}

226 
	$ãrmö©ePro˚ssByNameAndEx˚±Pid
(*
¥oc
, 
DWORD
 
ex˚±_pid
)

228 
DWORD
 
aPro˚s£s
[1024], 
cbNìded
, 
cPro˚s£s
;

229 
i
;

231 i‡–!
	`EnumPro˚s£s
–
aPro˚s£s
, ◊Pro˚s£s), &
cbNìded
 ) ) {

235 
cPro˚s£s
 = 
cbNìded
 / (
DWORD
);

237  
i
 = 0; i < 
cPro˚s£s
; i++ ) {

238 if–
aPro˚s£s
[
i
] !0 && 
ex˚±_pid
 !=áProcesses[i] ) {

239 i‡–
	`Pro˚ssIs
(
¥oc
, 
aPro˚s£s
[
i
])) {

240 
	`ãrmö©ePro˚ss
(
aPro˚s£s
[
i
]);

244 
	}
}

246 
	$¥o˚ssID
(*
¥oc
)

248 
DWORD
 
aPro˚s£s
[1024], 
cbNìded
, 
cPro˚s£s
;

249 
i
;

251 i‡–!
	`EnumPro˚s£s
–
aPro˚s£s
, ◊Pro˚s£s), &
cbNìded
 ) ) {

255 
cPro˚s£s
 = 
cbNìded
 / (
DWORD
);

256  
i
 = 0; i < 
cPro˚s£s
; i++ ) {

257 if–
aPro˚s£s
[
i
] != 0 ) {

258 i‡–
	`Pro˚ssIs
(
¥oc
, 
aPro˚s£s
[
i
])) {

259  
aPro˚s£s
[
i
];

265 
	}
}

267 
DWORD
 
	$shñlExecuãWôh
(c⁄° *
_≠p
, c⁄° *
_∑øm
, c⁄° *
_dú
, 
waô
)

269 
SHELLEXECUTEINFO
 
söfo
;

271 
	`mem£t
(&
söfo
, 0, (
SHELLEXECUTEINFO
));

272 
söfo
.
cbSize
 = (
SHELLEXECUTEINFO
);

273 
söfo
.
fMask
 = 
SEE_MASK_NOCLOSEPROCESS
;

274 
söfo
.
hwnd
 = 
NULL
;

275 
söfo
.
ÕVîb
 = 
NULL
;

276 
söfo
.
ÕFûe
 = 
_≠p
;

277 
söfo
.
ÕP¨amëîs
 = 
_∑øm
;

278 
söfo
.
ÕDúe˘‹y
 = 
_dú
;

279 
söfo
.
nShow
 = 
SW_SHOW
;

280 
söfo
.
hIn°Aµ
 = 
NULL
;

282 i‡(!
	`ShñlExecuãEx
(&
söfo
)) {

283  
ERR
;

286 i‡(!
söfo
.
hPro˚ss
Ë 
ERR
;

287 i‡–
waô
){

288 
	`WaôF‹SögÀObje˘
(
söfo
.
hPro˚ss
, -1);

289 
	`Clo£H™dÀ
(
söfo
.
hPro˚ss
);

290  
OK
;

293  
	`GëPro˚ssId
(
söfo
.
hPro˚ss
);

294 
	}
}

296 
DWORD
 
	$shñlExecuãRunAsWôh
(c⁄° *
_≠p
, c⁄° *
_∑øm
, c⁄° *
_dú
, 
waô
)

298 
SHELLEXECUTEINFO
 
söfo
;

300 
	`mem£t
(&
söfo
, 0, (
SHELLEXECUTEINFO
));

301 
söfo
.
cbSize
 = (
SHELLEXECUTEINFO
);

302 
söfo
.
fMask
 = 
SEE_MASK_NOCLOSEPROCESS
;

303 
söfo
.
hwnd
 = 
NULL
;

304 
söfo
.
ÕVîb
 = "runas";

305 
söfo
.
ÕFûe
 = 
_≠p
;

306 
söfo
.
ÕP¨amëîs
 = 
_∑øm
;

307 
söfo
.
ÕDúe˘‹y
 = 
_dú
;

308 
söfo
.
nShow
 = 
SW_SHOW
;

309 
söfo
.
hIn°Aµ
 = 
NULL
;

311 i‡(!
	`ShñlExecuãEx
(&
söfo
)) {

312  
ERR
;

315 i‡(!
söfo
.
hPro˚ss
Ë 
ERR
;

316 i‡–
waô
){

317 
	`WaôF‹SögÀObje˘
(
söfo
.
hPro˚ss
, -1);

318 
	`Clo£H™dÀ
(
söfo
.
hPro˚ss
);

319  
OK
;

322  
	`GëPro˚ssId
(
söfo
.
hPro˚ss
);

323 
	}
}

325 
	$°¨tPro˚ssAs
(c⁄° *
_≠p
, c⁄° *
_∑øms
)

327 
SHELLEXECUTEINFO
 
söfo
;

329 
	`mem£t
(&
söfo
, 0, (
SHELLEXECUTEINFO
));

330 
söfo
.
cbSize
 = (
SHELLEXECUTEINFO
);

331 
söfo
.
fMask
 = 
SEE_MASK_NOCLOSEPROCESS
;

332 
söfo
.
hwnd
 = 
NULL
;

333 
söfo
.
ÕVîb
 = "runas";

334 
söfo
.
ÕFûe
 = 
_≠p
;

335 
söfo
.
ÕP¨amëîs
 = 
_∑øms
;

336 
söfo
.
ÕDúe˘‹y
 = 
NULL
;

337 
söfo
.
nShow
 = 
SW_SHOW
;

338 
söfo
.
hIn°Aµ
 = 
NULL
;

340 i‡(!
	`ShñlExecuãEx
(&
söfo
)) {

341  
ERR
;

344 i‡(!
söfo
.
hPro˚ss
Ë 
ERR
;

346 
	`WaôF‹SögÀObje˘
(
söfo
.
hPro˚ss
, -1);

347 
	`Clo£H™dÀ
(
söfo
.
hPro˚ss
);

350  
OK
;

351 
	}
}

354 
DWORD


355 
	$°¨tPro˚ssWôh
(c⁄° *
_≠p
, c⁄° *
_∑th
, c⁄° *
deskt›
)

357 
STARTUPINFO
 
si
 = {0};

358 
PROCESS_INFORMATION
 
pi
 = {0};

360 
si
.
cb
 = (si);

361 
si
.
ÕTôÀ
 = (*)
deskt›
;

362 
si
.
ÕDeskt›
 = (*)
deskt›
;

363 i‡(!
	`Cª©ePro˚ss
(

364 
NULL
,

365 (*)
_≠p
,

366 
NULL
,

367 
NULL
,

368 
FALSE
,

370 
NULL
,

371 
_∑th
,

372 &
si
,

373 &
pi
))

374  
ERR
;

376  
pi
.
dwPro˚ssId
;

377 
	}
}

382 
ems_öt
 
	$ems_thªad¸óã
(
ems_thªadid
 *
tid
, 
thªad_íåy
 
func
, 
ems_thªad¨g
 
¨g
)

384 #ifde‡
WIN32


385 i‡(
	`Cª©eThªad
(
NULL
, 0,

386 (
LPTHREAD_START_ROUTINE
)
func
, 
¨g
, 0, 
tid
Ë=
NULL
)

391  
	`±hªad_¸óã
(
tid
, 
NULL
, 
func
, 
¨g
);

393 
	}
}

395 
ems_öt
 
	$ems_thªadjoö
(
ems_thªadid
 
tid
)

397 #ifde‡
WIN32


398 
HANDLE
 
h
 = 
NULL
;

399 
h
 = 
	`thªadH™dÀ
(
tid
);

400 i‡–!
h
)

401  
ERR
;

402 
	`WaôF‹SögÀObje˘
(
h
, -1);

403 
	`Clo£H™dÀ
(
h
);

405 
	`±hªad_joö
(
tid
, 
NULL
);

408  
OK
;

409 
	}
}

412 
ems_öt
 
	$ems_bö2°r
(
ems_cch¨
 *
s
, 
ems_öt
 
Àn
, 
ems_ch¨
 *
d
,Éms_öà
d_l
)

414 
ems_ch¨
 *
p
 = 
d
;

415 
ems_öt
 
ªt
 = 0;

416 
ems_öt
 
l
 = 0;

417 
ems_ch¨
 
ch
;

419 
l
 = 
Àn
;

421 
Àn
 > 0 && 
d_l
 > 0) {

422 
ch
 = *
s
++;

423 
ªt
 = 
	`¢¥ötf
(
p
, 
d_l
, "%02x", (
ch
&0xff));

425 
Àn
--;

427 
p
 +
ªt
;

428 
d_l
 -
ªt
;

431  (
l
 - 
Àn
);

432 
	}
}

434 
ems_öt
 
	$ems_°r2bö
(
ems_cch¨
 *
s
, 
ems_ch¨
 *
d
, 
ems_öt
 
d_l
)

436 
ems_öt
 
tŸÆ
 = 0;

437 
ems_ch¨
 
tmp
[4] = {0};

438 
ems_öt
 
l
 = 
d_l
;

440 i‡(!
s
)

443 
tŸÆ
 = 
	`°æí
(
s
) / 2;

444 
tŸÆ
 > 0 && 
d_l
 > 0) {

445 
	`mem˝y
(
tmp
, 
s
, 2);

447 *
d
 = (
ems_ch¨
 )(
	`°πﬁ
(
tmp
, 
NULL
, 16)&0xff);

448 
d
++;

449 
tŸÆ
--;

450 
d_l
--;

451 
s
 = s + 2;

454  (
l
-
d_l
);

455 
	}
}

458 
ems_öt
 
	$ems_˝uc‹e
()

460  (
ems_öt
Ë
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

461 
	}
}

463 
ems_öt
 
	$ems_∑gesize
()

465  (
ems_öt
Ë
	`sysc⁄f
(
_SC_PAGESIZE
);

466 
	}
}

468 
ems_ch¨
 *
	$ems_åim
(
ems_ch¨
 *
§c
)

470 
ems_ch¨
 *
s
 = 
NULL
, *
e
 = NULL;

471 
ems_ch¨
 *
buf
 = 
NULL
;

472 
ems_öt
 
l
;

474 
buf
 = 
	`ems_°rdup
(
§c
);

475 i‡(!
buf
)

476  
§c
;

478 
l
 = 
	`°æí
(
§c
);

479 
s
 = 
buf
;

480 
e
 = 
s
 + 
l
 - 1;

481 
s
 < 
e
) {

482 i‡((*
s
 == ' ') || (*s=='\t') || (*s =='\n') || (*s =='\r'))

483 
s
++;

484 i‡((*
e
==' ') || (*e =='\t') || (*e=='\n') || (*e=='\r'))

485 
e
--;

490 i‡((
s
 >
e
) && (*s == ' ')) {

491 *
§c
 = '\0';

492 
	`ems_‰ì
(
buf
);

493  
NULL
;

496 
e
++;

497 *
e
 = '\0';

499 
	`¢¥ötf
(
§c
, 
l
+1, "%s", 
s
);

501 
	`ems_‰ì
(
buf
);

503  
§c
;

504 
	}
}

506 
ems_cch¨
 *
	$ems_gëîrmsg
(
ems_öt
 
îr
)

508 
ems_ch¨
 
buf_îr
[128] = {0};

510 
	`¢¥ötf
(
buf_îr
, 128, "(%d): %s", 
îr
, 
	`°ªº‹
(err));

512  
buf_îr
;

513 
	}
}

516 
ems_öt
 
	$ems_˝uußge
()

518 
FILE
* 
fûe
;

519 
≥r˚¡
;

520 
l_u£r
, 
l_u£æow
, 
l_sys
, 
l_idÀ
;

521 
u£r
, 
u£æow
, 
sys
, 
idÀ
;

522 
diff_tŸÆ
, 
diff_u£d
;

524 
fûe
 = 
	`f›í
("/proc/stat", "r");

525 
	`fsˇnf
(
fûe
, "˝u %Ld %Ld %Ld %Ld", &
u£r
, &
u£æow
, &
sys
, &
idÀ
);

526 
	`f˛o£
(
fûe
);

528 
diff_u£d
 = 
u£r
 - 
l_u£r
 + 
u£æow
 - 
l_u£æow
 + 
sys
 - 
l_sys
;

529 
diff_tŸÆ
 = 
diff_u£d
 + 
idÀ
 - 
l_idÀ
;

531 
≥r˚¡
 = -1;

532 i‡(
diff_tŸÆ
 > 0) {

533 
≥r˚¡
 = 100 * 
diff_u£d
 / 
diff_tŸÆ
;

536 i‡(
≥r˚¡
 < 0 ) {

537 
≥r˚¡
 = 1.0;

540 
l_u£r
 = 
u£r
;

541 
l_u£æow
 = 
u£æow
;

542 
l_sys
 = 
sys
;

543 
l_idÀ
 = 
idÀ
;

545  (
ems_öt
)
≥r˚¡
;

546 
	}
}

548 
	$gëtŸÆ
(
ems_cch¨
 *
cmd
)

550 
buf
[512] = {0};

551 
tŸÆ
;

552 
FILE
 *
Â
;

554 
Â
 = 
	`p›í
(
cmd
, "r");

555 i‡(!
Â
)

558 
tŸÆ
 = 0;

559 
	`fgës
(
buf
, (buf), 
Â
))

561 
tŸÆ
 +
	`°πﬁ
(
buf
, 
NULL
, 10);

564 
	`p˛o£
(
Â
);

566  
tŸÆ
;

567 
	}
}

570 
ems_öt
 
	$ems_memußge
()

572 
tŸÆ
, 
u£d
;

574 
tŸÆ
 = 
	`gëtŸÆ
("grep -E \"MemTotal|SwapTotal\" /proc/meminfo |áwk '{print $2}'");

576 
u£d
 = 
tŸÆ
 -

577 
	`gëtŸÆ
("grep -E \"MemFree|Buffers|Cached|SwapCached|SwapFree\" /proc/meminfo |áwk '{print $2}'");

579  (Ë(()
u£d
 * 100 / 
tŸÆ
);

580 
	}
}

582 
ems_öt
 
	$ems_ª£t_æimô
()

584 
æimô
 
æ
, 
ﬁd
;

586 i‡(
	`gëæimô
(
RLIMIT_CORE
, &
æ
) == 0) {

587 
æ
.
æim_cur
 =Ñl.
æim_max
;

588 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æ
))

589 
	`¥ötf
("£àRLIMIT_CORE faûed,ÅryÑu¿thi†byÑoŸ: %s\n", 
	`°ªº‹
(
î∫o
));

592 
	`gëæimô
(
RLIMIT_NOFILE
, &
ﬁd
);

594 
æ
.
æim_cur
 =Ñl.
æim_max
 = 65000;

595 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æ
)) {

596 i‡(
î∫o
 =
EPERM
) {

597 
æ
.
æim_cur
 =Ñl.
æim_max
 = 
ﬁd
.rlim_max;

598 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æ
))

599 
	`¥ötf
("sy§limô RLIMIT_NOFILE faûed: %s\n", 
	`°ªº‹
(
î∫o
));

602 
	`¥ötf
("sy§limô RLIMIT_NOFILE faûed: %s\n", 
	`°ªº‹
(
î∫o
));

606 
	}
}

608 
ems_cch¨
 *
	$ems_ôﬂ
(
ems_öt
 
i
)

610 
ems_ch¨
 
buf
[64];

611 
	`¢¥ötf
(
buf
, 64, "%d", 
i
);

612  
buf
;

613 
	}
}

615 
ems_öt
 
	$ems_©oi
(
ems_cch¨
 *
°r
)

617 i‡(
°r
)

618  
	`°πﬁ
(
°r
, 
NULL
, 10);

621 
	}
}

	@src/utils/stdalign.h

21 #i‚de‡
_GL_STDALIGN_H


22 
	#_GL_STDALIGN_H


	)

46 
	~<°ddef.h
>

47 #i‡
deföed
 
__˝lu•lus


48 
	gãm∂©e
 <
˛ass
 
	g__t
> 
	s__Æignof_hñ≥r
 { 
	m__a
; 
__t
 
	m__b
; };

49 
	#_Alignof
(
ty≥
Ë
	`off£tof
 (
__Æignof_hñ≥r
<ty≥>, 
__b
)

	)

51 
	#_Alignof
(
ty≥
Ë
	`off£tof
 (°ru˘ { 
__a
;Åy≥ 
__b
; }, __b)

	)

53 
	#Æignof
 
_Alignof


	)

54 
	#__Æignof_is_deföed
 1

	)

81 #i‡
__GNUC__
 || 
__IBMC__
 || 
__IBMCPP__
 || 0x5110 <
__SUNPRO_C


82 
	#_Alig«s
(
a
Ë
	`__©åibuã__
 ((
	`__Æig√d__
 (a)))

	)

83 #ñi‡1300 <
_MSC_VER


84 
	#_Alig«s
(
a
Ë
	`__de˛•ec
 (
	`Æign
 (a))

	)

86 #ifde‡
_Alig«s


87 
	#Æig«s
 
_Alig«s


	)

88 
	#__Æig«s_is_deföed
 1

	)

	@
1
.
0
157
3418
inc/ems.h
inc/ems_block.h
inc/ems_getopt.h
inc/ems_queue.h
inc/ems_str.h
inc/ems_types.h
inc/ems_utils.h
json/arraylist.c
json/arraylist.h
json/bits.h
json/debug.c
json/debug.h
json/example/test1.c
json/example/test2.c
json/example/test3.c
json/example/tests/parse_flags.c
json/example/tests/parse_flags.h
json/example/tests/test1.c
json/example/tests/test2.c
json/example/tests/test4.c
json/example/tests/testReplaceExisting.c
json/example/tests/test_cast.c
json/example/tests/test_locale.c
json/example/tests/test_null.c
json/example/tests/test_parse.c
json/example/tests/test_parse_int64.c
json/example/tests/test_printbuf.c
json/example/tests/test_set_serializer.c
json/jconfig.h
json/json.h
json/json_c_version.c
json/json_c_version.h
json/json_config.h
json/json_inttypes.h
json/json_object.c
json/json_object.h
json/json_object_iterator.c
json/json_object_iterator.h
json/json_object_private.h
json/json_tokener.c
json/json_tokener.h
json/json_util.c
json/json_util.h
json/libjson.c
json/linkhash.c
json/linkhash.h
json/printbuf.c
json/printbuf.h
radius/example/local.c
radius/example/radacct.c
radius/example/radembedded.c
radius/example/radexample.c
radius/example/radius.c
radius/example/radiusclient.c
radius/example/radlogin.c
radius/example/radlogin.h
radius/example/radstatus.c
radius/src/avpair.c
radius/src/buildreq.c
radius/src/clientid.c
radius/src/config.c
radius/src/dict.c
radius/src/env.c
radius/src/freeradius-client.h
radius/src/includes.h
radius/src/ip_util.c
radius/src/lock.c
radius/src/log.c
radius/src/md5.c
radius/src/md5.h
radius/src/messages.h
radius/src/options.h
radius/src/pathnames.h
radius/src/r_config.h
radius/src/sendserver.c
radius/src/util.c
src/core/app.c
src/core/app.h
src/core/app_bridge.c
src/core/app_bwlist.c
src/core/app_client.c
src/core/app_ctrl.c
src/core/app_downlink.c
src/core/app_fw.c
src/core/app_net.c
src/core/app_portal.c
src/core/app_radius.c
src/core/cmd_main.c
src/core/ems_bridge.c
src/core/ems_bridge.h
src/core/ems_client.c
src/core/ems_client.h
src/core/ems_client_v1.c
src/core/ems_cmd.c
src/core/ems_cmd.h
src/core/ems_conf.c
src/core/ems_conf.h
src/core/ems_core.c
src/core/ems_core.h
src/core/ems_ctrl.c
src/core/ems_ctrl.h
src/core/ems_dns.c
src/core/ems_dns.h
src/core/ems_dns_fwd.c
src/core/ems_fw.c
src/core/ems_fw.h
src/core/ems_main.c
src/core/ems_netcheck.c
src/core/ems_netcheck.h
src/core/ems_portal.c
src/core/ems_portal.h
src/core/ems_radius.c
src/core/ems_radius.h
src/core/main.c
src/core/main_app.c
src/core/main_bwlist.c
src/core/main_c.c
src/core/main_config.c
src/core/main_ctrl.c
src/core/main_fw.c
src/core/main_network_flush.c
src/core/main_portal.c
src/core/main_qos.c
src/core/main_radius.c
src/core/main_status.c
src/core/main_test_nm.c
src/core/main_test_radius.c
src/core/main_user.c
src/core/main_wireless.c
src/event/ems_event.c
src/event/ems_event.h
src/event/evt_epoll.c
src/event/evt_epoll.h
src/utils/ems_block.c
src/utils/ems_buffer.c
src/utils/ems_buffer.h
src/utils/ems_common.h
src/utils/ems_getopt.c
src/utils/ems_hash.c
src/utils/ems_hash.h
src/utils/ems_logger.c
src/utils/ems_logger.h
src/utils/ems_main.h
src/utils/ems_md5.c
src/utils/ems_md5.h
src/utils/ems_msg.c
src/utils/ems_msg.h
src/utils/ems_session.c
src/utils/ems_session.h
src/utils/ems_sock.c
src/utils/ems_sock.h
src/utils/ems_str.c
src/utils/ems_timer.c
src/utils/ems_timer.h
src/utils/ems_urlcode.c
src/utils/ems_utils.c
src/utils/stdalign.h
